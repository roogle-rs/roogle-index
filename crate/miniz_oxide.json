{"root":"0:0:2402","crate_version":"0.7.2","includes_private":false,"index":{"b:1:2643-0:509:3734":{"id":"b:1:2643-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:2726":{"id":"0:73:2726","crate_id":0,"name":"TDEFL_COMPUTE_ADLER32","span":{"filename":"src/deflate/core.rs","begin":[172,4],"end":[172,55]},"visibility":"public","docs":"Should we compute the adler32 checksum.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_2000","value":"8_192u32","is_literal":true}}},"1:2645:3814":{"id":"1:2645:3814","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:504:3748":{"id":"a:1:3139:247-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:696:2540":{"id":"0:696:2540","crate_id":0,"name":"DefaultCompression","span":{"filename":"src/deflate/mod.rs","begin":[28,4],"end":[28,27]},"visibility":"default","docs":"Use the default compression level.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"b:1:2931-0:628:2562":{"id":"b:1:2931-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:680:2527":{"id":"b:1:2920-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3174:4183-0:509:3734":{"id":"a:1:3174:4183-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:128:2872":{"id":"0:128:2872","crate_id":0,"name":"CallbackFunc","span":{"filename":"src/deflate/core.rs","begin":[531,0],"end":[533,1]},"visibility":"public","docs":"Callback function and user used in `compress_to_output`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:130:2874"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:3139:247-0:128:2872","a:1:42098:4109-0:128:2872","a:1:32294:3983-0:128:2872","a:1:42097:4110-0:128:2872","a:1:3174:4183-0:128:2872","a:1:32235:237-0:128:2872","b:1:2646-0:128:2872","b:1:2643-0:128:2872","b:1:2920-0:128:2872","b:1:2916-0:128:2872","b:1:2926-0:128:2872","b:1:3758-0:128:2872","b:1:2931-0:128:2872"]}}},"0:884:2335":{"id":"0:884:2335","crate_id":0,"name":"Finish","span":{"filename":"src/lib.rs","begin":[60,4],"end":[60,14]},"visibility":"default","docs":"Attempt to flush the remaining data and end the stream.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"a:1:32235:237-0:383:3272":{"id":"a:1:32235:237-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:871:2322":{"id":"0:871:2322","crate_id":0,"name":"MZFlush","span":{"filename":"src/lib.rs","begin":[44,0],"end":[63,1]},"visibility":"public","docs":"A list of flush types.\n\nSee <http://www.bolet.org/~pornin/deflate-flush.html> for more in-depth info.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:872:191","0:875:2327","0:878:247","0:881:2333","0:884:2335","0:887:2337"],"impls":["0:567","a:1:3139:247-0:871:2322","a:1:42098:4109-0:871:2322","a:1:32294:3983-0:871:2322","a:1:42097:4110-0:871:2322","a:1:3174:4183-0:871:2322","a:1:32235:237-0:871:2322","b:1:2646-0:871:2322","b:1:2643-0:871:2322","b:1:2920-0:871:2322","b:1:2916-0:871:2322","b:1:2926-0:871:2322","b:1:3758-0:871:2322","b:1:2931-0:871:2322","b:4:738-0:871:2322","0:892","0:900","0:898","0:890","0:896","0:895","0:80","0:893"]}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,16],"end":[194,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32294:3983-0:903:2345":{"id":"a:1:32294:3983-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:868:2556":{"id":"0:868:2556","crate_id":0,"name":"output","span":{"filename":"src/inflate/mod.rs","begin":[88,4],"end":[88,23]},"visibility":"public","docs":"The currently decompressed data if any.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}},"0:647":{"id":"0:647","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:648:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2646-0:495:3737":{"id":"b:1:2646-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13196:997":{"id":"1:13196:997","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:52707:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[239,0],"end":[267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2968:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2920-0:926:2341":{"id":"b:1:2920-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42097:4110-0:504:3748":{"id":"a:1:42097:4110-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2916-0:509:3734":{"id":"b:1:2916-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:738-0:961:2378":{"id":"b:4:738-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13208:3599":{"id":"1:13208:3599","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:17774":{"id":"1:13313:17774","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:3135":{"id":"0:310:3135","crate_id":0,"name":"compress_to_output","span":{"filename":"src/deflate/core.rs","begin":[2225,0],"end":[2243,1]},"visibility":"public","docs":"Main compression function. Callbacks output.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer.\n\nThe caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined\nbehaviour.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["callback_func",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3385:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"tuple":[{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&[u8]) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3385:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13328:6521":{"id":"1:13328:6521","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4952:6521"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44203:4864","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550:3263":{"id":"0:550:3263","crate_id":0,"name":"decompress_to_vec_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[157,0],"end":[162,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"DecompressError":"0:866:3238","`TINFLStatus::HasMoreOutput`":"0:850:3234","`Vec`":"4:7059:264","`Result`":"1:42136:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2916-0:866:3238":{"id":"b:1:2916-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:948":{"id":"0:948","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,9],"end":[109,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:949:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:678:872":{"id":"0:678:872","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:616:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13275:3857":{"id":"1:13275:3857","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12885:6636","`DoubleEndedIterator`":"1:8263:129","prim@char":"1:52707:471","str::rmatches":"1:13278:17762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44099:5102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2931-0:383:3272":{"id":"b:1:2931-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32235:237-0:504:3748":{"id":"a:1:32235:237-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5624:18484":{"id":"4:5624:18484","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42098:4109-0:509:3734":{"id":"a:1:42098:4109-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2916-0:628:2562":{"id":"b:1:2916-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:619:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:930:2363":{"id":"0:930:2363","crate_id":0,"name":"Stream","span":{"filename":"src/lib.rs","begin":[120,4],"end":[120,15]},"visibility":"default","docs":"General stream error.\n\nSee [`inflate::stream::inflate()`] docs for details of how it can occur there.\n\nSee [`deflate::stream::deflate()`] docs for how it can in principle occur there, though it's\nbelieved impossible in practice.","links":{"`deflate::stream::deflate()`":"0:325:2313","`inflate::stream::inflate()`":"0:531:2314"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-2","value":"-2"}}}},"a:1:42098:4109-0:654:2563":{"id":"a:1:42098:4109-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2646-0:981:2392":{"id":"b:1:2646-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:859":{"id":"0:859","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:860:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42097:4110-0:903:2345":{"id":"a:1:42097:4110-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32294:3983-0:128:2872":{"id":"a:1:32294:3983-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13220:16515":{"id":"1:13220:16515","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13221:16516"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32294:3983-0:628:2562":{"id":"a:1:32294:3983-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2916-0:926:2341":{"id":"b:1:2916-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:986:802":{"id":"0:986:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[180,9],"end":[180,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:16530":{"id":"1:13301:16530","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13195":{"id":"1:13195","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13196:997","1:13197:3183","1:13198:17752","1:13199:17753","1:13201:17754","1:13204:16465","1:13205:17755","1:13206:336","1:13207:16494","1:13208:3599","1:13210:2955","1:13212:6104","1:13214:6105","1:13216:17756","1:13217:17757","1:13218:16512","1:13219:3603","1:13220:16515","1:13221:16516","1:13223:4929","1:13224:5118","1:13225:2921","1:13226:12447","1:13227:12459","1:13228:17758","1:13229:17759","1:13230:12441","1:13231:15042","1:13234:16528","1:13237:16529","1:13240:4244","1:13244:4212","1:13248:16517","1:13251:12454","1:13254:16520","1:13257:17760","1:13260:17761","1:13263:16522","1:13266:16524","1:13269:16526","1:13272:16527","1:13275:3857","1:13278:17762","1:13281:17763","1:13284:17764","1:13287:17765","1:13289:17766","1:13291:17767","1:13293:17768","1:13294:17769","1:13295:17770","1:13298:17771","1:13301:16530","1:13304:16531","1:13307:17772","1:13310:17773","1:13313:17774","1:13316:17775","1:13318:16368","1:13319:16369","1:13320:16371","1:13321:16372","1:13322:16373","1:13323:16375","1:13324:16376","1:13325:16377","1:13326:17776","1:13328:6521","1:13329:17777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:985":{"id":"0:985","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,9],"end":[180,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:986:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32235:237-0:628:2562":{"id":"a:1:32235:237-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5618:4429":{"id":"4:5618:4429","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:897:699":{"id":"0:897:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[43,29],"end":[43,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:738-0:981:2392":{"id":"b:4:738-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:706:699":{"id":"0:706:699","crate_id":0,"name":"eq","span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32235:237-0:599:2570":{"id":"a:1:32235:237-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:635:2333":{"id":"0:635:2333","crate_id":0,"name":"Full","span":{"filename":"src/deflate/core.rs","begin":[222,4],"end":[222,12]},"visibility":"default","docs":"Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not\ndepend on previous data.","links":{"Self::Sync":"0:632:247"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:961:2378":{"id":"0:961:2378","crate_id":0,"name":"DataFormat","span":{"filename":"src/lib.rs","begin":[149,0],"end":[157,1]},"visibility":"public","docs":"How compressed data is wrapped.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:962:2380","0:964:2383","0:966:2385"],"impls":["0:569","a:1:3139:247-0:961:2378","a:1:42098:4109-0:961:2378","a:1:32294:3983-0:961:2378","a:1:42097:4110-0:961:2378","a:1:3174:4183-0:961:2378","a:1:32235:237-0:961:2378","b:1:2646-0:961:2378","b:1:2643-0:961:2378","b:1:2920-0:961:2378","b:1:2916-0:961:2378","b:1:2926-0:961:2378","b:1:3758-0:961:2378","b:1:2931-0:961:2378","b:4:738-0:961:2378","0:978","0:973","0:970","0:976","0:968","0:974","0:971"]}}},"b:1:2916-0:961:2378":{"id":"b:1:2916-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:970":{"id":"0:970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,16],"end":[147,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2402":{"id":"0:0:2402","crate_id":0,"name":"miniz_oxide","span":{"filename":"src/lib.rs","begin":[1,0],"end":[211,1]},"visibility":"public","docs":"A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\nDEFLATE/zlib encoder/decoder.\nUsed a rust back-end for the\n[flate2](https://github.com/alexcrichton/flate2-rs) crate.\n\n# Usage\n## Simple compression/decompression:\n``` rust\n\nuse miniz_oxide::inflate::decompress_to_vec;\nuse miniz_oxide::deflate::compress_to_vec;\n\nfn roundtrip(data: &[u8]) {\n    let compressed = compress_to_vec(data, 6);\n    let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");\n#   let _ = decompressed;\n}\n\n# roundtrip(b\"Test_data test data lalalal blabla\");","links":{},"attrs":["#![forbid(unsafe_code)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5:2313","0:330:2314","0:871:2322","0:903:2345","0:926:2341","0:961:2378","0:572:2390","0:981:2392"],"is_stripped":false}}},"0:857:475":{"id":"0:857:475","crate_id":0,"name":"clone","span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:981:2392":{"id":"a:1:3139:247-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3174:4183-0:499:3745":{"id":"a:1:3174:4183-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13199:17753":{"id":"1:13199:17753","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:832:3217":{"id":"0:832:3217","crate_id":0,"name":"FailedCannotMakeProgress","span":{"filename":"src/inflate/mod.rs","begin":[34,4],"end":[34,77]},"visibility":"default","docs":"More input data was expected, but the caller indicated that there was no more data, so the\ninput stream is likely truncated.\n\nThis can't happen if you have provided the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompression.  By setting that flag, you indicate more input exists but is not provided,\nand so reaching the end of the input data without finding the end of the compressed stream\nwould instead return a [`NeedsMoreInput`][Self::NeedsMoreInput] status.","links":{"Self::NeedsMoreInput":"0:847:3232","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:375:3298"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-4"}}}},"0:406:3429":{"id":"0:406:3429","crate_id":0,"name":"init","span":{"filename":"src/inflate/core.rs","begin":[212,4],"end":[215,5]},"visibility":"public","docs":"Set the current state to `Start`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:654:2563":{"id":"a:1:42097:4110-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:527:3773":{"id":"0:527:3773","crate_id":0,"name":"new_boxed_with_window_bits","span":{"filename":"src/inflate/stream.rs","begin":[142,4],"end":[146,5]},"visibility":"public","docs":"Create a new state using miniz/zlib style window bits parameter.\n\nThe decompressor does not support different window sizes. As such,\nany positive (>0) value will set the zlib header flag, while a negative one\nwill not.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["window_bits",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Box","id":"4:304:2629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:3269":{"id":"0:376:3269","crate_id":0,"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","span":{"filename":"src/inflate/core.rs","begin":[134,4],"end":[134,64]},"visibility":"public","docs":"The output buffer should not wrap around.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"4","value":"4u32","is_literal":true}}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[92,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10319:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:546:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:652:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:675":{"id":"0:675","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,40],"end":[256,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13295:17770":{"id":"1:13295:17770","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12911:6641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13322:16373":{"id":"1:13322:16373","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2920-0:383:3272":{"id":"b:1:2920-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2916-0:495:3737":{"id":"b:1:2916-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42098:4109-0:961:2378":{"id":"a:1:42098:4109-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:572:2390":{"id":"0:572:2390","crate_id":0,"name":"MZResult","span":{"filename":"src/lib.rs","begin":[177,0],"end":[177,46]},"visibility":"public","docs":"`Result` alias for all miniz status codes both successful and failed.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:3139:247-0:680:2527":{"id":"a:1:3139:247-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13221:16516":{"id":"1:13221:16516","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13220:16515"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2643-0:831:3209":{"id":"b:1:2643-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:671:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:707":{"id":"0:707","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,40],"end":[15,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:738-0:654:2563":{"id":"b:4:738-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5635:17660":{"id":"4:5635:17660","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13321:16372"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:3235":{"id":"0:543:3235","crate_id":0,"name":"from_i32","span":{"filename":"src/inflate/mod.rs","begin":[66,4],"end":[78,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:895":{"id":"0:895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,29],"end":[43,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:336:563":{"id":"0:336:563","crate_id":0,"name":"core","span":{"filename":"src/inflate/core.rs","begin":[1,0],"end":[2038,1]},"visibility":"public","docs":"Streaming decompression functionality.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:373:3256","0:347:3329","0:383:3272","0:459:3274"],"is_stripped":false}}},"a:1:32235:237-0:831:3209":{"id":"a:1:32235:237-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:638:2335":{"id":"0:638:2335","crate_id":0,"name":"Finish","span":{"filename":"src/deflate/core.rs","begin":[227,4],"end":[227,14]},"visibility":"default","docs":"Try to flush everything and end the deflate stream.\n\nOn success this will yield a [`TDEFLStatus::Done`] return status.","links":{"`TDEFLStatus::Done`":"0:664:2564"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"b:4:738-0:628:2562":{"id":"b:4:738-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124:2861":{"id":"0:124:2861","crate_id":0,"name":"set_compression_level_raw","span":{"filename":"src/deflate/core.rs","begin":[492,4],"end":[495,5]},"visibility":"public","docs":"Set the compression level of the compressor using an integer value.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702":{"id":"0:702","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:703:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13227:12459":{"id":"1:13227:12459","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13226:12447"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44178:5107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:871:2322":{"id":"b:1:2926-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:992:699":{"id":"0:992:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[180,29],"end":[180,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:677":{"id":"0:677","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:678:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2920-0:499:3745":{"id":"b:1:2920-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:499:3745":{"id":"b:1:3758-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:664:2564":{"id":"0:664:2564","crate_id":0,"name":"Done","span":{"filename":"src/deflate/core.rs","begin":[275,4],"end":[275,12]},"visibility":"default","docs":"Compression succeeded and the deflate stream was ended.\n\nThis is the result of calling compression with [`TDEFLFlush::Finish`].","links":{"`TDEFLFlush::Finish`":"0:638:2335"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:645:475":{"id":"0:645:475","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612:2758":{"id":"0:612:2758","crate_id":0,"name":"Fixed","span":{"filename":"src/deflate/core.rs","begin":[206,4],"end":[206,13]},"visibility":"default","docs":"Only use static/fixed blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"0:996:872":{"id":"0:996:872","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[180,44],"end":[180,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:16531":{"id":"1:13304:16531","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:921":{"id":"0:921","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,40],"end":[85,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:990":{"id":"0:990","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,29],"end":[180,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506:1973":{"id":"0:506:1973","crate_id":0,"name":"0","span":{"filename":"src/inflate/stream.rs","begin":[48,21],"end":[48,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,29],"end":[147,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:975:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:891:802":{"id":"0:891:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[43,9],"end":[43,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:952:475":{"id":"0:952:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[109,22],"end":[109,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:672":{"id":"0:672","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:309:2561":{"id":"0:309:2561","crate_id":0,"name":"compress","span":{"filename":"src/deflate/core.rs","begin":[2204,0],"end":[2215,1]},"visibility":"public","docs":"Main compression function. Tries to compress as much as possible from `in_buf` and\nputs compressed output into `out_buf`.\n\nThe value of `flush` determines if the compressor should attempt to flush all output\nand alternatively try to finish the stream.\n\nUse [`TDEFLFlush::Finish`] on the final call to signal that the stream is finishing.\n\nNote that this function does not keep track of whether a flush marker has been output, so\nif called using [`TDEFLFlush::Sync`], the caller needs to ensure there is enough space in the\noutput buffer if they want to avoid repeated flush markers.\nSee #105 for details.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer and the current position in the output buffer.","links":{"`TDEFLFlush::Finish`":"0:638:2335","`TDEFLFlush::Sync`":"0:632:247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["out_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3758-0:961:2378":{"id":"b:1:3758-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:864:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:841:3223":{"id":"0:841:3223","crate_id":0,"name":"Failed","span":{"filename":"src/inflate/mod.rs","begin":[44,4],"end":[44,38]},"visibility":"default","docs":"Failed to decompress due to invalid data.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-1"}}}},"0:864:872":{"id":"0:864:872","crate_id":0,"name":"hash","span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13240:4244":{"id":"1:13240:4244","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42005:191","prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42098:4109-0:981:2392":{"id":"a:1:42098:4109-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42097:4110-0:680:2527":{"id":"a:1:42097:4110-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:669":{"id":"0:669","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,16],"end":[256,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13210:2955":{"id":"1:13210:2955","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3758-0:504:3748":{"id":"b:1:3758-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:520:60":{"id":"0:520:60","crate_id":0,"name":"default","span":{"filename":"src/inflate/stream.rs","begin":[85,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13234:16528":{"id":"1:13234:16528","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:2571":{"id":"0:548:2571","crate_id":0,"name":"decompress_to_vec","span":{"filename":"src/inflate/mod.rs","begin":[125,0],"end":[127,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"`Vec`":"4:7059:264","DecompressError":"0:866:3238","`Result`":"1:42136:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:926:2341":{"id":"b:1:2646-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42098:4109-0:831:3209":{"id":"a:1:42098:4109-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2646-0:680:2527":{"id":"b:1:2646-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:700:802":{"id":"0:700:802","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,40],"end":[147,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32294:3983-0:961:2378":{"id":"a:1:32294:3983-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:916":{"id":"0:916","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,22],"end":[85,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:917:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2931-0:509:3734":{"id":"b:1:2931-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32294:3983-0:509:3734":{"id":"a:1:32294:3983-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:2747":{"id":"0:79:2747","crate_id":0,"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[187,4],"end":[187,60]},"visibility":"public","docs":"Force the compressor to only output raw/uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0008_0000","value":"524_288u32","is_literal":true}}},"0:576:832":{"id":"0:576:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["res",{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13228:17758":{"id":"1:13228:17758","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44149:5104","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:966:2385":{"id":"0:966:2385","crate_id":0,"name":"Raw","span":{"filename":"src/lib.rs","begin":[156,4],"end":[156,7]},"visibility":"default","docs":"Raw DEFLATE.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:1:32294:3983-0:680:2527":{"id":"a:1:32294:3983-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,44],"end":[180,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:996:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2920-0:871:2322":{"id":"b:1:2920-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375:3298":{"id":"0:375:3298","crate_id":0,"name":"TINFL_FLAG_HAS_MORE_INPUT","span":{"filename":"src/inflate/core.rs","begin":[131,4],"end":[131,49]},"visibility":"public","docs":"There will be more input that hasn't been given to the decompressor yet.\n\nThis is useful when you want to decompress what you have so far,\neven if you know there is probably more input that hasn't gotten here yet (_e.g._, over a\nnetwork connection).  When [`decompress()`][super::decompress] reaches the end of the input\nwithout finding the end of the compressed stream, it will return\n[`TINFLStatus::NeedsMoreInput`][super::TINFLStatus::NeedsMoreInput] if this is set,\nindicating that you should get more data before calling again.  If not set, it will return\n[`TINFLStatus::FailedCannotMakeProgress`][super::TINFLStatus::FailedCannotMakeProgress]\nsuggesting the stream is corrupt, since you claimed it was all there.","links":{"super::decompress":"0:459:3274","super::TINFLStatus::NeedsMoreInput":"0:847:3232","super::TINFLStatus::FailedCannotMakeProgress":"0:832:3217"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"2","value":"2u32","is_literal":true}}},"0:872:191":{"id":"0:872:191","crate_id":0,"name":"None","span":{"filename":"src/lib.rs","begin":[47,4],"end":[47,12]},"visibility":"default","docs":"Don't force any flushing.\nUsed when more input data is expected.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"b:1:2931-0:961:2378":{"id":"b:1:2931-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:628:2562":{"id":"b:1:2920-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:619:475":{"id":"0:619:475","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:629:191":{"id":"0:629:191","crate_id":0,"name":"None","span":{"filename":"src/deflate/core.rs","begin":[215,4],"end":[215,12]},"visibility":"default","docs":"Normal operation.\n\nCompress as much as there is space for, and then return waiting for more input.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:74:2730":{"id":"0:74:2730","crate_id":0,"name":"TDEFL_GREEDY_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[175,4],"end":[175,59]},"visibility":"public","docs":"Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\nbytes to check for better matches.)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_4000","value":"16_384u32","is_literal":true}}},"a:1:3174:4183-0:628:2562":{"id":"a:1:3174:4183-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119:2848":{"id":"0:119:2848","crate_id":0,"name":"prev_return_status","span":{"filename":"src/deflate/core.rs","begin":[444,4],"end":[446,5]},"visibility":"public","docs":"Get the return status of the previous [`compress`](fn.compress.html)\ncall with this compressor.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:2624":{"id":"0:508:2624","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[52,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:2753":{"id":"0:603:2753","crate_id":0,"name":"Filtered","span":{"filename":"src/deflate/core.rs","begin":[199,4],"end":[199,16]},"visibility":"default","docs":"Only use matches that are at least 5 bytes long.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:1:2931-0:128:2872":{"id":"b:1:2931-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:831:3209":{"id":"0:831:3209","crate_id":0,"name":"TINFLStatus","span":{"filename":"src/inflate/mod.rs","begin":[25,0],"end":[63,1]},"visibility":"public","docs":"Return status codes.","links":{},"attrs":["#[repr(i8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:832:3217","0:835:2771","0:838:3221","0:841:3223","0:844:2564","0:847:3232","0:850:3234"],"impls":["0:542","a:1:3139:247-0:831:3209","a:1:42098:4109-0:831:3209","a:1:32294:3983-0:831:3209","a:1:42097:4110-0:831:3209","a:1:3174:4183-0:831:3209","a:1:32235:237-0:831:3209","b:1:2646-0:831:3209","b:1:2643-0:831:3209","b:1:2920-0:831:3209","b:1:2916-0:831:3209","b:1:2926-0:831:3209","b:1:3758-0:831:3209","b:1:2931-0:831:3209","b:4:738-0:831:3209","0:853","0:861","0:855","0:858","0:859","0:863","0:856"]}}},"b:1:2643-0:981:2392":{"id":"b:1:2643-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:553:3286":{"id":"0:553:3286","crate_id":0,"name":"decompress_slice_iter_to_slice","span":{"filename":"src/inflate/mod.rs","begin":[244,0],"end":[281,1]},"visibility":"public","docs":"Decompress one or more source slices from an iterator into the output slice.\n\n* On success, returns the number of bytes that were written.\n* On failure, returns the failure status code.\n\nThis will fail if the output buffer is not large enough, but in that case\nthe output buffer will still contain the partial decompression.\n\n* `out` the output buffer.\n* `it` the iterator of input slices.\n* `zlib_header` if the first slice out of the iterator is expected to have a\n  Zlib header. Otherwise the slices are assumed to be the deflate data only.\n* `ignore_adler32` if the adler32 checksum should be calculated or not.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["out",{"borrowed_ref":{"lifetime":"'out","mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["it",{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8371:178","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'inp","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["zlib_header",{"primitive":"bool"}],["ignore_adler32",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'out","kind":{"lifetime":{"outlives":[]}}},{"name":"'inp","kind":{"lifetime":{"outlives":[]}}},{"name":"impl Iterator<Item = &'inp [u8]>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8371:178","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'inp","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,29],"end":[147,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2646-0:509:3734":{"id":"b:1:2646-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:128:2872":{"id":"b:1:3758-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42098:4109-0:866:3238":{"id":"a:1:42098:4109-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3174:4183-0:871:2322":{"id":"a:1:3174:4183-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13237:16529":{"id":"1:13237:16529","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:498:2624":{"id":"0:498:2624","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[24,4],"end":[31,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:563":{"id":"0:39:563","crate_id":0,"name":"core","span":{"filename":"src/deflate/core.rs","begin":[1,0],"end":[2456,1]},"visibility":"public","docs":"Streaming compression functionality.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:71:2631","0:599:2570","0:628:2562","0:654:2563","0:111:2555","0:128:2872","0:309:2561","0:310:3135","0:313:2552"],"is_stripped":false}}},"a:1:32294:3983-0:383:3272":{"id":"a:1:32294:3983-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:642:802":{"id":"0:642:802","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:3265":{"id":"0:551:3265","crate_id":0,"name":"decompress_to_vec_zlib_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[174,0],"end":[179,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"DecompressError":"0:866:3238","`TINFLStatus::HasMoreOutput`":"0:850:3234","`Vec`":"4:7059:264","`Result`":"1:42136:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609:2756":{"id":"0:609:2756","crate_id":0,"name":"RLE","span":{"filename":"src/deflate/core.rs","begin":[203,4],"end":[203,11]},"visibility":"default","docs":"Only look for matches with a distance of 1, i.e do run-length encoding only.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"1:3760:1821":{"id":"1:3760:1821","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39718:5005","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,40],"end":[210,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:3272":{"id":"0:383:3272","crate_id":0,"name":"DecompressorOxide","span":{"filename":"src/inflate/core.rs","begin":[169,0],"end":[202,1]},"visibility":"public","docs":"Main decompression struct.\n","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:404","a:1:3139:247-0:383:3272","a:1:42098:4109-0:383:3272","a:1:32294:3983-0:383:3272","a:1:42097:4110-0:383:3272","a:1:3174:4183-0:383:3272","a:1:32235:237-0:383:3272","b:1:2646-0:383:3272","b:1:2643-0:383:3272","b:1:2920-0:383:3272","b:1:2916-0:383:3272","b:1:2926-0:383:3272","b:1:3758-0:383:3272","b:1:2931-0:383:3272","0:409"]}}},"1:13293:17768":{"id":"1:13293:17768","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:926:2341":{"id":"b:1:2926-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2646-0:383:3272":{"id":"b:1:2646-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32235:237-0:495:3737":{"id":"a:1:32235:237-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32235:237-0:499:3745":{"id":"a:1:32235:237-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:459:3274":{"id":"0:459:3274","crate_id":0,"name":"decompress","span":{"filename":"src/inflate/core.rs","begin":[1156,0],"end":[1802,1]},"visibility":"public","docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.\n\n # Arguments\n\n `r` is a [`DecompressorOxide`] struct with the state of this stream.\n\n `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will\n start at the first byte of this buffer.\n\n `out` is a reference to the buffer that will store the decompressed data, and that\n stores previously decompressed data if any.\n\n * The offset given by `out_pos` indicates where in the output buffer slice writing should start.\n * If [`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`] is not set, the output buffer is used in a\n wrapping manner, and it's size is required to be a power of 2.\n * The decompression function normally needs access to 32KiB of the previously decompressed data\n(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)\n     - If this data is not available, decompression may fail.\n     - Some deflate compressors allow specifying a window size which limits match distances to\n less than this, or alternatively an RLE mode where matches will only refer to the previous byte\n and thus allows a smaller output buffer. The window size can be specified in the zlib\n header structure, however, the header data should not be relied on to be correct.\n\n `flags` indicates settings and status to the decompression function.\n * The [`TINFL_FLAG_HAS_MORE_INPUT`] has to be specified if more compressed data is to be provided\n in a subsequent call to this function.\n * See the the [`inflate_flags`] module for details on other flags.\n\n # Returns\n\n Returns a tuple containing the status of the compressor, the number of input bytes read, and the\n number of bytes output to `out`.\n\n This function shouldn't panic pending any bugs.","links":{"`TINFL_FLAG_HAS_MORE_INPUT`":"0:375:3298","`inflate_flags`":"0:373:3256","`DecompressorOxide`":"0:383:3272","`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`":"0:376:3269"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["out_pos",{"primitive":"usize"}],["flags",{"primitive":"u32"}]],"output":{"tuple":[{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32294:3983-0:111:2555":{"id":"a:1:32294:3983-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5633:18486":{"id":"4:5633:18486","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:304:2629","`String`":"4:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:304:2629","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3174:4183-0:128:2872":{"id":"a:1:3174:4183-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2920-0:831:3209":{"id":"b:1:2920-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32235:237-0:903:2345":{"id":"a:1:32235:237-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:835:2771":{"id":"0:835:2771","crate_id":0,"name":"BadParam","span":{"filename":"src/inflate/mod.rs","begin":[37,4],"end":[37,43]},"visibility":"default","docs":"The output buffer is an invalid size; consider the `flags` parameter.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-3"}}}},"b:1:2643-0:926:2341":{"id":"b:1:2643-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13287:17765":{"id":"1:13287:17765","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32294:3983-0:504:3748":{"id":"a:1:32294:3983-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2643-0:628:2562":{"id":"b:1:2643-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:979:872":{"id":"0:979:872","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[147,44],"end":[147,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:949:802":{"id":"0:949:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[109,9],"end":[109,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:495:3737":{"id":"b:1:2926-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,16],"end":[109,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:933:2366":{"id":"0:933:2366","crate_id":0,"name":"Data","span":{"filename":"src/lib.rs","begin":[125,4],"end":[125,13]},"visibility":"default","docs":"Error in inflation; see [`inflate::stream::inflate()`] for details.\n\nNot returned from [`deflate::stream::deflate()`].","links":{"`deflate::stream::deflate()`":"0:325:2313","`inflate::stream::inflate()`":"0:531:2314"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-3","value":"-3"}}}},"0:130:2874":{"id":"0:130:2874","crate_id":0,"name":"put_buf_func","span":{"filename":"src/deflate/core.rs","begin":[532,4],"end":[532,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"dyn_trait":{"traits":[{"trait":{"name":"FnMut","id":"1:3385:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[]}],"lifetime":null}}}}}},"b:1:2920-0:509:3734":{"id":"b:1:2920-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5868:1781":{"id":"4:5868:1781","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2929:137":{"id":"1:2929:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32294:3983-0:495:3737":{"id":"a:1:32294:3983-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:870:802":{"id":"0:870:802","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13324:16376":{"id":"1:13324:16376","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:21846"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[517,0],"end":[528,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2968:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:2744":{"id":"0:78:2744","crate_id":0,"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[185,4],"end":[185,63]},"visibility":"public","docs":"Force the compressor to only output static blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0004_0000","value":"262_144u32","is_literal":true}}},"0:325:2313":{"id":"0:325:2313","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/stream.rs","begin":[22,0],"end":[97,1]},"visibility":"public","docs":"Try to compress from input to output with the given [`CompressorOxide`].\n\n# Errors\n\nReturns [`MZError::Buf`] If the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called without [`MZFlush::Finish`] after the compression\nwas already finished.\n\nReturns [`MZError::Param`] if the compressor parameters are set wrong.\n\nReturns [`MZError::Stream`] when lower-level decompressor returns a\n[`TDEFLStatus::PutBufFailed`]; may not actually be possible.","links":{"`TDEFLStatus::PutBufFailed`":"0:658:2774","`MZFlush::Finish`":"0:884:2335","`MZError::Stream`":"0:930:2363","`CompressorOxide`":"0:111:2555","`MZError::Param`":"0:945:200","`MZError::Buf`":"0:939:2371"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["compressor",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"crate::deflate::core::CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"crate::MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:850:3234":{"id":"0:850:3234","crate_id":0,"name":"HasMoreOutput","span":{"filename":"src/inflate/mod.rs","begin":[62,4],"end":[62,54]},"visibility":"default","docs":"There is still pending data that didn't fit in the output buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"2"}}}},"b:1:2931-0:866:3238":{"id":"b:1:2931-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:509:3734":{"id":"b:1:3758-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:546:802":{"id":"0:546:802","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::core::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"::core::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:495:3737":{"id":"a:1:42097:4110-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42098:4109-0:111:2555":{"id":"a:1:42098:4109-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2920-0:495:3737":{"id":"b:1:2920-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:853":{"id":"0:853","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:854:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:330:2314":{"id":"0:330:2314","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/mod.rs","begin":[1,0],"end":[343,1]},"visibility":"public","docs":"This module contains functionality for decompression.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:336:563","0:475:2523","0:831:3209","0:866:3238","0:548:2571","0:549:3190","0:550:3263","0:551:3265","0:553:3286"],"is_stripped":false}}},"0:710:872":{"id":"0:710:872","crate_id":0,"name":"hash","span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:17756":{"id":"1:13216:17756","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:52713:1721","str::slice_mut_unchecked":"1:13217:17757","crate::ops::Index":"1:39549:3909"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13263:16522":{"id":"1:13263:16522","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636","str::rsplitn":"1:13266:16524"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43999:4485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:881:2333":{"id":"0:881:2333","crate_id":0,"name":"Full","span":{"filename":"src/lib.rs","begin":[58,4],"end":[58,12]},"visibility":"default","docs":"Same as [`Sync`], but resets the compression dictionary so that further compressed\ndata does not depend on data compressed before the flush.\n\nHas no use in decompression, and is an error to supply in that case.","links":{"`Sync`":"1:3139:247"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:642:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:983:2396":{"id":"0:983:2396","crate_id":0,"name":"bytes_written","span":{"filename":"src/lib.rs","begin":[185,4],"end":[185,28]},"visibility":"public","docs":"The number of bytes written to the output slice.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"b:1:2926-0:628:2562":{"id":"b:1:2926-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32294:3983-0:831:3209":{"id":"a:1:32294:3983-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2646-0:871:2322":{"id":"b:1:2646-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13260:17761":{"id":"1:13260:17761","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12885:6636","str::split":"1:13248:16517","prim@char":"1:52707:471","str::split_terminator":"1:13257:17760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43963:5099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5634:6571":{"id":"4:5634:6571","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:903:2345":{"id":"b:1:2926-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2643-0:383:3272":{"id":"b:1:2643-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:894:475":{"id":"0:894:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:3297":{"id":"0:378:3297","crate_id":0,"name":"TINFL_FLAG_IGNORE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[154,4],"end":[154,50]},"visibility":"public","docs":"Ignore adler32 checksum even if we are inflating a zlib stream.\n\nOverrides [`TINFL_FLAG_COMPUTE_ADLER32`] if both are enabled.\n\nNOTE: This flag does not exist in miniz as it does not support this and is a\ncustom addition for miniz_oxide.\n\nNOTE: Should not be changed from enabled to disabled after decompression has started,\nthis will result in checksum failure (outside the unlikely event where the checksum happens\nto match anyway).","links":{"`TINFL_FLAG_COMPUTE_ADLER32`":"0:377:3387"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"64","value":"64u32","is_literal":true}}},"0:968":{"id":"0:968","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:969:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:523:1178":{"id":"0:523:1178","crate_id":0,"name":"new","span":{"filename":"src/inflate/stream.rs","begin":[107,4],"end":[112,5]},"visibility":"public","docs":"Create a new state.\n\nNote that this struct is quite large due to internal buffers, and as such storing it on\nthe stack is not recommended.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:128:2872":{"id":"a:1:3139:247-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13229:17759":{"id":"1:13229:17759","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44159:5105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:671:475":{"id":"0:671:475","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32235:237-0:866:3238":{"id":"a:1:32235:237-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:626:872":{"id":"0:626:872","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927:2358":{"id":"0:927:2358","crate_id":0,"name":"ErrNo","span":{"filename":"src/lib.rs","begin":[112,4],"end":[112,14]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"0:328:2548":{"id":"0:328:2548","crate_id":0,"name":"compress_to_vec_zlib","span":{"filename":"src/deflate/mod.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10), and with a\nzlib wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["level",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:860:699":{"id":"0:860:699","crate_id":0,"name":"eq","span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2643-0:654:2563":{"id":"b:1:2643-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:408:3435":{"id":"0:408:3435","crate_id":0,"name":"adler32_header","span":{"filename":"src/inflate/core.rs","begin":[230,4],"end":[236,5]},"visibility":"public","docs":"Returns the adler32 that was read from the zlib header if it exists.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:838:3221":{"id":"0:838:3221","crate_id":0,"name":"Adler32Mismatch","span":{"filename":"src/inflate/mod.rs","begin":[41,4],"end":[41,57]},"visibility":"default","docs":"The decompression went fine, but the adler32 checksum did not match the one\nprovided in the header.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-2"}}}},"0:898":{"id":"0:898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,40],"end":[43,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:866:3238":{"id":"0:866:3238","crate_id":0,"name":"DecompressError","span":{"filename":"src/inflate/mod.rs","begin":[84,0],"end":[89,1]},"visibility":"public","docs":"Struct return when decompress_to_vec functions fail.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:867:2398","0:868:2556"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3139:247-0:866:3238","a:1:42098:4109-0:866:3238","a:1:32294:3983-0:866:3238","a:1:42097:4110-0:866:3238","a:1:3174:4183-0:866:3238","a:1:32235:237-0:866:3238","b:1:2646-0:866:3238","b:1:2643-0:866:3238","b:1:2920-0:866:3238","b:1:2916-0:866:3238","b:1:2926-0:866:3238","b:1:3758-0:866:3238","b:1:2931-0:866:3238","b:4:5866-0:866:3238","0:869","0:545"]}}},"b:4:738-0:680:2527":{"id":"b:4:738-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13223:4929":{"id":"1:13223:4929","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:52707:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43865:4921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2931-0:680:2527":{"id":"b:1:2931-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:904:193":{"id":"0:904:193","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[91,4],"end":[91,10]},"visibility":"default","docs":"Operation succeeded.\n\nSome data was decompressed or compressed; see the byte counters in the [`StreamResult`] for\ndetails.","links":{"`StreamResult`":"0:981:2392"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"1:2919:2553":{"id":"1:2919:2553","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2893:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2931-0:871:2322":{"id":"b:1:2931-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:504:3748":{"id":"b:1:2920-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13294:17769":{"id":"1:13294:17769","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:681:2529":{"id":"0:681:2529","crate_id":0,"name":"NoCompression","span":{"filename":"src/deflate/mod.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Don't do any compression, only output uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:987":{"id":"0:987","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,16],"end":[180,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13207:16494":{"id":"1:13207:16494","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:52726:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3174:4183-0:383:3272":{"id":"a:1:3174:4183-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2920-0:903:2345":{"id":"b:1:2920-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:632:247":{"id":"0:632:247","crate_id":0,"name":"Sync","span":{"filename":"src/deflate/core.rs","begin":[218,4],"end":[218,12]},"visibility":"default","docs":"Try to flush all the current data and output an empty raw block.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:2643-0:866:3238":{"id":"b:1:2643-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3174:4183-0:926:2341":{"id":"a:1:3174:4183-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2646-0:961:2378":{"id":"b:1:2646-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42098:4109-0:504:3748":{"id":"a:1:42098:4109-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:578:832":{"id":"0:578:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[208,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["res",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:832":{"id":"0:81:832","crate_id":0,"name":"from","span":{"filename":"src/deflate/core.rs","begin":[231,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:684:2531":{"id":"0:684:2531","crate_id":0,"name":"BestSpeed","span":{"filename":"src/deflate/mod.rs","begin":[20,4],"end":[20,17]},"visibility":"default","docs":"Fast compression. Uses a special compression routine that is optimized for speed.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:1:2643-0:961:2378":{"id":"b:1:2643-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:869":{"id":"0:869","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:870:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2926-0:981:2392":{"id":"b:1:2926-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:628:2562":{"id":"b:1:3758-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13214:6105":{"id":"1:13214:6105","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"4:5636:17661":{"id":"4:5636:17661","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13322:16373"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:606:2589":{"id":"0:606:2589","crate_id":0,"name":"HuffmanOnly","span":{"filename":"src/deflate/core.rs","begin":[201,4],"end":[201,19]},"visibility":"default","docs":"Don't look for matches, only huffman encode the literals.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:2643-0:111:2555":{"id":"b:1:2643-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:509:3734":{"id":"0:509:3734","crate_id":0,"name":"InflateState","span":{"filename":"src/inflate/stream.rs","begin":[60,0],"end":[82,1]},"visibility":"public","docs":"A struct that compbines a decompressor with extra data for streaming decompression.\n","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:522","a:1:3139:247-0:509:3734","a:1:42098:4109-0:509:3734","a:1:32294:3983-0:509:3734","a:1:42097:4110-0:509:3734","a:1:3174:4183-0:509:3734","a:1:32235:237-0:509:3734","b:1:2646-0:509:3734","b:1:2643-0:509:3734","b:1:2920-0:509:3734","b:1:2916-0:509:3734","b:1:2926-0:509:3734","b:1:3758-0:509:3734","b:1:2931-0:509:3734","0:519"]}}},"a:1:32235:237-0:654:2563":{"id":"a:1:32235:237-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:890":{"id":"0:890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,9],"end":[43,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:891:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42098:4109-0:495:3737":{"id":"a:1:42098:4109-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[204,0],"end":[237,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:405:1178","0:406:3429","0:407:2845","0:408:3435"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71:2631":{"id":"0:71:2631","crate_id":0,"name":"deflate_flags","span":{"filename":"src/deflate/core.rs","begin":[168,0],"end":[168,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:72:2723","0:73:2726","0:74:2730","0:75:2734","0:76:2737","0:77:2740","0:78:2744","0:79:2747"],"is_stripped":false}}},"0:616:802":{"id":"0:616:802","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2643-0:128:2872":{"id":"b:1:2643-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:705":{"id":"0:705","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:706:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2916-0:831:3209":{"id":"b:1:2916-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:831:3209":{"id":"b:1:3758-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2926-0:961:2378":{"id":"b:1:2926-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:989:475":{"id":"0:989:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[180,22],"end":[180,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2916-0:504:3748":{"id":"b:1:2916-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[23,0],"end":[32,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:493:3732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:2624"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32235:237-0:680:2527":{"id":"a:1:32235:237-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:687:2533":{"id":"0:687:2533","crate_id":0,"name":"BestCompression","span":{"filename":"src/deflate/mod.rs","begin":[22,4],"end":[22,23]},"visibility":"default","docs":"Slow/high compression. Do a lot of checks to try to find good matches.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"9","value":"9"}}}},"0:901:872":{"id":"0:901:872","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[43,44],"end":[43,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:915":{"id":"0:915","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,16],"end":[85,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3139:247-0:903:2345":{"id":"a:1:3139:247-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2646-0:504:3748":{"id":"b:1:2646-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13212:6104":{"id":"1:13212:6104","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:128:2872":{"id":"a:1:42097:4110-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:910:2355":{"id":"0:910:2355","crate_id":0,"name":"NeedDict","span":{"filename":"src/lib.rs","begin":[101,4],"end":[101,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"1:13289:17766":{"id":"1:13289:17766","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:866:3238":{"id":"b:1:2646-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,44],"end":[43,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:901:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2926-0:504:3748":{"id":"b:1:2926-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2931-0:504:3748":{"id":"b:1:2931-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:128:2872":{"id":"b:1:2920-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3174:4183-0:961:2378":{"id":"a:1:3174:4183-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:529:3776":{"id":"0:529:3776","crate_id":0,"name":"reset_as","span":{"filename":"src/inflate/stream.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Resets the state according to specified policy.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["policy",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ResetPolicy","id":"0:493:3732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13326:17776":{"id":"1:13326:17776","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4951:17776"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44194:5016","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:740:4654":{"id":"4:740:4654","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5617:18482":{"id":"4:5617:18482","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:304:2629","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:304:2629","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:2523":{"id":"0:314:2523","crate_id":0,"name":"stream","span":{"filename":"src/deflate/stream.rs","begin":[1,0],"end":[121,1]},"visibility":"public","docs":"Extra streaming compression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.\n\nThere is no DeflateState as the needed state is contained in the compressor struct itself.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:325:2313"],"is_stripped":false}}},"0:600:123":{"id":"0:600:123","crate_id":0,"name":"Default","span":{"filename":"src/deflate/core.rs","begin":[197,4],"end":[197,15]},"visibility":"default","docs":"Don't use any of the special strategies.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:495:3737":{"id":"0:495:3737","crate_id":0,"name":"MinReset","span":{"filename":"src/inflate/stream.rs","begin":[21,0],"end":[21,20]},"visibility":"public","docs":"Resets state, without performing expensive ops (e.g. zeroing buffer)\n\nNote that not zeroing buffer can lead to security issues when dealing with untrusted input.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:3139:247-0:495:3737","a:1:42098:4109-0:495:3737","a:1:32294:3983-0:495:3737","a:1:42097:4110-0:495:3737","a:1:3174:4183-0:495:3737","a:1:32235:237-0:495:3737","b:1:2646-0:495:3737","b:1:2643-0:495:3737","b:1:2920-0:495:3737","b:1:2916-0:495:3737","b:1:2926-0:495:3737","b:1:3758-0:495:3737","b:1:2931-0:495:3737","0:497"]}}},"b:1:2916-0:871:2322":{"id":"b:1:2916-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:913":{"id":"0:913","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,9],"end":[85,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:914:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,29],"end":[109,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2931-0:599:2570":{"id":"b:1:2931-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13248:16517":{"id":"1:13248:16517","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12885:6636","`DoubleEndedIterator`":"1:8263:129","prim@char":"1:52707:471","str::split_whitespace":"1:13226:12447","str::rsplit":"1:13254:16520"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43895:4483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:981:2392":{"id":"0:981:2392","crate_id":0,"name":"StreamResult","span":{"filename":"src/lib.rs","begin":[181,0],"end":[188,1]},"visibility":"public","docs":"A structure containing the result of a call to the inflate or deflate streaming functions.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:982:2394","0:983:2396","0:984:2398"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:573","a:1:3139:247-0:981:2392","a:1:42098:4109-0:981:2392","a:1:32294:3983-0:981:2392","a:1:42097:4110-0:981:2392","a:1:3174:4183-0:981:2392","a:1:32235:237-0:981:2392","b:1:2646-0:981:2392","b:1:2643-0:981:2392","b:1:2920-0:981:2392","b:1:2916-0:981:2392","b:1:2926-0:981:2392","b:1:3758-0:981:2392","b:1:2931-0:981:2392","b:4:738-0:981:2392","0:991","0:995","0:988","0:575","0:993","0:577","0:990","0:987","0:985"]}}},"0:373:3256":{"id":"0:373:3256","crate_id":0,"name":"inflate_flags","span":{"filename":"src/inflate/core.rs","begin":[114,0],"end":[114,21]},"visibility":"public","docs":"Flags to [`decompress()`] to control how inflation works.\n\nThese define bits for a bitmask argument.","links":{"`decompress()`":"0:459:3274"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:374:3257","0:375:3298","0:376:3269","0:377:3387","0:378:3297"],"is_stripped":false}}},"a:1:42098:4109-0:871:2322":{"id":"a:1:42098:4109-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3139:247-0:831:3209":{"id":"a:1:3139:247-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72:2723":{"id":"0:72:2723","crate_id":0,"name":"TDEFL_WRITE_ZLIB_HEADER","span":{"filename":"src/deflate/core.rs","begin":[170,4],"end":[170,57]},"visibility":"public","docs":"Whether to use a zlib wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_1000","value":"4_096u32","is_literal":true}}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:710:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:2852":{"id":"0:121:2852","crate_id":0,"name":"data_format","span":{"filename":"src/deflate/core.rs","begin":[457,4],"end":[463,5]},"visibility":"public","docs":"Returns whether the compressor is wrapping the data in a zlib format or not.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:961:2378":{"id":"a:1:3139:247-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:377:3387":{"id":"0:377:3387","crate_id":0,"name":"TINFL_FLAG_COMPUTE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[142,4],"end":[142,50]},"visibility":"public","docs":"Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.\n\nIf [`TINFL_FLAG_IGNORE_ADLER32`] is specified, it will override this.\n\nNOTE: Enabling/disabling this between calls to decompress will result in an incorrect\nchecksum.","links":{"`TINFL_FLAG_IGNORE_ADLER32`":"0:378:3297"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"8","value":"8u32","is_literal":true}}},"1:13284:17764":{"id":"1:13284:17764","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12885:6636","`DoubleEndedIterator`":"1:8263:129","prim@char":"1:52707:471","str::match_indices":"1:13281:17763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44063:5101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:2624":{"id":"0:502:2624","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[39,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13319:16369":{"id":"1:13319:16369","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39904:6472","Self::is_ascii":"1:13318:16368"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39904:6472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:658:2774":{"id":"0:658:2774","crate_id":0,"name":"PutBufFailed","span":{"filename":"src/deflate/core.rs","begin":[267,4],"end":[267,21]},"visibility":"default","docs":"Error putting data into output buffer.\n\nThis usually indicates a too-small buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"a:1:32235:237-0:111:2555":{"id":"a:1:32235:237-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42098:4109-0:499:3745":{"id":"a:1:42098:4109-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2931-0:981:2392":{"id":"b:1:2931-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:951":{"id":"0:951","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,22],"end":[109,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:952:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13266:16524":{"id":"1:13266:16524","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:52707:471","str::splitn":"1:13263:16522","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44017:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2931-0:654:2563":{"id":"b:1:2931-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3174:4183-0:831:3209":{"id":"a:1:3174:4183-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:914:802":{"id":"0:914:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[85,9],"end":[85,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:60":{"id":"0:127:60","crate_id":0,"name":"default","span":{"filename":"src/deflate/core.rs","begin":[520,4],"end":[527,5]},"visibility":"default","docs":"Initialize the compressor with a level of 4, zlib wrapper and\nthe default strategy.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:475":{"id":"0:703:475","crate_id":0,"name":"clone","span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3758-0:599:2570":{"id":"b:1:3758-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:622:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32294:3983-0:866:3238":{"id":"a:1:32294:3983-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13298:17771":{"id":"1:13298:17771","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32235:237-0:961:2378":{"id":"a:1:32235:237-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:847:3232":{"id":"0:847:3232","crate_id":0,"name":"NeedsMoreInput","span":{"filename":"src/inflate/mod.rs","begin":[59,4],"end":[59,56]},"visibility":"default","docs":"The decompressor needs more input data to continue decompressing.\n\nThis occurs when there's no more consumable input, but the end of the stream hasn't been\nreached, and you have supplied the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompressor.  Had you not supplied that flag (which would mean you were asserting that you\nbelieved all the data was available) you would have gotten a\n[`FailedCannotMakeProcess`][Self::FailedCannotMakeProgress] instead.","links":{"Self::FailedCannotMakeProgress":"0:832:3217","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:375:3298"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"1"}}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[98,0],"end":[160,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:523:1178","0:524:3766","0:525:3738","0:526:3743","0:527:3773","0:528:2624","0:529:3776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42097:4110-0:981:2392":{"id":"a:1:42097:4110-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2926-0:680:2527":{"id":"b:1:2926-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3139:247-0:866:3238":{"id":"a:1:3139:247-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:959:872":{"id":"0:959:872","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[109,44],"end":[109,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:577":{"id":"0:577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,0],"end":[211,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZResult","id":"0:572:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:578:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3139:247-0:499:3745":{"id":"a:1:3139:247-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2916-0:981:2392":{"id":"b:1:2916-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:347:3329":{"id":"0:347:3329","crate_id":0,"name":"TINFL_LZ_DICT_SIZE","span":{"filename":"src/inflate/core.rs","begin":[12,0],"end":[12,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"usize"},"expr":"32_768","value":"32_768usize","is_literal":true}}},"1:13230:12441":{"id":"1:13230:12441","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44187:4928","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:855":{"id":"0:855","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,16],"end":[24,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:926:2341":{"id":"0:926:2341","crate_id":0,"name":"MZError","span":{"filename":"src/lib.rs","begin":[110,0],"end":[144,1]},"visibility":"public","docs":"A list of miniz failed status codes.\n\nThese are emitted as the [`Err`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:531:2314","`StreamResult`":"0:981:2392","`deflate::stream::deflate()`":"0:325:2313","`Err`":"1:42142:136","`MZResult`":"0:572:2390"},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:927:2358","0:930:2363","0:933:2366","0:936:2367","0:939:2371","0:942:2372","0:945:200"],"impls":["a:1:3139:247-0:926:2341","a:1:42098:4109-0:926:2341","a:1:32294:3983-0:926:2341","a:1:42097:4110-0:926:2341","a:1:3174:4183-0:926:2341","a:1:32235:237-0:926:2341","b:1:2646-0:926:2341","b:1:2643-0:926:2341","b:1:2920-0:926:2341","b:1:2916-0:926:2341","b:1:2926-0:926:2341","b:1:3758-0:926:2341","b:1:2931-0:926:2341","b:4:738-0:926:2341","0:956","0:951","0:948","0:954","0:950","0:958","0:953"]}}},"b:1:2926-0:111:2555":{"id":"b:1:2926-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:622:699":{"id":"0:622:699","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:599:2570":{"id":"b:1:2646-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:374:3257":{"id":"0:374:3257","crate_id":0,"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","span":{"filename":"src/inflate/core.rs","begin":[119,4],"end":[119,52]},"visibility":"public","docs":"Should we try to parse a zlib header?\n\nIf unset, the function will expect an RFC1951 deflate stream.  If set, it will expect a\nRFC1950 zlib wrapper around the deflate stream.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"1","value":"1u32","is_literal":true}}},"a:1:42097:4110-0:628:2562":{"id":"a:1:42097:4110-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:623":{"id":"0:623","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,40],"end":[194,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3174:4183-0:654:2563":{"id":"a:1:3174:4183-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:528:2624":{"id":"0:528:2624","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Reset the decompressor without re-allocating memory, using the given\ndata format.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2555":{"id":"0:111:2555","crate_id":0,"name":"CompressorOxide","span":{"filename":"src/deflate/core.rs","begin":[414,0],"end":[421,1]},"visibility":"public","docs":"Main compression struct.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:116","a:1:3139:247-0:111:2555","a:1:42098:4109-0:111:2555","a:1:32294:3983-0:111:2555","a:1:42097:4110-0:111:2555","a:1:3174:4183-0:111:2555","a:1:32235:237-0:111:2555","b:1:2646-0:111:2555","b:1:2643-0:111:2555","b:1:2920-0:111:2555","b:1:2916-0:111:2555","b:1:2926-0:111:2555","b:1:3758-0:111:2555","b:1:2931-0:111:2555","0:126"]}}},"0:942:2372":{"id":"0:942:2372","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[137,4],"end":[137,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-6","value":"-6"}}}},"b:1:2931-0:926:2341":{"id":"b:1:2931-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13244:4212":{"id":"1:13244:4212","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42005:191","prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13197:3183":{"id":"1:13197:3183","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:2570":{"id":"0:599:2570","crate_id":0,"name":"CompressionStrategy","span":{"filename":"src/deflate/core.rs","begin":[195,0],"end":[207,1]},"visibility":"public","docs":"Strategy setting for compression.\n\nThe non-default settings offer some special-case compression variants.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:600:123","0:603:2753","0:606:2589","0:609:2756","0:612:2758"],"impls":["a:1:3139:247-0:599:2570","a:1:42098:4109-0:599:2570","a:1:32294:3983-0:599:2570","a:1:42097:4110-0:599:2570","a:1:3174:4183-0:599:2570","a:1:32235:237-0:599:2570","b:1:2646-0:599:2570","b:1:2643-0:599:2570","b:1:2920-0:599:2570","b:1:2916-0:599:2570","b:1:2926-0:599:2570","b:1:3758-0:599:2570","b:1:2931-0:599:2570","b:4:738-0:599:2570","0:617","0:618","0:625","0:623","0:620","0:615","0:621"]}}},"0:655:2771":{"id":"0:655:2771","crate_id":0,"name":"BadParam","span":{"filename":"src/deflate/core.rs","begin":[262,4],"end":[262,17]},"visibility":"default","docs":"Usage error.\n\nThis indicates that either the [`CompressorOxide`] experienced a previous error, or the\nstream has already been [`TDEFLFlush::Finish`]'d.","links":{"`CompressorOxide`":"0:111:2555","`TDEFLFlush::Finish`":"0:638:2335"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-2","value":"-2"}}}},"0:844:2564":{"id":"0:844:2564","crate_id":0,"name":"Done","span":{"filename":"src/inflate/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":"Finished decompression without issues.\n\nThis indicates the end of the compressed stream has been reached.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"0"}}}},"a:1:42097:4110-0:926:2341":{"id":"a:1:42097:4110-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:742:12372":{"id":"4:742:12372","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:975:699":{"id":"0:975:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[147,29],"end":[147,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2920-0:654:2563":{"id":"b:1:2920-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32294:3983-0:871:2322":{"id":"a:1:32294:3983-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2931-0:903:2345":{"id":"b:1:2931-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2931-0:499:3745":{"id":"b:1:2931-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42098:4109-0:128:2872":{"id":"a:1:42098:4109-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:674:699":{"id":"0:674:699","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690:2535":{"id":"0:690:2535","crate_id":0,"name":"UberCompression","span":{"filename":"src/deflate/mod.rs","begin":[24,4],"end":[24,24]},"visibility":"default","docs":"Even more checks, can be very slow.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"10","value":"10"}}}},"0:494:2624":{"id":"0:494:2624","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":"Performs reset","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:887:2337":{"id":"0:887:2337","crate_id":0,"name":"Block","span":{"filename":"src/lib.rs","begin":[62,4],"end":[62,13]},"visibility":"default","docs":"Not implemented.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:856":{"id":"0:856","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:857:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:574:2399"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5621:18483":{"id":"4:5621:18483","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5616":{"id":"4:5616","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5617:18482","4:5618:4429","4:5621:18483","4:5624:18484","4:5632:18485","4:5633:18486","4:5634:6571","4:5635:17660","4:5636:17661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:526:3743":{"id":"0:526:3743","crate_id":0,"name":"last_status","span":{"filename":"src/inflate/stream.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Return the status of the last call to `inflate` with this `InflateState`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:499:3745":{"id":"b:1:2646-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13291:17767":{"id":"1:13291:17767","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475:2523":{"id":"0:475:2523","crate_id":0,"name":"stream","span":{"filename":"src/inflate/stream.rs","begin":[1,0],"end":[423,1]},"visibility":"public","docs":"Extra streaming decompression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:493:3732","0:495:3737","0:499:3745","0:504:3748","0:509:3734","0:531:2314"],"is_stripped":false}}},"0:964:2383":{"id":"0:964:2383","crate_id":0,"name":"ZLibIgnoreChecksum","span":{"filename":"src/lib.rs","begin":[154,4],"end":[154,22]},"visibility":"default","docs":"Zlib wrapped but ignore and don't compute the adler32 checksum.\nCurrently only used for inflate, behaves the same as Zlib for compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:1:3139:247-0:926:2341":{"id":"a:1:3139:247-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32235:237-0:981:2392":{"id":"a:1:32235:237-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:1178":{"id":"0:117:1178","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[428,4],"end":[435,5]},"visibility":"public","docs":"Create a new `CompressorOxide` with the given flags.\n\n# Notes\nThis function may be changed to take different parameters in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flags",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:903:2345":{"id":"0:903:2345","crate_id":0,"name":"MZStatus","span":{"filename":"src/lib.rs","begin":[86,0],"end":[102,1]},"visibility":"public","docs":"A list of miniz successful status codes.\n\nThese are emitted as the [`Ok`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:531:2314","`StreamResult`":"0:981:2392","`deflate::stream::deflate()`":"0:325:2313","`Ok`":"1:42139:193","`MZResult`":"0:572:2390"},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:904:193","0:907:2353","0:910:2355"],"impls":["a:1:3139:247-0:903:2345","a:1:42098:4109-0:903:2345","a:1:32294:3983-0:903:2345","a:1:42097:4110-0:903:2345","a:1:3174:4183-0:903:2345","a:1:32235:237-0:903:2345","b:1:2646-0:903:2345","b:1:2643-0:903:2345","b:1:2920-0:903:2345","b:1:2916-0:903:2345","b:1:2926-0:903:2345","b:1:3758-0:903:2345","b:1:2931-0:903:2345","b:4:738-0:903:2345","0:923","0:918","0:915","0:921","0:916","0:919","0:913"]}}},"1:13257:17760":{"id":"1:13257:17760","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12885:6636","str::split":"1:13248:16517","prim@char":"1:52707:471","`DoubleEndedIterator`":"1:8263:129","str::rsplit_terminator":"1:13260:17761"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43945:5098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:16527":{"id":"1:13272:16527","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:667":{"id":"0:667","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:668:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2931-0:495:3737":{"id":"b:1:2931-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32235:237-0:871:2322":{"id":"a:1:32235:237-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13307:17772":{"id":"1:13307:17772","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2643-0:903:2345":{"id":"b:1:2643-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3139:247-0:509:3734":{"id":"a:1:3139:247-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2926-0:509:3734":{"id":"b:1:2926-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:493:3732":{"id":"0:493:3732","crate_id":0,"name":"ResetPolicy","span":{"filename":"src/inflate/stream.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"Tag that determines reset policy of [InflateState](struct.InflateState.html)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:494:2624"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:507","0:497","0:501"]}}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[159,0],"end":[174,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:570:2386","0:571:2388"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:652:872":{"id":"0:652:872","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:738-0:871:2322":{"id":"b:4:738-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:893":{"id":"0:893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:894:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3174:4183-0:981:2392":{"id":"a:1:3174:4183-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3174:4183-0:599:2570":{"id":"a:1:3174:4183-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2643-0:599:2570":{"id":"b:1:2643-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2922:832":{"id":"1:2922:832","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32235:237-0:128:2872":{"id":"a:1:32235:237-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[37,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:493:3732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:502:2624"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:668:802":{"id":"0:668:802","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:383:3272":{"id":"a:1:42097:4110-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:896":{"id":"0:896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,29],"end":[43,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:897:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3174:4183-0:866:3238":{"id":"a:1:3174:4183-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3758-0:871:2322":{"id":"b:1:3758-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:981:2392":{"id":"b:1:2920-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42097:4110-0:871:2322":{"id":"a:1:42097:4110-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:741:12371":{"id":"4:741:12371","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:988":{"id":"0:988","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,22],"end":[180,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:989:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:661:2566":{"id":"0:661:2566","crate_id":0,"name":"Okay","span":{"filename":"src/deflate/core.rs","begin":[270,4],"end":[270,12]},"visibility":"default","docs":"Compression succeeded normally.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:118:2845":{"id":"0:118:2845","crate_id":0,"name":"adler32","span":{"filename":"src/deflate/core.rs","begin":[438,4],"end":[440,5]},"visibility":"public","docs":"Get the adler32 checksum of the currently encoded data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:128:2872":{"id":"b:1:2926-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2926-0:831:3209":{"id":"b:1:2926-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32294:3983-0:926:2341":{"id":"a:1:32294:3983-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3139:247-0:628:2562":{"id":"a:1:3139:247-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:568:1178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2934:137":{"id":"1:2934:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32159:3957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:3139:247-0:654:2563":{"id":"a:1:3139:247-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2643-0:495:3737":{"id":"b:1:2643-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42097:4110-0:866:3238":{"id":"a:1:42097:4110-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:568:1178":{"id":"0:568:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[69,4],"end":[77,5]},"visibility":"public","docs":"Create an MZFlush value from an integer value.\n\nReturns `MZError::Param` on invalid values.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:12454":{"id":"1:13251:12454","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12700:4500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:17775":{"id":"1:13316:17775","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12846:136","`FromStr`":"1:12845:6390"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12845:6390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12845:6390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[423,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:1178","0:118:2845","0:119:2848","0:120:2551","0:121:2852","0:122:2624","0:123:2858","0:124:2861","0:125:2859"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42098:4109-0:599:2570":{"id":"a:1:42098:4109-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13254:16520":{"id":"1:13254:16520","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12885:6636","`DoubleEndedIterator`":"1:8263:129","prim@char":"1:52707:471","str::split":"1:13248:16517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43913:4487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2643-0:680:2527":{"id":"b:1:2643-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,44],"end":[147,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:979:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13321:16372":{"id":"1:13321:16372","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:918":{"id":"0:918","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,29],"end":[85,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:531:2314":{"id":"0:531:2314","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/stream.rs","begin":[185,0],"end":[291,1]},"visibility":"public","docs":"Try to decompress from `input` to `output` with the given [`InflateState`]\n\n# `flush`\n\nGenerally, the various [`MZFlush`] flags have meaning only on the compression side.  They can be\nsupplied here, but the only one that has any semantic meaning is [`MZFlush::Finish`], which is a\nsignal that the stream is expected to finish, and failing to do so is an error.  It isn't\nnecessary to specify it when the stream ends; you'll still get returned a\n[`MZStatus::StreamEnd`] anyway.  Other values either have no effect or cause errors.  It's\nlikely that you'll almost always just want to use [`MZFlush::None`].\n\n# Errors\n\nReturns [`MZError::Buf`] if the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called with [`MZFlush::Finish`] and input wasn't all\nconsumed.\n\nReturns [`MZError::Data`] if this or a a previous call failed with an error return from\n[`TINFLStatus`]; probably indicates corrupted data.\n\nReturns [`MZError::Stream`] when called with [`MZFlush::Full`] (meaningless on\ndecompression), or when called without [`MZFlush::Finish`] after an earlier call with\n[`MZFlush::Finish`] has been made.","links":{"`MZStatus::StreamEnd`":"0:907:2353","`MZFlush::None`":"0:872:191","`MZError::Data`":"0:933:2366","`TINFLStatus`":"0:831:3209","`MZError::Buf`":"0:939:2371","`InflateState`":"0:509:3734","`MZFlush`":"0:871:2322","`MZFlush::Finish`":"0:884:2335","`MZError::Stream`":"0:930:2363","`MZFlush::Full`":"0:881:2333"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"crate::MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2858":{"id":"0:123:2858","crate_id":0,"name":"set_compression_level","span":{"filename":"src/deflate/core.rs","begin":[482,4],"end":[485,5]},"visibility":"public","docs":"Set the compression level of the compressor.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:383:3272":{"id":"a:1:3139:247-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:993":{"id":"0:993","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,40],"end":[180,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:680:2527":{"id":"0:680:2527","crate_id":0,"name":"CompressionLevel","span":{"filename":"src/deflate/mod.rs","begin":[16,0],"end":[29,1]},"visibility":"public","docs":"How much processing the compressor should do to compress the data.\n`NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\nof checks for matches in the hash chains and whether to use lazy or greedy parsing.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:681:2529","0:684:2531","0:687:2533","0:690:2535","0:693:2538","0:696:2540"],"impls":["a:1:3139:247-0:680:2527","a:1:42098:4109-0:680:2527","a:1:32294:3983-0:680:2527","a:1:42097:4110-0:680:2527","a:1:3174:4183-0:680:2527","a:1:32235:237-0:680:2527","b:1:2646-0:680:2527","b:1:2643-0:680:2527","b:1:2920-0:680:2527","b:1:2916-0:680:2527","b:1:2926-0:680:2527","b:1:3758-0:680:2527","b:1:2931-0:680:2527","b:4:738-0:680:2527","0:705","0:699","0:704","0:709","0:701","0:707","0:702"]}}},"0:924:872":{"id":"0:924:872","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[85,44],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10538:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:831:3209":{"id":"b:1:2646-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:499:3745":{"id":"0:499:3745","crate_id":0,"name":"ZeroReset","span":{"filename":"src/inflate/stream.rs","begin":[35,0],"end":[35,21]},"visibility":"public","docs":"Resets state and zero memory, continuing to use the same data format.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:3139:247-0:499:3745","a:1:42098:4109-0:499:3745","a:1:32294:3983-0:499:3745","a:1:42097:4110-0:499:3745","a:1:3174:4183-0:499:3745","a:1:32235:237-0:499:3745","b:1:2646-0:499:3745","b:1:2643-0:499:3745","b:1:2920-0:499:3745","b:1:2916-0:499:3745","b:1:2926-0:499:3745","b:1:3758-0:499:3745","b:1:2931-0:499:3745","0:501"]}}},"0:570:2386":{"id":"0:570:2386","crate_id":0,"name":"from_window_bits","span":{"filename":"src/lib.rs","begin":[160,4],"end":[166,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["window_bits",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13201:17754":{"id":"1:13201:17754","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13199:17753"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:831:3209":{"id":"a:1:42097:4110-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2920-0:599:2570":{"id":"b:1:2920-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:2859":{"id":"0:125:2859","crate_id":0,"name":"set_format_and_level","span":{"filename":"src/deflate/core.rs","begin":[506,4],"end":[514,5]},"visibility":"public","docs":"Update the compression settings of the compressor.\n\nChanging the `DataFormat` after compression has started will result in\na corrupted stream.\n\n# Notes\nThis function mainly intended for setting the initial settings after e.g creating with\n`default` or after calling `CompressorOxide::reset()`, and behaviour may be changed\nto disallow calling it after starting compression in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["level",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:628:2562":{"id":"b:1:2646-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:892":{"id":"0:892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,16],"end":[43,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:982:2394":{"id":"0:982:2394","crate_id":0,"name":"bytes_consumed","span":{"filename":"src/lib.rs","begin":[183,4],"end":[183,29]},"visibility":"public","docs":"The number of bytes consumed from the input slice.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"1:2930:1808":{"id":"1:2930:1808","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3758-0:926:2341":{"id":"b:1:3758-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13217:17757":{"id":"1:13217:17757","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:52713:1721","crate::ops::IndexMut":"1:3417:3910","str::slice_unchecked":"1:13216:17756"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:16512":{"id":"1:13218:16512","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13220:16515","str::split_at_mut":"1:13219:3603"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2734":{"id":"0:75:2734","crate_id":0,"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[178,4],"end":[178,69]},"visibility":"public","docs":"Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\nthis flag is ignored.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_8000","value":"32_768u32","is_literal":true}}},"1:13219:3603":{"id":"1:13219:3603","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13218:16512","str::split_at_mut_checked":"1:13221:16516"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:875:2327":{"id":"0:875:2327","crate_id":0,"name":"Partial","span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,15]},"visibility":"default","docs":"Zlib partial flush.\nCurrently treated as [`Sync`].","links":{"`Sync`":"1:3139:247"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:1:3758-0:495:3737":{"id":"b:1:3758-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[65,0],"end":[79,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:3235"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:907:2353":{"id":"0:907:2353","crate_id":0,"name":"StreamEnd","span":{"filename":"src/lib.rs","begin":[98,4],"end":[98,17]},"visibility":"default","docs":"Operation succeeded and end of deflate stream was found.\n\nX-ref [`TINFLStatus::Done`][inflate::TINFLStatus::Done] or\n[`TDEFLStatus::Done`][deflate::core::TDEFLStatus::Done] for `inflate` or `deflate`\nrespectively.","links":{"inflate::TINFLStatus::Done":"0:844:2564","deflate::core::TDEFLStatus::Done":"0:664:2564"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:923":{"id":"0:923","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,44],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:924:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:939:2371":{"id":"0:939:2371","crate_id":0,"name":"Buf","span":{"filename":"src/lib.rs","begin":[134,4],"end":[134,12]},"visibility":"default","docs":"Buffer-related error.\n\nSee the docs of [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`] for details\nof when it would trigger in the one you're using.","links":{"`inflate::stream::inflate()`":"0:531:2314","`deflate::stream::deflate()`":"0:325:2313"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-5","value":"-5"}}}},"0:991":{"id":"0:991","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,29],"end":[180,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:992:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:955:699":{"id":"0:955:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[109,29],"end":[109,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13323:16375":{"id":"1:13323:16375","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:21846"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2931-0:831:3209":{"id":"b:1:2931-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2931-0:111:2555":{"id":"b:1:2931-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2934:137","1:2935:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:654:2563":{"id":"b:1:3758-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:861":{"id":"0:861","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,40],"end":[24,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:936:2367":{"id":"0:936:2367","crate_id":0,"name":"Mem","span":{"filename":"src/lib.rs","begin":[128,4],"end":[128,12]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-4","value":"-4"}}}},"1:13281:17763":{"id":"1:13281:17763","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12885:6636","`DoubleEndedIterator`":"1:8263:129","prim@char":"1:52707:471","str::rmatch_indices":"1:13284:17764"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44045:5100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:2552":{"id":"0:313:2552","crate_id":0,"name":"create_comp_flags_from_zip_params","span":{"filename":"src/deflate/core.rs","begin":[2344,0],"end":[2374,1]},"visibility":"public","docs":"Create a set of compression flags using parameters used by zlib and other compressors.\nMainly intended for use with transition from c libraries as it deals with raw integers.\n\n# Parameters\n`level` determines compression level. Clamped to maximum of 10. Negative values result in\n`CompressionLevel::DefaultLevel`.\n`window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate\nstream.\n`strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.\n\n# Notes\nThis function may be removed or moved to the `miniz_oxide_c_api` in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["level",{"primitive":"i32"}],["window_bits",{"primitive":"i32"}],["strategy",{"primitive":"i32"}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:699":{"id":"0:699","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10314:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:700:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3758-0:903:2345":{"id":"b:1:3758-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:969:802":{"id":"0:969:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2916-0:499:3745":{"id":"b:1:2916-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:111:2555":{"id":"b:1:2920-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13231:15042":{"id":"1:13231:15042","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:2737":{"id":"0:76:2737","crate_id":0,"name":"TDEFL_RLE_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[180,4],"end":[180,51]},"visibility":"public","docs":"Only look for matches with a distance of 0.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0001_0000","value":"65_536u32","is_literal":true}}},"a:1:42098:4109-0:926:2341":{"id":"a:1:42098:4109-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3174:4183-0:680:2527":{"id":"a:1:3174:4183-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,29],"end":[85,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:920:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13318:16368":{"id":"1:13318:16368","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32237:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42098:4109-0:383:3272":{"id":"a:1:42098:4109-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2643-0:499:3745":{"id":"b:1:2643-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[84,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2968:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,40],"end":[109,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2698:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120:2551":{"id":"0:120:2551","crate_id":0,"name":"flags","span":{"filename":"src/deflate/core.rs","begin":[452,4],"end":[454,5]},"visibility":"public","docs":"Get the raw compressor flags.\n\n# Notes\nThis function may be deprecated or changed in the future to use more rust-style flags.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:626:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:648:699":{"id":"0:648:699","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524:3766":{"id":"0:524:3766","crate_id":0,"name":"new_boxed","span":{"filename":"src/inflate/stream.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Create a new state on the heap.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:304:2629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:509:3734":{"id":"a:1:42097:4110-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2926-0:499:3745":{"id":"b:1:2926-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32235:237-0:509:3734":{"id":"a:1:32235:237-0:509:3734","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3174:4183-0:903:2345":{"id":"a:1:3174:4183-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42098:4109-0:628:2562":{"id":"a:1:42098:4109-0:628:2562","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3174:4183-0:504:3748":{"id":"a:1:3174:4183-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:738-0:926:2341":{"id":"b:4:738-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42097:4110-0:961:2378":{"id":"a:1:42097:4110-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3758-0:680:2527":{"id":"b:1:3758-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2646-0:128:2872":{"id":"b:1:2646-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3139:247-0:871:2322":{"id":"a:1:3139:247-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:917:475":{"id":"0:917:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[85,22],"end":[85,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:599:2570":{"id":"b:1:2926-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:981:2392":{"id":"b:1:3758-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13206:336":{"id":"1:13206:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13207:16494","`u8`":"1:52726:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13278:17762":{"id":"1:13278:17762","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12885:6636","`DoubleEndedIterator`":"1:8263:129","prim@char":"1:52707:471","str::matches":"1:13275:3857"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44117:5103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2916-0:128:2872":{"id":"b:1:2916-0:128:2872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2916-0:680:2527":{"id":"b:1:2916-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32294:3983-0:981:2392":{"id":"a:1:32294:3983-0:981:2392","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,22],"end":[147,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:972:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:954":{"id":"0:954","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,29],"end":[109,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:955:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32235:237-0:926:2341":{"id":"a:1:32235:237-0:926:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32235:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:410:60":{"id":"0:410:60","crate_id":0,"name":"default","span":{"filename":"src/inflate/core.rs","begin":[242,4],"end":[266,5]},"visibility":"default","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32294:3983-0:499:3745":{"id":"a:1:32294:3983-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:327:2542":{"id":"0:327:2542","crate_id":0,"name":"compress_to_vec","span":{"filename":"src/deflate/mod.rs","begin":[110,0],"end":[112,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["level",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2916-0:111:2555":{"id":"b:1:2916-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:701":{"id":"0:701","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,16],"end":[15,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:962:2380":{"id":"0:962:2380","crate_id":0,"name":"Zlib","span":{"filename":"src/lib.rs","begin":[151,4],"end":[151,8]},"visibility":"default","docs":"Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"1:13329:17777":{"id":"1:13329:17777","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4949:17777"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44212:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3174:4183-0:111:2555":{"id":"a:1:3174:4183-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:5866-0:866:3238":{"id":"b:4:5866-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10319:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5868:1781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42097:4110-0:111:2555":{"id":"a:1:42097:4110-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:945:200":{"id":"0:945:200","crate_id":0,"name":"Param","span":{"filename":"src/lib.rs","begin":[143,4],"end":[143,19]},"visibility":"default","docs":"Bad parameters.\n\nThis can be returned from [`deflate::stream::deflate()`] in the case of bad parameters.  See\n[`TDEFLStatus::BadParam`][deflate::core::TDEFLStatus::BadParam].","links":{"deflate::core::TDEFLStatus::BadParam":"0:655:2771","`deflate::stream::deflate()`":"0:325:2313"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-10_000","value":"-10000"}}}},"0:571:2388":{"id":"0:571:2388","crate_id":0,"name":"to_window_bits","span":{"filename":"src/lib.rs","begin":[168,4],"end":[173,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13205:17755":{"id":"1:13205:17755","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:738-0:903:2345":{"id":"b:4:738-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[242,0],"end":[252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:1178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42098:4109-0:903:2345":{"id":"a:1:42098:4109-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13269:16526":{"id":"1:13269:16526","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:1178":{"id":"0:405:1178","crate_id":0,"name":"new","span":{"filename":"src/inflate/core.rs","begin":[206,4],"end":[208,5]},"visibility":"public","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:920:699":{"id":"0:920:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[85,29],"end":[85,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:2921":{"id":"1:13225:2921","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43881:5017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5632:18485":{"id":"4:5632:18485","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32294:3983-0:599:2570":{"id":"a:1:32294:3983-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2916-0:654:2563":{"id":"b:1:2916-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2916-0:599:2570":{"id":"b:1:2916-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:122:2624":{"id":"0:122:2624","crate_id":0,"name":"reset","span":{"filename":"src/deflate/core.rs","begin":[468,4],"end":[475,5]},"visibility":"public","docs":"Reset the state of the compressor, keeping the same parameters.\n\nThis avoids re-allocating data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:599:2570":{"id":"a:1:3139:247-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42097:4110-0:599:2570":{"id":"a:1:42097:4110-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3139:247-0:111:2555":{"id":"a:1:3139:247-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3758-0:383:3272":{"id":"b:1:3758-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:738-0:831:3209":{"id":"b:4:738-0:831:3209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:693:2538":{"id":"0:693:2538","crate_id":0,"name":"DefaultLevel","span":{"filename":"src/deflate/mod.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Default compromise between speed and compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"0:77:2740":{"id":"0:77:2740","crate_id":0,"name":"TDEFL_FILTER_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[182,4],"end":[182,54]},"visibility":"public","docs":"Only use matches that are at least 6 bytes long.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0002_0000","value":"131_072u32","is_literal":true}}},"b:1:2643-0:871:2322":{"id":"b:1:2643-0:871:2322","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2648:12366":{"id":"1:2648:12366","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:17773":{"id":"1:13310:17773","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52707:471","self::pattern":"1:12885:6636"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13226:12447":{"id":"1:13226:12447","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13227:12459"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44169:5106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2646-0:654:2563":{"id":"b:1:2646-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13204:16465":{"id":"1:13204:16465","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12432:6644"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:3190":{"id":"0:549:3190","crate_id":0,"name":"decompress_to_vec_zlib","span":{"filename":"src/inflate/mod.rs","begin":[138,0],"end":[144,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"`Vec`":"4:7059:264","DecompressError":"0:866:3238","`Result`":"1:42136:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42097:4110-0:499:3745":{"id":"a:1:42097:4110-0:499:3745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42097:4110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2693:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:674:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:628:2562":{"id":"0:628:2562","crate_id":0,"name":"TDEFLFlush","span":{"filename":"src/deflate/core.rs","begin":[211,0],"end":[228,1]},"visibility":"public","docs":"A list of deflate flush types.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:629:191","0:632:247","0:635:2333","0:638:2335"],"impls":["0:82","a:1:3139:247-0:628:2562","a:1:42098:4109-0:628:2562","a:1:32294:3983-0:628:2562","a:1:42097:4110-0:628:2562","a:1:3174:4183-0:628:2562","a:1:32235:237-0:628:2562","b:1:2646-0:628:2562","b:1:2643-0:628:2562","b:1:2920-0:628:2562","b:1:2916-0:628:2562","b:1:2926-0:628:2562","b:1:3758-0:628:2562","b:1:2931-0:628:2562","b:4:738-0:628:2562","0:644","0:651","0:643","0:646","0:647","0:80","0:649","0:641"]}}},"0:958":{"id":"0:958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,44],"end":[109,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10530:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:959:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:984:2398":{"id":"0:984:2398","crate_id":0,"name":"status","span":{"filename":"src/lib.rs","begin":[187,4],"end":[187,24]},"visibility":"public","docs":"The return status of the call.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"MZResult","id":"0:572:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[230,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZFlush","id":"0:871:2322","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5:2313":{"id":"0:5:2313","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/mod.rs","begin":[1,0],"end":[226,1]},"visibility":"public","docs":"This module contains functionality for compression.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:39:563","0:314:2523","0:680:2527","0:327:2542","0:328:2548"],"is_stripped":false}}},"0:574:2399":{"id":"0:574:2399","crate_id":0,"name":"error","span":{"filename":"src/lib.rs","begin":[192,4],"end":[198,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[50,0],"end":[56,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:493:3732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:508:2624"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:654:2563":{"id":"0:654:2563","crate_id":0,"name":"TDEFLStatus","span":{"filename":"src/deflate/core.rs","begin":[257,0],"end":[276,1]},"visibility":"public","docs":"Return status of compression.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:655:2771","0:658:2774","0:661:2566","0:664:2564"],"impls":["a:1:3139:247-0:654:2563","a:1:42098:4109-0:654:2563","a:1:32294:3983-0:654:2563","a:1:42097:4110-0:654:2563","a:1:3174:4183-0:654:2563","a:1:32235:237-0:654:2563","b:1:2646-0:654:2563","b:1:2643-0:654:2563","b:1:2920-0:654:2563","b:1:2916-0:654:2563","b:1:2926-0:654:2563","b:1:3758-0:654:2563","b:1:2931-0:654:2563","b:4:738-0:654:2563","0:670","0:675","0:669","0:672","0:677","0:667","0:673"]}}},"a:1:3174:4183-0:495:3737":{"id":"a:1:3174:4183-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3174:4183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:504:3748":{"id":"0:504:3748","crate_id":0,"name":"FullReset","span":{"filename":"src/inflate/stream.rs","begin":[48,0],"end":[48,37]},"visibility":"public","docs":"Full reset of the state, including zeroing memory.\n\nRequires to provide new data format.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:506:1973"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3139:247-0:504:3748","a:1:42098:4109-0:504:3748","a:1:32294:3983-0:504:3748","a:1:42097:4110-0:504:3748","a:1:3174:4183-0:504:3748","a:1:32235:237-0:504:3748","b:1:2646-0:504:3748","b:1:2643-0:504:3748","b:1:2920-0:504:3748","b:1:2916-0:504:3748","b:1:2926-0:504:3748","b:1:3758-0:504:3748","b:1:2931-0:504:3748","0:507"]}}},"a:1:32294:3983-0:654:2563":{"id":"a:1:32294:3983-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32294:3983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:854:802":{"id":"0:854:802","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10288:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10269:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2916-0:903:2345":{"id":"b:1:2916-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StreamResult","id":"0:981:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZResult","id":"0:572:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:576:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13320:16371":{"id":"1:13320:16371","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,16],"end":[210,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3134:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83:1178":{"id":"0:83:1178","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[243,4],"end":[251,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"core::result::Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"MZError","id":"0:926:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:972:475":{"id":"0:972:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[147,22],"end":[147,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13325:16377":{"id":"1:13325:16377","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:21846"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:654:2563":{"id":"b:1:2926-0:654:2563","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13198:17752":{"id":"1:13198:17752","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:2845":{"id":"0:407:2845","crate_id":0,"name":"adler32","span":{"filename":"src/inflate/core.rs","begin":[220,4],"end":[226,5]},"visibility":"public","docs":"Returns the adler32 checksum of the currently decompressed data.\nNote: Will return Some(1) if decompressing zlib but ignoring adler32.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:867:2398":{"id":"0:867:2398","crate_id":0,"name":"status","span":{"filename":"src/inflate/mod.rs","begin":[86,4],"end":[86,27]},"visibility":"public","docs":"Decompressor status on failure. See [TINFLStatus] for details.","links":{"TINFLStatus":"0:831:3209"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TINFLStatus","id":"0:831:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2926-0:866:3238":{"id":"b:1:2926-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:866:3238":{"id":"b:1:2920-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2935:1806":{"id":"1:2935:1806","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:383:3272":{"id":"b:1:2926-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2900:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2896:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2929:137","1:2930:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13224:5118":{"id":"1:13224:5118","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:52707:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43871:5096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3139:247-0:495:3737":{"id":"a:1:3139:247-0:495:3737","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3139:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3737","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2643-0:504:3748":{"id":"b:1:2643-0:504:3748","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2637:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3748","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2645:3814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42098:4109-0:680:2527":{"id":"a:1:42098:4109-0:680:2527","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42098:4109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:878:247":{"id":"0:878:247","crate_id":0,"name":"Sync","span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"Finish compressing the currently buffered data, and output an empty raw block.\nHas no use in decompression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:2916-0:383:3272":{"id":"b:1:2916-0:383:3272","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2890:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2919:2553"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2646-0:111:2555":{"id":"b:1:2646-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2920-0:961:2378":{"id":"b:1:2920-0:961:2378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2893:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2922:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:525:3738":{"id":"0:525:3738","crate_id":0,"name":"decompressor","span":{"filename":"src/inflate/stream.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Access the innner decompressor.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3758-0:866:3238":{"id":"b:1:3758-0:866:3238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:3238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2646-0:903:2345":{"id":"b:1:2646-0:903:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2640:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2648:12366"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:738-0:599:2570":{"id":"b:4:738-0:599:2570","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2659:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2570","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:740:4654","4:741:12371","4:742:12372"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3758-0:111:2555":{"id":"b:1:3758-0:111:2555","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32236:3982","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3756:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3760:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"4:7132:16339":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:45976:5166":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:4162:4261":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:22505:15005":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"0:696:2540":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultCompression"],"kind":"variant"},"4:4252:6515":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:12662:4927":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"0:128:2872":{"crate_id":0,"path":["miniz_oxide","deflate","core","CallbackFunc"],"kind":"struct"},"0:884:2335":{"crate_id":0,"path":["miniz_oxide","MZFlush","Finish"],"kind":"variant"},"1:6007:6515":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:22591:12545":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"0:871:2322":{"crate_id":0,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:52727:1833":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:44298:5109":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:42142:136":{"crate_id":1,"path":["miniz_oxide","MZResult","Err"],"kind":"variant"},"1:10331:4271":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:219:3953":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:42303:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:5216:12524":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:22279:12545":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:6019:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46139:5183":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2896:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:45815:5148":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:46524:5216":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3376:3979":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:23078:4979":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:6198:4877":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:21583:4197":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:52706:1174":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:10333:4272":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:21724:11713":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11289:4501":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40818:5046":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"0:310:3135":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress_to_output"],"kind":"function"},"1:4733:3970":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"0:550:3263":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_with_limit"],"kind":"function"},"1:46553:5217":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2890:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:41943:6587":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:3629:3940":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:46784:5255":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9787:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:41202:4895":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:41965:4907":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:45997:5167":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:3511:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:42617:4916":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2060:6465":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:3318:4695":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:44687:5137":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:13609:16177":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:6452:1927":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"4:7376:3912":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:41825:5652":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:7710:14189":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:44812:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:47201:5272":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12004:4502":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:47059:5262":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:43276:5087":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"0:930:2363":{"crate_id":0,"path":["miniz_oxide","MZError","Stream"],"kind":"variant"},"1:21742:4948":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:5230:4707":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6707:4879":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:46236:5188":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:40695:5037":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:12885:6636":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:2887:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:44807:5663":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:10643:1687":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:22878:4958":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:3042:5580":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9461:4913":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:3805:4676":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:44187:4928":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:22121:12545":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:6907:5718":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:2149:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:13547:5043":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:21622:12401":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:2249:5712":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:41231:5053":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8225:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:939:11982":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8371:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:21639:12399":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"0:635:2333":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Full"],"kind":"variant"},"0:961:2378":{"crate_id":0,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:7540:3913":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"0:0:2402":{"crate_id":0,"path":["miniz_oxide"],"kind":"module"},"1:41983:4910":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44344:5120":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:47163:5270":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:52707:471":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"4:5729:3922":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"0:832:3217":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","FailedCannotMakeProgress"],"kind":"variant"},"1:40714:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40474:5019":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:39681:4474":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"0:376:3269":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF"],"kind":"constant"},"1:40742:5040":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:45862:5155":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:44837:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:40795:4885":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:42087:4107":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4842:3974":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:43720:4489":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"3:0:3880":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:47097:5264":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:3040:18847":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3388:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:10965:12545":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"0:572:2390":{"crate_id":0,"path":["miniz_oxide","MZResult"],"kind":"type_alias"},"4:3674:4261":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:22479:12545":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10755:16078":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:34394:6499":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3144:3905":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3132:3936":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:5195:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:45909:5158":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"0:336:563":{"crate_id":0,"path":["miniz_oxide","inflate","core"],"kind":"module"},"1:3134:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:22903:4960":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9974:6102":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:749:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:11251:4484":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"0:638:2335":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Finish"],"kind":"variant"},"1:40363:12641":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46980:5259":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:46686:5222":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:40637:5032":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:52730:1827":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:22718:4949":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2735:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:40541:5023":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:4367:4865":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:42715:4268":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:43237:5079":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:21730:11716":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"0:664:2564":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Done"],"kind":"variant"},"1:44313:5116":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"0:612:2758":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Fixed"],"kind":"variant"},"1:44522:4932":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:6612:16316":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:32237:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:289:16316":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:43793:4491":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:44419:4931":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:40808:5045":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:39566:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:21593:12405":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:13524:4939":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"0:309:2561":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress"],"kind":"function"},"1:40401:5014":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:30363:6351":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"0:841:3223":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Failed"],"kind":"variant"},"1:43284:5088":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:46314:5192":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:42994:12651":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:43895:4483":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:42031:3518":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:40435:6537":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:839:101":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:2539:5577":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:39505:3942":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:44159:5105":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:3885:3915":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:44178:5107":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:52723:897":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:41743:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:38256:6503":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2729:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"0:548:2571":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec"],"kind":"function"},"1:46058:5171":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:3050:16184":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:21620:12410":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:7743:3916":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:23199:4990":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:44902:5145":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"4:7465:4714":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:40579:5017":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:3614:14744":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"0:79:2747":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_RAW_BLOCKS"],"kind":"constant"},"1:33462:6490":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10327:4270":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:52708:1873":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:44645:5662":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:966:2385":{"crate_id":0,"path":["miniz_oxide","DataFormat","Raw"],"kind":"variant"},"4:6072:12007":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:40316:4864":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:5296:977":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:11445:4482":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:6693:3919":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:42139:193":{"crate_id":1,"path":["miniz_oxide","MZResult","Ok"],"kind":"variant"},"0:375:3298":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_HAS_MORE_INPUT"],"kind":"constant"},"0:872:191":{"crate_id":0,"path":["miniz_oxide","MZFlush","None"],"kind":"variant"},"4:7668:4725":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:38201:6502":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:40617:5031":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40664:5034":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:40352:5009":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:30650:12652":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:40765:4878":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"0:629:191":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","None"],"kind":"variant"},"0:74:2730":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_GREEDY_PARSING_FLAG"],"kind":"constant"},"0:831:3209":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:78:1911":{"crate_id":1,"path":["core","usize"],"kind":"module"},"1:52733:1419":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"0:603:2753":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Filtered"],"kind":"variant"},"1:43710:4479":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:41797:6586":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:47216:5273":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:34221:6497":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:23100:4981":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:32326:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"0:553:3286":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_slice_iter_to_slice"],"kind":"function"},"1:10975:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3020:4732":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:8683:4262":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:22638:11794":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:6902:5719":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:843:4656":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:22889:12612":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:3258:4689":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"0:39:563":{"crate_id":0,"path":["miniz_oxide","deflate","core"],"kind":"module"},"1:44641:5737":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3200:6487":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43245:4401":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:44481:5125":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"0:551:3265":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib_with_limit"],"kind":"function"},"1:46029:5169":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"0:609:2756":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","RLE"],"kind":"variant"},"1:22507:6454":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:746:6391":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:21605:12405":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:42578:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"0:383:3272":{"crate_id":0,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:22996:4974":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:1204:16215":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8689:6577":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:7595:6563":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:42022:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"0:459:3274":{"crate_id":0,"path":["miniz_oxide","inflate","core","decompress"],"kind":"function"},"4:3297:18871":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:1559:4672":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12646:4926":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:7385:3919":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:304:2629":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:52722:891":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:44939:3951":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:32236:3982":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:4:1256":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:7933:4894":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:5470:11999":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"0:835:2771":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","BadParam"],"kind":"variant"},"1:22633:11796":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:40428:5016":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:30639:4277":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:44829:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:46367:5195":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:42056:4106":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:40867:5048":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:1549:4671":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:44194:5016":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"0:933:2366":{"crate_id":0,"path":["miniz_oxide","MZError","Data"],"kind":"variant"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:46204:5186":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:36270:6500":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:13661:4941":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:12416:4473":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:41931:5068":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3185:6484":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"0:330:2314":{"crate_id":0,"path":["miniz_oxide","inflate"],"kind":"module"},"0:325:2313":{"crate_id":0,"path":["miniz_oxide","deflate","stream","deflate"],"kind":"function"},"0:850:3234":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","HasMoreOutput"],"kind":"variant"},"0:78:2744":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_STATIC_BLOCKS"],"kind":"constant"},"1:10787:15220":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:40536:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:43701:4478":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:43069:4278":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44609:5729":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:46101:5181":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:44203:4864":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:22605:11795":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:4433:6522":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:3284:4690":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:3661:3518":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:23089:4980":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:46906:5257":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:40508:5020":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:22839:5720":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"0:881:2333":{"crate_id":0,"path":["miniz_oxide","MZFlush","Full"],"kind":"variant"},"1:40992:5051":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:44491:5129":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:30997:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:42539:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:31024:4197":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4654:3961":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44456:5122":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1958:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:40827:4887":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:7645:6540":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:7540:2999":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"0:378:3297":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_IGNORE_ADLER32"],"kind":"constant"},"1:42342:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:52717:735":{"crate_id":1,"path":["core","f16"],"kind":"primitive"},"4:5077:6515":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9782:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:33596:6492":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7646:6541":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:47254:5275":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:22855:4953":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:44621:5732":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:5:1927":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:40756:5043":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:52728:1839":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:41258:4900":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11144:4261":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"0:927:2358":{"crate_id":0,"path":["miniz_oxide","MZError","ErrNo"],"kind":"variant"},"1:3574:4475":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:7610:4720":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:4117:16316":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"0:328:2548":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec_zlib"],"kind":"function"},"1:39641:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:43999:4485":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:22148:4476":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:32766:6486":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"0:838:3221":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Adler32Mismatch"],"kind":"variant"},"1:4780:3971":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:33875:6495":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"0:866:3238":{"crate_id":0,"path":["miniz_oxide","inflate","DecompressError"],"kind":"struct"},"1:11324:4487":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:2322:5717":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:44637:5736":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:32219:3970":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:43871:5096":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:2210:16356":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"0:904:193":{"crate_id":0,"path":["miniz_oxide","MZStatus","Ok"],"kind":"variant"},"1:42192:3919":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:43854:5095":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:7393:4711":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:32159:3957":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:44327:5119":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:46043:5170":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:52734:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:10270:4266":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:10288:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:22455:11802":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:956:3518":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"0:681:2529":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","NoCompression"],"kind":"variant"},"1:4290:6515":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:10323:4268":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:21850:4948":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:47152:5269":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:23144:4985":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:3215:3938":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:40322:5008":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10530:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:39904:6472":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"0:632:247":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Sync"],"kind":"variant"},"1:42736:4270":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11930:4498":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:12906:6642":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12432:6644":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:40589:6549":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"0:684:2531":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestSpeed"],"kind":"variant"},"4:1369:4667":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:4501:3976":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:1995:1358":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:6968:3924":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:40774:5044":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:43841:5092":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:44663:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:47293:5276":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:43266:3398":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:42955:5653":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:7993:3960":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3589:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"0:606:2589":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","HuffmanOnly"],"kind":"variant"},"0:509:3734":{"crate_id":0,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2863:12545":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:42201:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:39549:3909":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:52712:1687":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"4:5466:11998":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"4:4436:265":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:3820:4678":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:6176:6515":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"0:71:2631":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags"],"kind":"module"},"1:42136:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:7485:3919":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:7634:4723":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:46657:5221":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:40673:5035":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:40378:5012":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:40724:4871":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"0:687:2533":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestCompression"],"kind":"variant"},"5:0:2403":{"crate_id":5,"path":["adler"],"kind":"module"},"4:7658:4724":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:13814:4946":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11169:4483":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:52724:903":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:3347:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:44815:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4414:3934":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"0:910:2355":{"crate_id":0,"path":["miniz_oxide","MZStatus","NeedDict"],"kind":"variant"},"1:21848:11714":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:43865:4921":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8177:6579":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8727:14925":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:46861:5256":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:52711:335":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:12845:6390":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:45830:5151":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:1493:4261":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4650:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:10314:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:1755:4389":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:38146:6501":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2074:5585":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8181:6578":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:42097:4110":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10689:6618":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:36:5576":{"crate_id":5,"path":["adler","algo","U32X4"],"kind":"struct"},"0:314:2523":{"crate_id":0,"path":["miniz_oxide","deflate","stream"],"kind":"module"},"1:3212:3937":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"0:600:123":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Default"],"kind":"variant"},"0:495:3737":{"crate_id":0,"path":["miniz_oxide","inflate","stream","MinReset"],"kind":"struct"},"1:2640:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:41225:4897":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:44928:5146":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:32294:3983":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:7622:4722":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:7582:4717":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12623:4925":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:44629:5734":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"0:981:2392":{"crate_id":0,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:1324:11985":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"0:373:3256":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags"],"kind":"module"},"1:3996:3919":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:4515:16319":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"0:72:2723":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_WRITE_ZLIB_HEADER"],"kind":"constant"},"1:13926:3911":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:1441:99":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:43780:4496":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8214:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3584:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:42264:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"0:377:3387":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_COMPUTE_ADLER32"],"kind":"constant"},"1:4811:3973":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:7727:3915":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:21637:12409":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:13507:4936":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:0:309":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:52729:1845":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"0:658:2774":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","PutBufFailed"],"kind":"variant"},"1:43822:4493":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3417:3910":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3365:3944":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:22927:12565":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:46612:5220":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:2900:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:33529:6494":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:32201:4992":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:3270:6498":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:32226:4995":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:22281:11715":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:42381:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43881:5017":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:42459:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:6433:12014":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:44891:12605":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:42039:4261":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:39621:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3181:4185":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:6566:3917":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:1843:3915":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:7405:3917":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"0:847:3232":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","NeedsMoreInput"],"kind":"variant"},"4:1184:16298":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:46072:5172":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:22560:6454":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:10319:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:40567:5024":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:41250:4898":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:12959:6651":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"0:347:3329":{"crate_id":0,"path":["miniz_oxide","inflate","core","TINFL_LZ_DICT_SIZE"],"kind":"constant"},"1:44277:6657":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:3292:4694":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:1077:16316":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8316:3980":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"0:926:2341":{"crate_id":0,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:4282:6515":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:23041:12545":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:30624:4433":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:3046:16185":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:1540:4670":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4789:3972":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:4391:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"0:374:3257":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_PARSE_ZLIB_HEADER"],"kind":"constant"},"4:5934:3917":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:43802:4494":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:44698:6668":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42176:3518":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"0:942:2372":{"crate_id":0,"path":["miniz_oxide","MZError","Version"],"kind":"variant"},"4:5422:16316":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"0:111:2555":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:23651:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:7457:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:734:250":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3360:3943":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:43812:4492":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:43484:5728":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3666:3945":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:44212:5015":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:22493:11803":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:12400:4471":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"0:599:2570":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"0:655:2771":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","BadParam"],"kind":"variant"},"0:844:2564":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Done"],"kind":"variant"},"1:10329:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:41765:4904":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:46014:5168":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:44:3804":{"crate_id":5,"path":["adler","Adler32"],"kind":"struct"},"1:2693:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12586:4922":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:23122:4983":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:45894:5157":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:7435:18869":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:23009:4975":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12900:6643":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:44017:4481":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:6896:4886":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:46183:5185":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8680:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"0:690:2535":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","UberCompression"],"kind":"variant"},"0:887:2337":{"crate_id":0,"path":["miniz_oxide","MZFlush","Block"],"kind":"variant"},"1:45947:5164":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:33190:6488":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:40644:4495":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:6934:3922":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:44392:5121":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:43023:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:42119:4172":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:39661:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:2684:482":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"0:475:2523":{"crate_id":0,"path":["miniz_oxide","inflate","stream"],"kind":"module"},"0:964:2383":{"crate_id":0,"path":["miniz_oxide","DataFormat","ZLibIgnoreChecksum"],"kind":"variant"},"1:41002:4891":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9350:4108":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:33663:6491":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2539:6455":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:1509:3919":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"0:903:2345":{"crate_id":0,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:22947:12574":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:4322:3518":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:32212:4994":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:41909:12642":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:21838:12545":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:52718:738":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:46122:5182":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:10269:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:1531:4669":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:43913:4487":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:6051:4707":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:42184:4261":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:3329:3941":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:9969:14887":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:43010:12653":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:41216:5052":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"0:493:3732":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ResetPolicy"],"kind":"trait"},"1:47117:5266":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:45930:5163":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:1590:4674":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:52725:884":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:46412:5212":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:44169:5106":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:38311:6504":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:23133:4984":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:7415:4712":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:32205:4993":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:4532:3977":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:44617:5731":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:32324:3935":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:47126:5267":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3863:3917":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:52713:1721":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:52710:1314":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:40420:4864":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:3251:3518":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:13791:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2083:4729":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2537:6454":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:46707:5223":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2062:6466":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:40704:5038":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:7449:3919":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:52720:733":{"crate_id":1,"path":["core","f128"],"kind":"primitive"},"1:46253:5189":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:44099:5102":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:43741:4497":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11120:3518":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:42047:3919":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"0:661:2566":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Okay"],"kind":"variant"},"1:42420:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:39731:5007":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:45962:5165":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:6084:4875":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3385:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:22417:11801":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:40786:4884":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:46574:5218":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:44633:5735":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:42003:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:22962:12570":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:52726:1851":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"4:7493:3919":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2523:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:23020:6404":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:1581:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:38890:6505":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:40:3914":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:1478:3518":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2968:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43048:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:2864:3958":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:39469:4263":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:47038:5261":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:43031:4277":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:47137:5268":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10325:4269":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:46268:5190":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:45845:5152":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:7566:4705":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2979:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:1355:4666":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:883:11981":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:40523:5022":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3595:6506":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:531:2314":{"crate_id":0,"path":["miniz_oxide","inflate","stream","inflate"],"kind":"function"},"1:21669:12545":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:52719:754":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:23111:4982":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:11212:4500":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:680:2527":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"4:1340:4663":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:52714:1811":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"0:499:3745":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ZeroReset"],"kind":"struct"},"1:3220:3939":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:11403:4485":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:7059:264":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:52721:909":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:5911:6515":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:21722:12545":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:12891:4913":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8263:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1882:6515":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:7107:16321":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:46951:5258":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:47009:5260":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:41209:4896":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:4379:4866":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:10573:4399":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:3648:182":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:75:2734":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_NONDETERMINISTIC_PARSING_FLAG"],"kind":"constant"},"1:40733:4874":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:52705:417":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:47106:5265":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:4938:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:22373:11800":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:43767:4495":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:40857:4889":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10772:16080":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"0:875:2327":{"crate_id":0,"path":["miniz_oxide","MZFlush","Partial"],"kind":"variant"},"4:4451:16319":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"0:907:2353":{"crate_id":0,"path":["miniz_oxide","MZStatus","StreamEnd"],"kind":"variant"},"1:43469:5089":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"0:939:2371":{"crate_id":0,"path":["miniz_oxide","MZError","Buf"],"kind":"variant"},"1:22546:11804":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:5864:251":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:4723:3969":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:21671:11717":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:43945:5098":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:22771:4951":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:2102:4676":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"0:936:2367":{"crate_id":0,"path":["miniz_oxide","MZError","Mem"],"kind":"variant"},"1:42965:4277":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:1168:16209":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"0:313:2552":{"crate_id":0,"path":["miniz_oxide","deflate","core","create_comp_flags_from_zip_params"],"kind":"function"},"1:22824:4952":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:46154:5184":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:44878:5142":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:680:4652":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:33730:6493":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43488:4509":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:7425:4713":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:12700:4500":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:1739:16316":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:41240:5055":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:44951:5147":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"0:76:2737":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_RLE_MATCHES"],"kind":"constant"},"4:2220:4680":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3174:4183":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:39718:5005":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:21651:12398":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:3601:6508":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"1:46221:5187":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:46462:5214":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1965:4431":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:43254:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:39581:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:43641:5090":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:40391:5013":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:13834:4947":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:47080:5263":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:3039:4654":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4580:3327":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:1570:4673":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:23166:4987":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"4:7645:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:3139:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:46441:5213":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:42729:4269":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:23188:4989":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:44613:5730":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3382:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:40686:5036":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:40607:5025":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:30618:3907":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:6414:12012":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:46479:5215":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:10114:4285":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:40515:5021":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:39711:5004":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:23177:4988":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:45877:5156":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:15:2947":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:11431:4486":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:40552:6563":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:32295:4186":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:6775:16316":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:3263:18870":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:22911:4961":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:47231:5274":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:52732:1911":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:3190:6489":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:42498:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"0:327:2542":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec"],"kind":"function"},"1:10578:4400":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:743:118":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"0:962:2380":{"crate_id":0,"path":["miniz_oxide","DataFormat","Zlib"],"kind":"variant"},"4:6958:3923":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:40412:5015":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:42722:4267":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"0:945:200":{"crate_id":0,"path":["miniz_oxide","MZError","Param"],"kind":"variant"},"1:8234:3981":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:32978:6485":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2698:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:46591:5219":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:39553:5000":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:32235:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:4087:3917":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:34048:6496":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:42982:5661":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:3756:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:23155:4986":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:42128:3946":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:43229:4402":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:26051:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:10538:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:22126:11719":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:11963:4499":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:13121:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"0:693:2538":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultLevel"],"kind":"variant"},"0:77:2740":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FILTER_MATCHES"],"kind":"constant"},"4:3754:16316":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4659:3962":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:2116:4678":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:11362:4488":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"0:549:3190":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib"],"kind":"function"},"1:46352:5194":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:46285:5191":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:42098:4109":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"0:628:2562":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:3222:100":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:46335:5193":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"0:5:2313":{"crate_id":0,"path":["miniz_oxide","deflate"],"kind":"module"},"0:654:2563":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"0:504:3748":{"crate_id":0,"path":["miniz_oxide","inflate","stream","FullReset"],"kind":"struct"},"1:44063:5101":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:44819:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:43692:4480":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:42225:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44504:5135":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5022:6531":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:41016:4892":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:30586:3906":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:2637:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:7551:11980":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11417:4481":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:44117:5103":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1781:2630":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:22989:5725":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:10321:4267":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:44045:5100":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:47178:5271":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7761:6567":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:2302:19320":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:2127:4679":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:39603:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:5254:4869":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:44625:5733":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:52731:966":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:12911:6641":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2884:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:22160:12407":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:44870:5140":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:4481:6515":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:44149:5104":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"0:878:247":{"crate_id":0,"path":["miniz_oxide","MZFlush","Sync"],"kind":"variant"},"1:13636:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:43730:4490":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2270:3948":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2659:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:41781:4906":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:43963:5099":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:44912:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:2770:5582":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:2893:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:3410:3915":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:44470:6658":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"0:73:2726":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_COMPUTE_ADLER32"],"kind":"constant"},"1:40843:5047":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"}},"external_crates":{"5":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}