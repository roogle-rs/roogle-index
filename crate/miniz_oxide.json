{"root":"0:0:1844","crate_version":"0.7.1","includes_private":false,"index":{"0:567:996":{"id":"0:567:996","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[67,4],"end":[75,5]},"visibility":"public","docs":"Create an MZFlush value from an integer value.\n\nReturns `MZError::Param` on invalid values.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:655:2001":{"id":"b:1:2263-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8621:3509-0:909:1787":{"id":"a:1:8621:3509-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:680-0:933:1783":{"id":"b:4:680-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12431:338":{"id":"1:12431:338","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:52105:1605"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:618:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:508:3166":{"id":"b:1:2566-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:602:2192":{"id":"0:602:2192","crate_id":0,"name":"Filtered","span":{"filename":"src/deflate/core.rs","begin":[199,4],"end":[199,16]},"visibility":"default","docs":"Only use matches that are at least 5 bytes long.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:647":{"id":"0:647","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:648:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8622:3508-0:508:3166":{"id":"a:1:8622:3508-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:550:2706":{"id":"0:550:2706","crate_id":0,"name":"decompress_to_vec_zlib_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[173,0],"end":[178,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"DecompressError":"0:871:2679","`TINFLStatus::HasMoreOutput`":"0:854:2675","`Vec`":"4:6912:266","`Result`":"1:41737:229"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:569:1828":{"id":"0:569:1828","crate_id":0,"name":"from_window_bits","span":{"filename":"src/lib.rs","begin":[158,4],"end":[164,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["window_bits",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:3378-0:508:3166":{"id":"a:1:2832:3378-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:864:657":{"id":"0:864:657","crate_id":0,"name":"eq","span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:988:777":{"id":"0:988:777","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[145,44],"end":[145,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5535:16612":{"id":"4:5535:16612","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12542:15927"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12461:3641":{"id":"1:12461:3641","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41594:194","prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:842:2662":{"id":"0:842:2662","crate_id":0,"name":"Adler32Mismatch","span":{"filename":"src/inflate/mod.rs","begin":[41,4],"end":[41,57]},"visibility":"default","docs":"The decompression went fine, but the adler32 checksum did not match the one\nprovided in the header.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-2"}}}},"1:3413:1596":{"id":"1:3413:1596","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39375:4572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:503:3180":{"id":"b:1:2581-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12542:15927":{"id":"1:12542:15927","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:608:2195":{"id":"0:608:2195","crate_id":0,"name":"RLE","span":{"filename":"src/deflate/core.rs","begin":[203,4],"end":[203,11]},"visibility":"default","docs":"Only look for matches with a distance of 1, i.e do run-length encoding only.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[65,0],"end":[79,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:2676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2263-0:871:2679":{"id":"b:1:2263-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:635:1775":{"id":"0:635:1775","crate_id":0,"name":"Full","span":{"filename":"src/deflate/core.rs","begin":[222,4],"end":[222,12]},"visibility":"default","docs":"Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not\ndepend on previous data.","links":{"Self::Sync":"0:632:250"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"1:12484:15904":{"id":"1:12484:15904","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983","str::rsplitn":"1:12487:15905"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43658:3889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2165":{"id":"0:73:2165","crate_id":0,"name":"TDEFL_COMPUTE_ADLER32","span":{"filename":"src/deflate/core.rs","begin":[172,4],"end":[172,55]},"visibility":"public","docs":"Should we compute the adler32 checksum.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_2000","value":"8_192u32","is_literal":true}}},"0:632:250":{"id":"0:632:250","crate_id":0,"name":"Sync","span":{"filename":"src/deflate/core.rs","begin":[218,4],"end":[218,12]},"visibility":"default","docs":"Try to flush all the current data and output an empty raw block.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:3411-0:909:1787":{"id":"b:1:3411-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:628:2000":{"id":"b:1:2581-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:404:996":{"id":"0:404:996","crate_id":0,"name":"new","span":{"filename":"src/inflate/core.rs","begin":[200,4],"end":[202,5]},"visibility":"public","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2262:3246":{"id":"1:2262:3246","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:120":{"id":"0:599:120","crate_id":0,"name":"Default","span":{"filename":"src/deflate/core.rs","begin":[197,4],"end":[197,15]},"visibility":"default","docs":"Don't use any of the special strategies.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:889:1777":{"id":"0:889:1777","crate_id":0,"name":"Finish","span":{"filename":"src/lib.rs","begin":[58,4],"end":[58,14]},"visibility":"default","docs":"Attempt to flush the remaining data and end the stream.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"b:1:3411-0:111:1992":{"id":"b:1:3411-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:406:2284":{"id":"0:406:2284","crate_id":0,"name":"adler32","span":{"filename":"src/inflate/core.rs","begin":[214,4],"end":[220,5]},"visibility":"public","docs":"Returns the adler32 checksum of the currently decompressed data.\nNote: Will return Some(1) if decompressing zlib but ignoring adler32.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:974:1827":{"id":"0:974:1827","crate_id":0,"name":"Raw","span":{"filename":"src/lib.rs","begin":[154,4],"end":[154,7]},"visibility":"default","docs":"Raw DEFLATE.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[50,0],"end":[56,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:492:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:507:2062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12420:867":{"id":"1:12420:867","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:52088:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:848:2002":{"id":"0:848:2002","crate_id":0,"name":"Done","span":{"filename":"src/inflate/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":"Finished decompression without issues.\n\nThis indicates the end of the compressed stream has been reached.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"0"}}}},"b:1:2263-0:909:1787":{"id":"b:1:2263-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:3378-0:909:1787":{"id":"a:1:2832:3378-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:3378-0:969:1820":{"id":"a:1:2832:3378-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[198,0],"end":[231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:996","0:405:2868","0:406:2284","0:407:2874"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2792:250-0:871:2679":{"id":"a:1:2792:250-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12465:3609":{"id":"1:12465:3609","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41594:194","prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8622:3508-0:876:1764":{"id":"a:1:8622:3508-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12432:5601":{"id":"1:12432:5601","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41594:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:859":{"id":"0:859","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,16],"end":[24,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:5790-0:871:2679":{"id":"b:4:5790-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5788:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5792:1558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:77:2179":{"id":"0:77:2179","crate_id":0,"name":"TDEFL_FILTER_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[182,4],"end":[182,54]},"visibility":"public","docs":"Only use matches that are at least 6 bytes long.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0002_0000","value":"131_072u32","is_literal":true}}},"0:933:1783":{"id":"0:933:1783","crate_id":0,"name":"MZError","span":{"filename":"src/lib.rs","begin":[108,0],"end":[142,1]},"visibility":"public","docs":"A list of miniz failed status codes.\n\nThese are emitted as the [`Err`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:530:1756","`StreamResult`":"0:990:1834","`deflate::stream::deflate()`":"0:325:1755","`Err`":"1:41743:131","`MZResult`":"0:571:1832"},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:934:1800","0:937:1805","0:940:1808","0:943:1809","0:946:1813","0:949:1814","0:952:202"],"impls":["a:1:2775:240-0:933:1783","a:1:8621:3509-0:933:1783","a:1:8622:3508-0:933:1783","a:1:2792:250-0:933:1783","a:1:2832:3378-0:933:1783","b:1:2260-0:933:1783","b:1:2576-0:933:1783","b:1:2570-0:933:1783","b:1:2566-0:933:1783","b:1:2263-0:933:1783","b:1:3411-0:933:1783","b:1:2581-0:933:1783","b:4:680-0:933:1783","0:955","0:957","0:961","0:963","0:964","0:960","0:966","0:958"]}}},"b:1:3411-0:871:2679":{"id":"b:1:3411-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:985":{"id":"0:985","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,40],"end":[145,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12451:11678":{"id":"1:12451:11678","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43846:4514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:494:3169":{"id":"a:1:2775:240-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2263-0:933:1783":{"id":"b:1:2263-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:655:2001":{"id":"b:1:2566-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2792:250-0:128:2311":{"id":"a:1:2792:250-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2260-0:382:2713":{"id":"b:1:2260-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5:1755":{"id":"0:5:1755","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/mod.rs","begin":[1,0],"end":[227,1]},"visibility":"public","docs":"This module contains functionality for compression.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:39:528","0:314:1961","0:682:1965","0:327:1980","0:328:1986"],"is_stripped":false}}},"1:12512:15913":{"id":"1:12512:15913","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[157,0],"end":[172,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:569:1828","0:570:1830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372:2697":{"id":"0:372:2697","crate_id":0,"name":"inflate_flags","span":{"filename":"src/inflate/core.rs","begin":[108,0],"end":[108,21]},"visibility":"public","docs":"Flags to [`decompress()`] to control how inflation works.\n\nThese define bits for a bitmask argument.","links":{"`decompress()`":"0:458:2715"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:373:2698","0:374:2740","0:375:2710","0:376:2826","0:377:2739"],"is_stripped":false}}},"a:1:2792:250-0:969:1820":{"id":"a:1:2792:250-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8621:3509-0:835:2650":{"id":"a:1:8621:3509-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76:2176":{"id":"0:76:2176","crate_id":0,"name":"TDEFL_RLE_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[180,4],"end":[180,51]},"visibility":"public","docs":"Only look for matches with a distance of 0.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0001_0000","value":"65_536u32","is_literal":true}}},"a:1:2792:250-0:876:1764":{"id":"a:1:2792:250-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:708:657":{"id":"0:708:657","crate_id":0,"name":"eq","span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:675:657":{"id":"0:675:657","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:680-0:628:2000":{"id":"b:4:680-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2570-0:682:1965":{"id":"b:1:2570-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:909:1787":{"id":"0:909:1787","crate_id":0,"name":"MZStatus","span":{"filename":"src/lib.rs","begin":[84,0],"end":[100,1]},"visibility":"public","docs":"A list of miniz successful status codes.\n\nThese are emitted as the [`Ok`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:530:1756","`StreamResult`":"0:990:1834","`deflate::stream::deflate()`":"0:325:1755","`Ok`":"1:41740:195","`MZResult`":"0:571:1832"},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:910:195","0:913:1795","0:916:1797"],"impls":["a:1:2775:240-0:909:1787","a:1:8621:3509-0:909:1787","a:1:8622:3508-0:909:1787","a:1:2792:250-0:909:1787","a:1:2832:3378-0:909:1787","b:1:2260-0:909:1787","b:1:2576-0:909:1787","b:1:2570-0:909:1787","b:1:2566-0:909:1787","b:1:2263-0:909:1787","b:1:3411-0:909:1787","b:1:2581-0:909:1787","b:4:680-0:909:1787","0:919","0:928","0:925","0:927","0:930","0:921","0:924","0:922"]}}},"0:705:451":{"id":"0:705:451","crate_id":0,"name":"clone","span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:1755":{"id":"0:325:1755","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/stream.rs","begin":[22,0],"end":[97,1]},"visibility":"public","docs":"Try to compress from input to output with the given [`CompressorOxide`].\n\n# Errors\n\nReturns [`MZError::Buf`] If the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called without [`MZFlush::Finish`] after the compression\nwas already finished.\n\nReturns [`MZError::Param`] if the compressor parameters are set wrong.\n\nReturns [`MZError::Stream`] when lower-level decompressor returns a\n[`TDEFLStatus::PutBufFailed`]; may not actually be possible.","links":{"`TDEFLStatus::PutBufFailed`":"0:659:2213","`MZFlush::Finish`":"0:889:1777","`MZError::Stream`":"0:937:1805","`CompressorOxide`":"0:111:1992","`MZError::Param`":"0:952:202","`MZError::Buf`":"0:946:1813"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["compressor",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"crate::deflate::core::CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"crate::MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:990:1834":{"id":"a:1:2775:240-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12547:15930":{"id":"1:12547:15930","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4570:15930"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43871:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:598:2008":{"id":"b:1:2576-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12499:15908":{"id":"1:12499:15908","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12121:5983","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::matches":"1:12496:3286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43776:4664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501:2062":{"id":"0:501:2062","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[39,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12440:15893":{"id":"1:12440:15893","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:52094:1499","str::slice_mut_unchecked":"1:12441:15894","crate::ops::Index":"1:3072:3333"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,16],"end":[256,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:628:2000":{"id":"a:1:2775:240-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:707":{"id":"0:707","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:708:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:503:3180":{"id":"b:1:2566-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:503:3180":{"id":"b:1:2576-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:895":{"id":"0:895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:896:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:598:2008":{"id":"b:1:2566-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2775:240-0:655:2001":{"id":"a:1:2775:240-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:981":{"id":"0:981","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,29],"end":[145,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2581-0:498:3177":{"id":"b:1:2581-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2263-0:503:3180":{"id":"b:1:2263-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:677":{"id":"0:677","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,40],"end":[256,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:2740":{"id":"0:374:2740","crate_id":0,"name":"TINFL_FLAG_HAS_MORE_INPUT","span":{"filename":"src/inflate/core.rs","begin":[125,4],"end":[125,49]},"visibility":"public","docs":"There will be more input that hasn't been given to the decompressor yet.\n\nThis is useful when you want to decompress what you have so far,\neven if you know there is probably more input that hasn't gotten here yet (_e.g._, over a\nnetwork connection).  When [`decompress()`][super::decompress] reaches the end of the input\nwithout finding the end of the compressed stream, it will return\n[`TINFLStatus::NeedsMoreInput`][super::TINFLStatus::NeedsMoreInput] if this is set,\nindicating that you should get more data before calling again.  If not set, it will return\n[`TINFLStatus::FailedCannotMakeProgress`][super::TINFLStatus::FailedCannotMakeProgress]\nsuggesting the stream is corrupt, since you claimed it was all there.","links":{"super::decompress":"0:458:2715","super::TINFLStatus::NeedsMoreInput":"0:851:2673","super::TINFLStatus::FailedCannotMakeProgress":"0:836:2658"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"2","value":"2u32","is_literal":true}}},"0:498:3177":{"id":"0:498:3177","crate_id":0,"name":"ZeroReset","span":{"filename":"src/inflate/stream.rs","begin":[35,0],"end":[35,21]},"visibility":"public","docs":"Resets state and zero memory, continuing to use the same data format.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:2775:240-0:498:3177","a:1:8621:3509-0:498:3177","a:1:8622:3508-0:498:3177","a:1:2792:250-0:498:3177","a:1:2832:3378-0:498:3177","b:1:2260-0:498:3177","b:1:2576-0:498:3177","b:1:2570-0:498:3177","b:1:2566-0:498:3177","b:1:2263-0:498:3177","b:1:3411-0:498:3177","b:1:2581-0:498:3177","0:500"]}}},"0:866":{"id":"0:866","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,40],"end":[24,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:921":{"id":"0:921","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,16],"end":[83,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:310:2576":{"id":"0:310:2576","crate_id":0,"name":"compress_to_output","span":{"filename":"src/deflate/core.rs","begin":[2231,0],"end":[2249,1]},"visibility":"public","docs":"Main compression function. Callbacks output.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer.\n\nThe caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined\nbehaviour.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["callback_func",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:2314","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"tuple":[{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&[u8]) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:2314","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:382:2713":{"id":"b:1:2263-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:3508-0:969:1820":{"id":"a:1:8622:3508-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:937:1805":{"id":"0:937:1805","crate_id":0,"name":"Stream","span":{"filename":"src/lib.rs","begin":[118,4],"end":[118,15]},"visibility":"default","docs":"General stream error.\n\nSee [`inflate::stream::inflate()`] docs for details of how it can occur there.\n\nSee [`deflate::stream::deflate()`] docs for how it can in principle occur there, though it's\nbelieved impossible in practice.","links":{"`deflate::stream::deflate()`":"0:325:1755","`inflate::stream::inflate()`":"0:530:1756"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-2","value":"-2"}}}},"b:1:2576-0:494:3169":{"id":"b:1:2576-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:605:2027":{"id":"0:605:2027","crate_id":0,"name":"HuffmanOnly","span":{"filename":"src/deflate/core.rs","begin":[201,4],"end":[201,19]},"visibility":"default","docs":"Don't look for matches, only huffman encode the literals.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"a:1:8621:3509-0:128:2311":{"id":"a:1:8621:3509-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:864:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:876:1764":{"id":"a:1:2775:240-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:474:1961":{"id":"0:474:1961","crate_id":0,"name":"stream","span":{"filename":"src/inflate/stream.rs","begin":[1,0],"end":[418,1]},"visibility":"public","docs":"Extra streaming decompression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:492:3164","0:494:3169","0:498:3177","0:503:3180","0:508:3166","0:530:1756"],"is_stripped":false}}},"0:952:202":{"id":"0:952:202","crate_id":0,"name":"Param","span":{"filename":"src/lib.rs","begin":[141,4],"end":[141,19]},"visibility":"default","docs":"Bad parameters.\n\nThis can be returned from [`deflate::stream::deflate()`] in the case of bad parameters.  See\n[`TDEFLStatus::BadParam`][deflate::core::TDEFLStatus::BadParam].","links":{"deflate::core::TDEFLStatus::BadParam":"0:656:2210","`deflate::stream::deflate()`":"0:325:1755"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-10_000","value":"-10000"}}}},"b:1:2260-0:990:1834":{"id":"b:1:2260-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:123:2297":{"id":"0:123:2297","crate_id":0,"name":"set_compression_level","span":{"filename":"src/deflate/core.rs","begin":[482,4],"end":[485,5]},"visibility":"public","docs":"Set the compression level of the compressor.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:111:1992":{"id":"b:1:2581-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:684:11364":{"id":"4:684:11364","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:896:715":{"id":"0:896:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:909:1787":{"id":"a:1:2775:240-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8622:3508-0:682:1965":{"id":"a:1:8622:3508-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:705:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12423:15889":{"id":"1:12423:15889","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12442:15895":{"id":"1:12442:15895","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12443:3036"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:15915":{"id":"1:12515:15915","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12541:15926":{"id":"1:12541:15926","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5533:16611":{"id":"4:5533:16611","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:276:2067","`String`":"4:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:276:2067","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:996":{"id":"0:83:996","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[243,4],"end":[251,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"core::result::Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12448:11687":{"id":"1:12448:11687","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12447:11649"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43837:4668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,9],"end":[145,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:977:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12438:5603":{"id":"1:12438:5603","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:858:715":{"id":"0:858:715","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:669:715":{"id":"0:669:715","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2069":{"id":"0:71:2069","crate_id":0,"name":"deflate_flags","span":{"filename":"src/deflate/core.rs","begin":[168,0],"end":[168,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:72:2162","0:73:2165","0:74:2169","0:75:2173","0:76:2176","0:77:2179","0:78:2183","0:79:2186"],"is_stripped":false}}},"1:2585:1581":{"id":"1:2585:1581","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:3378-0:494:3169":{"id":"a:1:2832:3378-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:494:3169":{"id":"b:1:2566-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3411-0:382:2713":{"id":"b:1:3411-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2792:250-0:111:1992":{"id":"a:1:2792:250-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:522:996":{"id":"0:522:996","crate_id":0,"name":"new","span":{"filename":"src/inflate/stream.rs","begin":[107,4],"end":[112,5]},"visibility":"public","docs":"Create a new state.\n\nNote that this struct is quite large due to internal buffers, and as such storing it on\nthe stack is not recommended.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_format",{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:869:777":{"id":"0:869:777","crate_id":0,"name":"hash","span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964":{"id":"0:964","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,40],"end":[107,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[84,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:519:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2792:250-0:933:1783":{"id":"a:1:2792:250-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3411-0:498:3177":{"id":"b:1:3411-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:969:1820":{"id":"b:1:2566-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:598:2008":{"id":"0:598:2008","crate_id":0,"name":"CompressionStrategy","span":{"filename":"src/deflate/core.rs","begin":[195,0],"end":[207,1]},"visibility":"public","docs":"Strategy setting for compression.\n\nThe non-default settings offer some special-case compression variants.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:599:120","0:602:2192","0:605:2027","0:608:2195","0:611:2197"],"impls":["a:1:2775:240-0:598:2008","a:1:8621:3509-0:598:2008","a:1:8622:3508-0:598:2008","a:1:2792:250-0:598:2008","a:1:2832:3378-0:598:2008","b:1:2260-0:598:2008","b:1:2576-0:598:2008","b:1:2570-0:598:2008","b:1:2566-0:598:2008","b:1:2263-0:598:2008","b:1:3411-0:598:2008","b:1:2581-0:598:2008","b:4:680-0:598:2008","0:617","0:625","0:619","0:622","0:620","0:623","0:616","0:614"]}}},"0:78:2183":{"id":"0:78:2183","crate_id":0,"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[185,4],"end":[185,63]},"visibility":"public","docs":"Force the compressor to only output static blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0004_0000","value":"262_144u32","is_literal":true}}},"0:706":{"id":"0:706","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:645:451":{"id":"0:645:451","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:508:3166":{"id":"a:1:2775:240-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:874":{"id":"0:874","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:875:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:128:2311":{"id":"b:1:2566-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:638:1777":{"id":"0:638:1777","crate_id":0,"name":"Finish","span":{"filename":"src/deflate/core.rs","begin":[227,4],"end":[227,14]},"visibility":"default","docs":"Try to flush everything and end the deflate stream.\n\nOn success this will yield a [`TDEFLStatus::Done`] return status.","links":{"`TDEFLStatus::Done`":"0:665:2002"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"0:549:2704":{"id":"0:549:2704","crate_id":0,"name":"decompress_to_vec_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[156,0],"end":[161,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"DecompressError":"0:871:2679","`TINFLStatus::HasMoreOutput`":"0:854:2675","`Vec`":"4:6912:266","`Result`":"1:41737:229"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:961":{"id":"0:961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,29],"end":[107,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:962:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:984":{"id":"0:984","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,40],"end":[145,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1005":{"id":"0:1005","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,44],"end":[178,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1006:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12514:15914":{"id":"1:12514:15914","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:883:250":{"id":"0:883:250","crate_id":0,"name":"Sync","span":{"filename":"src/lib.rs","begin":[51,4],"end":[51,12]},"visibility":"default","docs":"Finish compressing the currently buffered data, and output an empty raw block.\nHas no use in decompression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:2581-0:871:2679":{"id":"b:1:2581-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:990:1834":{"id":"b:1:2576-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:907:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8622:3508-0:933:1783":{"id":"a:1:8622:3508-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:659:2213":{"id":"0:659:2213","crate_id":0,"name":"PutBufFailed","span":{"filename":"src/deflate/core.rs","begin":[267,4],"end":[267,21]},"visibility":"default","docs":"Error putting data into output buffer.\n\nThis usually indicates a too-small buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"0:120:708":{"id":"0:120:708","crate_id":0,"name":"flags","span":{"filename":"src/deflate/core.rs","begin":[452,4],"end":[454,5]},"visibility":"public","docs":"Get the raw compressor flags.\n\n# Notes\nThis function may be deprecated or changed in the future to use more rust-style flags.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:3208":{"id":"0:528:3208","crate_id":0,"name":"reset_as","span":{"filename":"src/inflate/stream.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Resets the state according to specified policy.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["policy",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ResetPolicy","id":"0:492:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:656:2210":{"id":"0:656:2210","crate_id":0,"name":"BadParam","span":{"filename":"src/deflate/core.rs","begin":[262,4],"end":[262,17]},"visibility":"default","docs":"Usage error.\n\nThis indicates that either the [`CompressorOxide`] experienced a previous error, or the\nstream has already been [`TDEFLFlush::Finish`]'d.","links":{"`CompressorOxide`":"0:111:1992","`TDEFLFlush::Finish`":"0:638:1777"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-2","value":"-2"}}}},"1:12508:15911":{"id":"1:12508:15911","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2579:132":{"id":"1:2579:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12430:339":{"id":"1:12430:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12431:338","`u8`":"1:52105:1605"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:901":{"id":"0:901","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,29],"end":[41,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:902:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2260-0:128:2311":{"id":"b:1:2260-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,16],"end":[194,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:628:2000":{"id":"0:628:2000","crate_id":0,"name":"TDEFLFlush","span":{"filename":"src/deflate/core.rs","begin":[211,0],"end":[228,1]},"visibility":"public","docs":"A list of deflate flush types.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:629:194","0:632:250","0:635:1775","0:638:1777"],"impls":["0:82","a:1:2775:240-0:628:2000","a:1:8621:3509-0:628:2000","a:1:8622:3508-0:628:2000","a:1:2792:250-0:628:2000","a:1:2832:3378-0:628:2000","b:1:2260-0:628:2000","b:1:2576-0:628:2000","b:1:2570-0:628:2000","b:1:2566-0:628:2000","b:1:2263-0:628:2000","b:1:3411-0:628:2000","b:1:2581-0:628:2000","b:4:680-0:628:2000","0:644","0:647","0:643","0:652","0:641","0:646","0:649","0:650","0:80"]}}},"0:119:2287":{"id":"0:119:2287","crate_id":0,"name":"prev_return_status","span":{"filename":"src/deflate/core.rs","begin":[444,4],"end":[446,5]},"visibility":"public","docs":"Get the return status of the previous [`compress`](fn.compress.html)\ncall with this compressor.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:835:2650":{"id":"a:1:2792:250-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:880:1769":{"id":"0:880:1769","crate_id":0,"name":"Partial","span":{"filename":"src/lib.rs","begin":[48,4],"end":[48,15]},"visibility":"default","docs":"Zlib partial flush.\nCurrently treated as [`Sync`].","links":{"`Sync`":"1:2792:250"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:1:3411-0:628:2000":{"id":"b:1:3411-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8621:3509-0:494:3169":{"id":"a:1:8621:3509-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12531:15921":{"id":"1:12531:15921","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703":{"id":"0:703","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,16],"end":[15,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:382:2713":{"id":"b:1:2566-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:928":{"id":"0:928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,40],"end":[83,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,40],"end":[210,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130:2313":{"id":"0:130:2313","crate_id":0,"name":"put_buf_func","span":{"filename":"src/deflate/core.rs","begin":[534,4],"end":[534,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"dyn_trait":{"traits":[{"trait":{"name":"FnMut","id":"1:3040:2314","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[]}],"lifetime":null}}}}}},"4:5792:1558":{"id":"4:5792:1558","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8621:3509-0:933:1783":{"id":"a:1:8621:3509-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12546:5852":{"id":"1:12546:5852","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4573:5852"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43862:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:903":{"id":"0:903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,40],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:527:2062":{"id":"0:527:2062","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Reset the decompressor without re-allocating memory, using the given\ndata format.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["data_format",{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:615:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12472:11644":{"id":"1:12472:11644","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11937:3904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:835:2650":{"id":"b:1:2260-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:519:60":{"id":"0:519:60","crate_id":0,"name":"default","span":{"filename":"src/inflate/stream.rs","begin":[85,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:899:451":{"id":"0:899:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[41,22],"end":[41,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[233,0],"end":[261,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:940:1808":{"id":"0:940:1808","crate_id":0,"name":"Data","span":{"filename":"src/lib.rs","begin":[123,4],"end":[123,13]},"visibility":"default","docs":"Error in inflation; see [`inflate::stream::inflate()`] for details.\n\nNot returned from [`deflate::stream::deflate()`].","links":{"`deflate::stream::deflate()`":"0:325:1755","`inflate::stream::inflate()`":"0:530:1756"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-3","value":"-3"}}}},"1:12543:15928":{"id":"1:12543:15928","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:598:2008":{"id":"a:1:2792:250-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[37,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:492:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:501:2062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:497:2062":{"id":"0:497:2062","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[24,4],"end":[31,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:839:2210":{"id":"0:839:2210","crate_id":0,"name":"BadParam","span":{"filename":"src/inflate/mod.rs","begin":[37,4],"end":[37,43]},"visibility":"default","docs":"The output buffer is an invalid size; consider the `flags` parameter.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-3"}}}},"1:12458:15899":{"id":"1:12458:15899","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:128:2311":{"id":"b:1:2581-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[517,0],"end":[530,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:662:2004":{"id":"0:662:2004","crate_id":0,"name":"Okay","span":{"filename":"src/deflate/core.rs","begin":[270,4],"end":[270,12]},"visibility":"default","docs":"Compression succeeded normally.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:128:2311":{"id":"0:128:2311","crate_id":0,"name":"CallbackFunc","span":{"filename":"src/deflate/core.rs","begin":[533,0],"end":[535,1]},"visibility":"public","docs":"Callback function and user used in `compress_to_output`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:130:2313"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:2775:240-0:128:2311","a:1:8621:3509-0:128:2311","a:1:8622:3508-0:128:2311","a:1:2792:250-0:128:2311","a:1:2832:3378-0:128:2311","b:1:2260-0:128:2311","b:1:2576-0:128:2311","b:1:2570-0:128:2311","b:1:2566-0:128:2311","b:1:2263-0:128:2311","b:1:3411-0:128:2311","b:1:2581-0:128:2311"]}}},"0:81:741":{"id":"0:81:741","crate_id":0,"name":"from","span":{"filename":"src/deflate/core.rs","begin":[231,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:60":{"id":"0:409:60","crate_id":0,"name":"default","span":{"filename":"src/inflate/core.rs","begin":[236,4],"end":[260,5]},"visibility":"default","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:972:1825":{"id":"0:972:1825","crate_id":0,"name":"ZLibIgnoreChecksum","span":{"filename":"src/lib.rs","begin":[152,4],"end":[152,22]},"visibility":"default","docs":"Zlib wrapped but ignore and don't compute the adler32 checksum.\nCurrently only used for inflate, behaves the same as Zlib for compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:1:2775:240-0:682:1965":{"id":"a:1:2775:240-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:576":{"id":"0:576","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZResult","id":"0:571:1832","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:577:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2576-0:128:2311":{"id":"b:1:2576-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3411-0:598:2008":{"id":"b:1:3411-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:977:715":{"id":"0:977:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[145,9],"end":[145,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5521:16608":{"id":"4:5521:16608","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:962:657":{"id":"0:962:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[107,29],"end":[107,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:642:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12445:4679":{"id":"1:12445:4679","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:52088:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43530:4657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8621:3509-0:598:2008":{"id":"a:1:8621:3509-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8621:3509-0:508:3166":{"id":"a:1:8621:3509-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:990:1834":{"id":"0:990:1834","crate_id":0,"name":"StreamResult","span":{"filename":"src/lib.rs","begin":[179,0],"end":[186,1]},"visibility":"public","docs":"A structure containing the result of a call to the inflate or deflate streaming functions.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:991:1836","0:992:1838","0:993:1840"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:572","a:1:2775:240-0:990:1834","a:1:8621:3509-0:990:1834","a:1:8622:3508-0:990:1834","a:1:2792:250-0:990:1834","a:1:2832:3378-0:990:1834","b:1:2260-0:990:1834","b:1:2576-0:990:1834","b:1:2570-0:990:1834","b:1:2566-0:990:1834","b:1:2263-0:990:1834","b:1:3411-0:990:1834","b:1:2581-0:990:1834","b:4:680-0:990:1834","0:1000","0:997","0:999","0:1003","0:1005","0:1002","0:576","0:994","0:996","0:574"]}}},"0:621:657":{"id":"0:621:657","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:15919":{"id":"1:12525:15919","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:695:1976":{"id":"0:695:1976","crate_id":0,"name":"DefaultLevel","span":{"filename":"src/deflate/mod.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Default compromise between speed and compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"1:12544:15929":{"id":"1:12544:15929","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4572:15929"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43853:4583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8622:3508-0:494:3169":{"id":"a:1:8622:3508-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:3378-0:111:1992":{"id":"a:1:2832:3378-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:650":{"id":"0:650","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,40],"end":[210,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:876:1764":{"id":"0:876:1764","crate_id":0,"name":"MZFlush","span":{"filename":"src/lib.rs","begin":[42,0],"end":[61,1]},"visibility":"public","docs":"A list of flush types.\n\nSee <http://www.bolet.org/~pornin/deflate-flush.html> for more in-depth info.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:877:194","0:880:1769","0:883:250","0:886:1775","0:889:1777","0:892:1779"],"impls":["0:566","a:1:2775:240-0:876:1764","a:1:8621:3509-0:876:1764","a:1:8622:3508-0:876:1764","a:1:2792:250-0:876:1764","a:1:2832:3378-0:876:1764","b:1:2260-0:876:1764","b:1:2576-0:876:1764","b:1:2570-0:876:1764","b:1:2566-0:876:1764","b:1:2263-0:876:1764","b:1:3411-0:876:1764","b:1:2581-0:876:1764","b:4:680-0:876:1764","0:898","0:904","0:901","0:903","0:897","0:900","0:895","0:906","0:80"]}}},"0:505:1717":{"id":"0:505:1717","crate_id":0,"name":"0","span":{"filename":"src/inflate/stream.rs","begin":[48,21],"end":[48,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2570-0:909:1787":{"id":"b:1:2570-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:3378-0:655:2001":{"id":"a:1:2832:3378-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:983:657":{"id":"0:983:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[145,29],"end":[145,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:111:1992":{"id":"b:1:2566-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:892:1779":{"id":"0:892:1779","crate_id":0,"name":"Block","span":{"filename":"src/lib.rs","begin":[60,4],"end":[60,13]},"visibility":"default","docs":"Not implemented.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:615:715":{"id":"0:615:715","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:909:1787":{"id":"b:1:2566-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:930":{"id":"0:930","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,44],"end":[83,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:931:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:574":{"id":"0:574","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[199,0],"end":[203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZResult","id":"0:571:1832","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:575:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[92,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:898":{"id":"0:898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,22],"end":[41,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:899:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12443:3036":{"id":"1:12443:3036","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12442:15895"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:1969":{"id":"0:686:1969","crate_id":0,"name":"BestSpeed","span":{"filename":"src/deflate/mod.rs","begin":[20,4],"end":[20,17]},"visibility":"default","docs":"Fast compression. Uses a special compression routine that is optimized for speed.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"1:12516:15916":{"id":"1:12516:15916","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12146:5988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12493:15907":{"id":"1:12493:15907","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:3378-0:503:3180":{"id":"a:1:2832:3378-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:920:715":{"id":"0:920:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:3378-0:990:1834":{"id":"a:1:2832:3378-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2792:250-0:628:2000":{"id":"a:1:2792:250-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:982":{"id":"0:982","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,29],"end":[145,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:983:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:875:715":{"id":"0:875:715","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:969:1820":{"id":"b:1:2260-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:689:1971":{"id":"0:689:1971","crate_id":0,"name":"BestCompression","span":{"filename":"src/deflate/mod.rs","begin":[22,4],"end":[22,23]},"visibility":"default","docs":"Slow/high compression. Do a lot of checks to try to find good matches.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"9","value":"9"}}}},"0:508:3166":{"id":"0:508:3166","crate_id":0,"name":"InflateState","span":{"filename":"src/inflate/stream.rs","begin":[60,0],"end":[82,1]},"visibility":"public","docs":"A struct that compbines a decompressor with extra data for streaming decompression.\n","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:521","a:1:2775:240-0:508:3166","a:1:8621:3509-0:508:3166","a:1:8622:3508-0:508:3166","a:1:2792:250-0:508:3166","a:1:2832:3378-0:508:3166","b:1:2260-0:508:3166","b:1:2576-0:508:3166","b:1:2570-0:508:3166","b:1:2566-0:508:3166","b:1:2263-0:508:3166","b:1:3411-0:508:3166","b:1:2581-0:508:3166","0:518"]}}},"b:4:680-0:876:1764":{"id":"b:4:680-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:2868":{"id":"0:405:2868","crate_id":0,"name":"init","span":{"filename":"src/inflate/core.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Set the current state to `Start`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:987":{"id":"0:987","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,44],"end":[145,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:988:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:877:194":{"id":"0:877:194","crate_id":0,"name":"None","span":{"filename":"src/lib.rs","begin":[45,4],"end":[45,12]},"visibility":"default","docs":"Don't force any flushing.\nUsed when more input data is expected.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"b:1:2260-0:876:1764":{"id":"b:1:2260-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:682:1965":{"id":"b:1:2576-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:545:715":{"id":"0:545:715","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[93,4],"end":[103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::core::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"::core::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:598:2008":{"id":"b:1:2570-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12539:15924":{"id":"1:12539:15924","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:851:2673":{"id":"0:851:2673","crate_id":0,"name":"NeedsMoreInput","span":{"filename":"src/inflate/mod.rs","begin":[59,4],"end":[59,56]},"visibility":"default","docs":"The decompressor needs more input data to continue decompressing.\n\nThis occurs when there's no more consumable input, but the end of the stream hasn't been\nreached, and you have supplied the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompressor.  Had you not supplied that flag (which would mean you were asserting that you\nbelieved all the data was available) you would have gotten a\n[`FailedCannotMakeProcess`][Self::FailedCannotMakeProgress] instead.","links":{"Self::FailedCannotMakeProgress":"0:836:2658","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:374:2740"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"1"}}}},"0:996":{"id":"0:996","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,16],"end":[178,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12436:5602":{"id":"1:12436:5602","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:3180":{"id":"0:503:3180","crate_id":0,"name":"FullReset","span":{"filename":"src/inflate/stream.rs","begin":[48,0],"end":[48,37]},"visibility":"public","docs":"Full reset of the state, including zeroing memory.\n\nRequires to provide new data format.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:505:1717"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2775:240-0:503:3180","a:1:8621:3509-0:503:3180","a:1:8622:3508-0:503:3180","a:1:2792:250-0:503:3180","a:1:2832:3378-0:503:3180","b:1:2260-0:503:3180","b:1:2576-0:503:3180","b:1:2570-0:503:3180","b:1:2566-0:503:3180","b:1:2263-0:503:3180","b:1:3411-0:503:3180","b:1:2581-0:503:3180","0:506"]}}},"0:39:528":{"id":"0:39:528","crate_id":0,"name":"core","span":{"filename":"src/deflate/core.rs","begin":[1,0],"end":[2462,1]},"visibility":"public","docs":"Streaming compression functionality.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:71:2069","0:598:2008","0:628:2000","0:655:2001","0:111:1992","0:128:2311","0:309:1999","0:310:2576","0:313:1989"],"is_stripped":false}}},"b:1:3411-0:503:3180":{"id":"b:1:3411-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:655:2001":{"id":"b:1:2576-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:682:4269":{"id":"4:682:4269","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2570-0:494:3169":{"id":"b:1:2570-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:702:715":{"id":"0:702:715","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:2676":{"id":"0:542:2676","crate_id":0,"name":"from_i32","span":{"filename":"src/inflate/mod.rs","begin":[66,4],"end":[78,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:713:777":{"id":"0:713:777","crate_id":0,"name":"hash","span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:503:3180":{"id":"b:1:2260-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:835:2650":{"id":"b:1:2566-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:680:777":{"id":"0:680:777","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:970:1822":{"id":"0:970:1822","crate_id":0,"name":"Zlib","span":{"filename":"src/lib.rs","begin":[149,4],"end":[149,8]},"visibility":"default","docs":"Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:1:2792:250-0:382:2713":{"id":"a:1:2792:250-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8622:3508-0:503:3180":{"id":"a:1:8622:3508-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:575:741":{"id":"0:575:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[200,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["res",{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:498:3177":{"id":"b:1:2576-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:680-0:835:2650":{"id":"b:4:680-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12481:15903":{"id":"1:12481:15903","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12121:5983","str::split":"1:12469:15900","prim@char":"1:52088:447","str::split_terminator":"1:12478:15902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43622:4660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:3378-0:835:2650":{"id":"a:1:2832:3378-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8621:3509-0:682:1965":{"id":"a:1:8621:3509-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2570-0:876:1764":{"id":"b:1:2570-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8621:3509-0:876:1764":{"id":"a:1:8621:3509-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:897":{"id":"0:897","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,16],"end":[41,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2570-0:382:2713":{"id":"b:1:2570-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2260-0:628:2000":{"id":"b:1:2260-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2570-0:498:3177":{"id":"b:1:2570-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:494:3169":{"id":"0:494:3169","crate_id":0,"name":"MinReset","span":{"filename":"src/inflate/stream.rs","begin":[21,0],"end":[21,20]},"visibility":"public","docs":"Resets state, without performing expensive ops (e.g. zeroing buffer)\n\nNote that not zeroing buffer can lead to security issues when dealing with untrusted input.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:2775:240-0:494:3169","a:1:8621:3509-0:494:3169","a:1:8622:3508-0:494:3169","a:1:2792:250-0:494:3169","a:1:2832:3378-0:494:3169","b:1:2260-0:494:3169","b:1:2576-0:494:3169","b:1:2570-0:494:3169","b:1:2566-0:494:3169","b:1:2263-0:494:3169","b:1:3411-0:494:3169","b:1:2581-0:494:3169","0:496"]}}},"b:1:2263-0:990:1834":{"id":"b:1:2263-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12540:15925":{"id":"1:12540:15925","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39562:11618","Self::is_ascii":"1:12539:15924"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39562:11618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2162":{"id":"0:72:2162","crate_id":0,"name":"TDEFL_WRITE_ZLIB_HEADER","span":{"filename":"src/deflate/core.rs","begin":[170,4],"end":[170,57]},"visibility":"public","docs":"Whether to use a zlib wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_1000","value":"4_096u32","is_literal":true}}},"b:1:2260-0:498:3177":{"id":"b:1:2260-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:931:777":{"id":"0:931:777","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[83,44],"end":[83,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:871:2679":{"id":"b:1:2576-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:683:11363":{"id":"4:683:11363","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:873:1993":{"id":"0:873:1993","crate_id":0,"name":"output","span":{"filename":"src/inflate/mod.rs","begin":[88,4],"end":[88,23]},"visibility":"public","docs":"The currently decompressed data if any.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}},"1:12502:15909":{"id":"1:12502:15909","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12121:5983","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::rmatch_indices":"1:12505:15910"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43704:4661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,29],"end":[41,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12421:2624":{"id":"1:12421:2624","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:1986":{"id":"0:328:1986","crate_id":0,"name":"compress_to_vec_zlib","span":{"filename":"src/deflate/mod.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10), and with a\nzlib wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["level",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:854:2675":{"id":"0:854:2675","crate_id":0,"name":"HasMoreOutput","span":{"filename":"src/inflate/mod.rs","begin":[62,4],"end":[62,54]},"visibility":"default","docs":"There is still pending data that didn't fit in the output buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"2"}}}},"b:1:2581-0:876:1764":{"id":"b:1:2581-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12510:15912":{"id":"1:12510:15912","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:909:1787":{"id":"a:1:2792:250-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:680-0:969:1820":{"id":"b:4:680-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12447:11649":{"id":"1:12447:11649","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12448:11687"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43828:4667","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:15890":{"id":"1:12425:15890","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12423:15889"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:999":{"id":"0:999","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,29],"end":[178,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:902:657":{"id":"0:902:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[41,29],"end":[41,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2284":{"id":"0:118:2284","crate_id":0,"name":"adler32","span":{"filename":"src/deflate/core.rs","begin":[438,4],"end":[440,5]},"visibility":"public","docs":"Get the adler32 checksum of the currently encoded data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:933:1783":{"id":"b:1:2570-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:933:1783":{"id":"b:1:2576-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:979":{"id":"0:979","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,22],"end":[145,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:980:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2263-0:876:1764":{"id":"b:1:2263-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2775:240-0:871:2679":{"id":"a:1:2775:240-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:626:777":{"id":"0:626:777","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:598:2008":{"id":"a:1:2775:240-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12449:15896":{"id":"1:12449:15896","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43808:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:680-0:990:1834":{"id":"b:4:680-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:683:1967":{"id":"0:683:1967","crate_id":0,"name":"NoCompression","span":{"filename":"src/deflate/mod.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Don't do any compression, only output uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"4:5517:16607":{"id":"4:5517:16607","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:276:2067","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:276:2067","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:3336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,40],"end":[15,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2580:1583":{"id":"1:2580:1583","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8622:3508-0:835:2650":{"id":"a:1:8622:3508-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:3378-0:628:2000":{"id":"a:1:2832:3378-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:3378-0:933:1783":{"id":"a:1:2832:3378-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:552:2727":{"id":"0:552:2727","crate_id":0,"name":"decompress_slice_iter_to_slice","span":{"filename":"src/inflate/mod.rs","begin":[238,0],"end":[275,1]},"visibility":"public","docs":"Decompress one or more source slices from an iterator into the output slice.\n\n* On success, returns the number of bytes that were written.\n* On failure, returns the failure status code.\n\nThis will fail if the output buffer is not large enough, but in that case\nthe output buffer will still contain the partial decompression.\n\n* `out` the output buffer.\n* `it` the iterator of input slices.\n* `zlib_header` if the first slice out of the iterator is expected to have a\n  Zlib header. Otherwise the slices are assumed to be the deflate data only.\n* `ignore_adler32` if the adler32 checksum should be calculated or not.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["out",{"borrowed_ref":{"lifetime":"'out","mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["it",{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'inp","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["zlib_header",{"primitive":"bool"}],["ignore_adler32",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'out","kind":{"lifetime":{"outlives":[]}}},{"name":"'inp","kind":{"lifetime":{"outlives":[]}}},{"name":"impl Iterator<Item = &'inp [u8]>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'inp","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2186":{"id":"0:79:2186","crate_id":0,"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[187,4],"end":[187,60]},"visibility":"public","docs":"Force the compressor to only output raw/uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0008_0000","value":"524_288u32","is_literal":true}}},"0:980:451":{"id":"0:980:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[145,22],"end":[145,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1000":{"id":"0:1000","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,29],"end":[178,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1001:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1002":{"id":"0:1002","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,40],"end":[178,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12446:2361":{"id":"1:12446:2361","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43540:4584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712":{"id":"0:712","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:713:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:314:1961":{"id":"0:314:1961","crate_id":0,"name":"stream","span":{"filename":"src/deflate/stream.rs","begin":[1,0],"end":[121,1]},"visibility":"public","docs":"Extra streaming compression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.\n\nThere is no DeflateState as the needed state is contained in the compressor struct itself.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:325:1755"],"is_stripped":false}}},"0:997":{"id":"0:997","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,22],"end":[178,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:998:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2570-0:508:3166":{"id":"b:1:2570-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:876:1764":{"id":"b:1:2576-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:995:715":{"id":"0:995:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[178,9],"end":[178,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:959:451":{"id":"0:959:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[107,22],"end":[107,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12434:2395":{"id":"1:12434:2395","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41594:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:598:2008":{"id":"b:1:2263-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:309:1999":{"id":"0:309:1999","crate_id":0,"name":"compress","span":{"filename":"src/deflate/core.rs","begin":[2210,0],"end":[2221,1]},"visibility":"public","docs":"Main compression function. Tries to compress as much as possible from `in_buf` and\nputs compressed output into `out_buf`.\n\nThe value of `flush` determines if the compressor should attempt to flush all output\nand alternatively try to finish the stream.\n\nUse [`TDEFLFlush::Finish`] on the final call to signal that the stream is finishing.\n\nNote that this function does not keep track of whether a flush marker has been output, so\nif called using [`TDEFLFlush::Sync`], the caller needs to ensure there is enough space in the\noutput buffer if they want to avoid repeated flush markers.\nSee #105 for details.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer and the current position in the output buffer.","links":{"`TDEFLFlush::Finish`":"0:638:1777","`TDEFLFlush::Sync`":"0:632:250"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["out_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:60":{"id":"0:127:60","crate_id":0,"name":"default","span":{"filename":"src/deflate/core.rs","begin":[520,4],"end":[529,5]},"visibility":"default","docs":"Initialize the compressor with a level of 4, zlib wrapper and\nthe default strategy.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:904":{"id":"0:904","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,40],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:498:3177":{"id":"a:1:2775:240-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3411-0:933:1783":{"id":"b:1:3411-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2265:11362":{"id":"1:2265:11362","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:508:3166":{"id":"b:1:2263-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:860":{"id":"0:860","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:861:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2792:250-0:682:1965":{"id":"a:1:2792:250-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:710":{"id":"0:710","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,40],"end":[15,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:680-0:909:1787":{"id":"b:4:680-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2263-0:128:2311":{"id":"b:1:2263-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2775:240-0:503:3180":{"id":"a:1:2775:240-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:836:2658":{"id":"0:836:2658","crate_id":0,"name":"FailedCannotMakeProgress","span":{"filename":"src/inflate/mod.rs","begin":[34,4],"end":[34,77]},"visibility":"default","docs":"More input data was expected, but the caller indicated that there was no more data, so the\ninput stream is likely truncated.\n\nThis can't happen if you have provided the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompression.  By setting that flag, you indicate more input exists but is not provided,\nand so reaching the end of the input data without finding the end of the compressed stream\nwould instead return a [`NeedsMoreInput`][Self::NeedsMoreInput] status.","links":{"Self::NeedsMoreInput":"0:851:2673","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:374:2740"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-4"}}}},"1:12478:15902":{"id":"1:12478:15902","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12121:5983","str::split":"1:12469:15900","prim@char":"1:52088:447","`DoubleEndedIterator`":"1:7517:125","str::rsplit_terminator":"1:12481:15903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43604:4659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:655:2001":{"id":"b:1:2260-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:957":{"id":"0:957","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,16],"end":[107,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12505:15910":{"id":"1:12505:15910","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12121:5983","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::match_indices":"1:12502:15909"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43722:4662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927":{"id":"0:927","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,40],"end":[83,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2260-0:598:2008":{"id":"b:1:2260-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:3378-0:871:2679":{"id":"a:1:2832:3378-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8621:3509-0:628:2000":{"id":"a:1:8621:3509-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:3378-0:598:2008":{"id":"a:1:2832:3378-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12428:15891":{"id":"1:12428:15891","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11681:5991"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:1756":{"id":"0:530:1756","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/stream.rs","begin":[185,0],"end":[286,1]},"visibility":"public","docs":"Try to decompress from `input` to `output` with the given [`InflateState`]\n\n# `flush`\n\nGenerally, the various [`MZFlush`] flags have meaning only on the compression side.  They can be\nsupplied here, but the only one that has any semantic meaning is [`MZFlush::Finish`], which is a\nsignal that the stream is expected to finish, and failing to do so is an error.  It isn't\nnecessary to specify it when the stream ends; you'll still get returned a\n[`MZStatus::StreamEnd`] anyway.  Other values either have no effect or cause errors.  It's\nlikely that you'll almost always just want to use [`MZFlush::None`].\n\n# Errors\n\nReturns [`MZError::Buf`] if the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called with [`MZFlush::Finish`] and input wasn't all\nconsumed.\n\nReturns [`MZError::Data`] if this or a a previous call failed with an error return from\n[`TINFLStatus`]; probably indicates corrupted data.\n\nReturns [`MZError::Stream`] when called with [`MZFlush::Full`] (meaningless on\ndecompression), or when called without [`MZFlush::Finish`] after an earlier call with\n[`MZFlush::Finish`] has been made.","links":{"`MZStatus::StreamEnd`":"0:913:1795","`MZFlush::None`":"0:877:194","`MZError::Data`":"0:940:1808","`TINFLStatus`":"0:835:2650","`MZError::Buf`":"0:946:1813","`InflateState`":"0:508:3166","`MZFlush`":"0:876:1764","`MZFlush::Finish`":"0:889:1777","`MZError::Stream`":"0:937:1805","`MZFlush::Full`":"0:886:1775"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"crate::MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623":{"id":"0:623","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,40],"end":[194,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:373:2698":{"id":"0:373:2698","crate_id":0,"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","span":{"filename":"src/inflate/core.rs","begin":[113,4],"end":[113,52]},"visibility":"public","docs":"Should we try to parse a zlib header?\n\nIf unset, the function will expect an RFC1951 deflate stream.  If set, it will expect a\nRFC1950 zlib wrapper around the deflate stream.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"1","value":"1u32","is_literal":true}}},"0:523:3198":{"id":"0:523:3198","crate_id":0,"name":"new_boxed","span":{"filename":"src/inflate/stream.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Create a new state on the heap.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_format",{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:276:2067","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525:3175":{"id":"0:525:3175","crate_id":0,"name":"last_status","span":{"filename":"src/inflate/stream.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Return the status of the last call to `inflate` with this `InflateState`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:916:1797":{"id":"0:916:1797","crate_id":0,"name":"NeedDict","span":{"filename":"src/lib.rs","begin":[99,4],"end":[99,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"1:12537:15923":{"id":"1:12537:15923","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12082:131","`FromStr`":"1:12081:5760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12081:5760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12081:5760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1001:657":{"id":"0:1001:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[178,29],"end":[178,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:862":{"id":"0:862","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:407:2874":{"id":"0:407:2874","crate_id":0,"name":"adler32_header","span":{"filename":"src/inflate/core.rs","begin":[224,4],"end":[230,5]},"visibility":"public","docs":"Returns the adler32 that was read from the zlib header if it exists.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:925":{"id":"0:925","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,29],"end":[83,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:926:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12444:4515":{"id":"1:12444:4515","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:52088:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43524:4507","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8621:3509-0:503:3180":{"id":"a:1:8621:3509-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:956:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[98,0],"end":[160,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:522:996","0:523:3198","0:524:3170","0:525:3175","0:526:3205","0:527:2062","0:528:3208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:943:1809":{"id":"0:943:1809","crate_id":0,"name":"Mem","span":{"filename":"src/lib.rs","begin":[126,4],"end":[126,12]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-4","value":"-4"}}}},"1:12441:15894":{"id":"1:12441:15894","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:52094:1499","crate::ops::IndexMut":"1:3076:3334","str::slice_unchecked":"1:12440:15893"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:494:3169":{"id":"b:1:3411-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12496:3286":{"id":"1:12496:3286","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12121:5983","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::rmatches":"1:12499:15908"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43758:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8622:3508-0:655:2001":{"id":"a:1:8622:3508-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12455:15898":{"id":"1:12455:15898","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:655:2001":{"id":"b:1:2570-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:679":{"id":"0:679","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:680:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2572:741":{"id":"1:2572:741","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8621:3509-0:111:1992":{"id":"a:1:8621:3509-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2260-0:494:3169":{"id":"b:1:2260-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:628:2000":{"id":"b:1:2576-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:960":{"id":"0:960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,29],"end":[107,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:969:1820":{"id":"0:969:1820","crate_id":0,"name":"DataFormat","span":{"filename":"src/lib.rs","begin":[147,0],"end":[155,1]},"visibility":"public","docs":"How compressed data is wrapped.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:970:1822","0:972:1825","0:974:1827"],"impls":["0:568","a:1:2775:240-0:969:1820","a:1:8621:3509-0:969:1820","a:1:8622:3508-0:969:1820","a:1:2792:250-0:969:1820","a:1:2832:3378-0:969:1820","b:1:2260-0:969:1820","b:1:2576-0:969:1820","b:1:2570-0:969:1820","b:1:2566-0:969:1820","b:1:2263-0:969:1820","b:1:3411-0:969:1820","b:1:2581-0:969:1820","b:4:680-0:969:1820","0:982","0:987","0:981","0:976","0:978","0:984","0:985","0:979"]}}},"0:382:2713":{"id":"0:382:2713","crate_id":0,"name":"DecompressorOxide","span":{"filename":"src/inflate/core.rs","begin":[163,0],"end":[196,1]},"visibility":"public","docs":"Main decompression struct.\n","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:403","a:1:2775:240-0:382:2713","a:1:8621:3509-0:382:2713","a:1:8622:3508-0:382:2713","a:1:2792:250-0:382:2713","a:1:2832:3378-0:382:2713","b:1:2260-0:382:2713","b:1:2576-0:382:2713","b:1:2570-0:382:2713","b:1:2566-0:382:2713","b:1:2263-0:382:2713","b:1:3411-0:382:2713","b:1:2581-0:382:2713","0:408"]}}},"b:1:2570-0:503:3180":{"id":"b:1:2570-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1006:777":{"id":"0:1006:777","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[178,44],"end":[178,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:996":{"id":"0:117:996","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[426,4],"end":[435,5]},"visibility":"public","docs":"Create a new `CompressorOxide` with the given flags.\n\n# Notes\nThis function may be changed to take different parameters in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flags",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:956:715":{"id":"0:956:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:111:1992":{"id":"b:1:2260-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:458:2715":{"id":"0:458:2715","crate_id":0,"name":"decompress","span":{"filename":"src/inflate/core.rs","begin":[1114,0],"end":[1760,1]},"visibility":"public","docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.\n\n # Arguments\n\n `r` is a [`DecompressorOxide`] struct with the state of this stream.\n\n `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will\n start at the first byte of this buffer.\n\n `out` is a reference to the buffer that will store the decompressed data, and that\n stores previously decompressed data if any.\n\n * The offset given by `out_pos` indicates where in the output buffer slice writing should start.\n * If [`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`] is not set, the output buffer is used in a\n wrapping manner, and it's size is required to be a power of 2.\n * The decompression function normally needs access to 32KiB of the previously decompressed data\n(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)\n     - If this data is not available, decompression may fail.\n     - Some deflate compressors allow specifying a window size which limits match distances to\n less than this, or alternatively an RLE mode where matches will only refer to the previous byte\n and thus allows a smaller output buffer. The window size can be specified in the zlib\n header structure, however, the header data should not be relied on to be correct.\n\n `flags` indicates settings and status to the decompression function.\n * The [`TINFL_FLAG_HAS_MORE_INPUT`] has to be specified if more compressed data is to be provided\n in a subsequent call to this function.\n * See the the [`inflate_flags`] module for details on other flags.\n\n # Returns\n\n Returns a tuple containing the status of the compressor, the number of input bytes read, and the\n number of bytes output to `out`.\n\n This function shouldn't panic pending any bugs.","links":{"`TINFL_FLAG_HAS_MORE_INPUT`":"0:374:2740","`inflate_flags`":"0:372:2697","`DecompressorOxide`":"0:382:2713","`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`":"0:375:2710"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["out_pos",{"primitive":"usize"}],["flags",{"primitive":"u32"}]],"output":{"tuple":[{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:503:3180":{"id":"a:1:2792:250-0:503:3180","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:503:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2260-0:508:3166":{"id":"b:1:2260-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2792:250-0:508:3166":{"id":"a:1:2792:250-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2792:250-0:990:1834":{"id":"a:1:2792:250-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:967:777":{"id":"0:967:777","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[107,44],"end":[107,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:652":{"id":"0:652","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:653:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2832:3378-0:128:2311":{"id":"a:1:2832:3378-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:907:777":{"id":"0:907:777","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:909:1787":{"id":"b:1:2581-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12469:15900":{"id":"1:12469:15900","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12121:5983","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::split_whitespace":"1:12447:11649","str::rsplit":"1:12475:15901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43554:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5524:16609":{"id":"4:5524:16609","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5532:16610":{"id":"4:5532:16610","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493:2062":{"id":"0:493:2062","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":"Performs reset","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2576-0:382:2713":{"id":"b:1:2576-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:571:1832":{"id":"0:571:1832","crate_id":0,"name":"MZResult","span":{"filename":"src/lib.rs","begin":[175,0],"end":[175,46]},"visibility":"public","docs":"`Result` alias for all miniz status codes both successful and failed.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:946:1813":{"id":"0:946:1813","crate_id":0,"name":"Buf","span":{"filename":"src/lib.rs","begin":[132,4],"end":[132,12]},"visibility":"default","docs":"Buffer-related error.\n\nSee the docs of [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`] for details\nof when it would trigger in the one you're using.","links":{"`inflate::stream::inflate()`":"0:530:1756","`deflate::stream::deflate()`":"0:325:1755"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-5","value":"-5"}}}},"a:1:2775:240-0:933:1783":{"id":"a:1:2775:240-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:330:1756":{"id":"0:330:1756","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/mod.rs","begin":[1,0],"end":[337,1]},"visibility":"public","docs":"This module contains functionality for decompression.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:336:528","0:474:1961","0:835:2650","0:871:2679","0:547:2009","0:548:2631","0:549:2704","0:550:2706","0:552:2727"],"is_stripped":false}}},"4:5536:16613":{"id":"4:5536:16613","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12543:15928"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5534:5917":{"id":"4:5534:5917","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:949:1814":{"id":"0:949:1814","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[135,4],"end":[135,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-6","value":"-6"}}}},"b:1:2581-0:598:2008":{"id":"b:1:2581-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:3508-0:598:2008":{"id":"a:1:8622:3508-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:618:451":{"id":"0:618:451","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:655:2001":{"id":"b:1:2581-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2570-0:628:2000":{"id":"b:1:2570-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3411-0:655:2001":{"id":"b:1:3411-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8621:3509-0:655:2001":{"id":"a:1:8621:3509-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:913:1795":{"id":"0:913:1795","crate_id":0,"name":"StreamEnd","span":{"filename":"src/lib.rs","begin":[96,4],"end":[96,17]},"visibility":"default","docs":"Operation succeeded and end of deflate stream was found.\n\nX-ref [`TINFLStatus::Done`][inflate::TINFLStatus::Done] or\n[`TDEFLStatus::Done`][deflate::core::TDEFLStatus::Done] for `inflate` or `deflate`\nrespectively.","links":{"inflate::TINFLStatus::Done":"0:848:2002","deflate::core::TDEFLStatus::Done":"0:665:2002"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:1:2566-0:990:1834":{"id":"b:1:2566-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12487:15905":{"id":"1:12487:15905","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:52088:447","str::splitn":"1:12484:15904","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43676:3885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:15906":{"id":"1:12490:15906","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:969:1820":{"id":"b:1:2576-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:933:1783":{"id":"b:1:2581-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2570-0:969:1820":{"id":"b:1:2570-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:3508-0:990:1834":{"id":"a:1:8622:3508-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12450:15897":{"id":"1:12450:15897","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43818:4666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[421,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:996","0:118:2284","0:119:2287","0:120:708","0:121:2291","0:122:2062","0:123:2297","0:124:2300","0:125:2298"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12534:15922":{"id":"1:12534:15922","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12475:15901":{"id":"1:12475:15901","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12121:5983","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::split":"1:12469:15900"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43572:3891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:969:1820":{"id":"b:1:2263-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:969:1820":{"id":"b:1:2581-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,16],"end":[145,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:992:1838":{"id":"0:992:1838","crate_id":0,"name":"bytes_written","span":{"filename":"src/lib.rs","begin":[183,4],"end":[183,28]},"visibility":"public","docs":"The number of bytes written to the output slice.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:611:2197":{"id":"0:611:2197","crate_id":0,"name":"Fixed","span":{"filename":"src/deflate/core.rs","begin":[206,4],"end":[206,13]},"visibility":"default","docs":"Only use static/fixed blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"1:12528:15920":{"id":"1:12528:15920","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:835:2650":{"id":"b:1:3411-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:508:3166":{"id":"b:1:2576-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8621:3509-0:969:1820":{"id":"a:1:8621:3509-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8622:3508-0:111:1992":{"id":"a:1:8622:3508-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:835:2650":{"id":"0:835:2650","crate_id":0,"name":"TINFLStatus","span":{"filename":"src/inflate/mod.rs","begin":[25,0],"end":[63,1]},"visibility":"public","docs":"Return status codes.","links":{},"attrs":["#[repr(i8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:836:2658","0:839:2210","0:842:2662","0:845:2664","0:848:2002","0:851:2673","0:854:2675"],"impls":["0:541","a:1:2775:240-0:835:2650","a:1:8621:3509-0:835:2650","a:1:8622:3508-0:835:2650","a:1:2792:250-0:835:2650","a:1:2832:3378-0:835:2650","b:1:2260-0:835:2650","b:1:2576-0:835:2650","b:1:2570-0:835:2650","b:1:2566-0:835:2650","b:1:2263-0:835:2650","b:1:3411-0:835:2650","b:1:2581-0:835:2650","b:4:680-0:835:2650","0:857","0:868","0:859","0:865","0:862","0:863","0:866","0:860"]}}},"0:642:715":{"id":"0:642:715","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:498:3177":{"id":"b:1:2566-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5518:3833":{"id":"4:5518:3833","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8622:3508-0:628:2000":{"id":"a:1:8622:3508-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75:2173":{"id":"0:75:2173","crate_id":0,"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[178,4],"end":[178,69]},"visibility":"public","docs":"Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\nthis flag is ignored.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_8000","value":"32_768u32","is_literal":true}}},"0:377:2739":{"id":"0:377:2739","crate_id":0,"name":"TINFL_FLAG_IGNORE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[148,4],"end":[148,50]},"visibility":"public","docs":"Ignore adler32 checksum even if we are inflating a zlib stream.\n\nOverrides [`TINFL_FLAG_COMPUTE_ADLER32`] if both are enabled.\n\nNOTE: This flag does not exist in miniz as it does not support this and is a\ncustom addition for miniz_oxide.\n\nNOTE: Should not be changed from enabled to disabled after decompression has started,\nthis will result in checksum failure (outside the unlikely event where the checksum happens\nto match anyway).","links":{"`TINFL_FLAG_COMPUTE_ADLER32`":"0:376:2826"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"64","value":"64u32","is_literal":true}}},"a:1:2775:240-0:382:2713":{"id":"a:1:2775:240-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:926:657":{"id":"0:926:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[83,29],"end":[83,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:680-0:598:2008":{"id":"b:4:680-0:598:2008","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124:2300":{"id":"0:124:2300","crate_id":0,"name":"set_compression_level_raw","span":{"filename":"src/deflate/core.rs","begin":[492,4],"end":[495,5]},"visibility":"public","docs":"Set the compression level of the compressor using an integer value.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:682:1965":{"id":"b:1:2260-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375:2710":{"id":"0:375:2710","crate_id":0,"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","span":{"filename":"src/inflate/core.rs","begin":[128,4],"end":[128,64]},"visibility":"public","docs":"The output buffer should not wrap around.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"4","value":"4u32","is_literal":true}}},"b:1:2263-0:494:3169":{"id":"b:1:2263-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12452:11526":{"id":"1:12452:11526","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2298":{"id":"0:125:2298","crate_id":0,"name":"set_format_and_level","span":{"filename":"src/deflate/core.rs","begin":[506,4],"end":[514,5]},"visibility":"public","docs":"Update the compression settings of the compressor.\n\nChanging the `DataFormat` after compression has started will result in\na corrupted stream.\n\n# Notes\nThis function mainly intended for setting the initial settings after e.g creating with\n`default` or after calling `CompressorOxide::reset()`, and behaviour may be changed\nto disallow calling it after starting compression in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["data_format",{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["level",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:507:2062":{"id":"0:507:2062","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[52,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:876:1764":{"id":"b:1:3411-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:3508-0:909:1787":{"id":"a:1:8622:3508-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:692:1973":{"id":"0:692:1973","crate_id":0,"name":"UberCompression","span":{"filename":"src/deflate/mod.rs","begin":[24,4],"end":[24,24]},"visibility":"default","docs":"Even more checks, can be very slow.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"10","value":"10"}}}},"0:994":{"id":"0:994","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,9],"end":[178,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:995:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2581-0:382:2713":{"id":"b:1:2581-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:682:1965":{"id":"b:1:2581-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:835:2650":{"id":"b:1:2581-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2569:1990":{"id":"1:2569:1990","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:128:2311":{"id":"b:1:3411-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2570-0:835:2650":{"id":"b:1:2570-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:3508-0:871:2679":{"id":"a:1:8622:3508-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:3378-0:498:3177":{"id":"a:1:2832:3378-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:871:2679":{"id":"0:871:2679","crate_id":0,"name":"DecompressError","span":{"filename":"src/inflate/mod.rs","begin":[84,0],"end":[89,1]},"visibility":"public","docs":"Struct return when decompress_to_vec functions fail.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:872:1840","0:873:1993"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2775:240-0:871:2679","a:1:8621:3509-0:871:2679","a:1:8622:3508-0:871:2679","a:1:2792:250-0:871:2679","a:1:2832:3378-0:871:2679","b:1:2260-0:871:2679","b:1:2576-0:871:2679","b:1:2570-0:871:2679","b:1:2566-0:871:2679","b:1:2263-0:871:2679","b:1:3411-0:871:2679","b:1:2581-0:871:2679","b:4:5790-0:871:2679","0:544","0:874"]}}},"b:1:2260-0:933:1783":{"id":"b:1:2260-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12422:15888":{"id":"1:12422:15888","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:508:3166":{"id":"b:1:3411-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:920:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:128:2311":{"id":"a:1:2775:240-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:524:3170":{"id":"0:524:3170","crate_id":0,"name":"decompressor","span":{"filename":"src/inflate/stream.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Access the innner decompressor.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:621:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:845:2664":{"id":"0:845:2664","crate_id":0,"name":"Failed","span":{"filename":"src/inflate/mod.rs","begin":[44,4],"end":[44,38]},"visibility":"default","docs":"Failed to decompress due to invalid data.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-1"}}}},"b:1:2570-0:111:1992":{"id":"b:1:2570-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:2169":{"id":"0:74:2169","crate_id":0,"name":"TDEFL_GREEDY_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[175,4],"end":[175,59]},"visibility":"public","docs":"Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\nbytes to check for better matches.)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_4000","value":"16_384u32","is_literal":true}}},"0:872:1840":{"id":"0:872:1840","crate_id":0,"name":"status","span":{"filename":"src/inflate/mod.rs","begin":[86,4],"end":[86,27]},"visibility":"public","docs":"Decompressor status on failure. See [TINFLStatus] for details.","links":{"TINFLStatus":"0:835:2650"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:346:2769":{"id":"0:346:2769","crate_id":0,"name":"TINFL_LZ_DICT_SIZE","span":{"filename":"src/inflate/core.rs","begin":[11,0],"end":[11,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"usize"},"expr":"32_768","value":"32_768usize","is_literal":true}}},"0:924":{"id":"0:924","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,29],"end":[83,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:626:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:573:1841":{"id":"0:573:1841","crate_id":0,"name":"error","span":{"filename":"src/lib.rs","begin":[190,4],"end":[196,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8621:3509-0:498:3177":{"id":"a:1:8621:3509-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:868":{"id":"0:868","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:869:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:861:451":{"id":"0:861:451","crate_id":0,"name":"clone","span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:969:1820":{"id":"b:1:3411-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:3378-0:682:1965":{"id":"a:1:2832:3378-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2263-0:682:1965":{"id":"b:1:2263-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:327:1980":{"id":"0:327:1980","crate_id":0,"name":"compress_to_vec","span":{"filename":"src/deflate/mod.rs","begin":[110,0],"end":[112,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["level",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5516":{"id":"4:5516","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5517:16607","4:5518:3833","4:5521:16608","4:5524:16609","4:5532:16610","4:5533:16611","4:5534:5917","4:5535:16612","4:5536:16613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,40],"end":[194,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2570-0:128:2311":{"id":"b:1:2570-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:682:1965":{"id":"b:1:2566-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3411-0:682:1965":{"id":"b:1:3411-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:674":{"id":"0:674","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:675:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1003":{"id":"0:1003","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,40],"end":[178,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:492:3164":{"id":"0:492:3164","crate_id":0,"name":"ResetPolicy","span":{"filename":"src/inflate/stream.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"Tag that determines reset policy of [InflateState](struct.InflateState.html)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:493:2062"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:500","0:496","0:506"]}}},"0:865":{"id":"0:865","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,40],"end":[24,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:570:1830":{"id":"0:570:1830","crate_id":0,"name":"to_window_bits","span":{"filename":"src/lib.rs","begin":[166,4],"end":[171,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:998:451":{"id":"0:998:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[178,22],"end":[178,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:922":{"id":"0:922","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[83,22],"end":[83,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:923:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:629:194":{"id":"0:629:194","crate_id":0,"name":"None","span":{"filename":"src/deflate/core.rs","begin":[215,4],"end":[215,12]},"visibility":"default","docs":"Normal operation.\n\nCompress as much as there is space for, and then return waiting for more input.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"a:1:2792:250-0:655:2001":{"id":"a:1:2792:250-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2570-0:990:1834":{"id":"b:1:2570-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:886:1775":{"id":"0:886:1775","crate_id":0,"name":"Full","span":{"filename":"src/lib.rs","begin":[56,4],"end":[56,12]},"visibility":"default","docs":"Same as [`Sync`], but resets the compression dictionary so that further compressed\ndata does not depend on data compressed before the flush.\n\nHas no use in decompression, and is an error to supply in that case.","links":{"`Sync`":"1:2792:250"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,40],"end":[256,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122:2062":{"id":"0:122:2062","crate_id":0,"name":"reset","span":{"filename":"src/deflate/core.rs","begin":[468,4],"end":[475,5]},"visibility":"public","docs":"Reset the state of the compressor, keeping the same parameters.\n\nThis avoids re-allocating data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:966":{"id":"0:966","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,44],"end":[107,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:967:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:701":{"id":"0:701","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:702:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[23,0],"end":[32,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:492:3164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:497:2062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2581-0:508:3166":{"id":"b:1:2581-0:508:3166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:857":{"id":"0:857","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:858:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2263-0:835:2650":{"id":"b:1:2263-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572":{"id":"0:572","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[188,0],"end":[197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:573:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12419":{"id":"1:12419","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12420:867","1:12421:2624","1:12422:15888","1:12423:15889","1:12425:15890","1:12428:15891","1:12429:15892","1:12430:339","1:12431:338","1:12432:5601","1:12434:2395","1:12436:5602","1:12438:5603","1:12440:15893","1:12441:15894","1:12442:15895","1:12443:3036","1:12444:4515","1:12445:4679","1:12446:2361","1:12447:11649","1:12448:11687","1:12449:15896","1:12450:15897","1:12451:11678","1:12452:11526","1:12455:15898","1:12458:15899","1:12461:3641","1:12465:3609","1:12469:15900","1:12472:11644","1:12475:15901","1:12478:15902","1:12481:15903","1:12484:15904","1:12487:15905","1:12490:15906","1:12493:15907","1:12496:3286","1:12499:15908","1:12502:15909","1:12505:15910","1:12508:15911","1:12510:15912","1:12512:15913","1:12514:15914","1:12515:15915","1:12516:15916","1:12519:15917","1:12522:15918","1:12525:15919","1:12528:15920","1:12531:15921","1:12534:15922","1:12537:15923","1:12539:15924","1:12540:15925","1:12541:15926","1:12542:15927","1:12543:15928","1:12544:15929","1:12546:5852","1:12547:15930"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8622:3508-0:128:2311":{"id":"a:1:8622:3508-0:128:2311","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:698:1978":{"id":"0:698:1978","crate_id":0,"name":"DefaultCompression","span":{"filename":"src/deflate/mod.rs","begin":[28,4],"end":[28,27]},"visibility":"default","docs":"Use the default compression level.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"a:1:2792:250-0:498:3177":{"id":"a:1:2792:250-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2263-0:628:2000":{"id":"b:1:2263-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2792:250-0:494:3169":{"id":"a:1:2792:250-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2576-0:909:1787":{"id":"b:1:2576-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:934:1800":{"id":"0:934:1800","crate_id":0,"name":"ErrNo","span":{"filename":"src/lib.rs","begin":[110,4],"end":[110,14]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[242,0],"end":[252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:996"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:963":{"id":"0:963","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,40],"end":[107,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2786:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1844":{"id":"0:0:1844","crate_id":0,"name":"miniz_oxide","span":{"filename":"src/lib.rs","begin":[1,0],"end":[209,1]},"visibility":"public","docs":"A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\nDEFLATE/zlib encoder/decoder.\nUsed a rust back-end for the\n[flate2](https://github.com/alexcrichton/flate2-rs) crate.\n\n# Usage\n## Simple compression/decompression:\n``` rust\n\nuse miniz_oxide::inflate::decompress_to_vec;\nuse miniz_oxide::deflate::compress_to_vec;\n\nfn roundtrip(data: &[u8]) {\n    let compressed = compress_to_vec(data, 6);\n    let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");\n#   let _ = decompressed;\n}\n\n# roundtrip(b\"Test_data test data lalalal blabla\");\n\n```","links":{},"attrs":["#![forbid(unsafe_code)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5:1755","0:330:1756","0:876:1764","0:909:1787","0:933:1783","0:969:1820","0:571:1832","0:990:1834"],"is_stripped":false}}},"0:671":{"id":"0:671","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:672:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:2291":{"id":"0:121:2291","crate_id":0,"name":"data_format","span":{"filename":"src/deflate/core.rs","begin":[457,4],"end":[463,5]},"visibility":"public","docs":"Returns whether the compressor is wrapping the data in a zlib format or not.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:990:1834":{"id":"b:1:3411-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2263-0:498:3177":{"id":"b:1:2263-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:910:195":{"id":"0:910:195","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[89,4],"end":[89,10]},"visibility":"default","docs":"Operation succeeded.\n\nSome data was decompressed or compressed; see the byte counters in the [`StreamResult`] for\ndetails.","links":{"`StreamResult`":"0:990:1834"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:313:1989":{"id":"0:313:1989","crate_id":0,"name":"create_comp_flags_from_zip_params","span":{"filename":"src/deflate/core.rs","begin":[2350,0],"end":[2380,1]},"visibility":"public","docs":"Create a set of compression flags using parameters used by zlib and other compressors.\nMainly intended for use with transition from c libraries as it deals with raw integers.\n\n# Parameters\n`level` determines compression level. Clamped to maximum of 10. Negative values result in\n`CompressionLevel::DefaultLevel`.\n`window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate\nstream.\n`strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.\n\n# Notes\nThis function may be removed or moved to the `miniz_oxide_c_api` in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["level",{"primitive":"i32"}],["window_bits",{"primitive":"i32"}],["strategy",{"primitive":"i32"}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:871:2679":{"id":"b:1:2570-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2263-0:111:1992":{"id":"b:1:2263-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:11362"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:3378-0:382:2713":{"id":"a:1:2832:3378-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:991:1836":{"id":"0:991:1836","crate_id":0,"name":"bytes_consumed","span":{"filename":"src/lib.rs","begin":[181,4],"end":[181,29]},"visibility":"public","docs":"The number of bytes consumed from the input slice.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:923:451":{"id":"0:923:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[83,22],"end":[83,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:2826":{"id":"0:376:2826","crate_id":0,"name":"TINFL_FLAG_COMPUTE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[136,4],"end":[136,50]},"visibility":"public","docs":"Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.\n\nIf [`TINFL_FLAG_IGNORE_ADLER32`] is specified, it will override this.\n\nNOTE: Enabling/disabling this between calls to decompress will result in an incorrect\nchecksum.","links":{"`TINFL_FLAG_IGNORE_ADLER32`":"0:377:2739"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"8","value":"8u32","is_literal":true}}},"b:1:2566-0:628:2000":{"id":"b:1:2566-0:628:2000","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:680-0:682:1965":{"id":"b:4:680-0:682:1965","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:682:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:111:1992":{"id":"a:1:2775:240-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8622:3508-0:498:3177":{"id":"a:1:8622:3508-0:498:3177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:498:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8621:3509-0:871:2679":{"id":"a:1:8621:3509-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[230,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:871:2679":{"id":"b:1:2566-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:958":{"id":"0:958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,22],"end":[107,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:959:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:682:1965":{"id":"0:682:1965","crate_id":0,"name":"CompressionLevel","span":{"filename":"src/deflate/mod.rs","begin":[16,0],"end":[29,1]},"visibility":"public","docs":"How much processing the compressor should do to compress the data.\n`NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\nof checks for matches in the hash chains and whether to use lazy or greedy parsing.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:683:1967","0:686:1969","0:689:1971","0:692:1973","0:695:1976","0:698:1978"],"impls":["a:1:2775:240-0:682:1965","a:1:8621:3509-0:682:1965","a:1:8622:3508-0:682:1965","a:1:2792:250-0:682:1965","a:1:2832:3378-0:682:1965","b:1:2260-0:682:1965","b:1:2576-0:682:1965","b:1:2570-0:682:1965","b:1:2566-0:682:1965","b:1:2263-0:682:1965","b:1:3411-0:682:1965","b:1:2581-0:682:1965","b:4:680-0:682:1965","0:706","0:701","0:712","0:710","0:703","0:704","0:707","0:709"]}}},"a:1:2775:240-0:835:2650":{"id":"a:1:2775:240-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2581-0:990:1834":{"id":"b:1:2581-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12429:15892":{"id":"1:12429:15892","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:969:1820":{"id":"a:1:2775:240-0:969:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:969:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:668":{"id":"0:668","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:669:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2581-0:494:3169":{"id":"b:1:2581-0:494:3169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:494:3169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:3378-0:876:1764":{"id":"a:1:2832:3378-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:3378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,16],"end":[210,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8621:3509-0:382:2713":{"id":"a:1:8621:3509-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8622:3508-0:382:2713":{"id":"a:1:8622:3508-0:382:2713","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:382:2713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:680-0:655:2001":{"id":"b:4:680-0:655:2001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:682:4269","4:683:11363","4:684:11364"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2260-0:871:2679":{"id":"b:1:2260-0:871:2679","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:548:2631":{"id":"0:548:2631","crate_id":0,"name":"decompress_to_vec_zlib","span":{"filename":"src/inflate/mod.rs","begin":[137,0],"end":[143,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"`Vec`":"4:6912:266","DecompressError":"0:871:2679","`Result`":"1:41737:229"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:577:741":{"id":"0:577:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["res",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12519:15917":{"id":"1:12519:15917","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:672:451":{"id":"0:672:451","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLStatus","id":"0:655:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:653:777":{"id":"0:653:777","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:15918":{"id":"1:12522:15918","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:5983"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:665:2002":{"id":"0:665:2002","crate_id":0,"name":"Done","span":{"filename":"src/deflate/core.rs","begin":[275,4],"end":[275,12]},"visibility":"default","docs":"Compression succeeded and the deflate stream was ended.\n\nThis is the result of calling compression with [`TDEFLFlush::Finish`].","links":{"`TDEFLFlush::Finish`":"0:638:1777"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:1:2566-0:933:1783":{"id":"b:1:2566-0:933:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:933:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[63,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:567:996"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:526:3205":{"id":"0:526:3205","crate_id":0,"name":"new_boxed_with_window_bits","span":{"filename":"src/inflate/stream.rs","begin":[142,4],"end":[146,5]},"visibility":"public","docs":"Create a new state using miniz/zlib style window bits parameter.\n\nThe decompressor does not support different window sizes. As such,\nany positive (>0) value will set the zlib header flag, while a negative one\nwill not.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["window_bits",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Box","id":"4:276:2067","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"InflateState","id":"0:508:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:655:2001":{"id":"0:655:2001","crate_id":0,"name":"TDEFLStatus","span":{"filename":"src/deflate/core.rs","begin":[257,0],"end":[276,1]},"visibility":"public","docs":"Return status of compression.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:656:2210","0:659:2213","0:662:2004","0:665:2002"],"impls":["a:1:2775:240-0:655:2001","a:1:8621:3509-0:655:2001","a:1:8622:3508-0:655:2001","a:1:2792:250-0:655:2001","a:1:2832:3378-0:655:2001","b:1:2260-0:655:2001","b:1:2576-0:655:2001","b:1:2570-0:655:2001","b:1:2566-0:655:2001","b:1:2263-0:655:2001","b:1:3411-0:655:2001","b:1:2581-0:655:2001","b:4:680-0:655:2001","0:677","0:674","0:671","0:670","0:676","0:673","0:668","0:679"]}}},"b:1:2566-0:876:1764":{"id":"b:1:2566-0:876:1764","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:876:1764","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:1990"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8621:3509-0:990:1834":{"id":"a:1:8621:3509-0:990:1834","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:990:1834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2576-0:835:2650":{"id":"b:1:2576-0:835:2650","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:835:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:336:528":{"id":"0:336:528","crate_id":0,"name":"core","span":{"filename":"src/inflate/core.rs","begin":[1,0],"end":[1992,1]},"visibility":"public","docs":"Streaming decompression functionality.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:372:2697","0:346:2769","0:382:2713","0:458:2715"],"is_stripped":false}}},"b:1:2576-0:111:1992":{"id":"b:1:2576-0:111:1992","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:1992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:993:1840":{"id":"0:993:1840","crate_id":0,"name":"status","span":{"filename":"src/lib.rs","begin":[185,4],"end":[185,24]},"visibility":"public","docs":"The return status of the call.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"MZResult","id":"0:571:1832","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2785:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:598:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:111:1992":{"id":"0:111:1992","crate_id":0,"name":"CompressorOxide","span":{"filename":"src/deflate/core.rs","begin":[414,0],"end":[419,1]},"visibility":"public","docs":"Main compression struct.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:116","a:1:2775:240-0:111:1992","a:1:8621:3509-0:111:1992","a:1:8622:3508-0:111:1992","a:1:2792:250-0:111:1992","a:1:2832:3378-0:111:1992","b:1:2260-0:111:1992","b:1:2576-0:111:1992","b:1:2570-0:111:1992","b:1:2566-0:111:1992","b:1:2263-0:111:1992","b:1:3411-0:111:1992","b:1:2581-0:111:1992","0:126"]}}},"0:547:2009":{"id":"0:547:2009","crate_id":0,"name":"decompress_to_vec","span":{"filename":"src/inflate/mod.rs","begin":[124,0],"end":[126,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"`Vec`":"4:6912:266","DecompressError":"0:871:2679","`Result`":"1:41737:229"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:871:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2584:132":{"id":"1:2584:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32033:3374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2260-0:909:1787":{"id":"b:1:2260-0:909:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:3377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:909:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:3246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:648:657":{"id":"0:648:657","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:39148:3363":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:6216:4191":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:6808:2439":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:43360:3893":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5626:4467":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:40456:4611":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:21863:15017":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:47603:4774":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:5135:4163":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"4:7259:4144":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:22145:4529":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:45900:4723":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:41423:5167":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:43871:4582":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:44365:6011":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:1442:3343":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10201:12086":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:21327:11061":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:12717:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2257:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"0:602:2192":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Filtered"],"kind":"variant"},"1:46571:4740":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:40384:4474":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:41394:5933":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"0:550:2706":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib_with_limit"],"kind":"function"},"1:3009:121":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:52109:1601":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:43722:4662":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2537:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:40263:4597":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:30877:3595":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:45762:4717":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"0:842:2662":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Adler32Mismatch"],"kind":"variant"},"1:42624:12566":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:11667:3877":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:30285:3837":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:52112:1209":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:41740:195":{"crate_id":1,"path":["miniz_oxide","MZResult","Ok"],"kind":"variant"},"1:40586:4614":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"0:608:2195":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","RLE"],"kind":"variant"},"1:40332:4603":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"0:635:1775":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Full"],"kind":"variant"},"1:44565:4706":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3260:5840":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"0:73:2165":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_COMPUTE_ADLER32"],"kind":"constant"},"0:632:250":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Sync"],"kind":"variant"},"1:44353:4698":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"0:889:1777":{"crate_id":0,"path":["miniz_oxide","MZFlush","Finish"],"kind":"variant"},"0:974:1827":{"crate_id":0,"path":["miniz_oxide","DataFormat","Raw"],"kind":"variant"},"1:52099:689":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"0:599:120":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Default"],"kind":"variant"},"1:40030:4581":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:52110:843":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:44484:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2783:3360":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:40844:4488":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:22379:4552":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:46413:4738":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"0:848:2002":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Done"],"kind":"variant"},"1:20937:15019":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:43512:4656":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:45548:4708":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1634:630":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:0:310":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:43837:4668":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9553:3665":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:46729:4743":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2787:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:20969:15131":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:47415:4772":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:42849:3805":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:52093:1467":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:4435:3585":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11202:3903":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:2628:132":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"0:77:2179":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FILTER_MATCHES"],"kind":"constant"},"0:933:1783":{"crate_id":0,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:42594:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:30245:3330":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:2903:5827":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"0:5:1755":{"crate_id":0,"path":["miniz_oxide","deflate"],"kind":"module"},"1:9503:3664":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:1776:3339":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"0:372:2697":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags"],"kind":"module"},"4:7220:3336":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2302:458":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:42640:72":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"0:76:2176":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_RLE_MATCHES"],"kind":"constant"},"1:11886:4512":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7938:5922":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:6584:3343":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10451:3904":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:2690:5097":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12922:4207":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:42612:113":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:46169:4730":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:21153:12156":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:2534:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:52106:1602":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:42064:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"0:909:1787":{"crate_id":0,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:22372:5237":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:1482:4281":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"0:325:1755":{"crate_id":0,"path":["miniz_oxide","deflate","stream","deflate"],"kind":"function"},"1:52086:398":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:43853:4583":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:43604:4659":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:21851:3880":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1760:4318":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:5942:70":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"4:5631:3346":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:39389:4574":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3254:5838":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4821:12982":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:45823:4719":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:39109:3661":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:43975:4677":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:4032:4134":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:44006:4681":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:42222:4504":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:2243:5230":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:42344:3666":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:39978:4576":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"0:374:2740":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_HAS_MORE_INPUT"],"kind":"constant"},"0:498:3177":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ZeroReset"],"kind":"struct"},"1:40596:4480":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:1523:4284":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:43758:4663":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:45845:4720":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:45744:4716":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11243:3906":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:41737:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"0:310:2576":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress_to_output"],"kind":"function"},"1:41830:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:21759:11071":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4287:4458":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:6351:1673":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"0:952:202":{"crate_id":0,"path":["miniz_oxide","MZError","Param"],"kind":"variant"},"0:937:1805":{"crate_id":0,"path":["miniz_oxide","MZError","Stream"],"kind":"variant"},"0:605:2027":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","HuffmanOnly"],"kind":"variant"},"1:7024:5913":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:2918:5831":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:11937:3904":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"0:474:1961":{"crate_id":0,"path":["miniz_oxide","inflate","stream"],"kind":"module"},"1:46647:4742":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2887:5823":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:52101:791":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:44535:4703":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9546:115":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:3183:18030":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10601:3892":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:40171:5887":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:43818:4666":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:40446:4478":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:9502:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:6814:3347":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:46312:4735":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"0:71:2069":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags"],"kind":"module"},"1:52091:1110":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"4:7320:3343":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:5373:11341":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:40065:5876":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:39270:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2160:631":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:39210:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:40050:4452":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:1273:4273":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:41710:3506":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:22266:11620":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9521:136":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:0:528":{"crate_id":1,"path":["core"],"kind":"module"},"0:598:2008":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"0:78:2183":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_STATIC_BLOCKS"],"kind":"constant"},"1:30373:12562":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:52108:1604":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"0:549:2704":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_with_limit"],"kind":"function"},"1:21241:11070":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:2947:5837":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"0:638:1777":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Finish"],"kind":"variant"},"1:12911:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2913:5829":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2543:137":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:41780:2957":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:7488:3382":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"0:883:250":{"crate_id":0,"path":["miniz_oxide","MZFlush","Sync"],"kind":"variant"},"4:1138:18020":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:23464:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:822:4140":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:4847:849":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:2223:18077":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:4393:4155":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"0:659:2213":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","PutBufFailed"],"kind":"variant"},"1:42103:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"0:656:2210":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","BadParam"],"kind":"variant"},"1:52111:1661":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"4:7229:3343":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2324:203":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:47811:4778":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:44301:5248":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:40157:4593":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:40323:4464":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7517:125":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:40077:4586":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:21538:4526":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:4800:416":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"0:628:2000":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:2835:3359":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:20922:15019":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"0:880:1769":{"crate_id":0,"path":["miniz_oxide","MZFlush","Partial"],"kind":"variant"},"1:40141:11702":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2785:248":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:3669:4134":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11863:4511":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:41592:196":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:22254:4536":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:39292:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:30279:3331":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2896:5830":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:676:253":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3288:3361":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:7299:4307":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:21288:5795":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"4:4426:4157":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:4234:2957":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:47273:4771":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11681:5991":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:43433:3895":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4278:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:40234:3899":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:3171:2957":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:41578:4500":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8622:3508":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:42857:4640":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:7403:104":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3948:4155":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:7975:11582":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:39562:11618":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:22720:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:41796:3343":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:47665:4775":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:9926:4194":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:12126:4503":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2540:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"0:940:1808":{"crate_id":0,"path":["miniz_oxide","MZError","Data"],"kind":"variant"},"1:8623:3507":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1671:1149":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:7420:4309":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:41660:3659":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:45568:4709":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:2908:5828":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:21344:12086":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"0:839:2210":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","BadParam"],"kind":"variant"},"1:48024:4791":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10408:3887":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"0:128:2311":{"crate_id":0,"path":["miniz_oxide","deflate","core","CallbackFunc"],"kind":"struct"},"0:662:2004":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Okay"],"kind":"variant"},"1:1548:4155":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"0:972:1825":{"crate_id":0,"path":["miniz_oxide","DataFormat","ZLibIgnoreChecksum"],"kind":"variant"},"1:46853:4745":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2871:5820":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2497:12086":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:43554:3887":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:4985:4155":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:44143:4686":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:46045:4727":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:6795:3346":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:5:1673":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:41788:3659":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:20909:3595":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4210:3675":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:40042:4582":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:3217:18029":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:43281:4651":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"0:990:1834":{"crate_id":0,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:3204:4297":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:42886:2837":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:21141:11064":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"0:695:1976":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultLevel"],"kind":"variant"},"1:2366:204":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2617:120":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:9557:3667":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:7387:11324":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2329:129":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:4044:105":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:30315:12564":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"0:876:1764":{"crate_id":0,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4:1073":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:1922:3366":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:5369:11340":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"4:5994:11349":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:40124:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:21406:11058":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11826:4508":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:41668:3343":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:21975:11059":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:1825:181":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2942:5836":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:39314:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"0:892:1779":{"crate_id":0,"path":["miniz_oxide","MZFlush","Block"],"kind":"variant"},"1:47067:4748":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3273:15092":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2170:5795":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:42667:132":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:5858:3341":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:22951:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:44153:4690":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"0:686:1969":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestSpeed"],"kind":"variant"},"1:47727:4776":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3043:2992":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:10490:3888":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:43370:3894":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2669:4321":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:41507:11715":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:52103:793":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:22786:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:2546:260":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:10528:3905":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:45863:4721":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7479:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:41908:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:44081:4517":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:47922:4785":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:9559:3668":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"0:689:1971":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestCompression"],"kind":"variant"},"1:22092:4527":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:21155:5795":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"0:508:3166":{"crate_id":0,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:45882:4722":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:42689:74":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"0:877:194":{"crate_id":0,"path":["miniz_oxide","MZFlush","None"],"kind":"variant"},"1:22343:11740":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:43622:4660":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:3720:4285":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:46359:4736":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:5788:254":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:43658:3889":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:2498:3375":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4351:4183":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"0:851:2673":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","NeedsMoreInput"],"kind":"variant"},"1:43540:4584":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"0:503:3180":{"crate_id":0,"path":["miniz_oxide","inflate","stream","FullReset"],"kind":"struct"},"1:40006:4579":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"0:39:528":{"crate_id":0,"path":["miniz_oxide","deflate","core"],"kind":"module"},"1:46261:4734":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:21360:11056":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:2930:5833":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21536:11066":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:7512:4316":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:44328:126":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:21529:12086":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:41360:4494":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10670:3890":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:47971:4788":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:15:2387":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:782:4137":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4136:4455":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:6824:3348":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:2461:5092":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:2883:5824":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:5325:4134":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:39226:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:7254:5854":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"0:970:1822":{"crate_id":0,"path":["miniz_oxide","DataFormat","Zlib"],"kind":"variant"},"4:7269:18026":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2934:5834":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:1288:4276":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:40346:4606":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:2170:5225":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:6909:5927":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:32069:4559":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:10024:4202":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"3:0:3306":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:41805:198":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:40214:4594":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:21754:11063":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:44293:5246":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:7237:4306":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:7375:3337":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:22306:11746":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9565:3670":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:6981:4178":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:39990:11720":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:40610:4481":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"0:494:3169":{"crate_id":0,"path":["miniz_oxide","inflate","stream","MinReset"],"kind":"struct"},"1:7931:3358":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:44577:3369":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"0:72:2162":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_WRITE_ZLIB_HEADER"],"kind":"constant"},"1:3518:3341":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:52113:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:22214:5232":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:20950:15134":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:22918:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:45592:4710":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:40204:4185":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:45947:4724":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:5420:4155":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:44474:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:2854:5758":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:44289:5245":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:36:5091":{"crate_id":5,"path":["adler","algo","U32X4"],"kind":"struct"},"1:44548:173":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1737:5806":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:22281:4538":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"0:328:1986":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec_zlib"],"kind":"function"},"1:47948:4787":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"0:854:2675":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","HasMoreOutput"],"kind":"variant"},"4:4348:267":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:4846:220":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43828:4667":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:45660:4713":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8731:4503":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:1503:4283":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4415:3677":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:9561:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:40432:4610":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:41377:4496":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:3735:4287":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:40397:4608":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:2966:15673":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:42365:3668":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:42183:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:46883:4746":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:46191:4731":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:22393:4553":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:6956:4174":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:2962:5095":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43862:4452":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:43572:3891":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:44492:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"0:683:1967":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","NoCompression"],"kind":"variant"},"1:41566:4497":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:22198:4530":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9238:5599":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:7450:4312":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:43524:4507":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:21426:4526":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"0:552:2727":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_slice_iter_to_slice"],"kind":"function"},"0:79:2186":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_RAW_BLOCKS"],"kind":"constant"},"4:7571:3339":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:40416:4476":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:47849:4779":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8621:3509":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:9563:3669":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46617:4741":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:12704:142":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"0:314:1961":{"crate_id":0,"path":["miniz_oxide","deflate","stream"],"kind":"module"},"1:40364:4607":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:41729:208":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:12766:207":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:1426:3659":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:7434:11702":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:44054:4682":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:47896:4783":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:2959:4269":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:42025:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"0:309:1999":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress"],"kind":"function"},"1:47773:4777":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12146:5988":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2172:5796":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:43089:4650":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:3076:3334":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:44277:5242":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:52098:687":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:39336:3878":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"0:836:2658":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","FailedCannotMakeProgress"],"kind":"variant"},"1:44297:5247":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:52095:1586":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:9555:3666":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:6511:4134":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2254:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:43776:4664":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:4363:4157":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:22654:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:40276:4598":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:21103:12086":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9762:147":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:39250:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:43989:4680":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:39963:4452":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:21105:11062":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:22852:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"0:530:1756":{"crate_id":0,"path":["miniz_oxide","inflate","stream","inflate"],"kind":"function"},"1:45793:4718":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"0:373:2698":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_PARSE_ZLIB_HEADER"],"kind":"constant"},"1:12347:115":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:52087:993":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:6027:4469":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"0:916:1797":{"crate_id":0,"path":["miniz_oxide","MZStatus","NeedDict"],"kind":"variant"},"4:7328:3343":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:47525:4773":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:21510:11057":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:3233:3879":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:685:114":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3072:3333":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:5568:4465":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:3178:4296":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:52105:1605":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:30479:12563":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:40796:4484":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:3248:139":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:22687:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:43381:3901":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:7501:4315":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:42649:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"0:943:1809":{"crate_id":0,"path":["miniz_oxide","MZError","Mem"],"kind":"variant"},"1:40254:4596":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:43960:4670":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:39969:4575":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:1302:4277":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:40375:4473":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:40407:4609":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:25866:269":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:40110:4591":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:39368:4571":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:48063:4792":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:40294:4600":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:0:1845":{"crate_id":5,"path":["adler"],"kind":"module"},"4:1492:4282":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:1102:18022":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:6332:11354":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:46215:4732":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:32033:3374":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:2035:4285":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:7438:5924":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:22289:4539":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:3022:3364":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:30849:198":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:21973:12086":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:12739:12237":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"0:969:1820":{"crate_id":0,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10642:3889":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:49869:11073":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"0:382:2713":{"crate_id":0,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:5508:4155":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:47933:4786":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:40852:4490":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:6205:4475":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:43104:5240":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:7475:138":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"0:458:2715":{"crate_id":0,"path":["miniz_oxide","inflate","core","decompress"],"kind":"function"},"4:7487:246":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:11169:3902":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:52104:789":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:12081:5760":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:45993:4725":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:21404:12086":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:44309:5176":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:895:2957":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9233:11581":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2991:3362":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:45692:4714":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:40304:4602":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:22405:5761":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41947:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:22230:4531":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:40825:4616":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:44281:5243":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"0:571:1832":{"crate_id":0,"path":["miniz_oxide","MZResult"],"kind":"type_alias"},"1:12141:5989":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:946:1813":{"crate_id":0,"path":["miniz_oxide","MZError","Buf"],"kind":"variant"},"0:330:1756":{"crate_id":0,"path":["miniz_oxide","inflate"],"kind":"module"},"5:44:3236":{"crate_id":5,"path":["adler","Adler32"],"kind":"struct"},"0:949:1814":{"crate_id":0,"path":["miniz_oxide","MZError","Version"],"kind":"variant"},"1:4032:4454":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:42351:3665":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:22753:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:6663:4134":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:4282:4457":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2797:3329":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10359:2957":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:878:4142":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"0:913:1795":{"crate_id":0,"path":["miniz_oxide","MZStatus","StreamEnd"],"kind":"variant"},"1:9805:3802":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:42144:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1751:5100":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:1514:213":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:41543:5934":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:43938:6004":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:45722:4715":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:44166:4696":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2865:5821":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2875:5822":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:3142:97":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:43452:3896":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:3800:3339":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:4194:4155":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:3040:2314":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2832:3378":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44132:6005":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2849:5759":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:21412:11060":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4067:3357":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"0:611:2197":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Fixed"],"kind":"variant"},"1:10684:3886":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:41652:2957":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:3238:4302":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:41869:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:52100:794":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:40091:5877":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:7476:4164":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:21505:12086":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:52094:1499":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"4:6098:4155":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9770:151":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41337:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:41530:4629":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:7283:3343":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:6465:3341":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:30030:5721":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"0:835:2650":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:32073:4560":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:42896:4648":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:7463:4314":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:44118:4683":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:6912:266":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:40084:4587":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:52107:1603":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"0:75:2173":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_NONDETERMINISTIC_PARSING_FLAG"],"kind":"constant"},"0:377:2739":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_IGNORE_ADLER32"],"kind":"constant"},"4:2049:4287":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:43350:3883":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6211:5231":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:39195:4567":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:1411:2957":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:52089:1621":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:41677:3505":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:42874:151":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"0:375:2710":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF"],"kind":"constant"},"1:3653:3343":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:46237:4733":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10211:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2924:5832":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:3409:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:40803:4485":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12791:4523":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:2141:4288":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:48001:4790":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:44590:4707":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"0:692:1973":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","UberCompression"],"kind":"variant"},"1:46807:4744":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:44305:5249":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:30301:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:43704:4661":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:77:1661":{"crate_id":1,"path":["core","usize"],"kind":"module"},"1:39375:4572":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:41743:131":{"crate_id":1,"path":["miniz_oxide","MZResult","Err"],"kind":"variant"},"1:32181:3584":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:44186:4518":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:2970:15672":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:20952:15132":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:4164:4155":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:43462:3897":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"0:871:2679":{"crate_id":0,"path":["miniz_oxide","inflate","DecompressError"],"kind":"struct"},"4:276:2067":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:32094:4562":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:1641:3835":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10383:3659":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9872:1467":{"crate_id":1,"path":["core","slice"],"kind":"module"},"4:629:4267":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:3594:3659":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:32080:4561":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:46023:4726":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:12121:5983":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:7249:3341":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:43808:4665":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:4074:3659":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:22819:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"0:845:2664":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Failed"],"kind":"variant"},"1:43341:3882":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2276:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:41720:3569":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"0:74:2169":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_GREEDY_PARSING_FLAG"],"kind":"constant"},"1:40819:4486":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4167:4456":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4639:5870":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4406:4184":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"0:346:2769":{"crate_id":0,"path":["miniz_oxide","inflate","core","TINFL_LZ_DICT_SIZE"],"kind":"constant"},"1:40020:4580":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:22885:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:43530:4657":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:1471:2068":{"crate_id":1,"path":["core","mem"],"kind":"module"},"4:3330:3339":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:2131:4148":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:40058:4583":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:42904:4649":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"0:327:1980":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec"],"kind":"function"},"1:9992:4196":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:13014:3335":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:47876:4781":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:2960:15671":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"0:492:3164":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ResetPolicy"],"kind":"trait"},"4:1473:4280":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2829:3580":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"0:629:194":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","None"],"kind":"variant"},"1:42358:3667":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:1672:4134":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:40129:4592":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:4462:3678":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:23017:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:2782:3377":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:11902:4513":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2786:247":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:4020:4453":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:47867:4780":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:43332:3884":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:44273:5241":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:2775:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"0:886:1775":{"crate_id":0,"path":["miniz_oxide","MZFlush","Full"],"kind":"variant"},"1:2792:250":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:7291:213":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:21274:11065":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:46093:4728":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:43442:3898":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3325:3365":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:1011:4134":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:41986:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3037:3380":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:43676:3885":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:45614:4711":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:52088:447":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"4:7587:3340":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11651:3875":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"0:698:1978":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultCompression"],"kind":"variant"},"1:2844:5757":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:12192:5998":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7442:5923":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3033:3379":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"0:934:1800":{"crate_id":0,"path":["miniz_oxide","MZError","ErrNo"],"kind":"variant"},"0:0:1844":{"crate_id":0,"path":["miniz_oxide"],"kind":"module"},"1:32087:3676":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:44527:4701":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:43420:3900":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:47887:4782":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:207:3371":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:9046:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:10656:3885":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2840:3583":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:52092:336":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:10009:4197":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"0:910:195":{"crate_id":0,"path":["miniz_oxide","MZStatus","Ok"],"kind":"variant"},"1:2938:5835":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2360:197":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:35:3338":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:47986:4789":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"0:313:1989":{"crate_id":0,"path":["miniz_oxide","deflate","core","create_comp_flags_from_zip_params"],"kind":"function"},"1:2550:259":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:3581:2957":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:42584:5168":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:44285:5244":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:40834:4192":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"0:376:2826":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_COMPUTE_ADLER32"],"kind":"constant"},"1:46493:4739":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:43108:3913":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:3568:175":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2859:5819":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2879:5826":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:1374:96":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"0:682:1965":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:12135:5990":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:46390:4737":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:40314:4461":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:261:4134":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:43498:4653":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:40810:4615":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:1118:15674":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7194:4483":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:41643:2731":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:43846:4514":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"0:548:2631":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib"],"kind":"function"},"1:21197:11069":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:42865:3804":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9551:124":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:4002:3341":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9810:3803":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10563:3891":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:43407:3899":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:46139:4729":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22327:11655":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:6973:14661":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:45638:4712":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"0:665:2002":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Done"],"kind":"variant"},"4:1464:4279":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:40355:4468":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:52102:792":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:47907:4784":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7570:3381":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"0:655:2001":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:778:98":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3170:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:5973:4163":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:20967:15129":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7626:171":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:0:472":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:3212:4301":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"0:336:528":{"crate_id":0,"path":["miniz_oxide","inflate","core"],"kind":"module"},"1:40285:4599":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7934:3660":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:46917:4747":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:9051:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"0:111:1992":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:22984:182":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"0:547:2009":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec"],"kind":"function"},"1:3243:256":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:1257:11327":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:4361:3676":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:2891:5825":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2837:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"}},"external_crates":{"5":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}