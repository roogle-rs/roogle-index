{"root":"0:0:1881","crate_version":"0.7.2","includes_private":false,"index":{"b:1:2472-0:680:1999":{"id":"b:1:2472-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2995:246-0:111:2027":{"id":"a:1:2995:246-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2995:246-0:128:2345":{"id":"a:1:2995:246-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2782-0:128:2345":{"id":"b:1:2782-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13037:17145":{"id":"1:13037:17145","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:128:2345":{"id":"a:1:42396:3582-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:42396:3582-0:504:3224":{"id":"a:1:42396:3582-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:1048":{"id":"0:117:1048","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[428,4],"end":[435,5]},"visibility":"public","docs":"Create a new `CompressorOxide` with the given flags.\n\n# Notes\nThis function may be changed to take different parameters in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flags",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:4412":{"id":"1:12947:4412","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:53604:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44125:4404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531:1793":{"id":"0:531:1793","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/stream.rs","begin":[185,0],"end":[291,1]},"visibility":"public","docs":"Try to decompress from `input` to `output` with the given [`InflateState`]\n\n# `flush`\n\nGenerally, the various [`MZFlush`] flags have meaning only on the compression side.  They can be\nsupplied here, but the only one that has any semantic meaning is [`MZFlush::Finish`], which is a\nsignal that the stream is expected to finish, and failing to do so is an error.  It isn't\nnecessary to specify it when the stream ends; you'll still get returned a\n[`MZStatus::StreamEnd`] anyway.  Other values either have no effect or cause errors.  It's\nlikely that you'll almost always just want to use [`MZFlush::None`].\n\n# Errors\n\nReturns [`MZError::Buf`] if the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called with [`MZFlush::Finish`] and input wasn't all\nconsumed.\n\nReturns [`MZError::Data`] if this or a a previous call failed with an error return from\n[`TINFLStatus`]; probably indicates corrupted data.\n\nReturns [`MZError::Stream`] when called with [`MZFlush::Full`] (meaningless on\ndecompression), or when called without [`MZFlush::Finish`] after an earlier call with\n[`MZFlush::Finish`] has been made.","links":{"`MZStatus::StreamEnd`":"0:907:1832","`MZFlush::None`":"0:872:191","`MZError::Data`":"0:933:1845","`TINFLStatus`":"0:831:2683","`MZError::Buf`":"0:939:1850","`InflateState`":"0:509:3210","`MZFlush`":"0:871:1801","`MZFlush::Finish`":"0:884:1814","`MZError::Stream`":"0:930:1842","`MZFlush::Full`":"0:881:1812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"crate::MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:831:2683":{"id":"b:1:2787-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,16],"end":[194,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2787-0:871:1801":{"id":"b:1:2787-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2787-0:383:2746":{"id":"b:1:2787-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32761:237-0:495:3213":{"id":"a:1:32761:237-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42397:3581-0:831:2683":{"id":"a:1:42397:3581-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:647":{"id":"0:647","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:648:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:678:788":{"id":"0:678:788","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:2024":{"id":"0:313:2024","crate_id":0,"name":"create_comp_flags_from_zip_params","span":{"filename":"src/deflate/core.rs","begin":[2344,0],"end":[2374,1]},"visibility":"public","docs":"Create a set of compression flags using parameters used by zlib and other compressors.\nMainly intended for use with transition from c libraries as it deals with raw integers.\n\n# Parameters\n`level` determines compression level. Clamped to maximum of 10. Negative values result in\n`CompressionLevel::DefaultLevel`.\n`window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate\nstream.\n`strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.\n\n# Notes\nThis function may be removed or moved to the `miniz_oxide_c_api` in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["level",{"primitive":"i32"}],["window_bits",{"primitive":"i32"}],["strategy",{"primitive":"i32"}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2469-0:383:2746":{"id":"b:1:2469-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3608-0:926:1820":{"id":"b:1:3608-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:599:2042":{"id":"b:1:2776-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[239,0],"end":[267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2824:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:502:2096":{"id":"0:502:2096","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[39,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:996:788":{"id":"0:996:788","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[180,44],"end":[180,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12944:15846":{"id":"1:12944:15846","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12945:15847"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32761:237-0:128:2345":{"id":"a:1:32761:237-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"4:5600:17855":{"id":"4:5600:17855","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:1878":{"id":"0:574:1878","crate_id":0,"name":"error","span":{"filename":"src/lib.rs","begin":[192,4],"end":[198,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["error",{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:499:3221":{"id":"b:1:2772-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:727:4137":{"id":"4:727:4137","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:527:3249":{"id":"0:527:3249","crate_id":0,"name":"new_boxed_with_window_bits","span":{"filename":"src/inflate/stream.rs","begin":[142,4],"end":[146,5]},"visibility":"public","docs":"Create a new state using miniz/zlib style window bits parameter.\n\nThe decompressor does not support different window sizes. As such,\nany positive (>0) value will set the zlib header flag, while a negative one\nwill not.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["window_bits",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Box","id":"4:294:2101","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42397:3581-0:961:1857":{"id":"a:1:42397:3581-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:680:1999":{"id":"b:1:2772-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:948":{"id":"0:948","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,9],"end":[109,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:949:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:857:458":{"id":"0:857:458","crate_id":0,"name":"clone","span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2782-0:961:1857":{"id":"b:1:2782-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:969:724":{"id":"0:969:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12948:4587":{"id":"1:12948:4587","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:53604:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44131:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:616:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12968:3684":{"id":"1:12968:3684","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42274:191","prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32761:237-0:111:2027":{"id":"a:1:32761:237-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2776-0:128:2345":{"id":"b:1:2776-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2782-0:495:3213":{"id":"b:1:2782-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:495:3213":{"id":"0:495:3213","crate_id":0,"name":"MinReset","span":{"filename":"src/inflate/stream.rs","begin":[21,0],"end":[21,20]},"visibility":"public","docs":"Resets state, without performing expensive ops (e.g. zeroing buffer)\n\nNote that not zeroing buffer can lead to security issues when dealing with untrusted input.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:42397:3581-0:495:3213","a:1:2995:246-0:495:3213","a:1:32761:237-0:495:3213","a:1:42396:3582-0:495:3213","a:1:32818:3454-0:495:3213","b:1:2772-0:495:3213","b:1:2782-0:495:3213","b:1:2787-0:495:3213","b:1:2776-0:495:3213","b:1:2472-0:495:3213","b:1:3608-0:495:3213","b:1:2469-0:495:3213","0:497"]}}},"0:901:788":{"id":"0:901:788","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[43,44],"end":[43,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:2023":{"id":"0:120:2023","crate_id":0,"name":"flags","span":{"filename":"src/deflate/core.rs","begin":[452,4],"end":[454,5]},"visibility":"public","docs":"Get the raw compressor flags.\n\n# Notes\nThis function may be deprecated or changed in the future to use more rust-style flags.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:619:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:866:2712":{"id":"b:1:2772-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3608-0:831:2683":{"id":"b:1:3608-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32818:3454-0:961:1857":{"id":"a:1:32818:3454-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2787-0:504:3224":{"id":"b:1:2787-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:628:2034":{"id":"b:4:725-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:687:2005":{"id":"0:687:2005","crate_id":0,"name":"BestCompression","span":{"filename":"src/deflate/mod.rs","begin":[22,4],"end":[22,23]},"visibility":"default","docs":"Slow/high compression. Do a lot of checks to try to find good matches.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"9","value":"9"}}}},"b:1:2776-0:509:3210":{"id":"b:1:2776-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:859":{"id":"0:859","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:860:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83:1048":{"id":"0:83:1048","crate_id":0,"name":"new","span":{"filename":"src/deflate/core.rs","begin":[243,4],"end":[251,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"core::result::Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:654:2035":{"id":"b:1:2776-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:871:1801":{"id":"b:1:2776-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:658:2247":{"id":"0:658:2247","crate_id":0,"name":"PutBufFailed","span":{"filename":"src/deflate/core.rs","begin":[267,4],"end":[267,21]},"visibility":"default","docs":"Error putting data into output buffer.\n\nThis usually indicates a too-small buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"b:1:2472-0:903:1824":{"id":"b:1:2472-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:985":{"id":"0:985","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,9],"end":[180,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:986:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:897:667":{"id":"0:897:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[43,29],"end":[43,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:2096":{"id":"0:528:2096","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Reset the decompressor without re-allocating memory, using the given\ndata format.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:2096":{"id":"0:508:2096","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[52,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13042:16977":{"id":"1:13042:16977","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:2321":{"id":"0:119:2321","crate_id":0,"name":"prev_return_status","span":{"filename":"src/deflate/core.rs","begin":[444,4],"end":[446,5]},"visibility":"public","docs":"Get the return status of the previous [`compress`](fn.compress.html)\ncall with this compressor.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2472-0:961:1857":{"id":"b:1:2472-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:970":{"id":"0:970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,16],"end":[147,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[92,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:546:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5612:17111":{"id":"4:5612:17111","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13046:16982"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:674:667":{"id":"0:674:667","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:383:2746":{"id":"a:1:42396:3582-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2469-0:509:3210":{"id":"b:1:2469-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:652:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:675":{"id":"0:675","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,40],"end":[256,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:832:2691":{"id":"0:832:2691","crate_id":0,"name":"FailedCannotMakeProgress","span":{"filename":"src/inflate/mod.rs","begin":[34,4],"end":[34,77]},"visibility":"default","docs":"More input data was expected, but the caller indicated that there was no more data, so the\ninput stream is likely truncated.\n\nThis can't happen if you have provided the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompression.  By setting that flag, you indicate more input exists but is not provided,\nand so reaching the end of the input data without finding the end of the compressed stream\nwould instead return a [`NeedsMoreInput`][Self::NeedsMoreInput] status.","links":{"Self::NeedsMoreInput":"0:847:2706","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:375:2772"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-4"}}}},"a:1:2995:246-0:509:3210":{"id":"a:1:2995:246-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:693:2010":{"id":"0:693:2010","crate_id":0,"name":"DefaultLevel","span":{"filename":"src/deflate/mod.rs","begin":[26,4],"end":[26,20]},"visibility":"default","docs":"Default compromise between speed and compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"0:975:667":{"id":"0:975:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[147,29],"end":[147,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2782-0:866:2712":{"id":"b:1:2782-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:864:788":{"id":"0:864:788","crate_id":0,"name":"hash","span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5610:5964":{"id":"4:5610:5964","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:671:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:707":{"id":"0:707","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,40],"end":[15,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3608-0:128:2345":{"id":"b:1:3608-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:895":{"id":"0:895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,29],"end":[43,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:936:1846":{"id":"0:936:1846","crate_id":0,"name":"Mem","span":{"filename":"src/lib.rs","begin":[128,4],"end":[128,12]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-4","value":"-4"}}}},"a:1:32761:237-0:871:1801":{"id":"a:1:32761:237-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2776-0:680:1999":{"id":"b:1:2776-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:702":{"id":"0:702","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:703:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:632:246":{"id":"0:632:246","crate_id":0,"name":"Sync","span":{"filename":"src/deflate/core.rs","begin":[218,4],"end":[218,12]},"visibility":"default","docs":"Try to flush all the current data and output an empty raw block.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:2472-0:495:3213":{"id":"b:1:2472-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:992:667":{"id":"0:992:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[180,29],"end":[180,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:847:2706":{"id":"0:847:2706","crate_id":0,"name":"NeedsMoreInput","span":{"filename":"src/inflate/mod.rs","begin":[59,4],"end":[59,56]},"visibility":"default","docs":"The decompressor needs more input data to continue decompressing.\n\nThis occurs when there's no more consumable input, but the end of the stream hasn't been\nreached, and you have supplied the\n[`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the\ndecompressor.  Had you not supplied that flag (which would mean you were asserting that you\nbelieved all the data was available) you would have gotten a\n[`FailedCannotMakeProcess`][Self::FailedCannotMakeProgress] instead.","links":{"Self::FailedCannotMakeProgress":"0:832:2691","core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT":"0:375:2772"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"1"}}}},"0:74:2203":{"id":"0:74:2203","crate_id":0,"name":"TDEFL_GREEDY_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[175,4],"end":[175,59]},"visibility":"public","docs":"Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\nbytes to check for better matches.)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_4000","value":"16_384u32","is_literal":true}}},"b:1:2782-0:599:2042":{"id":"b:1:2782-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:677":{"id":"0:677","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,44],"end":[256,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:678:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506:1764":{"id":"0:506:1764","crate_id":0,"name":"0","span":{"filename":"src/inflate/stream.rs","begin":[48,21],"end":[48,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:921":{"id":"0:921","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,40],"end":[85,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:642:724":{"id":"0:642:724","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:2748":{"id":"0:459:2748","crate_id":0,"name":"decompress","span":{"filename":"src/inflate/core.rs","begin":[1156,0],"end":[1802,1]},"visibility":"public","docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.\n\n # Arguments\n\n `r` is a [`DecompressorOxide`] struct with the state of this stream.\n\n `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will\n start at the first byte of this buffer.\n\n `out` is a reference to the buffer that will store the decompressed data, and that\n stores previously decompressed data if any.\n\n * The offset given by `out_pos` indicates where in the output buffer slice writing should start.\n * If [`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`] is not set, the output buffer is used in a\n wrapping manner, and it's size is required to be a power of 2.\n * The decompression function normally needs access to 32KiB of the previously decompressed data\n(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)\n     - If this data is not available, decompression may fail.\n     - Some deflate compressors allow specifying a window size which limits match distances to\n less than this, or alternatively an RLE mode where matches will only refer to the previous byte\n and thus allows a smaller output buffer. The window size can be specified in the zlib\n header structure, however, the header data should not be relied on to be correct.\n\n `flags` indicates settings and status to the decompression function.\n * The [`TINFL_FLAG_HAS_MORE_INPUT`] has to be specified if more compressed data is to be provided\n in a subsequent call to this function.\n * See the the [`inflate_flags`] module for details on other flags.\n\n # Returns\n\n Returns a tuple containing the status of the compressor, the number of input bytes read, and the\n number of bytes output to `out`.\n\n This function shouldn't panic pending any bugs.","links":{"`TINFL_FLAG_HAS_MORE_INPUT`":"0:375:2772","`inflate_flags`":"0:373:2730","`DecompressorOxide`":"0:383:2746","`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`":"0:376:2743"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["r",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["out_pos",{"primitive":"usize"}],["flags",{"primitive":"u32"}]],"output":{"tuple":[{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2782-0:903:1824":{"id":"b:1:2782-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,29],"end":[147,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:975:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:990":{"id":"0:990","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,29],"end":[180,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:672":{"id":"0:672","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42397:3581-0:654:2035":{"id":"a:1:42397:3581-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:844:2036":{"id":"0:844:2036","crate_id":0,"name":"Done","span":{"filename":"src/inflate/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":"Finished decompression without issues.\n\nThis indicates the end of the compressed stream has been reached.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"0"}}}},"0:77:2213":{"id":"0:77:2213","crate_id":0,"name":"TDEFL_FILTER_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[182,4],"end":[182,54]},"visibility":"public","docs":"Only use matches that are at least 6 bytes long.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0002_0000","value":"131_072u32","is_literal":true}}},"a:1:32761:237-0:680:1999":{"id":"a:1:32761:237-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,44],"end":[24,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:864:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42396:3582-0:961:1857":{"id":"a:1:42396:3582-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2469-0:961:1857":{"id":"b:1:2469-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2782-0:871:1801":{"id":"b:1:2782-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12990:15855":{"id":"1:12990:15855","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:53604:454","str::splitn":"1:12987:15853","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44277:3956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2471:3290":{"id":"1:2471:3290","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:669":{"id":"0:669","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,16],"end":[256,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2995:246-0:504:3224":{"id":"a:1:2995:246-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:959:788":{"id":"0:959:788","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[109,44],"end":[109,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520:60":{"id":"0:520:60","crate_id":0,"name":"default","span":{"filename":"src/inflate/stream.rs","begin":[85,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13022:17142":{"id":"1:13022:17142","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:976":{"id":"0:976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,40],"end":[147,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13045:16981":{"id":"1:13045:16981","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:3224":{"id":"0:504:3224","crate_id":0,"name":"FullReset","span":{"filename":"src/inflate/stream.rs","begin":[48,0],"end":[48,37]},"visibility":"public","docs":"Full reset of the state, including zeroing memory.\n\nRequires to provide new data format.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:506:1764"]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42397:3581-0:504:3224","a:1:2995:246-0:504:3224","a:1:32761:237-0:504:3224","a:1:42396:3582-0:504:3224","a:1:32818:3454-0:504:3224","b:1:2772-0:504:3224","b:1:2782-0:504:3224","b:1:2787-0:504:3224","b:1:2776-0:504:3224","b:1:2472-0:504:3224","b:1:3608-0:504:3224","b:1:2469-0:504:3224","0:507"]}}},"b:1:2787-0:111:2027":{"id":"b:1:2787-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:525:3214":{"id":"0:525:3214","crate_id":0,"name":"decompressor","span":{"filename":"src/inflate/stream.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Access the innner decompressor.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:916":{"id":"0:916","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,22],"end":[85,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:917:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12920:882":{"id":"1:12920:882","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:53604:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:645:458":{"id":"0:645:458","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:2020":{"id":"0:328:2020","crate_id":0,"name":"compress_to_vec_zlib","span":{"filename":"src/deflate/mod.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10), and with a\nzlib wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["level",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:680:1999":{"id":"b:4:725-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2469-0:504:3224":{"id":"b:1:2469-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42397:3581-0:509:3210":{"id":"a:1:42397:3581-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,44],"end":[180,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:996:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2995:246-0:499:3221":{"id":"a:1:2995:246-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12936:5526":{"id":"1:12936:5526","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:15853":{"id":"1:12987:15853","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031","str::rsplitn":"1:12990:15855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44259:3960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3608-0:499:3221":{"id":"b:1:3608-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:872:191":{"id":"0:872:191","crate_id":0,"name":"None","span":{"filename":"src/lib.rs","begin":[47,4],"end":[47,12]},"visibility":"default","docs":"Don't force any flushing.\nUsed when more input data is expected.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:572:1869":{"id":"0:572:1869","crate_id":0,"name":"MZResult","span":{"filename":"src/lib.rs","begin":[177,0],"end":[177,46]},"visibility":"public","docs":"`Result` alias for all miniz status codes both successful and failed.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:32818:3454-0:871:1801":{"id":"a:1:32818:3454-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:407:2318":{"id":"0:407:2318","crate_id":0,"name":"adler32","span":{"filename":"src/inflate/core.rs","begin":[220,4],"end":[226,5]},"visibility":"public","docs":"Returns the adler32 checksum of the currently decompressed data.\nNote: Will return Some(1) if decompressing zlib but ignoring adler32.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:661:2038":{"id":"0:661:2038","crate_id":0,"name":"Okay","span":{"filename":"src/deflate/core.rs","begin":[270,4],"end":[270,12]},"visibility":"default","docs":"Compression succeeded normally.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"1:13034:17144":{"id":"1:13034:17144","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:629:191":{"id":"0:629:191","crate_id":0,"name":"None","span":{"filename":"src/deflate/core.rs","begin":[215,4],"end":[215,12]},"visibility":"default","docs":"Normal operation.\n\nCompress as much as there is space for, and then return waiting for more input.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:654:2035":{"id":"0:654:2035","crate_id":0,"name":"TDEFLStatus","span":{"filename":"src/deflate/core.rs","begin":[257,0],"end":[276,1]},"visibility":"public","docs":"Return status of compression.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:655:2244","0:658:2247","0:661:2038","0:664:2036"],"impls":["a:1:42397:3581-0:654:2035","a:1:2995:246-0:654:2035","a:1:32761:237-0:654:2035","a:1:42396:3582-0:654:2035","a:1:32818:3454-0:654:2035","b:1:2772-0:654:2035","b:1:2782-0:654:2035","b:1:2787-0:654:2035","b:1:2776-0:654:2035","b:1:2472-0:654:2035","b:1:3608-0:654:2035","b:1:2469-0:654:2035","b:4:725-0:654:2035","0:669","0:677","0:673","0:667","0:672","0:670","0:675"]}}},"b:1:2772-0:128:2345":{"id":"b:1:2772-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2995:246-0:866:2712":{"id":"a:1:2995:246-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:878:246":{"id":"0:878:246","crate_id":0,"name":"Sync","span":{"filename":"src/lib.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"Finish compressing the currently buffered data, and output an empty raw block.\nHas no use in decompression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,29],"end":[147,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12928:16974":{"id":"1:12928:16974","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12159:6039"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:903:1824":{"id":"b:1:2772-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2995:246-0:383:2746":{"id":"a:1:2995:246-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2995:246-0:961:1857":{"id":"a:1:2995:246-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32818:3454-0:981:1871":{"id":"a:1:32818:3454-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13048:16985":{"id":"1:13048:16985","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:19516"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3608-0:509:3210":{"id":"b:1:3608-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13031:17143":{"id":"1:13031:17143","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13043:16978":{"id":"1:13043:16978","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40245:5871","Self::is_ascii":"1:13042:16977"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40245:5871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:917:458":{"id":"0:917:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[85,22],"end":[85,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,40],"end":[210,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2776-0:903:1824":{"id":"b:1:2776-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:606:2061":{"id":"0:606:2061","crate_id":0,"name":"HuffmanOnly","span":{"filename":"src/deflate/core.rs","begin":[201,4],"end":[201,19]},"visibility":"default","docs":"Don't look for matches, only huffman encode the literals.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"b:1:2472-0:509:3210":{"id":"b:1:2472-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:866:2712":{"id":"b:1:2776-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42396:3582-0:981:1871":{"id":"a:1:42396:3582-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12996:15858":{"id":"1:12996:15858","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:383:2746":{"id":"b:1:2776-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2472-0:831:2683":{"id":"b:1:2472-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13005:17134":{"id":"1:13005:17134","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12613:6031","`DoubleEndedIterator`":"1:7994:131","prim@char":"1:53604:454","str::rmatch_indices":"1:13008:17135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44305:4569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2469-0:599:2042":{"id":"b:1:2469-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:841:2697":{"id":"0:841:2697","crate_id":0,"name":"Failed","span":{"filename":"src/inflate/mod.rs","begin":[44,4],"end":[44,38]},"visibility":"default","docs":"Failed to decompress due to invalid data.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-1"}}}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,16],"end":[109,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13017:17139":{"id":"1:13017:17139","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:668:724":{"id":"0:668:724","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:858":{"id":"0:858","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32818:3454-0:926:1820":{"id":"a:1:32818:3454-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12950:12517":{"id":"1:12950:12517","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12951:12503"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44429:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[517,0],"end":[528,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2824:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3608-0:495:3213":{"id":"b:1:3608-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5594:3904":{"id":"4:5594:3904","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,22],"end":[210,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:853":{"id":"0:853","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:854:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12938:5527":{"id":"1:12938:5527","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12964:3716":{"id":"1:12964:3716","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42274:191","prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919":{"id":"1:12919","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12920:882","1:12921:2657","1:12922:17123","1:12923:17124","1:12925:17125","1:12928:16974","1:12929:17126","1:12930:334","1:12931:15825","1:12932:3074","1:12934:2428","1:12936:5526","1:12938:5527","1:12940:17127","1:12941:17128","1:12942:15843","1:12943:3079","1:12944:15846","1:12945:15847","1:12947:4412","1:12948:4587","1:12949:2394","1:12950:12517","1:12951:12503","1:12952:17129","1:12953:17130","1:12954:12521","1:12955:14297","1:12958:15859","1:12961:15860","1:12964:3716","1:12968:3684","1:12972:15848","1:12975:12506","1:12978:15851","1:12981:17131","1:12984:17132","1:12987:15853","1:12990:15855","1:12993:15857","1:12996:15858","1:12999:3331","1:13002:17133","1:13005:17134","1:13008:17135","1:13011:17136","1:13013:17137","1:13015:17138","1:13017:17139","1:13018:17140","1:13019:17141","1:13022:17142","1:13025:15861","1:13028:15862","1:13031:17143","1:13034:17144","1:13037:17145","1:13040:17146","1:13042:16977","1:13043:16978","1:13044:16980","1:13045:16981","1:13046:16982","1:13047:16984","1:13048:16985","1:13049:16986","1:13050:17147","1:13052:5917","1:13053:17148"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:986:724":{"id":"0:986:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[180,9],"end":[180,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2472-0:383:2746":{"id":"b:1:2472-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2782-0:831:2683":{"id":"b:1:2782-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32818:3454-0:499:3221":{"id":"a:1:32818:3454-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:850:2708":{"id":"0:850:2708","crate_id":0,"name":"HasMoreOutput","span":{"filename":"src/inflate/mod.rs","begin":[62,4],"end":[62,54]},"visibility":"default","docs":"There is still pending data that didn't fit in the output buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"2"}}}},"0:641":{"id":"0:641","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,9],"end":[210,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:642:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32818:3454-0:599:2042":{"id":"a:1:32818:3454-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:2220":{"id":"0:79:2220","crate_id":0,"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[187,4],"end":[187,60]},"visibility":"public","docs":"Force the compressor to only output raw/uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0008_0000","value":"524_288u32","is_literal":true}}},"4:5597:17854":{"id":"4:5597:17854","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499:3221":{"id":"0:499:3221","crate_id":0,"name":"ZeroReset","span":{"filename":"src/inflate/stream.rs","begin":[35,0],"end":[35,21]},"visibility":"public","docs":"Resets state and zero memory, continuing to use the same data format.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:42397:3581-0:499:3221","a:1:2995:246-0:499:3221","a:1:32761:237-0:499:3221","a:1:42396:3582-0:499:3221","a:1:32818:3454-0:499:3221","b:1:2772-0:499:3221","b:1:2782-0:499:3221","b:1:2787-0:499:3221","b:1:2776-0:499:3221","b:1:2472-0:499:3221","b:1:3608-0:499:3221","b:1:2469-0:499:3221","0:501"]}}},"0:968":{"id":"0:968","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,9],"end":[147,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:969:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:891:724":{"id":"0:891:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[43,9],"end":[43,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:2043":{"id":"0:548:2043","crate_id":0,"name":"decompress_to_vec","span":{"filename":"src/inflate/mod.rs","begin":[125,0],"end":[127,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"`Vec`":"4:7053:263","DecompressError":"0:866:2712","`Result`":"1:42415:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:866:2712":{"id":"a:1:42396:3582-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2469-0:111:2027":{"id":"b:1:2469-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2782-0:509:3210":{"id":"b:1:2782-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:860:667":{"id":"0:860:667","crate_id":0,"name":"eq","span":{"filename":"src/inflate/mod.rs","begin":[24,29],"end":[24,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2782-0:981:1871":{"id":"b:1:2782-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:831:2683":{"id":"b:1:2776-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2787-0:499:3221":{"id":"b:1:2787-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12984:17132":{"id":"1:12984:17132","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12613:6031","str::split":"1:12972:15848","prim@char":"1:53604:454","str::split_terminator":"1:12981:17131"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44223:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:898":{"id":"0:898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,40],"end":[43,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2782-0:111:2027":{"id":"b:1:2782-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:2196":{"id":"0:72:2196","crate_id":0,"name":"TDEFL_WRITE_ZLIB_HEADER","span":{"filename":"src/deflate/core.rs","begin":[170,4],"end":[170,57]},"visibility":"public","docs":"Whether to use a zlib wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_1000","value":"4_096u32","is_literal":true}}},"b:1:2787-0:926:1820":{"id":"b:1:2787-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12981:17131":{"id":"1:12981:17131","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12613:6031","str::split":"1:12972:15848","prim@char":"1:53604:454","`DoubleEndedIterator`":"1:7994:131","str::rsplit_terminator":"1:12984:17132"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44205:4567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5611:17110":{"id":"4:5611:17110","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13045:16981"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:904:193":{"id":"0:904:193","crate_id":0,"name":"Ok","span":{"filename":"src/lib.rs","begin":[91,4],"end":[91,10]},"visibility":"default","docs":"Operation succeeded.\n\nSome data was decompressed or compressed; see the byte counters in the [`StreamResult`] for\ndetails.","links":{"`StreamResult`":"0:981:1871"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:961:1857":{"id":"0:961:1857","crate_id":0,"name":"DataFormat","span":{"filename":"src/lib.rs","begin":[149,0],"end":[157,1]},"visibility":"public","docs":"How compressed data is wrapped.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:962:1859","0:964:1862","0:966:1864"],"impls":["0:569","a:1:42397:3581-0:961:1857","a:1:2995:246-0:961:1857","a:1:32761:237-0:961:1857","a:1:42396:3582-0:961:1857","a:1:32818:3454-0:961:1857","b:1:2772-0:961:1857","b:1:2782-0:961:1857","b:1:2787-0:961:1857","b:1:2776-0:961:1857","b:1:2472-0:961:1857","b:1:3608-0:961:1857","b:1:2469-0:961:1857","b:4:725-0:961:1857","0:974","0:976","0:971","0:968","0:973","0:978","0:970"]}}},"b:1:2782-0:504:3224":{"id":"b:1:2782-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2469-0:981:1871":{"id":"b:1:2469-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2995:246-0:831:2683":{"id":"a:1:2995:246-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13002:17133":{"id":"1:13002:17133","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12613:6031","`DoubleEndedIterator`":"1:7994:131","prim@char":"1:53604:454","str::matches":"1:12999:3331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44377:4572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:903:1824":{"id":"a:1:42396:3582-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13018:17140":{"id":"1:13018:17140","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2785:138":{"id":"1:2785:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2786:1631":{"id":"1:2786:1631","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:654:2035":{"id":"b:4:725-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:374:2731":{"id":"0:374:2731","crate_id":0,"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","span":{"filename":"src/inflate/core.rs","begin":[119,4],"end":[119,52]},"visibility":"public","docs":"Should we try to parse a zlib header?\n\nIf unset, the function will expect an RFC1951 deflate stream.  If set, it will expect a\nRFC1950 zlib wrapper around the deflate stream.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"1","value":"1u32","is_literal":true}}},"0:551:2739":{"id":"0:551:2739","crate_id":0,"name":"decompress_to_vec_zlib_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[174,0],"end":[179,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"DecompressError":"0:866:2712","`TINFLStatus::HasMoreOutput`":"0:850:2708","`Vec`":"4:7053:263","`Result`":"1:42415:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32761:237-0:831:2683":{"id":"a:1:32761:237-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:987":{"id":"0:987","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,16],"end":[180,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2474:11763":{"id":"1:2474:11763","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12931:15825":{"id":"1:12931:15825","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:53621:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:111:2027":{"id":"b:1:2776-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12945:15847":{"id":"1:12945:15847","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12944:15846"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2782-0:628:2034":{"id":"b:1:2782-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2469-0:831:2683":{"id":"b:1:2469-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32818:3454-0:903:1824":{"id":"a:1:32818:3454-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13015:17138":{"id":"1:13015:17138","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12999:3331":{"id":"1:12999:3331","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12613:6031","`DoubleEndedIterator`":"1:7994:131","prim@char":"1:53604:454","str::rmatches":"1:13002:17133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44359:4571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:654:2035":{"id":"b:1:2772-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:599:2042":{"id":"b:4:725-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2469-0:499:3221":{"id":"b:1:2469-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:869":{"id":"0:869","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:870:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12975:12506":{"id":"1:12975:12506","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12429:3975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:981:1871":{"id":"b:4:725-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:635:1812":{"id":"0:635:1812","crate_id":0,"name":"Full","span":{"filename":"src/deflate/core.rs","begin":[222,4],"end":[222,12]},"visibility":"default","docs":"Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not\ndepend on previous data.","links":{"Self::Sync":"0:632:246"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"b:1:2472-0:499:3221":{"id":"b:1:2472-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:2207":{"id":"0:75:2207","crate_id":0,"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","span":{"filename":"src/deflate/core.rs","begin":[178,4],"end":[178,69]},"visibility":"public","docs":"Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\nthis flag is ignored.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_8000","value":"32_768u32","is_literal":true}}},"0:890":{"id":"0:890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,9],"end":[43,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:891:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2995:246-0:628:2034":{"id":"a:1:2995:246-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2472-0:871:1801":{"id":"b:1:2472-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:867:1877":{"id":"0:867:1877","crate_id":0,"name":"status","span":{"filename":"src/inflate/mod.rs","begin":[86,4],"end":[86,27]},"visibility":"public","docs":"Decompressor status on failure. See [TINFLStatus] for details.","links":{"TINFLStatus":"0:831:2683"},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:1:42396:3582-0:926:1820":{"id":"a:1:42396:3582-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32761:237-0:961:1857":{"id":"a:1:32761:237-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13053:17148":{"id":"1:13053:17148","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4790:17148"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44472:4481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/inflate/core.rs","begin":[204,0],"end":[237,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:405:1048","0:406:2903","0:407:2318","0:408:2909"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:705":{"id":"0:705","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:706:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:700:724":{"id":"0:700:724","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2782-0:654:2035":{"id":"b:1:2782-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12921:2657":{"id":"1:12921:2657","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2199":{"id":"0:73:2199","crate_id":0,"name":"TDEFL_COMPUTE_ADLER32","span":{"filename":"src/deflate/core.rs","begin":[172,4],"end":[172,55]},"visibility":"public","docs":"Should we compute the adler32 checksum.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0000_2000","value":"8_192u32","is_literal":true}}},"0:881:1812":{"id":"0:881:1812","crate_id":0,"name":"Full","span":{"filename":"src/lib.rs","begin":[58,4],"end":[58,12]},"visibility":"default","docs":"Same as [`Sync`], but resets the compression dictionary so that further compressed\ndata does not depend on data compressed before the flush.\n\nHas no use in decompression, and is an error to supply in that case.","links":{"`Sync`":"1:2995:246"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"b:1:2469-0:680:1999":{"id":"b:1:2469-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:309:2033":{"id":"0:309:2033","crate_id":0,"name":"compress","span":{"filename":"src/deflate/core.rs","begin":[2204,0],"end":[2215,1]},"visibility":"public","docs":"Main compression function. Tries to compress as much as possible from `in_buf` and\nputs compressed output into `out_buf`.\n\nThe value of `flush` determines if the compressor should attempt to flush all output\nand alternatively try to finish the stream.\n\nUse [`TDEFLFlush::Finish`] on the final call to signal that the stream is finishing.\n\nNote that this function does not keep track of whether a flush marker has been output, so\nif called using [`TDEFLFlush::Sync`], the caller needs to ensure there is enough space in the\noutput buffer if they want to avoid repeated flush markers.\nSee #105 for details.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer and the current position in the output buffer.","links":{"`TDEFLFlush::Finish`":"0:638:1814","`TDEFLFlush::Sync`":"0:632:246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["out_buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2995:246-0:981:1871":{"id":"a:1:2995:246-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[23,0],"end":[32,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:493:3208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:2096"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:915":{"id":"0:915","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,16],"end":[85,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:111:2027":{"id":"b:1:2772-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:499:3221":{"id":"b:1:2776-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3608-0:903:1824":{"id":"b:1:3608-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12940:17127":{"id":"1:12940:17127","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:53610:1549","str::slice_mut_unchecked":"1:12941:17128","crate::ops::Index":"1:39891:3381"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:2746":{"id":"0:383:2746","crate_id":0,"name":"DecompressorOxide","span":{"filename":"src/inflate/core.rs","begin":[169,0],"end":[202,1]},"visibility":"public","docs":"Main decompression struct.\n","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:404","a:1:42397:3581-0:383:2746","a:1:2995:246-0:383:2746","a:1:32761:237-0:383:2746","a:1:42396:3582-0:383:2746","a:1:32818:3454-0:383:2746","b:1:2772-0:383:2746","b:1:2782-0:383:2746","b:1:2787-0:383:2746","b:1:2776-0:383:2746","b:1:2472-0:383:2746","b:1:3608-0:383:2746","b:1:2469-0:383:2746","0:409"]}}},"a:1:42396:3582-0:111:2027":{"id":"a:1:42396:3582-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:926:1820":{"id":"0:926:1820","crate_id":0,"name":"MZError","span":{"filename":"src/lib.rs","begin":[110,0],"end":[144,1]},"visibility":"public","docs":"A list of miniz failed status codes.\n\nThese are emitted as the [`Err`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:531:1793","`StreamResult`":"0:981:1871","`deflate::stream::deflate()`":"0:325:1792","`Err`":"1:42421:137","`MZResult`":"0:572:1869"},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:927:1837","0:930:1842","0:933:1845","0:936:1846","0:939:1850","0:942:1851","0:945:200"],"impls":["a:1:42397:3581-0:926:1820","a:1:2995:246-0:926:1820","a:1:32761:237-0:926:1820","a:1:42396:3582-0:926:1820","a:1:32818:3454-0:926:1820","b:1:2772-0:926:1820","b:1:2782-0:926:1820","b:1:2787-0:926:1820","b:1:2776-0:926:1820","b:1:2472-0:926:1820","b:1:3608-0:926:1820","b:1:2469-0:926:1820","b:4:725-0:926:1820","0:950","0:948","0:954","0:951","0:953","0:958","0:956"]}}},"b:1:2782-0:499:3221":{"id":"b:1:2782-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:962:1859":{"id":"0:962:1859","crate_id":0,"name":"Zlib","span":{"filename":"src/lib.rs","begin":[151,4],"end":[151,8]},"visibility":"default","docs":"Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:900":{"id":"0:900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,44],"end":[43,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:901:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42397:3581-0:128:2345":{"id":"a:1:42397:3581-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:3608-0:866:2712":{"id":"b:1:3608-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12953:17130":{"id":"1:12953:17130","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44419:4574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32818:3454-0:680:1999":{"id":"a:1:32818:3454-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:910:1834":{"id":"0:910:1834","crate_id":0,"name":"NeedDict","span":{"filename":"src/lib.rs","begin":[101,4],"end":[101,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"1:13052:5917":{"id":"1:13052:5917","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4793:5917"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44463:4347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:17141":{"id":"1:13019:17141","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12638:6036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42397:3581-0:680:1999":{"id":"a:1:42397:3581-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:942:1851":{"id":"0:942:1851","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[137,4],"end":[137,16]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-6","value":"-6"}}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,29],"end":[109,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:913":{"id":"0:913","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,9],"end":[85,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:914:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:314:1995":{"id":"0:314:1995","crate_id":0,"name":"stream","span":{"filename":"src/deflate/stream.rs","begin":[1,0],"end":[121,1]},"visibility":"public","docs":"Extra streaming compression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.\n\nThere is no DeflateState as the needed state is contained in the compressor struct itself.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:325:1792"],"is_stripped":false}}},"0:576:751":{"id":"0:576:751","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["res",{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:709":{"id":"0:709","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:710:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2772-0:961:1857":{"id":"b:1:2772-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:2217":{"id":"0:78:2217","crate_id":0,"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","span":{"filename":"src/deflate/core.rs","begin":[185,4],"end":[185,63]},"visibility":"public","docs":"Force the compressor to only output static blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0004_0000","value":"262_144u32","is_literal":true}}},"0:543:2709":{"id":"0:543:2709","crate_id":0,"name":"from_i32","span":{"filename":"src/inflate/mod.rs","begin":[66,4],"end":[78,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42397:3581-0:871:1801":{"id":"a:1:42397:3581-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1881":{"id":"0:0:1881","crate_id":0,"name":"miniz_oxide","span":{"filename":"src/lib.rs","begin":[1,0],"end":[211,1]},"visibility":"public","docs":"A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\nDEFLATE/zlib encoder/decoder.\nUsed a rust back-end for the\n[flate2](https://github.com/alexcrichton/flate2-rs) crate.\n\n# Usage\n## Simple compression/decompression:\n``` rust\n\nuse miniz_oxide::inflate::decompress_to_vec;\nuse miniz_oxide::deflate::compress_to_vec;\n\nfn roundtrip(data: &[u8]) {\n    let compressed = compress_to_vec(data, 6);\n    let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");\n#   let _ = decompressed;\n}\n\n# roundtrip(b\"Test_data test data lalalal blabla\");","links":{},"attrs":["#![forbid(unsafe_code)]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5:1792","0:330:1793","0:871:1801","0:903:1824","0:926:1820","0:961:1857","0:572:1869","0:981:1871"],"is_stripped":false}}},"b:1:3608-0:654:2035":{"id":"b:1:3608-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2995:246-0:599:2042":{"id":"a:1:2995:246-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2472-0:128:2345":{"id":"b:1:2472-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2782-0:680:1999":{"id":"b:1:2782-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:549:2664":{"id":"0:549:2664","crate_id":0,"name":"decompress_to_vec_zlib","span":{"filename":"src/inflate/mod.rs","begin":[138,0],"end":[144,1]},"visibility":"public","docs":"Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n\nNOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.\nIt is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or\nideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","links":{"`Vec`":"4:7053:263","DecompressError":"0:866:2712","`Result`":"1:42415:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2995:246-0:680:1999":{"id":"a:1:2995:246-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42396:3582-0:499:3221":{"id":"a:1:42396:3582-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42397:3581-0:981:1871":{"id":"a:1:42397:3581-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:121:2325":{"id":"0:121:2325","crate_id":0,"name":"data_format","span":{"filename":"src/deflate/core.rs","begin":[457,4],"end":[463,5]},"visibility":"public","docs":"Returns whether the compressor is wrapping the data in a zlib format or not.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32818:3454-0:504:3224":{"id":"a:1:32818:3454-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12929:17126":{"id":"1:12929:17126","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:599:2042":{"id":"a:1:42396:3582-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:347:2803":{"id":"0:347:2803","crate_id":0,"name":"TINFL_LZ_DICT_SIZE","span":{"filename":"src/inflate/core.rs","begin":[12,0],"end":[12,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"usize"},"expr":"32_768","value":"32_768usize","is_literal":true}}},"a:1:32818:3454-0:383:2746":{"id":"a:1:32818:3454-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:951":{"id":"0:951","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,22],"end":[109,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:952:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:60":{"id":"0:127:60","crate_id":0,"name":"default","span":{"filename":"src/deflate/core.rs","begin":[520,4],"end":[527,5]},"visibility":"default","docs":"Initialize the compressor with a level of 4, zlib wrapper and\nthe default strategy.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:622:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:498:2096":{"id":"0:498:2096","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[24,4],"end":[31,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600:126":{"id":"0:600:126","crate_id":0,"name":"Default","span":{"filename":"src/deflate/core.rs","begin":[197,4],"end":[197,15]},"visibility":"default","docs":"Don't use any of the special strategies.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[98,0],"end":[160,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:523:1048","0:524:3242","0:525:3214","0:526:3219","0:527:3249","0:528:2096","0:529:3252"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32761:237-0:504:3224":{"id":"a:1:32761:237-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:949:724":{"id":"0:949:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[109,9],"end":[109,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5593:17853":{"id":"4:5593:17853","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:294:2101","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:294:2101","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2995:246-0:654:2035":{"id":"a:1:2995:246-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:577":{"id":"0:577","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[207,0],"end":[211,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZResult","id":"0:572:1869","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:578:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2469-0:871:1801":{"id":"b:1:2469-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13028:15862":{"id":"1:13028:15862","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32761:237-0:628:2034":{"id":"a:1:32761:237-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:526:3219":{"id":"0:526:3219","crate_id":0,"name":"last_status","span":{"filename":"src/inflate/stream.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Return the status of the last call to `inflate` with this `InflateState`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:509:3210":{"id":"a:1:42396:3582-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32818:3454-0:831:2683":{"id":"a:1:32818:3454-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:855":{"id":"0:855","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,16],"end":[24,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32818:3454-0:654:2035":{"id":"a:1:32818:3454-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:728:11764":{"id":"4:728:11764","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:681:2001":{"id":"0:681:2001","crate_id":0,"name":"NoCompression","span":{"filename":"src/deflate/mod.rs","begin":[18,4],"end":[18,21]},"visibility":"default","docs":"Don't do any compression, only output uncompressed blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:550:2737":{"id":"0:550:2737","crate_id":0,"name":"decompress_to_vec_with_limit","span":{"filename":"src/inflate/mod.rs","begin":[157,0],"end":[162,1]},"visibility":"public","docs":"Decompress the deflate-encoded data in `input` to a vector.\n\nThe vector is grown to at most `max_size` bytes; if the data does not fit in that size,\nthe error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.\n\nAs this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.\nIt is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.\n\nReturns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","links":{"DecompressError":"0:866:2712","`TINFLStatus::HasMoreOutput`":"0:850:2708","`Vec`":"4:7053:263","`Result`":"1:42415:226"},"attrs":["#[inline]","#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["max_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:680:1999":{"id":"b:1:2787-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:989:458":{"id":"0:989:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[180,22],"end":[180,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:926:1820":{"id":"b:1:2776-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:696:2012":{"id":"0:696:2012","crate_id":0,"name":"DefaultCompression","span":{"filename":"src/deflate/mod.rs","begin":[28,4],"end":[28,27]},"visibility":"default","docs":"Use the default compression level.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"b:1:3608-0:599:2042":{"id":"b:1:3608-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:623":{"id":"0:623","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,40],"end":[194,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2472-0:628:2034":{"id":"b:1:2472-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:325:1792":{"id":"0:325:1792","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/stream.rs","begin":[22,0],"end":[97,1]},"visibility":"public","docs":"Try to compress from input to output with the given [`CompressorOxide`].\n\n# Errors\n\nReturns [`MZError::Buf`] If the size of the `output` slice is empty or no progress was made due\nto lack of expected input data, or if called without [`MZFlush::Finish`] after the compression\nwas already finished.\n\nReturns [`MZError::Param`] if the compressor parameters are set wrong.\n\nReturns [`MZError::Stream`] when lower-level decompressor returns a\n[`TDEFLStatus::PutBufFailed`]; may not actually be possible.","links":{"`TDEFLStatus::PutBufFailed`":"0:658:2247","`MZFlush::Finish`":"0:884:1814","`MZError::Stream`":"0:930:1842","`CompressorOxide`":"0:111:2027","`MZError::Param`":"0:945:200","`MZError::Buf`":"0:939:1850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["compressor",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"crate::deflate::core::CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["output",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"crate::MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:383:2746":{"id":"b:1:2772-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:570:1865":{"id":"0:570:1865","crate_id":0,"name":"from_window_bits","span":{"filename":"src/lib.rs","begin":[160,4],"end":[166,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["window_bits",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2791:1629":{"id":"1:2791:1629","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13008:17135":{"id":"1:13008:17135","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12613:6031","`DoubleEndedIterator`":"1:7994:131","prim@char":"1:53604:454","str::match_indices":"1:13005:17134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44323:4570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:680:1999":{"id":"a:1:42396:3582-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:725-0:871:1801":{"id":"b:4:725-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:961:1857":{"id":"b:4:725-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32818:3454-0:111:2027":{"id":"a:1:32818:3454-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12952:17129":{"id":"1:12952:17129","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44409:4573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:920:667":{"id":"0:920:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[85,29],"end":[85,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:871:1801":{"id":"a:1:42396:3582-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:628:2034":{"id":"b:1:2772-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5592":{"id":"4:5592","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5593:17853","4:5594:3904","4:5597:17854","4:5600:17855","4:5608:17856","4:5609:17857","4:5610:5964","4:5611:17110","4:5612:17111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:955:667":{"id":"0:955:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[109,29],"end":[109,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2469-0:654:2035":{"id":"b:1:2469-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:612:2231":{"id":"0:612:2231","crate_id":0,"name":"Fixed","span":{"filename":"src/deflate/core.rs","begin":[206,4],"end":[206,13]},"visibility":"default","docs":"Only use static/fixed blocks. (Blocks using the default huffman codes\nspecified in the deflate specification.)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"b:1:2472-0:111:2027":{"id":"b:1:2472-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:856":{"id":"0:856","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,22],"end":[24,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:857:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32761:237-0:866:2712":{"id":"a:1:32761:237-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:870:724":{"id":"0:870:724","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[83,9],"end":[83,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:574:1878"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:884:1814":{"id":"0:884:1814","crate_id":0,"name":"Finish","span":{"filename":"src/lib.rs","begin":[60,4],"end":[60,14]},"visibility":"default","docs":"Attempt to flush the remaining data and end the stream.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"b:1:2469-0:903:1824":{"id":"b:1:2469-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:616:724":{"id":"0:616:724","crate_id":0,"name":"fmt","span":{"filename":"src/deflate/core.rs","begin":[194,9],"end":[194,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42397:3581-0:111:2027":{"id":"a:1:42397:3581-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:622:667":{"id":"0:622:667","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3608-0:871:1801":{"id":"b:1:3608-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42397:3581-0:903:1824":{"id":"a:1:42397:3581-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13047:16984":{"id":"1:13047:16984","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:19516"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:652:788":{"id":"0:652:788","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[210,44],"end":[210,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12930:334":{"id":"1:12930:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12931:15825","`u8`":"1:53621:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:710:788":{"id":"0:710:788","crate_id":0,"name":"hash","span":{"filename":"src/deflate/mod.rs","begin":[15,44],"end":[15,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:553:2760":{"id":"0:553:2760","crate_id":0,"name":"decompress_slice_iter_to_slice","span":{"filename":"src/inflate/mod.rs","begin":[244,0],"end":[281,1]},"visibility":"public","docs":"Decompress one or more source slices from an iterator into the output slice.\n\n* On success, returns the number of bytes that were written.\n* On failure, returns the failure status code.\n\nThis will fail if the output buffer is not large enough, but in that case\nthe output buffer will still contain the partial decompression.\n\n* `out` the output buffer.\n* `it` the iterator of input slices.\n* `zlib_header` if the first slice out of the iterator is expected to have a\n  Zlib header. Otherwise the slices are assumed to be the deflate data only.\n* `ignore_adler32` if the adler32 checksum should be calculated or not.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["out",{"borrowed_ref":{"lifetime":"'out","mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["it",{"impl_trait":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8103:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'inp","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["zlib_header",{"primitive":"bool"}],["ignore_adler32",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'out","kind":{"lifetime":{"outlives":[]}}},{"name":"'inp","kind":{"lifetime":{"outlives":[]}}},{"name":"impl Iterator<Item = &'inp [u8]>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8103:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'inp","mutable":false,"type":{"slice":{"primitive":"u8"}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:667":{"id":"0:667","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,9],"end":[256,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:668:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:2210":{"id":"0:76:2210","crate_id":0,"name":"TDEFL_RLE_MATCHES","span":{"filename":"src/deflate/core.rs","begin":[180,4],"end":[180,51]},"visibility":"public","docs":"Only look for matches with a distance of 0.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"0x0001_0000","value":"65_536u32","is_literal":true}}},"0:571:1867":{"id":"0:571:1867","crate_id":0,"name":"to_window_bits","span":{"filename":"src/lib.rs","begin":[168,4],"end":[173,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524:3242":{"id":"0:524:3242","crate_id":0,"name":"new_boxed","span":{"filename":"src/inflate/stream.rs","begin":[120,4],"end":[124,5]},"visibility":"public","docs":"Create a new state on the heap.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:294:2101","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:933:1845":{"id":"0:933:1845","crate_id":0,"name":"Data","span":{"filename":"src/lib.rs","begin":[125,4],"end":[125,13]},"visibility":"default","docs":"Error in inflation; see [`inflate::stream::inflate()`] for details.\n\nNot returned from [`deflate::stream::deflate()`].","links":{"`deflate::stream::deflate()`":"0:325:1792","`inflate::stream::inflate()`":"0:531:1793"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-3","value":"-3"}}}},"a:1:42397:3581-0:383:2746":{"id":"a:1:42397:3581-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32761:237-0:509:3210":{"id":"a:1:32761:237-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:831:2683":{"id":"b:1:2772-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:982:1873":{"id":"0:982:1873","crate_id":0,"name":"bytes_consumed","span":{"filename":"src/lib.rs","begin":[183,4],"end":[183,29]},"visibility":"public","docs":"The number of bytes consumed from the input slice.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"0:578:751":{"id":"0:578:751","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[208,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["res",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:903:1824":{"id":"b:1:2787-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:493:3208":{"id":"0:493:3208","crate_id":0,"name":"ResetPolicy","span":{"filename":"src/inflate/stream.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"Tag that determines reset policy of [InflateState](struct.InflateState.html)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:494:2096"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:501","0:507","0:497"]}}},"0:81:751":{"id":"0:81:751","crate_id":0,"name":"from","span":{"filename":"src/deflate/core.rs","begin":[231,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32818:3454-0:495:3213":{"id":"a:1:32818:3454-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2995:246-0:926:1820":{"id":"a:1:2995:246-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2469-0:926:1820":{"id":"b:1:2469-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:893":{"id":"0:893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:894:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:310:2609":{"id":"0:310:2609","crate_id":0,"name":"compress_to_output","span":{"filename":"src/deflate/core.rs","begin":[2225,0],"end":[2243,1]},"visibility":"public","docs":"Main compression function. Callbacks output.\n\n# Returns\nReturns a tuple containing the current status of the compressor, the current position\nin the input buffer.\n\nThe caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined\nbehaviour.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["in_buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["flush",{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["callback_func",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3238:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"tuple":[{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&[u8]) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3238:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:2347":{"id":"0:130:2347","crate_id":0,"name":"put_buf_func","span":{"filename":"src/deflate/core.rs","begin":[532,4],"end":[532,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"dyn_trait":{"traits":[{"trait":{"name":"FnMut","id":"1:3238:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],"output":{"primitive":"bool"}}}},"generic_params":[]}],"lifetime":null}}}}}},"0:907:1832":{"id":"0:907:1832","crate_id":0,"name":"StreamEnd","span":{"filename":"src/lib.rs","begin":[98,4],"end":[98,17]},"visibility":"default","docs":"Operation succeeded and end of deflate stream was found.\n\nX-ref [`TINFLStatus::Done`][inflate::TINFLStatus::Done] or\n[`TDEFLStatus::Done`][deflate::core::TDEFLStatus::Done] for `inflate` or `deflate`\nrespectively.","links":{"inflate::TINFLStatus::Done":"0:844:2036","deflate::core::TDEFLStatus::Done":"0:664:2036"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[159,0],"end":[174,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:570:1865","0:571:1867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:972:458":{"id":"0:972:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[147,22],"end":[147,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:680:1999":{"id":"0:680:1999","crate_id":0,"name":"CompressionLevel","span":{"filename":"src/deflate/mod.rs","begin":[16,0],"end":[29,1]},"visibility":"public","docs":"How much processing the compressor should do to compress the data.\n`NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\nof checks for matches in the hash chains and whether to use lazy or greedy parsing.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:681:2001","0:684:2003","0:687:2005","0:690:2007","0:693:2010","0:696:2012"],"impls":["a:1:42397:3581-0:680:1999","a:1:2995:246-0:680:1999","a:1:32761:237-0:680:1999","a:1:42396:3582-0:680:1999","a:1:32818:3454-0:680:1999","b:1:2772-0:680:1999","b:1:2782-0:680:1999","b:1:2787-0:680:1999","b:1:2776-0:680:1999","b:1:2472-0:680:1999","b:1:3608-0:680:1999","b:1:2469-0:680:1999","b:4:725-0:680:1999","0:705","0:699","0:704","0:702","0:707","0:709","0:701"]}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[37,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:493:3208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:502:2096"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2469-0:866:2712":{"id":"b:1:2469-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:896":{"id":"0:896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,29],"end":[43,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:897:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42397:3581-0:866:2712":{"id":"a:1:42397:3581-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5868:1606":{"id":"4:5868:1606","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:930:1842":{"id":"0:930:1842","crate_id":0,"name":"Stream","span":{"filename":"src/lib.rs","begin":[120,4],"end":[120,15]},"visibility":"default","docs":"General stream error.\n\nSee [`inflate::stream::inflate()`] docs for details of how it can occur there.\n\nSee [`deflate::stream::deflate()`] docs for how it can in principle occur there, though it's\nbelieved impossible in practice.","links":{"`deflate::stream::deflate()`":"0:325:1792","`inflate::stream::inflate()`":"0:531:1793"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-2","value":"-2"}}}},"0:988":{"id":"0:988","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,22],"end":[180,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:989:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2787-0:981:1871":{"id":"b:1:2787-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2787-0:961:1857":{"id":"b:1:2787-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:981:1871":{"id":"0:981:1871","crate_id":0,"name":"StreamResult","span":{"filename":"src/lib.rs","begin":[181,0],"end":[188,1]},"visibility":"public","docs":"A structure containing the result of a call to the inflate or deflate streaming functions.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:982:1873","0:983:1875","0:984:1877"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:573","a:1:42397:3581-0:981:1871","a:1:2995:246-0:981:1871","a:1:32761:237-0:981:1871","a:1:42396:3582-0:981:1871","a:1:32818:3454-0:981:1871","b:1:2772-0:981:1871","b:1:2782-0:981:1871","b:1:2787-0:981:1871","b:1:2776-0:981:1871","b:1:2472-0:981:1871","b:1:3608-0:981:1871","b:1:2469-0:981:1871","b:4:725-0:981:1871","0:990","0:991","0:985","0:577","0:575","0:993","0:988","0:995","0:987"]}}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[65,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:568:1048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2787-0:128:2345":{"id":"b:1:2787-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2790:138":{"id":"1:2790:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32689:3428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:684:2003":{"id":"0:684:2003","crate_id":0,"name":"BestSpeed","span":{"filename":"src/deflate/mod.rs","begin":[20,4],"end":[20,17]},"visibility":"default","docs":"Fast compression. Uses a special compression routine that is optimized for speed.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:5:1792":{"id":"0:5:1792","crate_id":0,"name":"deflate","span":{"filename":"src/deflate/mod.rs","begin":[1,0],"end":[226,1]},"visibility":"public","docs":"This module contains functionality for compression.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:39:537","0:314:1995","0:680:1999","0:327:2014","0:328:2020"],"is_stripped":false}}},"b:1:2787-0:495:3213":{"id":"b:1:2787-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3608-0:504:3224":{"id":"b:1:3608-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:523:1048":{"id":"0:523:1048","crate_id":0,"name":"new","span":{"filename":"src/inflate/stream.rs","begin":[107,4],"end":[112,5]},"visibility":"public","docs":"Create a new state.\n\nNote that this struct is quite large due to internal buffers, and as such storing it on\nthe stack is not recommended.\n\n# Parameters\n`data_format`: Determines whether the compressed data is assumed to wrapped with zlib\nmetadata.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12923:17124":{"id":"1:12923:17124","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[423,0],"end":[515,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:1048","0:118:2318","0:119:2321","0:120:2023","0:121:2325","0:122:2096","0:123:2331","0:124:2334","0:125:2332"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32818:3454-0:866:2712":{"id":"a:1:32818:3454-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:128:2345":{"id":"0:128:2345","crate_id":0,"name":"CallbackFunc","span":{"filename":"src/deflate/core.rs","begin":[531,0],"end":[533,1]},"visibility":"public","docs":"Callback function and user used in `compress_to_output`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:130:2347"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:1:42397:3581-0:128:2345","a:1:2995:246-0:128:2345","a:1:32761:237-0:128:2345","a:1:42396:3582-0:128:2345","a:1:32818:3454-0:128:2345","b:1:2772-0:128:2345","b:1:2782-0:128:2345","b:1:2787-0:128:2345","b:1:2776-0:128:2345","b:1:2472-0:128:2345","b:1:3608-0:128:2345","b:1:2469-0:128:2345"]}}},"b:1:2772-0:981:1871":{"id":"b:1:2772-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378:2771":{"id":"0:378:2771","crate_id":0,"name":"TINFL_FLAG_IGNORE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[154,4],"end":[154,50]},"visibility":"public","docs":"Ignore adler32 checksum even if we are inflating a zlib stream.\n\nOverrides [`TINFL_FLAG_COMPUTE_ADLER32`] if both are enabled.\n\nNOTE: This flag does not exist in miniz as it does not support this and is a\ncustom addition for miniz_oxide.\n\nNOTE: Should not be changed from enabled to disabled after decompression has started,\nthis will result in checksum failure (outside the unlikely event where the checksum happens\nto match anyway).","links":{"`TINFL_FLAG_COMPUTE_ADLER32`":"0:377:2861"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"64","value":"64u32","is_literal":true}}},"0:914:724":{"id":"0:914:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[85,9],"end":[85,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:1048":{"id":"0:568:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[69,4],"end":[77,5]},"visibility":"public","docs":"Create an MZFlush value from an integer value.\n\nReturns `MZError::Param` on invalid values.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["flush",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42397:3581-0:504:3224":{"id":"a:1:42397:3581-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:504:3224":{"id":"b:1:2772-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2472-0:504:3224":{"id":"b:1:2472-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:504:3224":{"id":"b:1:2776-0:504:3224","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:838:2695":{"id":"0:838:2695","crate_id":0,"name":"Adler32Mismatch","span":{"filename":"src/inflate/mod.rs","begin":[41,4],"end":[41,57]},"visibility":"default","docs":"The decompression went fine, but the adler32 checksum did not match the one\nprovided in the header.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-2"}}}},"0:327:2014":{"id":"0:327:2014","crate_id":0,"name":"compress_to_vec","span":{"filename":"src/deflate/mod.rs","begin":[110,0],"end":[112,1]},"visibility":"public","docs":"Compress the input data to a vector, using the specified compression level (0-10).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["level",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:537":{"id":"0:39:537","crate_id":0,"name":"core","span":{"filename":"src/deflate/core.rs","begin":[1,0],"end":[2456,1]},"visibility":"public","docs":"Streaming compression functionality.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:71:2103","0:599:2042","0:628:2034","0:654:2035","0:111:2027","0:128:2345","0:309:2033","0:310:2609","0:313:2024"],"is_stripped":false}}},"0:918":{"id":"0:918","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,29],"end":[85,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2782-0:926:1820":{"id":"b:1:2782-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:2103":{"id":"0:71:2103","crate_id":0,"name":"deflate_flags","span":{"filename":"src/deflate/core.rs","begin":[168,0],"end":[168,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:72:2196","0:73:2199","0:74:2203","0:75:2207","0:76:2210","0:77:2213","0:78:2217","0:79:2220"],"is_stripped":false}}},"b:1:3608-0:111:2027":{"id":"b:1:3608-0:111:2027","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressorOxide","id":"0:111:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2787-0:654:2035":{"id":"b:1:2787-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32818:3454-0:128:2345":{"id":"a:1:32818:3454-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:655:2244":{"id":"0:655:2244","crate_id":0,"name":"BadParam","span":{"filename":"src/deflate/core.rs","begin":[262,4],"end":[262,17]},"visibility":"default","docs":"Usage error.\n\nThis indicates that either the [`CompressorOxide`] experienced a previous error, or the\nstream has already been [`TDEFLFlush::Finish`]'d.","links":{"`CompressorOxide`":"0:111:2027","`TDEFLFlush::Finish`":"0:638:1814"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-2","value":"-2"}}}},"b:1:2472-0:866:2712":{"id":"b:1:2472-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,44],"end":[147,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:979:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:993":{"id":"0:993","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,40],"end":[180,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2787-0:628:2034":{"id":"b:1:2787-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:979:788":{"id":"0:979:788","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[147,44],"end":[147,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12958:15859":{"id":"1:12958:15859","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2334":{"id":"0:124:2334","crate_id":0,"name":"set_compression_level_raw","span":{"filename":"src/deflate/core.rs","begin":[492,4],"end":[495,5]},"visibility":"public","docs":"Set the compression level of the compressor using an integer value.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:983:1875":{"id":"0:983:1875","crate_id":0,"name":"bytes_written","span":{"filename":"src/lib.rs","begin":[185,4],"end":[185,28]},"visibility":"public","docs":"The number of bytes written to the output slice.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"usize"}}},"a:1:32818:3454-0:628:2034":{"id":"a:1:32818:3454-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:892":{"id":"0:892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[43,16],"end":[43,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13050:17147":{"id":"1:13050:17147","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4792:17147"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44454:4482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13013:17137":{"id":"1:13013:17137","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:664:2036":{"id":"0:664:2036","crate_id":0,"name":"Done","span":{"filename":"src/deflate/core.rs","begin":[275,4],"end":[275,12]},"visibility":"default","docs":"Compression succeeded and the deflate stream was ended.\n\nThis is the result of calling compression with [`TDEFLFlush::Finish`].","links":{"`TDEFLFlush::Finish`":"0:638:1814"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"a:1:32761:237-0:383:2746":{"id":"a:1:32761:237-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:648:667":{"id":"0:648:667","crate_id":0,"name":"eq","span":{"filename":"src/deflate/core.rs","begin":[210,29],"end":[210,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42397:3581-0:495:3213":{"id":"a:1:42397:3581-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2772-0:495:3213":{"id":"b:1:2772-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:875:1806":{"id":"0:875:1806","crate_id":0,"name":"Partial","span":{"filename":"src/lib.rs","begin":[50,4],"end":[50,15]},"visibility":"default","docs":"Zlib partial flush.\nCurrently treated as [`Sync`].","links":{"`Sync`":"1:2995:246"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:924:788":{"id":"0:924:788","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[85,44],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:952:458":{"id":"0:952:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[109,22],"end":[109,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13044:16980":{"id":"1:13044:16980","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:1048":{"id":"0:405:1048","crate_id":0,"name":"new","span":{"filename":"src/inflate/core.rs","begin":[206,4],"end":[208,5]},"visibility":"public","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3610:1644":{"id":"1:3610:1644","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40059:4471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2776-0:961:1857":{"id":"b:1:2776-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12922:17123":{"id":"1:12922:17123","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[65,0],"end":[79,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:2709"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13049:16986":{"id":"1:13049:16986","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:19516"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:923":{"id":"0:923","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,44],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:924:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:991":{"id":"0:991","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,29],"end":[180,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:992:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3608-0:383:2746":{"id":"b:1:3608-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:926:1820":{"id":"b:1:2772-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:926:1820":{"id":"b:4:725-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:861":{"id":"0:861","crate_id":0,"name":null,"span":{"filename":"src/inflate/mod.rs","begin":[24,40],"end":[24,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32761:237-0:654:2035":{"id":"a:1:32761:237-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2469-0:128:2345":{"id":"b:1:2469-0:128:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CallbackFunc","id":"0:128:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2472-0:926:1820":{"id":"b:1:2472-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2782-0:383:2746":{"id":"b:1:2782-0:383:2746","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2752:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressorOxide","id":"0:383:2746","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2785:138","1:2786:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2472-0:599:2042":{"id":"b:1:2472-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:699":{"id":"0:699","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10047:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:700:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13025:15861":{"id":"1:13025:15861","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:599:2042":{"id":"b:1:2787-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:330:1793":{"id":"0:330:1793","crate_id":0,"name":"inflate","span":{"filename":"src/inflate/mod.rs","begin":[1,0],"end":[343,1]},"visibility":"public","docs":"This module contains functionality for decompression.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:336:537","0:475:1995","0:831:2683","0:866:2712","0:548:2043","0:549:2664","0:550:2737","0:551:2739","0:553:2760"],"is_stripped":false}}},"1:12961:15860":{"id":"1:12961:15860","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:3074":{"id":"1:12932:3074","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:5866-0:866:2712":{"id":"b:4:5866-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10052:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32761:237-0:499:3221":{"id":"a:1:32761:237-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:866:2712":{"id":"0:866:2712","crate_id":0,"name":"DecompressError","span":{"filename":"src/inflate/mod.rs","begin":[84,0],"end":[89,1]},"visibility":"public","docs":"Struct return when decompress_to_vec functions fail.","links":{},"attrs":["#[cfg(feature = \"with-alloc\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:867:1877","0:868:2028"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42397:3581-0:866:2712","a:1:2995:246-0:866:2712","a:1:32761:237-0:866:2712","a:1:42396:3582-0:866:2712","a:1:32818:3454-0:866:2712","b:1:2772-0:866:2712","b:1:2782-0:866:2712","b:1:2787-0:866:2712","b:1:2776-0:866:2712","b:1:2472-0:866:2712","b:1:3608-0:866:2712","b:1:2469-0:866:2712","b:4:5866-0:866:2712","0:545","0:869"]}}},"a:1:32818:3454-0:509:3210":{"id":"a:1:32818:3454-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32818:3454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[85,29],"end":[85,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:920:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,29],"end":[194,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32763:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42397:3581-0:599:2042":{"id":"a:1:42397:3581-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[84,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2824:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475:1995":{"id":"0:475:1995","crate_id":0,"name":"stream","span":{"filename":"src/inflate/stream.rs","begin":[1,0],"end":[423,1]},"visibility":"public","docs":"Extra streaming decompression functionality.\n\nAs of now this is mainly intended for use to build a higher-level wrapper.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:493:3208","0:495:3213","0:499:3221","0:504:3224","0:509:3210","0:531:1793"],"is_stripped":false}}},"0:939:1850":{"id":"0:939:1850","crate_id":0,"name":"Buf","span":{"filename":"src/lib.rs","begin":[134,4],"end":[134,12]},"visibility":"default","docs":"Buffer-related error.\n\nSee the docs of [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`] for details\nof when it would trigger in the one you're using.","links":{"`inflate::stream::inflate()`":"0:531:1793","`deflate::stream::deflate()`":"0:325:1792"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-5","value":"-5"}}}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,40],"end":[109,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2537:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:619:458":{"id":"0:619:458","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[194,22],"end":[194,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42396:3582-0:654:2035":{"id":"a:1:42396:3582-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:835:2244":{"id":"0:835:2244","crate_id":0,"name":"BadParam","span":{"filename":"src/inflate/mod.rs","begin":[37,4],"end":[37,43]},"visibility":"default","docs":"The output buffer is an invalid size; consider the `flags` parameter.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"{ _ }","value":"-3"}}}},"0:406:2903":{"id":"0:406:2903","crate_id":0,"name":"init","span":{"filename":"src/inflate/core.rs","begin":[212,4],"end":[215,5]},"visibility":"public","docs":"Set the current state to `Start`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:626:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:628:2034":{"id":"0:628:2034","crate_id":0,"name":"TDEFLFlush","span":{"filename":"src/deflate/core.rs","begin":[211,0],"end":[228,1]},"visibility":"public","docs":"A list of deflate flush types.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:629:191","0:632:246","0:635:1812","0:638:1814"],"impls":["0:82","a:1:42397:3581-0:628:2034","a:1:2995:246-0:628:2034","a:1:32761:237-0:628:2034","a:1:42396:3582-0:628:2034","a:1:32818:3454-0:628:2034","b:1:2772-0:628:2034","b:1:2782-0:628:2034","b:1:2787-0:628:2034","b:1:2776-0:628:2034","b:1:2472-0:628:2034","b:1:3608-0:628:2034","b:1:2469-0:628:2034","b:4:725-0:628:2034","0:643","0:651","0:646","0:80","0:644","0:647","0:649","0:641"]}}},"0:984:1877":{"id":"0:984:1877","crate_id":0,"name":"status","span":{"filename":"src/lib.rs","begin":[187,4],"end":[187,24]},"visibility":"public","docs":"The return status of the call.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"MZResult","id":"0:572:1869","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:966:1864":{"id":"0:966:1864","crate_id":0,"name":"Raw","span":{"filename":"src/lib.rs","begin":[156,4],"end":[156,7]},"visibility":"default","docs":"Raw DEFLATE.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:376:2743":{"id":"0:376:2743","crate_id":0,"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","span":{"filename":"src/inflate/core.rs","begin":[134,4],"end":[134,64]},"visibility":"public","docs":"The output buffer should not wrap around.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"4","value":"4u32","is_literal":true}}},"0:609:2229":{"id":"0:609:2229","crate_id":0,"name":"RLE","span":{"filename":"src/deflate/core.rs","begin":[203,4],"end":[203,11]},"visibility":"default","docs":"Only look for matches with a distance of 1, i.e do run-length encoding only.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"b:1:3608-0:981:1871":{"id":"b:1:3608-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:2332":{"id":"0:125:2332","crate_id":0,"name":"set_format_and_level","span":{"filename":"src/deflate/core.rs","begin":[506,4],"end":[514,5]},"visibility":"public","docs":"Update the compression settings of the compressor.\n\nChanging the `DataFormat` after compression has started will result in\na corrupted stream.\n\n# Notes\nThis function mainly intended for setting the initial settings after e.g creating with\n`default` or after calling `CompressorOxide::reset()`, and behaviour may be changed\nto disallow calling it after starting compression in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["data_format",{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["level",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:2042":{"id":"0:599:2042","crate_id":0,"name":"CompressionStrategy","span":{"filename":"src/deflate/core.rs","begin":[195,0],"end":[207,1]},"visibility":"public","docs":"Strategy setting for compression.\n\nThe non-default settings offer some special-case compression variants.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:600:126","0:603:2226","0:606:2061","0:609:2229","0:612:2231"],"impls":["a:1:42397:3581-0:599:2042","a:1:2995:246-0:599:2042","a:1:32761:237-0:599:2042","a:1:42396:3582-0:599:2042","a:1:32818:3454-0:599:2042","b:1:2772-0:599:2042","b:1:2782-0:599:2042","b:1:2787-0:599:2042","b:1:2776-0:599:2042","b:1:2472-0:599:2042","b:1:3608-0:599:2042","b:1:2469-0:599:2042","b:4:725-0:599:2042","0:621","0:620","0:623","0:615","0:618","0:617","0:625"]}}},"0:854:724":{"id":"0:854:724","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[24,9],"end":[24,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:706:667":{"id":"0:706:667","crate_id":0,"name":"eq","span":{"filename":"src/deflate/mod.rs","begin":[15,29],"end":[15,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[147,22],"end":[147,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:972:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:954":{"id":"0:954","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,29],"end":[109,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:955:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12925:17125":{"id":"1:12925:17125","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12923:17124"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:2428":{"id":"1:12934:2428","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12972:15848":{"id":"1:12972:15848","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12613:6031","`DoubleEndedIterator`":"1:7994:131","prim@char":"1:53604:454","str::split_whitespace":"1:12950:12517","str::rsplit":"1:12978:15851"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44155:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:2226":{"id":"0:603:2226","crate_id":0,"name":"Filtered","span":{"filename":"src/deflate/core.rs","begin":[199,4],"end":[199,16]},"visibility":"default","docs":"Only use matches that are at least 5 bytes long.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"1:12993:15857":{"id":"1:12993:15857","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:60":{"id":"0:410:60","crate_id":0,"name":"default","span":{"filename":"src/inflate/core.rs","begin":[242,4],"end":[266,5]},"visibility":"default","docs":"Create a new tinfl_decompressor with all fields set to 0.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:871:1801":{"id":"0:871:1801","crate_id":0,"name":"MZFlush","span":{"filename":"src/lib.rs","begin":[44,0],"end":[63,1]},"visibility":"public","docs":"A list of flush types.\n\nSee <http://www.bolet.org/~pornin/deflate-flush.html> for more in-depth info.","links":{},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:872:191","0:875:1806","0:878:246","0:881:1812","0:884:1814","0:887:1816"],"impls":["0:567","a:1:42397:3581-0:871:1801","a:1:2995:246-0:871:1801","a:1:32761:237-0:871:1801","a:1:42396:3582-0:871:1801","a:1:32818:3454-0:871:1801","b:1:2772-0:871:1801","b:1:2782-0:871:1801","b:1:2787-0:871:1801","b:1:2776-0:871:1801","b:1:2472-0:871:1801","b:1:3608-0:871:1801","b:1:2469-0:871:1801","b:4:725-0:871:1801","0:892","0:895","0:893","0:80","0:896","0:890","0:900","0:898"]}}},"0:868:2028":{"id":"0:868:2028","crate_id":0,"name":"output","span":{"filename":"src/inflate/mod.rs","begin":[88,4],"end":[88,23]},"visibility":"public","docs":"The currently decompressed data if any.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"crate::alloc::vec::Vec","id":"4:7053:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}},"0:111:2027":{"id":"0:111:2027","crate_id":0,"name":"CompressorOxide","span":{"filename":"src/deflate/core.rs","begin":[414,0],"end":[421,1]},"visibility":"public","docs":"Main compression struct.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:116","a:1:42397:3581-0:111:2027","a:1:2995:246-0:111:2027","a:1:32761:237-0:111:2027","a:1:42396:3582-0:111:2027","a:1:32818:3454-0:111:2027","b:1:2772-0:111:2027","b:1:2782-0:111:2027","b:1:2787-0:111:2027","b:1:2776-0:111:2027","b:1:2472-0:111:2027","b:1:3608-0:111:2027","b:1:2469-0:111:2027","0:126"]}}},"0:701":{"id":"0:701","crate_id":0,"name":null,"span":{"filename":"src/deflate/mod.rs","begin":[15,16],"end":[15,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:690:2007":{"id":"0:690:2007","crate_id":0,"name":"UberCompression","span":{"filename":"src/deflate/mod.rs","begin":[24,4],"end":[24,24]},"visibility":"default","docs":"Even more checks, can be very slow.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"10","value":"10"}}}},"1:12955:14297":{"id":"1:12955:14297","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:53604:454","self::pattern":"1:12613:6031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32761:237-0:903:1824":{"id":"a:1:32761:237-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42397:3581-0:499:3221":{"id":"a:1:42397:3581-0:499:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ZeroReset","id":"0:499:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12978:15851":{"id":"1:12978:15851","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12613:6031","`DoubleEndedIterator`":"1:7994:131","prim@char":"1:53604:454","str::split":"1:12972:15848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44173:3962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12618:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12633:6037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:2096":{"id":"0:494:2096","crate_id":0,"name":"reset","span":{"filename":"src/inflate/stream.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":"Performs reset","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:894:458":{"id":"0:894:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[43,22],"end":[43,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12954:12521":{"id":"1:12954:12521","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44447:4411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2995:246-0:871:1801":{"id":"a:1:2995:246-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:626:788":{"id":"0:626:788","crate_id":0,"name":"hash","span":{"filename":"src/deflate/core.rs","begin":[194,44],"end":[194,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10271:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:945:200":{"id":"0:945:200","crate_id":0,"name":"Param","span":{"filename":"src/lib.rs","begin":[143,4],"end":[143,19]},"visibility":"default","docs":"Bad parameters.\n\nThis can be returned from [`deflate::stream::deflate()`] in the case of bad parameters.  See\n[`TDEFLStatus::BadParam`][deflate::core::TDEFLStatus::BadParam].","links":{"deflate::core::TDEFLStatus::BadParam":"0:655:2244","`deflate::stream::deflate()`":"0:325:1792"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-10_000","value":"-10000"}}}},"1:2778:751":{"id":"1:2778:751","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3608-0:628:2034":{"id":"b:1:3608-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[242,0],"end":[252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:1048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2469-0:628:2034":{"id":"b:1:2469-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42396:3582-0:495:3213":{"id":"a:1:42396:3582-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13040:17146":{"id":"1:13040:17146","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12574:137","`FromStr`":"1:12573:5796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12573:5796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12573:5796","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13046:16982":{"id":"1:13046:16982","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2331":{"id":"0:123:2331","crate_id":0,"name":"set_compression_level","span":{"filename":"src/deflate/core.rs","begin":[482,4],"end":[485,5]},"visibility":"public","docs":"Set the compression level of the compressor.\n\nUsing this to change level after compression has started is supported.\n# Notes\nThe compression strategy will be reset to the default one when this is called.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:903:1824":{"id":"b:4:725-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12941:17128":{"id":"1:12941:17128","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:53610:1549","crate::ops::IndexMut":"1:3270:3382","str::slice_unchecked":"1:12940:17127"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:903:1824":{"id":"0:903:1824","crate_id":0,"name":"MZStatus","span":{"filename":"src/lib.rs","begin":[86,0],"end":[102,1]},"visibility":"public","docs":"A list of miniz successful status codes.\n\nThese are emitted as the [`Ok`] side of a [`MZResult`] in the [`StreamResult`] returned from\n[`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","links":{"`inflate::stream::inflate()`":"0:531:1793","`StreamResult`":"0:981:1871","`deflate::stream::deflate()`":"0:325:1792","`Ok`":"1:42418:193","`MZResult`":"0:572:1869"},"attrs":["#[repr(i32)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:904:193","0:907:1832","0:910:1834"],"impls":["a:1:42397:3581-0:903:1824","a:1:2995:246-0:903:1824","a:1:32761:237-0:903:1824","a:1:42396:3582-0:903:1824","a:1:32818:3454-0:903:1824","b:1:2772-0:903:1824","b:1:2782-0:903:1824","b:1:2787-0:903:1824","b:1:2776-0:903:1824","b:1:2472-0:903:1824","b:1:3608-0:903:1824","b:1:2469-0:903:1824","b:4:725-0:903:1824","0:921","0:918","0:916","0:919","0:913","0:923","0:915"]}}},"0:638:1814":{"id":"0:638:1814","crate_id":0,"name":"Finish","span":{"filename":"src/deflate/core.rs","begin":[227,4],"end":[227,14]},"visibility":"default","docs":"Try to flush everything and end the deflate stream.\n\nOn success this will yield a [`TDEFLStatus::Done`] return status.","links":{"`TDEFLStatus::Done`":"0:664:2036"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"a:1:2995:246-0:495:3213":{"id":"a:1:2995:246-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42396:3582-0:831:2683":{"id":"a:1:42396:3582-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:725-0:831:2683":{"id":"b:4:725-0:831:2683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2485:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TINFLStatus","id":"0:831:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4137","4:728:11764","4:729:11765"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2776-0:495:3213":{"id":"b:1:2776-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:964:1862":{"id":"0:964:1862","crate_id":0,"name":"ZLibIgnoreChecksum","span":{"filename":"src/lib.rs","begin":[154,4],"end":[154,22]},"visibility":"default","docs":"Zlib wrapped but ignore and don't compute the adler32 checksum.\nCurrently only used for inflate, behaves the same as Zlib for compression.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:831:2683":{"id":"0:831:2683","crate_id":0,"name":"TINFLStatus","span":{"filename":"src/inflate/mod.rs","begin":[25,0],"end":[63,1]},"visibility":"public","docs":"Return status codes.","links":{},"attrs":["#[repr(i8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:832:2691","0:835:2244","0:838:2695","0:841:2697","0:844:2036","0:847:2706","0:850:2708"],"impls":["0:542","a:1:42397:3581-0:831:2683","a:1:2995:246-0:831:2683","a:1:32761:237-0:831:2683","a:1:42396:3582-0:831:2683","a:1:32818:3454-0:831:2683","b:1:2772-0:831:2683","b:1:2782-0:831:2683","b:1:2787-0:831:2683","b:1:2776-0:831:2683","b:1:2472-0:831:2683","b:1:3608-0:831:2683","b:1:2469-0:831:2683","b:4:725-0:831:2683","0:853","0:861","0:855","0:859","0:858","0:856","0:863"]}}},"a:1:32761:237-0:981:1871":{"id":"a:1:32761:237-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42396:3582-0:628:2034":{"id":"a:1:42396:3582-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42396:3582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2472-0:654:2035":{"id":"b:1:2472-0:654:2035","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5609:17857":{"id":"4:5609:17857","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:294:2101","`String`":"4:7630:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:294:2101","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:3210":{"id":"0:509:3210","crate_id":0,"name":"InflateState","span":{"filename":"src/inflate/stream.rs","begin":[60,0],"end":[82,1]},"visibility":"public","docs":"A struct that compbines a decompressor with extra data for streaming decompression.\n","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:522","a:1:42397:3581-0:509:3210","a:1:2995:246-0:509:3210","a:1:32761:237-0:509:3210","a:1:42396:3582-0:509:3210","a:1:32818:3454-0:509:3210","b:1:2772-0:509:3210","b:1:2782-0:509:3210","b:1:2787-0:509:3210","b:1:2776-0:509:3210","b:1:2472-0:509:3210","b:1:3608-0:509:3210","b:1:2469-0:509:3210","0:519"]}}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[256,29],"end":[256,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2532:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:674:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:958":{"id":"0:958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,44],"end":[109,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10263:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:959:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12949:2394":{"id":"1:12949:2394","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44141:4483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[230,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:546:724":{"id":"0:546:724","crate_id":0,"name":"fmt","span":{"filename":"src/inflate/mod.rs","begin":[94,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"::core::fmt::Formatter","id":"1:10022:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"::core::fmt::Result","id":"1:10003:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:599:2042":{"id":"b:1:2772-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2772-0:871:1801":{"id":"b:1:2772-0:871:1801","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZFlush","id":"0:871:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/inflate/stream.rs","begin":[50,0],"end":[56,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ResetPolicy","id":"0:493:3208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FullReset","id":"0:504:3224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:508:2096"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2787-0:866:2712":{"id":"b:1:2787-0:866:2712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DecompressError","id":"0:866:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3608-0:961:1857":{"id":"b:1:3608-0:961:1857","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DataFormat","id":"0:961:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[201,0],"end":[205,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MZResult","id":"0:572:1869","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:576:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3608-0:680:1999":{"id":"b:1:3608-0:680:1999","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3606:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3610:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2469-0:495:3213":{"id":"b:1:2469-0:495:3213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2463:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MinReset","id":"0:495:3213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2471:3290"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42397:3581-0:926:1820":{"id":"a:1:42397:3581-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12943:3079":{"id":"1:12943:3079","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12942:15843","str::split_at_mut_checked":"1:12945:15847"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2775:2025":{"id":"1:2775:2025","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2749:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:537":{"id":"0:336:537","crate_id":0,"name":"core","span":{"filename":"src/inflate/core.rs","begin":[1,0],"end":[2038,1]},"visibility":"public","docs":"Streaming decompression functionality.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:373:2730","0:347:2803","0:383:2746","0:459:2748"],"is_stripped":false}}},"0:375:2772":{"id":"0:375:2772","crate_id":0,"name":"TINFL_FLAG_HAS_MORE_INPUT","span":{"filename":"src/inflate/core.rs","begin":[131,4],"end":[131,49]},"visibility":"public","docs":"There will be more input that hasn't been given to the decompressor yet.\n\nThis is useful when you want to decompress what you have so far,\neven if you know there is probably more input that hasn't gotten here yet (_e.g._, over a\nnetwork connection).  When [`decompress()`][super::decompress] reaches the end of the input\nwithout finding the end of the compressed stream, it will return\n[`TINFLStatus::NeedsMoreInput`][super::TINFLStatus::NeedsMoreInput] if this is set,\nindicating that you should get more data before calling again.  If not set, it will return\n[`TINFLStatus::FailedCannotMakeProgress`][super::TINFLStatus::FailedCannotMakeProgress]\nsuggesting the stream is corrupt, since you claimed it was all there.","links":{"super::decompress":"0:459:2748","super::TINFLStatus::NeedsMoreInput":"0:847:2706","super::TINFLStatus::FailedCannotMakeProgress":"0:832:2691"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"2","value":"2u32","is_literal":true}}},"a:1:32761:237-0:926:1820":{"id":"a:1:32761:237-0:926:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZError","id":"0:926:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:373:2730":{"id":"0:373:2730","crate_id":0,"name":"inflate_flags","span":{"filename":"src/inflate/core.rs","begin":[114,0],"end":[114,21]},"visibility":"public","docs":"Flags to [`decompress()`] to control how inflation works.\n\nThese define bits for a bitmask argument.","links":{"`decompress()`":"0:459:2748"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:374:2731","0:375:2772","0:376:2743","0:377:2861","0:378:2771"],"is_stripped":false}}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/deflate/core.rs","begin":[210,16],"end":[210,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2990:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2776-0:628:2034":{"id":"b:1:2776-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:671:458":{"id":"0:671:458","crate_id":0,"name":"clone","span":{"filename":"src/deflate/core.rs","begin":[256,22],"end":[256,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TDEFLStatus","id":"0:654:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:887:1816":{"id":"0:887:1816","crate_id":0,"name":"Block","span":{"filename":"src/lib.rs","begin":[62,4],"end":[62,13]},"visibility":"default","docs":"Not implemented.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"1:12951:12503":{"id":"1:12951:12503","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12950:12517"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44438:4576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377:2861":{"id":"0:377:2861","crate_id":0,"name":"TINFL_FLAG_COMPUTE_ADLER32","span":{"filename":"src/inflate/core.rs","begin":[142,4],"end":[142,50]},"visibility":"public","docs":"Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.\n\nIf [`TINFL_FLAG_IGNORE_ADLER32`] is specified, it will override this.\n\nNOTE: Enabling/disabling this between calls to decompress will result in an incorrect\nchecksum.","links":{"`TINFL_FLAG_IGNORE_ADLER32`":"0:378:2771"},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u32"},"expr":"8","value":"8u32","is_literal":true}}},"0:529:3252":{"id":"0:529:3252","crate_id":0,"name":"reset_as","span":{"filename":"src/inflate/stream.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Resets the state according to specified policy.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["policy",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ResetPolicy","id":"0:493:3208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2772-0:509:3210":{"id":"b:1:2772-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2775:2025"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42397:3581-0:628:2034":{"id":"a:1:42397:3581-0:628:2034","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42397:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TDEFLFlush","id":"0:628:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2776-0:981:1871":{"id":"b:1:2776-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2749:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2778:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5608:17856":{"id":"4:5608:17856","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32761:237-0:599:2042":{"id":"a:1:32761:237-0:599:2042","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32761:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CompressionStrategy","id":"0:599:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:122:2096":{"id":"0:122:2096","crate_id":0,"name":"reset","span":{"filename":"src/deflate/core.rs","begin":[468,4],"end":[475,5]},"visibility":"public","docs":"Reset the state of the compressor, keeping the same parameters.\n\nThis avoids re-allocating data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927:1837":{"id":"0:927:1837","crate_id":0,"name":"ErrNo","span":{"filename":"src/lib.rs","begin":[112,4],"end":[112,14]},"visibility":"default","docs":"Unused","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"-1","value":"-1"}}}},"1:13011:17136":{"id":"1:13011:17136","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2995:246-0:903:1824":{"id":"a:1:2995:246-0:903:1824","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2995:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MZStatus","id":"0:903:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2472-0:981:1871":{"id":"b:1:2472-0:981:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32762:3453","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2466:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StreamResult","id":"0:981:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2474:11763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:703:458":{"id":"0:703:458","crate_id":0,"name":"clone","span":{"filename":"src/deflate/mod.rs","begin":[15,22],"end":[15,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CompressionLevel","id":"0:680:1999","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:509:3210":{"id":"b:1:2787-0:509:3210","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2746:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2756:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InflateState","id":"0:509:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2790:138","1:2791:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:729:11765":{"id":"4:729:11765","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12942:15843":{"id":"1:12942:15843","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12944:15846","str::split_at_mut":"1:12943:3079"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408:2909":{"id":"0:408:2909","crate_id":0,"name":"adler32_header","span":{"filename":"src/inflate/core.rs","begin":[230,4],"end":[236,5]},"visibility":"public","docs":"Returns the adler32 that was read from the zlib header if it exists.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2318":{"id":"0:118:2318","crate_id":0,"name":"adler32","span":{"filename":"src/deflate/core.rs","begin":[438,4],"end":[440,5]},"visibility":"public","docs":"Get the adler32 checksum of the currently encoded data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:33903:5890":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:13464:4425":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2485:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:43955:3955":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:40913:3970":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:46897:4646":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:48110:4683":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:31508:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:1169:15695":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"0:531:1793":{"crate_id":0,"path":["miniz_oxide","inflate","stream","inflate"],"kind":"function"},"1:48280:4686":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4143:5911":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:34736:5895":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:33962:5888":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7919:5971":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"0:313:2024":{"crate_id":0,"path":["miniz_oxide","deflate","core","create_comp_flags_from_zip_params"],"kind":"function"},"1:42066:5981":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:32745:3441":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:43315:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:4103:18293":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:44438:4576":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10052:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:7952:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:46722:4641":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:46407:4632":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:46646:4638":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:40846:4492":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:40072:4473":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:53608:333":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:44472:4481":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4626:3442":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:41527:4383":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:6410:11409":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:48570:4701":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:0:537":{"crate_id":1,"path":["core"],"kind":"module"},"1:31159:12530":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:7551:4189":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40983:4508":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:11129:3960":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12633:6037":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:495:3213":{"crate_id":0,"path":["miniz_oxide","inflate","stream","MinReset"],"kind":"struct"},"1:42252:4393":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:6608:18293":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2381:5858":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:47360:4654":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11733:3977":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:40245:5871":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:22952:5810":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:43521:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:38488:5897":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:43993:3965":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:42994:3740":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:41285:4375":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"0:687:2005":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestCompression"],"kind":"variant"},"1:15:2420":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:3026:18288":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:44903:5087":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:22879:12537":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:41500:4522":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"0:658:2247":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","PutBufFailed"],"kind":"variant"},"1:42200:4537":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:10271:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:44043:3971":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:42699:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:38543:5898":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:21446:14780":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4571:3440":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:47780:4680":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:5018:422":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:21661:11111":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:48455:4696":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:46167:4622":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:4434:18314":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:42212:5982":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:45077:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:41519:4381":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:42012:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10054:3739":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41271:4374":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:39907:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:40657:4347":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:21390:3669":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:44762:4604":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8415:3734":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:22650:4427":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:46819:4644":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:3032:18287":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:41002:4357":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:22843:4439":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"0:832:2691":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","FailedCannotMakeProgress"],"kind":"variant"},"1:10022:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:40886:4499":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"0:693:2010":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultLevel"],"kind":"variant"},"1:12391:4410":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:41043:4513":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2537:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:5039:14570":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:39895:4466":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:45085:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:32731:4459":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:40858:5944":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:22344:11196":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:36:5002":{"crate_id":5,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3466:14091":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:4419:264":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:2101:4161":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:42660:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2137:3419":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:7567:4200":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"0:936:1846":{"crate_id":0,"path":["miniz_oxide","MZError","Mem"],"kind":"variant"},"1:3130:5894":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:7595:4203":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:42738:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:4235:5911":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:11689:3974":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:46300:4627":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:46121:4620":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:0:307":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:40685:12539":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"0:632:246":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Sync"],"kind":"variant"},"1:3189:3414":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:21781:11109":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"0:847:2706":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","NeedsMoreInput"],"kind":"variant"},"1:41471:4378":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:669:4135":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4635:3443":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"0:74:2203":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_GREEDY_PARSING_FLAG"],"kind":"constant"},"1:44173:3962":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:10870:3733":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:2087:4159":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3068:3410":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:21674:4426":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:44585:4588":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3078:3412":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:1828:3387":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"0:459:2748":{"crate_id":0,"path":["miniz_oxide","inflate","core","decompress"],"kind":"function"},"1:2017:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:44677:4414":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:43751:5152":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"0:844:2036":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Done"],"kind":"variant"},"1:22835:4438":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:34563:5893":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"0:77:2213":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FILTER_MATCHES"],"kind":"constant"},"1:7501:5960":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:22434:14224":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:43973:3954":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3441:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8459:14682":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:41025:4512":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:48403:4692":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:3634:183":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2756:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:3237:2992":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:46600:4637":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:22921:5149":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:22089:3951":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4507:3433":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:47000:4648":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:5828:5911":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:5442:11395":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"0:504:3224":{"crate_id":0,"path":["miniz_oxide","inflate","stream","FullReset"],"kind":"struct"},"1:22407:12074":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10483:14541":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:1534:4154":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:7410:4196":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:7965:3452":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"0:328:2020":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec_zlib"],"kind":"function"},"1:44323:4570":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:46099:4619":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11015:3976":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10417:6013":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:40734:4481":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:22521:12074":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4502:3432":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:7279:2472":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:39982:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10895:3958":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:53620:800":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:10060:3742":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:53611:1634":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"4:7607:4205":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"0:572:1869":{"crate_id":0,"path":["miniz_oxide","MZResult"],"kind":"type_alias"},"0:872:191":{"crate_id":0,"path":["miniz_oxide","MZFlush","None"],"kind":"variant"},"1:3235:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:43008:3741":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8421:5970":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3518:3417":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2743:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"0:661:2038":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Okay"],"kind":"variant"},"1:53623:1651":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"0:629:191":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","None"],"kind":"variant"},"1:3220:3416":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"0:654:2035":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:11157:3961":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:53624:1652":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"0:878:246":{"crate_id":0,"path":["miniz_oxide","MZFlush","Sync"],"kind":"variant"},"4:1153:15707":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:41509:4524":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:3436:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2876:4215":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:4286:5918":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:7470:3391":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:48383:4690":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:22859:12535":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4682:3445":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:42178:12542":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12618:4396":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10062:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10064:3743":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:48234:4685":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4244:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:1939:5011":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:41034:4361":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:43001:3739":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:42386:3579":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:10938:3975":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5118:862":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:12375:4409":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:46552:4636":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"0:606:2061":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","HuffmanOnly"],"kind":"variant"},"1:46768:4643":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1816:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:2466:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:44879:5156":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:2379:5857":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:42582:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:3244:4172":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:53615:700":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:48478:4697":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:78:1708":{"crate_id":1,"path":["core","usize"],"kind":"module"},"1:40713:4479":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:7580:12544":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:44101:4561":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:40757:5933":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"4:6929:3394":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:42094:5078":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:40052:4470":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10693:12074":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:3791:4159":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41087:4515":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"0:841:2697":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Failed"],"kind":"variant"},"1:43496:3877":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:47922:4681":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:279:18293":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8412:3407":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2369:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:44223:4568":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2704:3429":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:32763:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:53605:1669":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:44004:3972":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3241:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47124:4650":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3207:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:32848:3408":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:2532:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:21653:12074":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:7525:3385":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:21412:14771":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:1555:4156":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7994:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:39962:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"0:850:2708":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","HasMoreOutput"],"kind":"variant"},"4:6175:5911":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1655:2102":{"crate_id":1,"path":["core","mem"],"kind":"module"},"0:79:2220":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_RAW_BLOCKS"],"kind":"constant"},"1:10056:3740":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:3740:18293":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21602:11112":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:39847:3415":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"0:499:3221":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ZeroReset"],"kind":"struct"},"1:9851:3757":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:12127:3946":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:7478:3391":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3606:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:1823:3906":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"4:1309:11382":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:3278:4177":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:6636:4369":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:13554:3383":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:725:12074":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"0:548:2043":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec"],"kind":"function"},"1:4859:5927":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:217:3424":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2703:12074":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:22771:5144":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:3208:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:22299:11195":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:8047:3451":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1729:5911":{"crate_id":1,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:6642:5143":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:41112:4516":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:30933:3378":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:33424:5883":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:6018:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"4:1544:4155":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:43234:5079":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:3304:4178":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"0:72:2196":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_WRITE_ZLIB_HEADER"],"kind":"constant"},"1:30709:5756":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:44131:4565":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:32818:3454":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:42272:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"0:904:193":{"crate_id":0,"path":["miniz_oxide","MZStatus","Ok"],"kind":"variant"},"0:961:1857":{"crate_id":0,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:44409:4573":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:46330:4628":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:41055:4367":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:22383:11197":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:42355:3578":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:8103:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:3660:3733":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:42418:193":{"crate_id":1,"path":["miniz_oxide","MZResult","Ok"],"kind":"variant"},"4:7630:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:32689:3428":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"0:374:2731":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_PARSE_ZLIB_HEADER"],"kind":"constant"},"1:2995:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"0:551:2739":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib_with_limit"],"kind":"function"},"1:45064:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:48318:4687":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9711:5524":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:43512:3876":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10373:1517":{"crate_id":1,"path":["core","slice"],"kind":"module"},"4:3647:2992":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4:1125":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:4497:18314":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:7420:15673":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11656:3973":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:40776:4486":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2990:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:4145:3733":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3073:3411":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:22703:4429":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3041:5793":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:42397:3581":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2740:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:2835:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:11171:3957":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"0:635:1812":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Full"],"kind":"variant"},"1:40723:4480":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3426:3950":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:42777:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:4464:5911":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"0:75:2207":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_NONDETERMINISTIC_PARSING_FLAG"],"kind":"constant"},"1:3715:3389":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:42407:3418":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:22536:11190":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:46229:4624":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:1525:4153":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:3270:4173":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:7097:18331":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3046:5795":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:44:3280":{"crate_id":5,"path":["adler","Adler32"],"kind":"struct"},"4:6952:3395":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:53618:803":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:22756:4430":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:7450:4197":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:44945:4606":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:44419:4574":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:5864:250":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:44429:4575":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"0:73:2199":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_COMPUTE_ADLER32"],"kind":"constant"},"1:47154:4651":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:53619:804":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"0:881:1812":{"crate_id":0,"path":["miniz_oxide","MZFlush","Full"],"kind":"variant"},"1:48531:4700":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:48440:4695":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"0:309:2033":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress"],"kind":"function"},"1:22101:14778":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:40993:4354":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4354:3447":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:21458:14776":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:47314:4653":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:7378:4194":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:7434:3391":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:53607:1162":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"0:383:2746":{"crate_id":0,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:44065:3969":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:23985:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"0:926:1820":{"crate_id":0,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:44956:6063":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:13426:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:46866:4645":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:26385:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4232:4349":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"0:962:1859":{"crate_id":0,"path":["miniz_oxide","DataFormat","Zlib"],"kind":"variant"},"1:45126:4611":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:22064:11114":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:30997:12534":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:10500:14512":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:40700:4478":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:10263:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:41011:4509":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:40933:4502":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:4073:3389":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:44447:4411":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"0:910:1834":{"crate_id":0,"path":["miniz_oxide","MZStatus","NeedDict"],"kind":"variant"},"1:44359:4571":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:21427:14773":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10515:14066":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:1925:5869":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12844:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:46145:4621":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:39922:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"0:942:1851":{"crate_id":0,"path":["miniz_oxide","MZError","Version"],"kind":"variant"},"1:40906:4500":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:44739:4594":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10004:3738":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:2756:5008":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"0:314:1995":{"crate_id":0,"path":["miniz_oxide","deflate","stream"],"kind":"module"},"1:43543:4556":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:1478:3733":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:43261:14106":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:42330:2992":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:12684:6046":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7671:4377":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:44535:6052":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:40831:12544":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:7053:263":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:41096:4370":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:6690:3391":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"0:78:2217":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_FORCE_ALL_STATIC_BLOCKS"],"kind":"constant"},"1:40964:4505":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:7619:4206":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"0:0:1881":{"crate_id":0,"path":["miniz_oxide"],"kind":"module"},"1:13444:4424":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:53627:1708":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"4:7536:11377":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2568:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:12613:6031":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:3363:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"0:549:2664":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_zlib"],"kind":"function"},"2:0:481":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:36612:5896":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:22476:11199":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:40750:4482":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:7442:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2463:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:2525:5003":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"0:347:2803":{"crate_id":0,"path":["miniz_oxide","inflate","core","TINFL_LZ_DICT_SIZE"],"kind":"constant"},"1:41494:4380":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:45139:4614":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3453:5904":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:1463:2992":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6018:4360":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:7370:3391":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:46389:4631":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:44895:5160":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:44556:4578":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:44141:4483":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"0:600:126":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Default"],"kind":"variant"},"4:7728:3388":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:42321:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:12159:6039":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3447:5902":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:43015:3742":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:44085:3968":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:31535:3669":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:22211:12074":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:42050:4389":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:42621:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:34217:5891":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:3806:4161":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:45164:4615":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:46698:4640":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:39891:3381":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:53625:1649":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:12573:5796":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:40:3386":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:40663:4474":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:39811:3735":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:42471:3391":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"0:550:2737":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_to_vec_with_limit"],"kind":"function"},"0:681:2001":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","NoCompression"],"kind":"variant"},"1:5904:4358":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:21429:14777":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:22810:4436":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:53610:1549":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:53602:404":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"4:294:2101":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:44875:5155":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"0:696:2012":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","DefaultCompression"],"kind":"variant"},"4:5:1719":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"4:924:11379":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3231:3450":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:2195:18329":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:828:4139":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:5707:3394":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10311:3875":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"0:325:1792":{"crate_id":0,"path":["miniz_oxide","deflate","stream","deflate"],"kind":"function"},"4:1516:4152":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:44463:4347":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2749:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:4220:4348":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:45175:3422":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:41136:4517":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:42415:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:40955:4504":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:45118:4609":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2510:465":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"4:5446:11396":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:2746:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:34080:5889":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:4305:2992":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43289:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:38598:5899":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:4265:5911":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:44259:3960":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:22821:12531":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"0:612:2231":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Fixed"],"kind":"variant"},"1:45148:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:2307:5141":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:42346:3391":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:44205:4567":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:1566:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"0:884:1814":{"crate_id":0,"path":["miniz_oxide","MZFlush","Finish"],"kind":"variant"},"4:1354:4150":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:1062:18293":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:42396:3582":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:9202:4396":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:10846:2992":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:47236:4652":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:13250:14836":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:42234:4390":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:7449:14025":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"0:553:2760":{"crate_id":0,"path":["miniz_oxide","inflate","decompress_slice_iter_to_slice"],"kind":"function"},"1:32761:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:22422:11198":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:10066:3744":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"0:76:2210":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags","TDEFL_RLE_MATCHES"],"kind":"constant"},"4:3028:5006":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"0:933:1845":{"crate_id":0,"path":["miniz_oxide","MZError","Data"],"kind":"variant"},"4:6071:11404":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46530:4635":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:33610:5885":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:43336:3750":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44899:5161":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:1575:4157":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:22059:12074":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"0:493:3208":{"crate_id":0,"path":["miniz_oxide","inflate","stream","ResetPolicy"],"kind":"trait"},"1:12429:3975":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:6962:3396":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:42398:3644":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:40769:4485":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:22565:11191":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"0:310:2609":{"crate_id":0,"path":["miniz_oxide","deflate","core","compress_to_output"],"kind":"function"},"0:907:1832":{"crate_id":0,"path":["miniz_oxide","MZStatus","StreamEnd"],"kind":"variant"},"1:42818:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:44277:3956":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:40815:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:44891:5159":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:40942:4503":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:53617:802":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:9706:14683":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"0:680:1999":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"0:930:1842":{"crate_id":0,"path":["miniz_oxide","MZError","Stream"],"kind":"variant"},"4:7122:18291":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6447:4362":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:40820:4491":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:38653:5900":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2824:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:12638:6036":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10003:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:6448:1719":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:30986:3749":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"0:981:1871":{"crate_id":0,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:44305:4569":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:1948:4212":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:7643:4207":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:46075:4618":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:53626:856":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"4:3871:3387":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"0:5:1792":{"crate_id":0,"path":["miniz_oxide","deflate"],"kind":"module"},"1:42504:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"0:684:2003":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","BestSpeed"],"kind":"variant"},"1:43273:14103":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:48172:4684":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7384:5974":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:3249:18147":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:46199:4623":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:47078:4649":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:2112:4162":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:2574:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:21400:14771":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:44650:4590":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:53609:1517":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"0:128:2345":{"crate_id":0,"path":["miniz_oxide","deflate","core","CallbackFunc"],"kind":"struct"},"1:21783:4426":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"0:378:2771":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_IGNORE_ADLER32"],"kind":"constant"},"1:21444:14782":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:44571:4585":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:6050:4191":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:40973:4506":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"0:838:2695":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","Adler32Mismatch"],"kind":"variant"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"0:39:537":{"crate_id":0,"path":["miniz_oxide","deflate","core"],"kind":"module"},"0:327:2014":{"crate_id":0,"path":["miniz_oxide","deflate","compress_to_vec"],"kind":"function"},"1:44883:5157":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:4498:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"0:71:2103":{"crate_id":0,"path":["miniz_oxide","deflate","core","deflate_flags"],"kind":"module"},"1:44728:6053":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3000:3377":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:53616:805":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"0:655:2244":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","BadParam"],"kind":"variant"},"1:6647:5142":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:44075:3967":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:46454:4633":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9524:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:42034:4387":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:22213:11110":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:11050:3962":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:941:2992":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:44056:3966":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3030:3655":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:30971:3908":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41064:4368":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:46370:4630":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:46352:4629":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44602:4589":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:53629:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:46269:4626":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7731:3431":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:6562:3389":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"3:0:3353":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"0:664:2036":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLStatus","Done"],"kind":"variant"},"1:30965:3379":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"0:875:1806":{"crate_id":0,"path":["miniz_oxide","MZFlush","Partial"],"kind":"variant"},"1:46676:4639":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:21600:12074":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:2752:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:5077:4352":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:22894:12549":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:22928:4452":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:11088:3963":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10047:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:48429:4694":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:41077:4514":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:9519:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:47390:4655":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:46744:4642":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:3396:3387":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:2205:4163":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:5398:18293":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:33238:5794":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10977:3959":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:824:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:34021:5887":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:21772:12074":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:44454:4482":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3037:3657":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"0:330:1793":{"crate_id":0,"path":["miniz_oxide","inflate"],"kind":"module"},"4:1724:18293":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:44714:4591":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:2287:15671":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:48394:4691":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:1325:4146":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:22570:11189":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:46500:4634":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:46920:4647":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:43298:3749":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:5208:4191":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:43551:4557":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"0:866:2712":{"crate_id":0,"path":["miniz_oxide","inflate","DecompressError"],"kind":"struct"},"4:4919:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:48493:4698":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:1189:15704":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:44871:5154":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3270:3382":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:44030:3970":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:43736:4558":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:42455:2992":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"0:475:1995":{"crate_id":0,"path":["miniz_oxide","inflate","stream"],"kind":"module"},"0:939:1850":{"crate_id":0,"path":["miniz_oxide","MZError","Buf"],"kind":"variant"},"1:48032:4682":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:44125:4404":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:41261:4520":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"0:835:2244":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus","BadParam"],"kind":"variant"},"1:41126:4372":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:53628:1259":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:40802:4490":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4428:2801":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:46251:4625":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:1494:3391":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:53622:1650":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:47574:4657":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:47424:4656":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:726:5797":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:7956:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"0:628:2034":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:10306:3874":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:32752:4461":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44749:4598":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:10703:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:44114:4564":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:21655:11108":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:13302:4420":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"0:966:1864":{"crate_id":0,"path":["miniz_oxide","DataFormat","Raw"],"kind":"variant"},"4:868:11378":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:4385:3448":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:53614:698":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:22490:5857":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"0:376:2743":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF"],"kind":"constant"},"1:7915:5972":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"0:609:2229":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","RLE"],"kind":"variant"},"1:3481:3413":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:3036:18289":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:9091:3580":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:42543:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"0:599:2042":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:53603:1044":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:43533:2872":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:5733:5911":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:5058:5911":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:40783:5934":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"0:603:2226":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressionStrategy","Filtered"],"kind":"variant"},"4:2234:5136":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:31054:12532":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"0:871:1801":{"crate_id":0,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:6429:11411":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:3283:18148":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:44867:5153":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:42857:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"0:111:2027":{"crate_id":0,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:42421:137":{"crate_id":1,"path":["miniz_oxide","MZResult","Err"],"kind":"variant"},"1:42480:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:40002:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:0:1882":{"crate_id":5,"path":["adler"],"kind":"module"},"0:690:2007":{"crate_id":0,"path":["miniz_oxide","deflate","CompressionLevel","UberCompression"],"kind":"variant"},"1:4581:3441":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:7653:4208":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:34390:5892":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:45067:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3849:3391":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:45187:4616":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:40742:4347":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:22436:5857":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"0:945:200":{"crate_id":0,"path":["miniz_oxide","MZError","Param"],"kind":"variant"},"4:6772:18293":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:39232:5901":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:3025:4137":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:40876:4493":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4655:3444":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11143:3956":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:32819:3658":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:43504:4548":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:43244:3749":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:13228:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"0:903:1824":{"crate_id":0,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:638:1814":{"crate_id":0,"path":["miniz_oxide","deflate","core","TDEFLFlush","Finish"],"kind":"variant"},"4:1426:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:7400:4195":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:48508:4699":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"0:964:1862":{"crate_id":0,"path":["miniz_oxide","DataFormat","ZLibIgnoreChecksum"],"kind":"variant"},"1:12352:4408":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:40022:3949":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3056:5884":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"0:831:2683":{"crate_id":0,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:32738:4460":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:44155:3958":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:46055:4617":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:730:120":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"0:509:3210":{"crate_id":0,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:44377:4572":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12315:4405":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:43964:3953":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:43755:3983":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:5934:3389":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:44780:4415":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:44921:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:12143:3948":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:22787:4431":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7385:5975":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:40059:4471":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:42896:4400":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"0:336:537":{"crate_id":0,"path":["miniz_oxide","inflate","core"],"kind":"module"},"0:375:2772":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_HAS_MORE_INPUT"],"kind":"constant"},"1:44887:5158":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"0:373:2730":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags"],"kind":"module"},"1:13277:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:43904:4559":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10058:3741":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"0:887:1816":{"crate_id":0,"path":["miniz_oxide","MZFlush","Block"],"kind":"variant"},"1:48414:4693":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12627:6038":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"0:377:2861":{"crate_id":0,"path":["miniz_oxide","inflate","core","inflate_flags","TINFL_FLAG_COMPUTE_ADLER32"],"kind":"constant"},"1:32727:4458":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:1340:4149":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4267:3406":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:42338:3733":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:1853:1200":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:41485:4521":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:48374:4689":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:33844:5886":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2988:3409":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:7712:3387":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:40674:4475":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"0:927:1837":{"crate_id":0,"path":["miniz_oxide","MZError","ErrNo"],"kind":"variant"},"1:22941:4453":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:53621:1653":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:42463:3733":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:721:249":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:32850:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:7361:3384":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:43983:3964":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:3238:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:48356:4688":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:7390:3389":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:53604:454":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:39944:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:32762:3453":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:41478:4379":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"}},"external_crates":{"5":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}