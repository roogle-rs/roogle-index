{"root":"0:0:1053","crate_version":"1.0.20","includes_private":false,"index":{"0:474:1908":{"id":"0:474:1908","crate_id":0,"name":"push_dot_dot_eq","span":{"filename":"src/runtime.rs","begin":[344,0],"end":[344,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8436:2583":{"id":"2:8436:2583","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:2616"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13453:59695":{"id":"2:13453:59695","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:454:1902":{"id":"0:454:1902","crate_id":0,"name":"push_caret","span":{"filename":"src/runtime.rs","begin":[334,0],"end":[334,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[7,0],"end":[7,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::format","name":"format","id":"5:6:659","glob":false}},"2:13389:31823":{"id":"2:13389:31823","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15862:2365"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:3792","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13406:2615":{"id":"2:13406:2615","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:2525":{"id":"2:3335:2525","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:466:1905":{"id":"0:466:1905","crate_id":0,"name":"push_div_eq","span":{"filename":"src/runtime.rs","begin":[340,0],"end":[340,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13466:55772":{"id":"2:13466:55772","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6101:54538":{"id":"5:6101:54538","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15862:2365"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:473:1956":{"id":"0:473:1956","crate_id":0,"name":"push_dot3_spanned","span":{"filename":"src/runtime.rs","begin":[343,0],"end":[343,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6462:3026":{"id":"1:6462:3026","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6463:54750","1:6464:7228","1:6465:54751","1:6466:54752","1:6467:54753","1:6468:54754"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:19:2090":{"id":"0:19:2090","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[14,4],"end":[16,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:920:2083","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13416:55765":{"id":"2:13416:55765","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15862:2365","self::pattern":"2:12997:2885","prim@char":"1:15856:2360","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:2815","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:59686":{"id":"2:13419:59686","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15862:2365","`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:2885","str::rsplit_terminator":"1:15862:2365","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:3781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5778:3094":{"id":"1:5778:3094","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5779:58015","1:5780:58016","1:5781:58017","1:5782:58018"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:444:1897":{"id":"0:444:1897","crate_id":0,"name":"push_and","span":{"filename":"src/runtime.rs","begin":[329,0],"end":[329,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2484","5:785:2672","5:786:2673"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369:1848":{"id":"0:369:1848","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[612,0],"end":[616,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"},"2:9223:2504":{"id":"2:9223:2504","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:232:1865":{"id":"0:232:1865","crate_id":0,"name":"quote_into_iter","span":{"filename":"src/runtime.rs","begin":[56,8],"end":[58,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"Self"},{"kind":"resolved_path","inner":{"name":"HasIter","id":"0:191:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13484:59703":{"id":"2:13484:59703","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15856:2360"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:3794","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:519:1977":{"id":"0:519:1977","crate_id":0,"name":"push_shr_spanned","span":{"filename":"src/runtime.rs","begin":[366,0],"end":[366,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:458:1894":{"id":"0:458:1894","crate_id":0,"name":"push_colon","span":{"filename":"src/runtime.rs","begin":[336,0],"end":[336,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13451:59694":{"id":"2:13451:59694","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:525:1980":{"id":"0:525:1980","crate_id":0,"name":"push_sub_spanned","span":{"filename":"src/runtime.rs","begin":[369,0],"end":[369,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:2606","2:2931:2607","2:2932:2608"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:508:1924":{"id":"0:508:1924","crate_id":0,"name":"push_rem_eq","span":{"filename":"src/runtime.rs","begin":[361,0],"end":[361,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13373:55731":{"id":"2:13373:55731","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:450:1900":{"id":"0:450:1900","crate_id":0,"name":"push_at","span":{"filename":"src/runtime.rs","begin":[332,0],"end":[332,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6086:60340":{"id":"5:6086:60340","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3544:2544":{"id":"2:3544:2544","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6560:3112":{"id":"1:6560:3112","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6561:54911","1:6562:54912"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13402:2650":{"id":"2:13402:2650","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15856:2360","self::pattern":"2:12997:2885","`None`":"2:47356:166"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:236:909":{"id":"0:236:909","crate_id":0,"name":"next","span":{"filename":"src/runtime.rs","begin":[70,8],"end":[72,9]},"visibility":"default","docs":"Pretend to be an iterator for the purposes of `quote_into_iter`.\nThis allows repeated calls to `quote_into_iter` to continue\ncorrectly returning DoesNotHaveIter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:1944":{"id":"0:441:1944","crate_id":0,"name":"push_add_spanned","span":{"filename":"src/runtime.rs","begin":[327,0],"end":[327,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13372:55735":{"id":"2:13372:55735","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15873:2374"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:1933":{"id":"0:295:1933","crate_id":0,"name":"push_lifetime","span":{"filename":"src/runtime.rs","begin":[218,0],"end":[246,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["lifetime",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:448:1899":{"id":"0:448:1899","crate_id":0,"name":"push_and_eq","span":{"filename":"src/runtime.rs","begin":[331,0],"end":[331,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13386:3525":{"id":"2:13386:3525","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:3777","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13379:55734":{"id":"2:13379:55734","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13377:55733":{"id":"2:13377:55733","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23006:3593":{"id":"2:23006:3593","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:3588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6099:60342":{"id":"5:6099:60342","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8354:205","`Box<str>`":"5:432:2226"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:468:1892":{"id":"0:468:1892","crate_id":0,"name":"push_dot","span":{"filename":"src/runtime.rs","begin":[341,0],"end":[341,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13457:59698":{"id":"2:13457:59698","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:120:2224":{"id":"0:120:2224","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[71,4],"end":[76,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8850:2691":{"id":"2:8850:2691","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:2676","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:346:1614":{"id":"0:346:1614","crate_id":0,"name":"spanned","span":{"filename":"src/spanned.rs","begin":[1,0],"end":[43,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:357:2316"],"is_stripped":true}},"2:3526:2552":{"id":"2:3526:2552","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:58708"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:2541":{"id":"2:3411:2541","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13390:4280":{"id":"2:13390:4280","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:3054","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22812:3108":{"id":"2:22812:3108","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:463:1940":{"id":"0:463:1940","crate_id":0,"name":"push_comma_spanned","span":{"filename":"src/runtime.rs","begin":[338,0],"end":[338,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:119:2223":{"id":"0:119:2223","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[61,4],"end":[65,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10538:3147":{"id":"2:10538:3147","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:33130","2:10541:54450"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3382:2535":{"id":"2:3382:2535","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:2247":{"id":"2:3372:2247","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4018:3125":{"id":"2:4018:3125","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:55583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6098:60341":{"id":"5:6098:60341","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:518:1928":{"id":"0:518:1928","crate_id":0,"name":"push_shr","span":{"filename":"src/runtime.rs","begin":[366,0],"end":[366,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13483:54542":{"id":"2:13483:54542","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:483:1961":{"id":"0:483:1961","crate_id":0,"name":"push_gt_spanned","span":{"filename":"src/runtime.rs","begin":[348,0],"end":[348,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5738:3092":{"id":"1:5738:3092","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5739:5358","1:5740:7695"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:514:1926":{"id":"0:514:1926","crate_id":0,"name":"push_shl","span":{"filename":"src/runtime.rs","begin":[364,0],"end":[364,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4704:3030":{"id":"1:4704:3030","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4705:57522","1:4706:39546","1:4707:57523","1:4708:57524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:118:1608":{"id":"0:118:1608","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[55,4],"end":[55,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:7798:3219":{"id":"1:7798:3219","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7799:54960"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10205:2775":{"id":"2:10205:2775","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:58998","2:10209:55373"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:2481":{"id":"2:3339:2481","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:2113"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:59704":{"id":"2:13487:59704","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15856:2360"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:3795","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23:2105":{"id":"0:23:2105","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[44,4],"end":[48,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8367:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13016:3498":{"id":"2:13016:3498","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:3518","2:13019:909","2:13020:59114","2:13021:59115"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10268:2313":{"id":"2:10268:2313","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3707:2549":{"id":"2:3707:2549","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:53883"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5832:2788":{"id":"5:5832:2788","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:2328"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:481:1960":{"id":"0:481:1960","crate_id":0,"name":"push_ge_spanned","span":{"filename":"src/runtime.rs","begin":[347,0],"end":[347,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:484:1913":{"id":"0:484:1913","crate_id":0,"name":"push_le","span":{"filename":"src/runtime.rs","begin":[349,0],"end":[349,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:22961:15934":{"id":"2:22961:15934","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:6307","2:22963:58074","2:22964:58075"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13399:2322":{"id":"2:13399:2322","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:521:1978":{"id":"0:521:1978","crate_id":0,"name":"push_shr_eq_spanned","span":{"filename":"src/runtime.rs","begin":[367,0],"end":[367,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:457:1952":{"id":"0:457:1952","crate_id":0,"name":"push_caret_eq_spanned","span":{"filename":"src/runtime.rs","begin":[335,0],"end":[335,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3355:2530":{"id":"2:3355:2530","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:528:2177":{"id":"0:528:2177","crate_id":0,"name":"IdentFragmentAdapter","span":{"filename":"src/runtime.rs","begin":[402,0],"end":[402,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1612","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:531:1518"],"impls":[]}},"0:0:1053":{"id":"0:0:1053","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1434,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.20\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:337","0:340","0:343","0:47:2171","0:368:1053","0:369:1848"],"is_stripped":false}},"2:3548:2545":{"id":"2:3548:2545","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:2544","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13396:2190":{"id":"2:13396:2190","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3313:2527":{"id":"2:3313:2527","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5788:3095":{"id":"1:5788:3095","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5789:55084"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13478:1935":{"id":"2:13478:1935","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12936:2474","`FromStr`":"2:12936:2474"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:2474","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:2474","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:510:1925":{"id":"0:510:1925","crate_id":0,"name":"push_fat_arrow","span":{"filename":"src/runtime.rs","begin":[362,0],"end":[362,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6688:3093":{"id":"1:6688:3093","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6689:54862","1:6690:7151","1:6691:7152","1:6692:7154","1:6693:7153","1:6694:7155","1:6695:7156","1:6696:7158","1:6697:5399","1:6698:7161","1:6699:7162","1:6700:7163","1:6701:7164","1:6702:7165","1:6703:7166","1:6704:7159","1:6705:7160"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:531:1518":{"id":"0:531:1518","crate_id":0,"name":"0","span":{"filename":"src/runtime.rs","begin":[402,50],"end":[402,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:524:1931":{"id":"0:524:1931","crate_id":0,"name":"push_sub","span":{"filename":"src/runtime.rs","begin":[369,0],"end":[369,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[8,0],"end":[8,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::option::Option","name":"Option","id":"2:47356:166","glob":false}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:2610","2:8413:2611","2:8414:2612","2:8415:2613","2:8419:2614","2:8422:2615"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3367:2532":{"id":"2:3367:2532","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6102:54539":{"id":"5:6102:54539","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15862:2365"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5792:3096":{"id":"1:5792:3096","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5793:54827"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:488:1915":{"id":"0:488:1915","crate_id":0,"name":"push_mul_eq","span":{"filename":"src/runtime.rs","begin":[351,0],"end":[351,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:477:1958":{"id":"0:477:1958","crate_id":0,"name":"push_eq_spanned","span":{"filename":"src/runtime.rs","begin":[345,0],"end":[345,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:44:2087":{"id":"0:44:2087","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[109,4],"end":[109,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3329:2526":{"id":"2:3329:2526","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8326:2693":{"id":"2:8326:2693","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:2663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13425:55767":{"id":"2:13425:55767","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15856:2360","str::rsplitn":"1:15862:2365","self::pattern":"2:12997:2885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:2109":{"id":"0:26:2109","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[54,4],"end":[58,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8367:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:476:1909":{"id":"0:476:1909","crate_id":0,"name":"push_eq","span":{"filename":"src/runtime.rs","begin":[345,0],"end":[345,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3388:2536":{"id":"2:3388:2536","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4686:2775":{"id":"1:4686:2775","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4687:2445","1:4688:57722","1:4690:57723","1:4691:4203","1:4692:57724","1:4693:57725","1:4694:55373","1:4703:2640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:456:1903":{"id":"0:456:1903","crate_id":0,"name":"push_caret_eq","span":{"filename":"src/runtime.rs","begin":[335,0],"end":[335,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3398:2538":{"id":"2:3398:2538","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5650:3024":{"id":"1:5650:3024","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5651:58033","1:5652:4027"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:470:1906":{"id":"0:470:1906","crate_id":0,"name":"push_dot2","span":{"filename":"src/runtime.rs","begin":[342,0],"end":[342,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:2179"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:2445","2:10506:54964","2:10507:54965","2:10508:54966","2:10509:54967","2:10510:54968","2:10511:54969","2:10512:54970","2:10513:54971","2:10514:54972","2:10515:54973","2:10516:54974","2:10517:54975","2:10518:54976","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13392:31818":{"id":"2:13392:31818","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13480:3965":{"id":"2:13480:3965","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13481:54540":{"id":"2:13481:54540","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:2316":{"id":"0:357:2316","crate_id":0,"name":"Spanned","span":{"filename":"src/spanned.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:358:2317"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:49:1607":{"id":"0:49:1607","crate_id":0,"name":"ident_fragment","span":{"filename":"src/ident_fragment.rs","begin":[1,0],"end":[86,56]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:63:1612"],"is_stripped":true}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3318:2524":{"id":"2:3318:2524","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:461:1937":{"id":"0:461:1937","crate_id":0,"name":"push_colon2_spanned","span":{"filename":"src/runtime.rs","begin":[337,0],"end":[337,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:500:1920":{"id":"0:500:1920","crate_id":0,"name":"push_question","span":{"filename":"src/runtime.rs","begin":[357,0],"end":[357,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13375:55732":{"id":"2:13375:55732","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317:2174":{"id":"0:317:2174","crate_id":0,"name":"mk_ident","span":{"filename":"src/runtime.rs","begin":[382,0],"end":[385,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["span",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:981:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10274:2776":{"id":"2:10274:2776","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:231:2259":{"id":"0:231:2259","crate_id":0,"name":"RepIteratorExt","span":{"filename":"src/runtime.rs","begin":[55,4],"end":[59,5]},"visibility":"public","docs":"Extension trait providing the `quote_into_iter` method on iterators.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:232:1865"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13387:2884":{"id":"2:13387:2884","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:3052","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:2442":{"id":"2:13437:2442","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360","str::matches":"1:15862:2365","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:3788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482:1912":{"id":"0:482:1912","crate_id":0,"name":"push_gt","span":{"filename":"src/runtime.rs","begin":[348,0],"end":[348,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:526:1932":{"id":"0:526:1932","crate_id":0,"name":"push_sub_eq","span":{"filename":"src/runtime.rs","begin":[370,0],"end":[370,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3402:2539":{"id":"2:3402:2539","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3323:2523":{"id":"2:3323:2523","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:368:1053":{"id":"0:368:1053","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[473,0],"end":[477,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`format_ident!`":"0:47:2171","`proc_macro::TokenStream`":"20:2976:1789","`proc_macro2::TokenStream`":"21:909:1789"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"},"2:13027:3500":{"id":"2:13027:3500","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:502:1921":{"id":"0:502:1921","crate_id":0,"name":"push_rarrow","span":{"filename":"src/runtime.rs","begin":[358,0],"end":[358,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:523:1979":{"id":"0:523:1979","crate_id":0,"name":"push_star_spanned","span":{"filename":"src/runtime.rs","begin":[368,0],"end":[368,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13362:2616":{"id":"2:13362:2616","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:1982":{"id":"0:304:1982","crate_id":0,"name":"push_lifetime_spanned","span":{"filename":"src/runtime.rs","begin":[248,0],"end":[280,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["lifetime",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:512:1893":{"id":"0:512:1893","crate_id":0,"name":"push_semi","span":{"filename":"src/runtime.rs","begin":[363,0],"end":[363,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:440:1895":{"id":"0:440:1895","crate_id":0,"name":"push_add","span":{"filename":"src/runtime.rs","begin":[327,0],"end":[327,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:475:1957":{"id":"0:475:1957","crate_id":0,"name":"push_dot_dot_eq_spanned","span":{"filename":"src/runtime.rs","begin":[344,0],"end":[344,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6790:2987":{"id":"1:6790:2987","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:54919","1:6792:58039"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2102","2:8369:2558","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:54838"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:289:1984":{"id":"0:289:1984","crate_id":0,"name":"parse_spanned","span":{"filename":"src/runtime.rs","begin":[187,0],"end":[190,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:18:1611":{"id":"0:18:1611","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[10,0],"end":[59,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:19:2090","0:21:2100","0:23:2105","0:26:2109"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"private::Sealed","id":"0:44:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8330:2692":{"id":"2:8330:2692","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:2664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:2616","2:13363:59680","2:13364:59681","2:13366:59682","2:13369:58011","2:13370:59683","2:13371:293","2:13372:55735","2:13373:55731","2:13375:55732","2:13377:55733","2:13379:55734","2:13381:3139","2:13382:59684","2:13383:55754","2:13384:55755","2:13385:3812","2:13386:3525","2:13387:2884","2:13388:31833","2:13389:31823","2:13390:4280","2:13391:59685","2:13392:31818","2:13393:55771","2:13396:2190","2:13399:2322","2:13402:2650","2:13406:2615","2:13410:55762","2:13413:31690","2:13416:55765","2:13419:59686","2:13422:59687","2:13425:55767","2:13428:55769","2:13431:59688","2:13434:59689","2:13437:2442","2:13440:59690","2:13443:59691","2:13446:59692","2:13449:59693","2:13451:59694","2:13453:59695","2:13455:59696","2:13456:59697","2:13457:59698","2:13460:59699","2:13463:14449","2:13466:55772","2:13469:59700","2:13472:59701","2:13475:59702","2:13478:1935","2:13480:3965","2:13481:54540","2:13482:54541","2:13483:54542","2:13484:59703","2:13486:3118","2:13487:59704"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13413:31690":{"id":"2:13413:31690","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:485:1962":{"id":"0:485:1962","crate_id":0,"name":"push_le_spanned","span":{"filename":"src/runtime.rs","begin":[349,0],"end":[349,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23655:3588":{"id":"2:23655:3588","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:3592"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:164:1610":{"id":"0:164:1610","crate_id":0,"name":"__private","span":{"filename":"src/runtime.rs","begin":[1,0],"end":[438,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]","#[path = \"runtime.rs\"]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:207:1606","0:184","0:185","0:188","0:191:1880","0:193:1879","0:431:1868","0:286:1885","0:287:1938","0:288:1935","0:289:1984","0:293:1883","0:294:1936","0:295:1933","0:304:1982","0:440:1895","0:441:1944","0:442:1896","0:443:1945","0:444:1897","0:445:1946","0:446:1898","0:447:1947","0:448:1899","0:449:1948","0:450:1900","0:451:1949","0:452:1901","0:453:1950","0:454:1902","0:455:1951","0:456:1903","0:457:1952","0:458:1894","0:459:1943","0:460:1884","0:461:1937","0:462:1891","0:463:1940","0:464:1904","0:465:1953","0:466:1905","0:467:1954","0:468:1892","0:469:1941","0:470:1906","0:471:1955","0:472:1907","0:473:1956","0:474:1908","0:475:1957","0:476:1909","0:477:1958","0:478:1910","0:479:1959","0:480:1911","0:481:1960","0:482:1912","0:483:1961","0:484:1913","0:485:1962","0:486:1914","0:487:1963","0:488:1915","0:489:1964","0:490:1916","0:491:1965","0:492:1917","0:493:1966","0:494:1918","0:495:1967","0:496:1919","0:497:1968","0:498:1890","0:499:1939","0:500:1920","0:501:1969","0:502:1921","0:503:1970","0:504:1922","0:505:1971","0:506:1923","0:507:1972","0:508:1924","0:509:1973","0:510:1925","0:511:1974","0:512:1893","0:513:1942","0:514:1926","0:515:1975","0:516:1927","0:517:1976","0:518:1928","0:519:1977","0:520:1929","0:521:1978","0:522:1930","0:523:1979","0:524:1931","0:525:1980","0:526:1932","0:527:1981","0:315:1934","0:316:1983","0:317:2174","0:528:2177"],"is_stripped":true}},"2:13434:59689":{"id":"2:13434:59689","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443:1945":{"id":"0:443:1945","crate_id":0,"name":"push_add_eq_spanned","span":{"filename":"src/runtime.rs","begin":[328,0],"end":[328,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:480:1911":{"id":"0:480:1911","crate_id":0,"name":"push_ge","span":{"filename":"src/runtime.rs","begin":[347,0],"end":[347,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:520:1929":{"id":"0:520:1929","crate_id":0,"name":"push_shr_eq","span":{"filename":"src/runtime.rs","begin":[367,0],"end":[367,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13456:59697":{"id":"2:13456:59697","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3343:2531":{"id":"2:3343:2531","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6079:60338":{"id":"5:6079:60338","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3615:2473":{"id":"2:3615:2473","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:58084","2:3618:58085","2:3619:55771"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:452:1901":{"id":"0:452:1901","crate_id":0,"name":"push_bang","span":{"filename":"src/runtime.rs","begin":[333,0],"end":[333,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3779:2503":{"id":"2:3779:2503","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13381:3139":{"id":"2:13381:3139","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15862:2365","crate::ops::Index":"2:3544:2544","str::slice_mut_unchecked":"1:15862:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13482:54541":{"id":"2:13482:54541","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:507:1972":{"id":"0:507:1972","crate_id":0,"name":"push_rem_spanned","span":{"filename":"src/runtime.rs","begin":[360,0],"end":[360,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:5828:2787":{"id":"5:5828:2787","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:449:1948":{"id":"0:449:1948","crate_id":0,"name":"push_and_eq_spanned","span":{"filename":"src/runtime.rs","begin":[331,0],"end":[331,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:469:1941":{"id":"0:469:1941","crate_id":0,"name":"push_dot_spanned","span":{"filename":"src/runtime.rs","begin":[341,0],"end":[341,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13472:59701":{"id":"2:13472:59701","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:505:1971":{"id":"0:505:1971","crate_id":0,"name":"push_larrow_spanned","span":{"filename":"src/runtime.rs","begin":[359,0],"end":[359,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8376:2584":{"id":"2:8376:2584","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:2111","2:8380:2617","2:8381:2618"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8846:2560":{"id":"2:8846:2560","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:434:1518":{"id":"0:434:1518","crate_id":0,"name":"0","span":{"filename":"src/runtime.rs","begin":[141,24],"end":[141,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:3351:2528":{"id":"2:3351:2528","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:459:1943":{"id":"0:459:1943","crate_id":0,"name":"push_colon_spanned","span":{"filename":"src/runtime.rs","begin":[336,0],"end":[336,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:522:1930":{"id":"0:522:1930","crate_id":0,"name":"push_star","span":{"filename":"src/runtime.rs","begin":[368,0],"end":[368,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:462:1891":{"id":"0:462:1891","crate_id":0,"name":"push_comma","span":{"filename":"src/runtime.rs","begin":[338,0],"end":[338,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5744:3093":{"id":"1:5744:3093","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5745:6804","1:5746:55084","1:5747:5358","1:5748:55085","1:5749:3389","1:5750:3390","1:5751:55086","1:5752:1283","1:5753:55087","1:5754:55088","1:5755:55089","1:5756:55090","1:5757:55091","1:5758:55092","1:5759:55093","1:5760:55094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:287:1938":{"id":"0:287:1938","crate_id":0,"name":"push_group_spanned","span":{"filename":"src/runtime.rs","begin":[171,0],"end":[180,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["delimiter",{"kind":"resolved_path","inner":{"name":"Delimiter","id":"21:939:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["inner",{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6080:3055":{"id":"5:6080:3055","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10276:2777":{"id":"2:10276:2777","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:460:1884":{"id":"0:460:1884","crate_id":0,"name":"push_colon2","span":{"filename":"src/runtime.rs","begin":[337,0],"end":[337,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:478:1910":{"id":"0:478:1910","crate_id":0,"name":"push_eq_eq","span":{"filename":"src/runtime.rs","begin":[346,0],"end":[346,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:471:1955":{"id":"0:471:1955","crate_id":0,"name":"push_dot2_spanned","span":{"filename":"src/runtime.rs","begin":[342,0],"end":[342,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:63:1612":{"id":"0:63:1612","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[11,0],"end":[21,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.","links":{"`Ident`":"21:981:2178","`format_ident!`":"0:47:2171"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:64:648","0:65:1849"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:494:1918":{"id":"0:494:1918","crate_id":0,"name":"push_or_eq","span":{"filename":"src/runtime.rs","begin":[354,0],"end":[354,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:504:1922":{"id":"0:504:1922","crate_id":0,"name":"push_larrow","span":{"filename":"src/runtime.rs","begin":[359,0],"end":[359,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:4:1606":{"id":"0:4:1606","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[112,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:18:1611"],"is_stripped":true}},"0:447:1947":{"id":"0:447:1947","crate_id":0,"name":"push_and_and_spanned","span":{"filename":"src/runtime.rs","begin":[330,0],"end":[330,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:4750:3464":{"id":"2:4750:3464","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:2102","2:4752:59086","2:4753:2620"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3472:2542":{"id":"2:3472:2542","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10270:2314":{"id":"2:10270:2314","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:235:2263":{"id":"0:235:2263","crate_id":0,"name":"RepToTokensExt","span":{"filename":"src/runtime.rs","begin":[66,4],"end":[77,5]},"visibility":"public","docs":"Extension trait providing the `quote_into_iter` method for\nnon-iterable types. These types interpolate the same value in each\niteration of the repetition.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:236:909","0:237:1865"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:65:1849":{"id":"0:65:1849","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[111,0],"end":[111,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:63:1612","glob":false}},"0:240:2269":{"id":"0:240:2269","crate_id":0,"name":"RepAsIteratorExt","span":{"filename":"src/runtime.rs","begin":[83,4],"end":[87,5]},"visibility":"public","docs":"Extension trait providing the `quote_into_iter` method for types that\ncan be referenced as an iterator.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:242:2271","0:243:1865"],"generics":{"params":[{"name":"'q","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:499:1939":{"id":"0:499:1939","crate_id":0,"name":"push_pound_spanned","span":{"filename":"src/runtime.rs","begin":[356,0],"end":[356,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:21:2100":{"id":"0:21:2100","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[35,4],"end":[38,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8367:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8367:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13382:59684":{"id":"2:13382:59684","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15862:2365","str::slice_unchecked":"1:15862:2365","crate::ops::IndexMut":"2:3548:2545"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:59693":{"id":"2:13449:59693","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:503:1970":{"id":"0:503:1970","crate_id":0,"name":"push_rarrow_spanned","span":{"filename":"src/runtime.rs","begin":[358,0],"end":[358,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6406:212":{"id":"5:6406:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6407:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3684:2547":{"id":"2:3684:2547","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:2473","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:117:1613","glob":false}},"2:3308:2480":{"id":"2:3308:2480","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:82:1608":{"id":"0:82:1608","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[1,0],"end":[211,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:117:1613"],"is_stripped":true}},"0:513:1942":{"id":"0:513:1942","crate_id":0,"name":"push_semi_spanned","span":{"filename":"src/runtime.rs","begin":[363,0],"end":[363,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:7771","1:2579:2343","1:2580:55581","1:2581:55582","1:2582:55583"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2840:2482":{"id":"2:2840:2482","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:54448"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6083:60339":{"id":"5:6083:60339","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:55769":{"id":"2:13428:55769","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15856:2360","str::splitn":"1:15862:2365","self::pattern":"2:12997:2885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:2817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:2529":{"id":"2:3347:2529","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:207:1606":{"id":"0:207:1606","crate_id":0,"name":"ext","span":{"filename":"src/runtime.rs","begin":[47,0],"end":[47,11]},"visibility":"public","docs":"Extension traits used by the implementation of `quote!`. These are defined\nin separate traits, rather than as a single trait due to ambiguity issues.\n\nThese traits expose a `quote_into_iter` method which should allow calling\nwhichever impl happens to be applicable. Calling that method repeatedly on\nthe returned value should be idempotent.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:231:2259","0:235:2263","0:240:2269"],"is_stripped":false}},"0:491:1965":{"id":"0:491:1965","crate_id":0,"name":"push_ne_spanned","span":{"filename":"src/runtime.rs","begin":[352,0],"end":[352,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:511:1974":{"id":"0:511:1974","crate_id":0,"name":"push_fat_arrow_spanned","span":{"filename":"src/runtime.rs","begin":[362,0],"end":[362,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:467:1954":{"id":"0:467:1954","crate_id":0,"name":"push_div_eq_spanned","span":{"filename":"src/runtime.rs","begin":[340,0],"end":[340,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6793:2989":{"id":"1:6793:2989","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6794:54640"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13366:59682":{"id":"2:13366:59682","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15862:2365"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:490:1916":{"id":"0:490:1916","crate_id":0,"name":"push_ne","span":{"filename":"src/runtime.rs","begin":[352,0],"end":[352,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6962:2990":{"id":"1:6962:2990","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6963:54813"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:493:1966":{"id":"0:493:1966","crate_id":0,"name":"push_or_spanned","span":{"filename":"src/runtime.rs","begin":[353,0],"end":[353,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6864:2993":{"id":"1:6864:2993","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:54708"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6866:2994":{"id":"1:6866:2994","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:55331"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:315:1934":{"id":"0:315:1934","crate_id":0,"name":"push_underscore","span":{"filename":"src/runtime.rs","begin":[372,0],"end":[374,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:516:1927":{"id":"0:516:1927","crate_id":0,"name":"push_shl_eq","span":{"filename":"src/runtime.rs","begin":[365,0],"end":[365,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:455:1951":{"id":"0:455:1951","crate_id":0,"name":"push_caret_spanned","span":{"filename":"src/runtime.rs","begin":[334,0],"end":[334,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:495:1967":{"id":"0:495:1967","crate_id":0,"name":"push_or_eq_spanned","span":{"filename":"src/runtime.rs","begin":[354,0],"end":[354,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6100:2684":{"id":"5:6100:2684","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243:1865":{"id":"0:243:1865","crate_id":0,"name":"quote_into_iter","span":{"filename":"src/runtime.rs","begin":[86,8],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'q","mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:240:2269","args":null,"param_names":[]}}}},{"kind":"resolved_path","inner":{"name":"HasIter","id":"0:191:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:12936:2474":{"id":"2:12936:2474","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:55560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:47:2171":{"id":"0:47:2171","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"proc_macro2::Span":"21:914:1850","std::fmt::Binary":"2:10266:2315","std::fmt::LowerHex":"2:10268:2313","crate::IdentFragment":"0:63:1612","proc_macro2::Ident":"21:981:2178","proc_macro2::Span::call_site":"21:914:1850","`std::fmt`":"5:5088:648","std::fmt::UpperHex":"2:10270:2314","std::fmt::Octal":"2:10264:2312","`format!`":"5:6:659"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"},"0:489:1964":{"id":"0:489:1964","crate_id":0,"name":"push_mul_eq_spanned","span":{"filename":"src/runtime.rs","begin":[351,0],"end":[351,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13393:55771":{"id":"2:13393:55771","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15856:2360","self::pattern":"2:12997:2885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3483:2543":{"id":"2:3483:2543","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13385:3812":{"id":"2:13385:3812","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:2881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:1613":{"id":"0:117:1613","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[12,0],"end":[77,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:118:1608","0:119:2223","0:120:2224"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:286:1885":{"id":"0:286:1885","crate_id":0,"name":"push_group","span":{"filename":"src/runtime.rs","begin":[167,0],"end":[169,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["delimiter",{"kind":"resolved_path","inner":{"name":"Delimiter","id":"21:939:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["inner",{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"20:676:2980":{"id":"20:676:2980","crate_id":20,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:677:60893"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:59692":{"id":"2:13446:59692","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:2885","str::match_indices":"1:15862:2365","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:3786","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13370:59683":{"id":"2:13370:59683","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:445:1946":{"id":"0:445:1946","crate_id":0,"name":"push_and_spanned","span":{"filename":"src/runtime.rs","begin":[329,0],"end":[329,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13364:59681":{"id":"2:13364:59681","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14183:2511":{"id":"2:14183:2511","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:55648","2:14185:55649","2:14186:55650","2:14187:55651","2:14188:55652","2:14189:55653","2:14190:2640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:506:1923":{"id":"0:506:1923","crate_id":0,"name":"push_rem","span":{"filename":"src/runtime.rs","begin":[360,0],"end":[360,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:442:1896":{"id":"0:442:1896","crate_id":0,"name":"push_add_eq","span":{"filename":"src/runtime.rs","begin":[328,0],"end":[328,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13388:31833":{"id":"2:13388:31833","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15862:2365"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:3791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:501:1969":{"id":"0:501:1969","crate_id":0,"name":"push_question_spanned","span":{"filename":"src/runtime.rs","begin":[357,0],"end":[357,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10264:2312":{"id":"2:10264:2312","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13431:59688":{"id":"2:13431:59688","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:2188":{"id":"2:3245:2188","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:492:1917":{"id":"0:492:1917","crate_id":0,"name":"push_or","span":{"filename":"src/runtime.rs","begin":[353,0],"end":[353,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5730:3090":{"id":"1:5730:3090","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5731:5358","1:5732:54647","1:5733:54648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3075:3565":{"id":"2:3075:3565","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:515:1975":{"id":"0:515:1975","crate_id":0,"name":"push_shl_spanned","span":{"filename":"src/runtime.rs","begin":[364,0],"end":[364,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:59700":{"id":"2:13469:59700","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15856:2360","self::pattern":"2:12997:2885"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4711:3051":{"id":"1:4711:3051","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4712:57839","1:4713:57840","1:4714:57841","1:4716:3050","1:4717:57842","1:4719:55762","1:4720:4280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4629:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6078":{"id":"5:6078","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5898:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6079:60338","5:6080:3055","5:6083:60339","5:6086:60340","5:6098:60341","5:6099:60342","5:6100:2684","5:6101:54538","5:6102:54539"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5722:3091":{"id":"1:5722:3091","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5723:57626","1:5724:57628","1:5725:57627","1:5726:57629"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:316:1983":{"id":"0:316:1983","crate_id":0,"name":"push_underscore_spanned","span":{"filename":"src/runtime.rs","begin":[376,0],"end":[378,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:509:1973":{"id":"0:509:1973","crate_id":0,"name":"push_rem_eq_spanned","span":{"filename":"src/runtime.rs","begin":[361,0],"end":[361,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13422:59687":{"id":"2:13422:59687","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12997:2885","str::split_terminator":"1:15862:2365","str::split":"1:15862:2365","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:3782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13486:3118":{"id":"2:13486:3118","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15856:2360"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:3119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:464:1904":{"id":"0:464:1904","crate_id":0,"name":"push_div","span":{"filename":"src/runtime.rs","begin":[339,0],"end":[339,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3377:2533":{"id":"2:3377:2533","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12444:3961":{"id":"2:12444:3961","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:2102","2:12446:59163"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:453:1950":{"id":"0:453:1950","crate_id":0,"name":"push_bang_spanned","span":{"filename":"src/runtime.rs","begin":[333,0],"end":[333,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:293:1883":{"id":"0:293:1883","crate_id":0,"name":"push_ident","span":{"filename":"src/runtime.rs","begin":[209,0],"end":[212,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:2549","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3394:2537":{"id":"2:3394:2537","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:64:648":{"id":"0:64:648","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[13,4],"end":[13,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:2609"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6862:2991":{"id":"1:6862:2991","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6863:57671"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:55731","2:10901:55732","2:10902:55733","2:10903:55734","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:2102","2:8567:909","2:8568:2619","2:8571:2620","2:8572:484","2:8574:2327","2:8577:2621","2:8578:2622","2:8579:2623","2:8580:2624","2:8582:2625","2:8584:2626","2:8585:2627","2:8587:828","2:8590:2628","2:8597:2629","2:8599:2320","2:8602:2114","2:8603:2630","2:8604:2631","2:8606:2632","2:8608:2633","2:8611:1287","2:8612:2634","2:8613:2635","2:8617:2636","2:8620:2637","2:8621:2638","2:8622:2639","2:8624:2640","2:8625:2278","2:8627:2641","2:8630:2642","2:8632:2643","2:8642:2644","2:8657:2645","2:8659:2646","2:8663:2647","2:8672:2325","2:8675:2648","2:8677:2649","2:8680:265","2:8687:283","2:8694:2650","2:8701:2651","2:8710:2652","2:8720:1001","2:8727:2653","2:8734:2606","2:8735:2607","2:8736:2654","2:8748:2655","2:8755:2656","2:8767:2657","2:8774:2658","2:8775:2659","2:8780:2660","2:8783:2661","2:8786:2662","2:8787:2663","2:8789:2664","2:8791:404","2:8794:2665","2:8797:984","2:8800:2666","2:8803:593","2:8806:2667","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:2668","2:8820:2669","2:8828:2670"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:498:1890":{"id":"0:498:1890","crate_id":0,"name":"push_pound","span":{"filename":"src/runtime.rs","begin":[356,0],"end":[356,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:294:1936":{"id":"0:294:1936","crate_id":0,"name":"push_ident_spanned","span":{"filename":"src/runtime.rs","begin":[214,0],"end":[216,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:9340:3105":{"id":"1:9340:3105","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9341:54937","1:9342:54938","1:9343:54939","1:9344:54940","1:9345:3823","1:9346:39139","1:9347:54936"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13440:59690":{"id":"2:13440:59690","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12997:2885","`DoubleEndedIterator`":"2:8411:120","str::matches":"1:15862:2365","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5656:3022":{"id":"1:5656:3022","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5657:4748","1:5658:58011"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8843:2559":{"id":"2:8843:2559","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3742:2502":{"id":"2:3742:2502","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:1079:3116":{"id":"1:1079:3116","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2484","1:1081:3965","1:1082:54538","1:1083:54539","1:1084:54540","1:1085:54541","1:1086:54542"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13383:55754":{"id":"2:13383:55754","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15862:2365"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:527:1981":{"id":"0:527:1981","crate_id":0,"name":"push_sub_eq_spanned","span":{"filename":"src/runtime.rs","begin":[370,0],"end":[370,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4989:3005":{"id":"1:4989:3005","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4990:2271","1:4991:55361"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:497:1968":{"id":"0:497:1968","crate_id":0,"name":"push_or_or_spanned","span":{"filename":"src/runtime.rs","begin":[355,0],"end":[355,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13455:59696":{"id":"2:13455:59696","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13384:55755":{"id":"2:13384:55755","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15862:2365"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40:2086":{"id":"0:40:2086","crate_id":0,"name":"private","span":{"filename":"src/ext.rs","begin":[106,0],"end":[106,11]},"visibility":{"restricted":{"parent":"0:4:1606","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:44:2087"],"is_stripped":true}},"2:9222:2505":{"id":"2:9222:2505","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[6,0],"end":[6,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"proc_macro2","name":"proc_macro2","id":"21:0:1985","glob":true}},"0:431:1868":{"id":"0:431:1868","crate_id":0,"name":"RepInterp","span":{"filename":"src/runtime.rs","begin":[141,0],"end":[141,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:434:1518"],"impls":[]}},"0:496:1919":{"id":"0:496:1919","crate_id":0,"name":"push_or_or","span":{"filename":"src/runtime.rs","begin":[355,0],"end":[355,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13022:3499":{"id":"2:13022:3499","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:2610","2:13025:58681","2:13026:58682"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:3498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:479:1959":{"id":"0:479:1959","crate_id":0,"name":"push_eq_eq_spanned","span":{"filename":"src/runtime.rs","begin":[346,0],"end":[346,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13443:59691":{"id":"2:13443:59691","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12997:2885","`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15856:2360","str::rmatch_indices":"1:15862:2365"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:3785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3360:2534":{"id":"2:3360:2534","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:59702":{"id":"2:13475:59702","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15873:2374","str::as_mut_ptr":"1:15862:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:465:1953":{"id":"0:465:1953","crate_id":0,"name":"push_div_spanned","span":{"filename":"src/runtime.rs","begin":[339,0],"end":[339,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:472:1907":{"id":"0:472:1907","crate_id":0,"name":"push_dot3","span":{"filename":"src/runtime.rs","begin":[343,0],"end":[343,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:446:1898":{"id":"0:446:1898","crate_id":0,"name":"push_and_and","span":{"filename":"src/runtime.rs","begin":[330,0],"end":[330,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:193:1879":{"id":"0:193:1879","crate_id":0,"name":"ThereIsNoIteratorInRepetition","span":{"filename":"src/runtime.rs","begin":[11,0],"end":[11,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:358:2317":{"id":"0:358:2317","crate_id":0,"name":"__span","span":{"filename":"src/spanned.rs","begin":[5,4],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13460:59699":{"id":"2:13460:59699","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12997:2885","prim@char":"1:15856:2360"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5800:3098":{"id":"1:5800:3098","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5801:5358"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13369:58011":{"id":"2:13369:58011","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:3926"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451:1949":{"id":"0:451:1949","crate_id":0,"name":"push_at_spanned","span":{"filename":"src/runtime.rs","begin":[332,0],"end":[332,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:18:1611","glob":false}},"0:242:2271":{"id":"0:242:2271","crate_id":0,"name":"Iter","span":{"filename":"src/runtime.rs","begin":[84,8],"end":[84,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:517:1976":{"id":"0:517:1976","crate_id":0,"name":"push_shl_eq_spanned","span":{"filename":"src/runtime.rs","begin":[365,0],"end":[365,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:486:1914":{"id":"0:486:1914","crate_id":0,"name":"push_lt","span":{"filename":"src/runtime.rs","begin":[350,0],"end":[350,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13363:59680":{"id":"2:13363:59680","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:14449":{"id":"2:13463:14449","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15856:2360","self::pattern":"2:12997:2885"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13007:2880":{"id":"2:13007:2880","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:3498","2:13010:58877","2:13011:58878","2:13012:58879","2:13013:58881","2:13014:58880","2:13015:58882"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4629:3045":{"id":"1:4629:3045","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4630:3324","1:4631:55170","1:4633:55171","1:4634:55172","1:4635:3046","1:4636:55173","1:4637:54632","1:4639:55174","1:4640:2640","1:4641:2884","1:4642:2624","1:4644:2634"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10266:2315":{"id":"2:10266:2315","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13391:59685":{"id":"2:13391:59685","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:3790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:191:1880":{"id":"0:191:1880","crate_id":0,"name":"HasIterator","span":{"filename":"src/runtime.rs","begin":[10,0],"end":[10,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:13410:55762":{"id":"2:13410:55762","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12997:2885","str::rsplit":"1:15862:2365","prim@char":"1:15856:2360","`DoubleEndedIterator`":"2:8411:120","str::split_whitespace":"1:15862:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:2807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6440:2989":{"id":"1:6440:2989","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6441:3389","1:6442:3390","1:6443:54639","1:6444:55471","1:6446:55475","1:6448:55472","1:6449:55473","1:6451:55474"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:2087","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:487:1963":{"id":"0:487:1963","crate_id":0,"name":"push_lt_spanned","span":{"filename":"src/runtime.rs","begin":[350,0],"end":[350,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:237:1865":{"id":"0:237:1865","crate_id":0,"name":"quote_into_iter","span":{"filename":"src/runtime.rs","begin":[74,8],"end":[76,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},{"kind":"resolved_path","inner":{"name":"DoesNotHaveIter","id":"0:193:1879","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:2540":{"id":"2:3406:2540","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7891:2676":{"id":"2:7891:2676","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:59170","2:7893:59171","2:7894:59168","2:7895:59166","2:7896:59172","2:7897:59169","2:7898:59167"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:288:1935":{"id":"0:288:1935","crate_id":0,"name":"parse","span":{"filename":"src/runtime.rs","begin":[182,0],"end":[185,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3281:2499":{"id":"2:3281:2499","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"5:3946:2581":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:1442:2558":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:15873:2374":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:152:7728":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10424:5047":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13062:5750":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:11101:2557":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5314:5285":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11932:5467":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:8183:2558":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11794:5445":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7804:4424":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7549:4423":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:6683:3979":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"9:900:6362":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:51602:3598":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3995:3261":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:644:4789":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:12444:3961":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:1043:4990":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:11931:3213":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10001:46424":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4470:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6200:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:6470:2873":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:49895:3512":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8911:2681":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13272:5819":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:9177:54624":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:670:39836":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10052:46426":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:49278:3654":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:511:6395":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9961:7740":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11015:7759":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13506:5875":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11835:5456":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:7289:54634":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7335:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"20:2726:4814":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:10374:7813":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:15862:2365":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:6440:2989":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5960:4334":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7453:4415":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:8189:2558":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8477:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5312:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:12468:3926":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"7:38:44339":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10140:4695":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4602:3037":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:51579:3595":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"21:823:1789":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"16:4614:6054":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9649:7734":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:53238:3600":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11122:2807":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11100:4717":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:15092:3142":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:7606:4008":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:231:2872":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11118:46379":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10331:4695":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:578:6437":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:584:6440":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11135:3007":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"12:1180:4231":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1760:6608":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5998:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:6698:7161":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:12010:7545":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:2866:4587":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10801:46545":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:24063:38856":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:51174:3605":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:13760:59083":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:599:6448":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:14801:5053":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46552:2720":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:3145:4601":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8741:3405":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9404:5289":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:8107:4050":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11482:2178":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12408:5570":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:3429:4341":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:13698:3222":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:1511:3158":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2794:4340":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12507:5581":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5984:3442":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10837:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"20:2754:2194":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"16:3241:4595":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5945:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11082:4687":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:14441:2997":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:8354:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:11319:2816":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11109:2717":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4410:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:11065:3048":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11304:46380":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:24025:38855":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:46288:3947":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5377:3368":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10558:7747":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:14673:3025":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:5561:4314":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:68:4986":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:49619:3794":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:8330:2692":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4041:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:32177:3865":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:51531:3610":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:15869:2370":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:25121:3672":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4112:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"22:0:2464":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:46591:2713":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22865:3592":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9034:46373":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10650:10603":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6812:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:3621:5026":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:22961:15934":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:2991:4600":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:46632:2700":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10149:7738":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4371:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:10543:3462":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12741:5621":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6560:3112":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:51381:3630":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:157:39506":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:4436:3073":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5953:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"12:2005:2271":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"20:3136:2195":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"17:13465:5866":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11822:5455":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46841:2681":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:14979:7697":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3331:3332":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10571:46567":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:51216:7399":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3604:5215":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:12715:3783":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4995:6066":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7119:4346":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9729:60812":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11337:4684":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12051:3195":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12307:5534":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"18:885:4784":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:866:4783":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:3990:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13370:5841":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:46534:2709":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4535:6053":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4459:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3714:6041":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10788:3110":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:10205:2775":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:365:2468":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:7295:4432":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3398:2538":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6881:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5185:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:432:2226":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:6647:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12373:5559":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13054:5748":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:3041:4591":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:2213:3975":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4434:3072":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11406:2992":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5778:3094":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11277:5351":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3367:2532":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:24717:3843":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:3966:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6152:4414":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12343:5540":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6424:4468":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:636:5198":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"20:0:1024":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"6:5528:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:53050:3632":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2187:2578":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:27932:3650":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2274:3571":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10926:7755":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:51864:3639":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10853:3062":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:270:60900":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:6999:4478":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1153:10602":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2170:2581":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"12:2025:2579":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:823:5046":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:11628:5406":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4448:6050":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:12114:3201":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10788:7752":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:1015:2558":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:11358:4683":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:3131:2178":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"21:981:2178":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"16:5346:4413":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1492:3154":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"12:429:4235":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:53199:3635":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:8330:4026":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:13571:3228":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13386:5844":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:4860:2257":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"1:14466:3103":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:5088:648":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4317:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1584:6503":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:744:60827":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10563:3280":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12247:5523":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13554:5890":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6166:4460":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:7891:2676":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:1533:6475":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:4397:3071":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6780:4476":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:1522:3159":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:23651:2087":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1700:6586":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3318:2524":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12442:5573":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11189:3014":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:9591:5042":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:8849:4711":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:46502:2706":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:1528:3160":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:13073:3503":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6366:4250":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11281:3369":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:3335:2525":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8693:3396":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7195:4484":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:2315:60778":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6644:4474":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11601:3244":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6087:4412":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:23655:3588":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3172:4592":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7406:4418":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7205:4485":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1534:3161":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12184:3267":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:4694:5002":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:52987:3612":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12685:5614":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:11402:2818":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:897:3283":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:10699:2703":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:5933:3436":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:0:2330":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11169:2821":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:4506:6052":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11980:3217":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13258:5814":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:15272:3375":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1613:2558":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5347:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:3877:2928":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13933:6010":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:15880:2381":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"14:56:2178":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:5433:4305":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:52230:3611":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:3522:5211":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13574:5896":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4517:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:2968:4589":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:24751:3844":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:45972:3711":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:14929:7549":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:3035:7288":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:801:4777":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:47389:2102":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7856:4494":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:5078:2903":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11199:5350":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:48656:3169":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:4008:7754":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"0:368:1053":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"1:11336:3437":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10128:4761":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2192:2580":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:49130:2806":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4395:3070":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11355:3369":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12982:5689":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6214:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49700:3497":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4281:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:10264:2312":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:8432:2581":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7894:4451":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:15854:2358":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4629:3045":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:3347:2529":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11231:4715":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:784:3155":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:11281:2815":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5580:4315":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:11988:7688":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:3881:6624":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12712:5618":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:3070:2083":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"21:740:2468":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:3246:2500":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:1655:3165":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:11871:2809":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:22584:58968":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6068:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13963:6015":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"20:3090:1886":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:51727:7408":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2325:4060":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:49916:3514":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:8413:4029":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:12073:5499":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:3488:4599":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"14:11:7800":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5282:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1717:6593":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6136:4454":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"9:749:4101":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:7368:2558":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13477:5867":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7279:4636":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11555:5394":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:1690:6580":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"12:354:7641":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:9715:3361":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"5:374:4023":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:782:5198":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:510:46368":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12385:5561":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:12997:2885":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:49139:2804":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3039:59498":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:10936:3259":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10274:2776":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:8436:2583":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12208:5518":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:4750:3464":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13163:5790":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10611:46568":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"21:736:1789":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"16:6691:4475":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13205:5802":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2159:2271":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3343:2531":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:53391:7467":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:15191:3017":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:1505:3157":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5501:3375":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:52654:3640":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:2331:2569":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"9:996:4165":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:45892:3126":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:1592:2271":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:610:4787":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5420:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:3343:3338":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:1723:6596":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:50028:3800":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:53361:7465":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:14492:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11267:7687":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:3034:59497":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11992:54777":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:49290:2881":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:52183:3607":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6124:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:7930:3309":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"5:1669:3156":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"12:1159:4230":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:8649:3395":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:24047:38847":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9689:60811":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:45920:3563":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:51255:7400":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:24128:3857":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"20:2989:2558":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:5722:3091":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7303:4490":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:377:4237":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:10276:2777":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10160:5297":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12431:5571":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:5927:4332":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1497:3155":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2251:3568":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12209:3180":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13780:5968":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:6793:2989":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5456:4306":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:69:4003":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"20:1074:1789":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:11147:7597":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:23984:3698":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:968:3160":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13446:5859":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:8449:4004":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"0:369:1848":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"2:48672:3463":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9839:4695":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:47535:2557":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"13:0:2329":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:51990:3631":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46422:12222":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"12:396:4236":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13192:5797":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:32218:3887":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:3997:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:12085:3199":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9933:7739":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:11374:2817":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1622:6527":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12043:2271":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12494:5580":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10988:7758":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11962:5476":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4686:2775":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11572:5396":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:8154:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6028:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6569:4620":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6176:4461":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:46442:2694":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3313:2527":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13627:5907":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:10410:59142":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:14461:7691":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5672:4318":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6518:4470":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13041:5741":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10950:7756":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:3892:6632":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:48133:2313":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:720:5200":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:2772:4063":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6101:4410":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13394:5846":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:49239:2813":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:2381:2506":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11384:7150":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11159:5349":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:874:2195":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:5969:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7342:4448":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:605:6451":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4013:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2934:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6870:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:47457:3873":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10095:4758":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5167:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9440:5290":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:1617:6525":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:15857:2361":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:7120:14048":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5414:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:14012:3466":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"12:1100:3162":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:49442:2817":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:50982:3616":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:2946:4805":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:6718:4623":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12946:5658":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:4888:3722":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:53257:7457":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:2937:2978":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:2598:7810":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:2492:3465":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:8902:46370":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:4989:3005":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4419:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:49738:3504":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13609:5904":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:7835:5016":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:6406:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:4790:6060":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12771:5626":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:49424:2819":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10635:10600":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:49470:3785":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4449:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2437:7774":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4046:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13842:5989":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11287:3370":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2176:7291":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:49524:3788":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:1602:2557":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9186:4686":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:6790:2987":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:53266:7458":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:12678:3780":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:8365:2869":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:0:2339":{"crate_id":17,"path":["object"],"kind":"module"},"6:4095:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:1688:4245":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3377:2533":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:37512:3535":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:681:5354":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"20:1167:2980":{"crate_id":20,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"18:739:60829":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:22812:3108":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6155:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:616:6456":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6962:2990":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:2018:2581":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:161:39507":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"7:85:44346":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:4157:4745":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:49769:3508":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:7928:3562":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46258:3945":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:5421:4304":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:13480:7774":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1472:3163":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:8326:2693":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5730:3090":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46850:2683":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:52797:3608":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:2512:4723":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13497:5874":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6219:4463":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10861:2928":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:5766:4326":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:24683:3842":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:1118:3163":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46314:3687":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12917:5638":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12028:5487":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:620:7590":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12332:7775":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5197:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4363:3354":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10448:4666":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:3868:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:48693:3239":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4083:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:1011:2271":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3323:2523":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:1161:10605":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6110:4453":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:13022:3499":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:4638:5002":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:53323:7463":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:3725:3468":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11192:3015":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:14884:3215":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"9:1056:4159":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13331:5831":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9574:4689":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5978:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:1489:7585":{"crate_id":20,"path":["proc_macro","bridge","handle","NonRandomState"],"kind":"struct"},"12:2032:2577":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8383:3310":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:7185:4483":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:5410:3037":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:531:6406":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:3370:3973":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:811:4778":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"9:0:2332":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:9730:3362":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:935:2194":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"6:1665:6561":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6106:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:162:5182":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"18:790:4776":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"12:2039:2578":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12552:5590":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:3308:2480":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:1419:2271":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10028:46425":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:5955:3438":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2816:4605":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10864:5335":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:12936:2474":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46643:2717":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6491:4469":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11499:5379":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12659:5612":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10529:7596":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:22954:2087":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:3394:2537":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46473:2696":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11950:3215":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6238:4417":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:3611:3061":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:51197:3609":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:1253:2178":{"crate_id":20,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"1:6202:3385":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13348:5836":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:11077:2271":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:4762:6059":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:8316:4025":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"20:3050:2921":{"crate_id":20,"path":["proc_macro","LineColumn"],"kind":"struct"},"6:4101:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:8377:2870":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:3365:2579":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3707:2549":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:2309:6307":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10589:3308":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:15866:2367":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:12130:3202":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:5068:3729":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6731:4624":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5292:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:11451:3229":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:10266:2315":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:13334:3382":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:4043:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:849:4781":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:49628:3119":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6391:4467":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:49159:2795":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:51627:3599":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6021:4585":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3544:2544":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:1646:3164":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:12738:3784":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11341:3440":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:7978:5028":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:8162:3969":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:7766:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10975:46620":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13429:5852":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4230:6045":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"14:194:44716":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"9:41:4149":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:4183:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:8843:2559":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10814:4741":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7024:4634":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:22537:3535":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7226:4487":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13119:5785":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7333:4434":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7467:4416":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5987:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:667:4791":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:6401:2708":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:48664:7675":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5255:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11224:1850":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"16:7236:4488":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4306:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1463:3153":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"12:866:2873":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:3392:4603":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10403:4694":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4704:3030":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:6252:4464":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:14:2445":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4357:3352":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6072:4433":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"8:0:2331":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:22802:2087":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5815:4328":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:8116:2873":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10502:7595":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11165:3013":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:6185:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8391:3239":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:5604:1288":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"2:9222:2505":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:52908:3628":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47423:3871":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:50934:3636":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46600:2714":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5832:2788":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8484:3196":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11159:3008":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:4304:6046":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:914:1850":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"1:4711:3051":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:14526:54836":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:3411:2541":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12671:5051":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:1450:3152":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4417:6049":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6858:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"14:216:44722":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10584:4744":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:9464:7812":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"12:2009:2558":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:6940:2995":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:49121:2802":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:482:4989":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:49263:2882":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11254:4713":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3483:2543":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:10656:3149":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:3333:3333":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:5472:4309":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5595:4316":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13620:5905":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:837:3498":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46543:2710":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:11195:3262":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:8299:3867":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3382:2535":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"12:0:2335":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:10363:5354":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12095:5500":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7264:4430":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:49594:3791":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12003:54625":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"21:744:2920":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:4890:6063":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:299:60820":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3317:3328":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1596:6511":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5469:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"20:2923:2979":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:13453:5860":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11049:2678":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:5273:4343":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:49929:39102":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:51092:3629":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6682:4428":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9210:46377":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:930:3157":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:5132:2905":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:3218:4594":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13912:6004":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6768:4627":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:8846:2560":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:3684:2547":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11458:5374":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1501:3156":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5359:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:4641:6055":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:4704:6057":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:49061:3776":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:49306:3052":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:38732:2602":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:24615:3841":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:717:2928":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:51679:7407":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11077:3049":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:15856:2360":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11738:5427":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:729:60826":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46868:2687":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:22603:58967":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2754:4338":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4425:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9631:5043":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:4823:6061":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:3889:4030":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6899:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46464:2695":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:23006:3593":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:5531:2491":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"6:6887:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4932:2497":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"12:469:7764":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:3264:4596":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10599:7750":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:45673:2553":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"9:776:4146":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:49296:3777":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12632:5610":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"20:1136:2920":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"16:6807:4477":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:15870:2371":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4347:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11244:54620":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:7843:4493":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13637:5912":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:49211:2811":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"0:47:2171":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:7680:3212":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:792:2195":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:10449:5049":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"15:248:4253":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:6949:3970":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:1091:4997":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12051:5490":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:5738:3092":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1156:10604":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2460:7775":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10673:11603":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:0:2338":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5407:4303":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:50309:2510":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:49229:2812":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10377:4724":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9886:7738":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7477:4437":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11347:3380":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7073:4479":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:22565:58873":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:6864:2993":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13865:5990":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4331:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:8124:4051":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:976:3161":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:8146:2558":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"9:1020:4166":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5400:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:48711:7677":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:15086:3141":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"12:1651:4243":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:5375:2875":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5505:4311":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:57312:7477":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:11612:3245":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:3388:2536":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:6688:3093":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:537:6408":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4570:2685":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9332:4681":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:15875:2376":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:8850:2691":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10673:46569":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:4477:6051":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46511:2707":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5228:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:3075:3565":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11162:3009":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"9:692:4099":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:14456:7689":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:53113:3597":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3615:2473":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5159:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4018:3125":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"18:650:4786":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4164:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:2985:2971":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:24547:3314":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:2897:7587":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:12467:5576":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:46334:3866":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2399:7772":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3522:3060":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:49752:3507":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9896:60818":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"12:761:2557":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10562:2087":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:52296:3596":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4215:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10623:7751":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6964:3871":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:49637:3795":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"13:120:44688":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:1667:4244":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46281:3946":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:15871:2372":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:53160:3615":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:52447:3620":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13978:6016":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11678:5413":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:2303:2194":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:51005:3604":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9264:5285":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7632:3209":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15822:54799":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5707:4319":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:1527:6472":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:7719:2702":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6864:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:12065:3198":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9476:5291":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7378:4419":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13402:5848":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:14019:5052":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13221:5805":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4473:3068":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:15606:5056":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5210:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5374:3367":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:23891:7292":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11434:5360":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:24100:3902":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:2305:4078":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:5123:3730":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:53376:7466":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:9551:4712":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:770:1850":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3355:2530":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5029:6067":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11328:5626":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:3064:4648":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1676:6569":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13540:5888":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:181:4238":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5386:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:11406:5356":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7510:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"17:13532:5885":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:14669:7809":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:49817:3509":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5274:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46295:3948":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11595:2271":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13590:5899":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3742:2502":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7514:4435":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:169:7731":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:52261:3614":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3779:2503":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:6252:4008":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:7821:3652":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"10:0:2333":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10179:5299":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:49370:3781":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:49612:3793":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:7798:3219":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:53312:7462":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10845:3345":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5861:3433":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:3743:4738":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:820:4779":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:10941:3064":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7216:4486":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:1045:3115":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:50044:3808":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4052:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:7795:3218":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:1457:3164":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13772:5965":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:49320:2807":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:46451:2703":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10253:4655":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:3331:2577":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:903:3284":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12142:5508":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:959:2196":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"17:12234:5521":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:48140:2314":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:49185:2793":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:51303:3638":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5855:4329":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7158:4481":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10962:7757":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1637:3163":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10574:55712":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:4852:6062":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:8954:4688":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4066:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:865:2178":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:12645:5611":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10584:3288":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:49488:3786":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:24649:3220":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"20:3036:1850":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:53453:7469":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:3772:6042":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5522:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"15:0:2337":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:8376:2584":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:7439:4997":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6051:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:2195:4999":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:2484:46466":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:1623:3162":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12275:5527":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:9344:2880":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"14:250:6261":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11809:5451":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4387:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10353:4726":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:13835:3212":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:3324:2271":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:22605:58963":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:11126:2807":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3800:6043":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11750:5428":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:5656:3022":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2060:3037":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3645:3056":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:6462:3026":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:14152:3070":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:856:2194":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:13788:5969":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:786:2178":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:13884:5995":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4478:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5436:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6014:4458":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:1762:4995":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10798:3103":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:6085:3377":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2945:4611":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9719:7735":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:48119:2315":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:8101:2558":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:920:2083":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:2843:4586":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:892:4222":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:50052:3807":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:6759:3037":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13172:5791":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22806:3106":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:15877:2378":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:1908:40808":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:3978:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:766:5209":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4358:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46274:3794":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7571:4411":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:14155:3072":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:9809:60815":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:2548:4064":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1079:3116":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3351:2528":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:15863:2366":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:6700:7163":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6413:4249":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:13227:7770":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:46347:3867":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1736:6599":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12262:5526":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:1658:6557":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:24411:3837":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:8092:2512":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:3065:2920":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:6474:2697":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13942:6012":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:1200:4232":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:15350:4261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5548:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11045:46378":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8976:3175":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:32278:58993":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:49603:3792":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:14158:3068":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:569:6431":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:5788:3095":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:46173:3683":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:24445:3838":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13318:5825":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10489:4696":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:786:5046":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:1572:6494":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:49198:2794":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:24479:3313":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11056:3075":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"9:686:4097":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"9:1075:4167":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3195:3324":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5130:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:3195:4593":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:9659:60824":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11292:3371":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:7633:2625":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"12:812:3156":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:48903:3963":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2912:4588":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45927:2903":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:53277:7459":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12327:5535":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:1708:6587":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:4301:2557":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:949:3159":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7444:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5996:4457":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46879:2689":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:14509:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5884:5009":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:8196:5028":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:5547:10608":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:13906:59034":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:11208:2808":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:46663:2719":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:840:3152":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13180:5792":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4262:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1476:2873":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10666:3166":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"13:232:6306":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3329:2526":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:13027:3500":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:5152:2604":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:3483:2581":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:7884:4422":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10061:46438":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"9:469:44449":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13296:5821":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:54:4220":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:6614:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"19:117:5194":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:11640:5409":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:24093:7656":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:857:4782":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:5384:4302":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1639:3153":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:49906:3513":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13685:5949":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:15251:3368":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:937:3158":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6636:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5792:3096":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"9:722:4100":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:15855:2359":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:48126:2312":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:837:2919":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"12:1144:3164":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:51453:3618":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10420:4721":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:294:60809":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:12179:3266":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"12:877:2581":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12456:5575":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:8132:59367":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:32378:58992":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:4133:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7252:4997":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:8929:46371":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:46563:2711":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:1235:4233":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5744:3093":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10516:4697":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"20:407:52863":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:6597:59085":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:22582:58965":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:9624:57971":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:11525:3240":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1689:4056":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:13016:3498":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6949:4631":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"12:2013:2873":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:591:6443":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"14:189:7800":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46520:7671":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:3360:2534":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:51759:7409":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11519:5389":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:136:7727":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4120:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4955:6065":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3281:2499":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:9769:60819":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10931:3258":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13547:5889":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:12004:5024":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:6357:4466":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:14987:3223":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:46581:2712":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7935:54925":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:15058:3134":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13306:5822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4241:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:4345:2558":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:13946:3213":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12521:5584":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10458:5192":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:8266:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:49388:3782":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:2543:4691":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:14897:3216":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"9:27:4148":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:712:3535":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:50040:3804":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5459:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8135:3310":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"5:8284:4024":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:15867:2368":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:48480:2894":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:15838:54774":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13282:5820":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:8143:2112":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:3406:2540":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13520:5882":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:50212:7395":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3287:4597":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"9:157:4116":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:5828:2787":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:4695:55372":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4272:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5522:4312":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"20:1198:2978":{"crate_id":20,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"6:4227:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:11904:2810":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4203:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"12:2323:6309":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:3198:3046":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7870:4421":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5330:5286":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7042:4635":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9799:7737":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:46252:3119":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:24377:3836":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4431:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:15879:2380":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"21:542:2468":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"2:22550:58873":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10827:4742":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:3767:2557":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11388:2820":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10819:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:4594:5000":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:4005:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:452:60850":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"16:4350:6047":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:49149:2805":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11116:3052":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:12168:5307":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:51554:3613":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:543:6411":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11847:5459":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:5006:3724":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:50297:3123":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45852:2546":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:4637:3037":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"21:939:1886":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"16:4734:6058":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:1522:6470":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:14817:5054":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"20:3115:2282":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"16:7250:4489":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:10888:2087":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:53338:7464":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9340:3105":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2175:2579":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13488:5871":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6464:4427":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:46622:2716":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:15881:2382":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:9296:5287":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12118:5506":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11915:5461":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13819:5976":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:51111:7398":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4386:6048":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:632:6466":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9636:57967":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:9133:46376":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11329:3007":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7761:4492":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:6866:2994":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10435:7746":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:51143:3617":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:4438:2271":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11380:2988":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:12059:2558":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:6085:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:51783:7410":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10793:3322":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2163:2558":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:15874:2375":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10211:46437":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:8642:3393":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10468:4693":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11779:5439":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11616:5405":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10844:4695":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5407:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9937:3762":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6935:7286":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:832:7584":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"5:7106:5011":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11502:3239":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1729:3381":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:754:60828":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6644:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10071:4764":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2181:2577":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6702:7165":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10543:5339":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:13836:32887":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1136:3127":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:51038:3637":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:3972:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4127:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10607:3290":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:47527:2271":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9368:5288":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:14022:3816":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:8070:2678":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:23946:7294":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:50056:3801":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4341:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:3918:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11653:5411":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7618:3208":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:5568:3579":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13799:5973":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:49584:3790":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12040:5489":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:55897:3584":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:51500:3606":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:51350:3626":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:23913:3702":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6239:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11433:14049":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:47466:39063":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46364:3868":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10266:4658":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:9763:5044":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:23556:3107":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6923:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:50256:3814":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:32037:3897":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:10268:2313":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10938:46641":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5650:3024":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:46653:2718":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:6862:2991":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11947:5471":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4040:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4523:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:23930:7652":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:4671:6056":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:12754:3787":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:610:6453":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3339:2481":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:15878:2379":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:50060:3802":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10304:4677":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:4237:4997":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4325:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10805:3104":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:2314:4725":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"20:1105:2195":{"crate_id":20,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"17:12182:5515":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2840:2482":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:46227:3795":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:5736:4322":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13986:6019":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13810:5974":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8842:54624":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4060:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:46859:2685":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:38669:3122":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:45885:2548":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"0:0:1053":{"crate_id":0,"path":["quote"],"kind":"module"},"1:11129:3054":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:5790:4327":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13582:5897":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4193:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12229:3181":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6577:4472":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:3365:4337":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:4210:2873":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3965:4997":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:12789:2821":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10081:4674":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3713:2551":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5221:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13377:5843":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"15:230:4252":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"12:925:3154":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1486:3165":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12783:5629":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:48907:2796":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:24007:7299":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:13499:7777":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7420:4436":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:4494:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:51069:3625":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13733:5950":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:14479:7696":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:15861:2364":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50099:3884":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:547:4323":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:923:4048":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4439:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:3268:2601":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3336:3972":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:1236:7743":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:3754:2271":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6636:4431":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:3957:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12568:5591":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:0:1985":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"2:32212:3176":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9768:5045":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:1630:3152":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:660:4790":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:774:5198":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10477:4692":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"12:112:7762":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4293:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:525:6403":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:3043:59500":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:12169:3275":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12671:5613":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3372:2247":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:51404:3633":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11604:5402":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:15361:4261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"14:0:2336":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:829:4780":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:2813:2083":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:5963:3439":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"20:2409:5189":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:24581:3840":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:6910:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:15860:2363":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6893:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:624:6461":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4255:3387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:23820:3833":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46482:2704":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1547:6480":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4360:3353":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:994:4049":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:2462:7776":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"21:755:2921":{"crate_id":21,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"6:4300:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:1215:4058":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:10270:2314":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:12669:3322":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12155:5511":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:49220:2814":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:3862:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2751:3120":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:3315:3327":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:50086:3183":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:49574:3054":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11937:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9858:5046":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:9943:60813":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:49881:3511":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:9063:3402":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12010:5486":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:8127:7769":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:50909:7397":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:3549:6040":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"9:927:44443":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:4997:2904":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:14183:2511":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6269:4465":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46572:2698":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:1934:2581":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:14000:6022":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:47414:2558":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:519:6400":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"12:747:2271":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4647:3047":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:5175:2906":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9162:4714":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:24513:3839":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11361:3388":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:8236:2569":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10407:4722":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1744:6603":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:15859:2362":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:46160:3682":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:15872:2373":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"18:704:5198":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"20:2976:1789":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:22997:2087":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:52021:3634":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10635:5300":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6852:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1235:4059":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4033:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:12189:3179":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6620:4618":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:563:6428":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6208:4462":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8806:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:10538:3147":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:8348:7289":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"21:780:2194":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:53286:7460":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12598:5597":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5241:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6744:4625":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11767:5436":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:12098:3200":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:5783:4997":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12582:5593":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:47543:2558":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4364:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:15827:10607":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:2981:2468":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"1:2166:2873":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1658:3155":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"14:244:7639":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:8249:2570":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10200:7744":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:53414:7468":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:1648:3154":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5379:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:1194:10606":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:23008:3592":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9971:60808":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:47997:3877":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:11360:2819":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:5870:5006":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:13898:5997":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:3951:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10117:4760":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11726:5426":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:57291:7476":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:24115:3858":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13154:5786":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1441:3162":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46151:7662":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7392:4420":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:6856:2721":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:4922:6064":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12725:5619":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11378:4682":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5800:3098":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7823:4426":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:49338:2815":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11542:3241":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4023:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6605:4429":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"20:127:52873":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:12195:5516":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11588:5401":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3245:2188":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20:2787:2196":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"1:11099:2703":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:9065:46374":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6554:4471":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:0:2334":{"crate_id":11,"path":["adler"],"kind":"module"},"17:10279:4674":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:46204:3949":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:6100:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3258:2498":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5360:4301":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6005:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:15326:7550":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11696:5422":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"12:1253:3165":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"20:676:2980":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"17:11993:5483":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9600:60814":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10041:7741":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"12:160:4234":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7738:4491":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:15073:3135":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:47398:2271":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:49844:3510":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9849:60821":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11714:5423":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1602:6513":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7174:4482":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:4475:3069":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:3110:2196":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"16:7146:4480":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:45913:3562":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10912:46632":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:7810:5011":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10690:7809":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:49542:3789":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12221:5519":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:4033:3124":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4401:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:13851:54922":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:1432:2557":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11970:5478":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:13222:7808":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"5:6:659":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:3548:2545":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:4510:4040":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:3192:3323":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:6667:2491":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5975:4456":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4145:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11585:3242":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:10204:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:23971:3697":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:13007:2880":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12287:5528":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8491:3197":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5488:4310":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9005:46372":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:4263:3076":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:12795:5636":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13746:5956":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"20:1475:181":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:11965:3216":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:694:4792":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:3118:4602":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3939:6044":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10236:4664":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9528:3052":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"21:24:4818":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:9942:3763":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:2733:4339":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:7666:3211":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:50032:3803":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3402:2539":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:46:6311":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:14910:3180":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:7207:2873":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:9223:2504":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12537:5586":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11981:5481":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6126:4459":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:11246:2822":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:49723:3501":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:1021:3310":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"9:963:4164":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"15:269:4257":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9088:46375":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13356:5839":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:23999:7298":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6221:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8030:3310":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:13564:5893":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6032:4345":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11539:5390":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:4695:3642":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:46492:2705":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:50048:3806":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5295:44793":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:846:1850":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:32226:58991":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"6:5428:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2401:7773":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1540:6478":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3834:4997":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1486:2581":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"12:2045:2580":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"14:47:7800":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"12:853:3153":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:542:4349":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:774:2558":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:88:39440":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:50888:7396":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"9:809:3239":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:15335:55717":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:50957:3624":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:3357:2578":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:50036:3805":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12610:5599":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:5231:6068":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:14949:3179":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"20:213:60831":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:3074:2087":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7786:4425":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3338:4336":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:52104:3619":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2937:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:1563:6488":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10224:7745":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7628:4009":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4501:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5632:4317":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:13873:3214":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:607:46369":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:1838:4997":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46412:5018":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8928:3415":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:48703:7676":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13240:5806":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7258:54634":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3091:4649":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10317:4680":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:50265:3815":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13098:5780":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12154:3401":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:3945:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:1195:7768":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"9:234:4124":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"20:3085:2194":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"12:463:7763":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9759:7736":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:6091:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3526:2552":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10887:5336":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:14686:3217":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:3472:2542":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2265:3570":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46235:3944":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:6322:3386":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:15868:2369":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:12662:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11186:7598":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46189:3685":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:51236:3594":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:9066:3270":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4395:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5371:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2889:4606":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4073:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13598:5900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3190:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:14233:3290":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13924:6006":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:5753:4325":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:51943:3627":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7735:3214":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2773:4612":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:4852:3721":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:14823:5055":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:15042:3133":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11001:46619":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:5001:3723":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:699:3279":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:2257:4061":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:986:2195":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"6:6176:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:12480:5578":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:14516:3048":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"20:1269:1850":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:9224:3293":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1630:6532":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3391:2580":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:7652:3210":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6591:4473":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12756:5625":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46834:2680":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4377:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:47406:2557":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"18:896:4785":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:0:2340":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:3905:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3033:2484":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3320:4650":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9280:5286":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"9:603:44518":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:15213:3367":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10694:4067":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:2793:3121":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:46145:3119":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5563:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:3018:4590":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:5717:4321":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10106:4759":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5269:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:46612:2715":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:1311:4765":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4707:3643":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12174:3407":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9245:4659":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11665:5412":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9142:3265":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3699:3063":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12699:5617":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:53297:7461":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:909:1789":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:13760:5962":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46214:3950":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10656:5302":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:49112:2803":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5191:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11026:7760":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8292:3310":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:1554:6483":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:15876:2377":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:45645:2554":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4511:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:3506:4598":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:23749:3831":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:965:2282":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:5971:3441":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"22":{"name":"unicode_ident","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.40/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}