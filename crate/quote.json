{"root":"0:0:1080","crate_version":"1.0.23","includes_private":false,"index":{"2:11443:28181":{"id":"2:11443:28181","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11546:1977":{"id":"2:11546:1977","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11092:126","`FromStr`":"2:11091:2524"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11091:2524","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11091:2524","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:2144":{"id":"0:24:2144","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7049:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7049:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:656":{"id":"0:320:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13:2144":{"id":"0:13:2144","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7049:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7049:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:310:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11514:33797":{"id":"2:11514:33797","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:12298:409","`DoubleEndedIterator`":"2:7086:120","self::pattern":"2:11130:2982","str::match_indices":"2:11511:33796"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50254:8749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[43,0],"end":[56,1]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:897:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:1891","0:58:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11548:20425":{"id":"2:11548:20425","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:2708":{"id":"2:11470:2708","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48112:176","self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:320:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":["0:318:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:88:1651":{"id":"0:88:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[111,0],"end":[111,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:45:1655","glob":false}},"2:11499:33793":{"id":"2:11499:33793","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:28206":{"id":"2:11452:28206","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11451:28205"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:656":{"id":"0:62:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1651":{"id":"0:110:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:304:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:326:1651":{"id":"0:326:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:33789":{"id":"2:11450:33789","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11449:33788","crate::ops::IndexMut":"2:2986:2599","`str`":"1:12304:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:322:1651":{"id":"0:322:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:656":{"id":"0:58:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[48,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11551:24273":{"id":"2:11551:24273","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2269","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:95:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:316:656":{"id":"0:316:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1891":{"id":"0:47:1891","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:830:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:308:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":["0:326:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11432:33785":{"id":"2:11432:33785","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:656":{"id":"0:51:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11555:33809":{"id":"2:11555:33809","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4472:33809"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50403:8746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:27364":{"id":"2:11437:27364","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10698:8740"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1651":{"id":"0:84:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1651":{"id":"0:118:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:310":{"id":"2:11439:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11440:23514","`u8`":"1:12315:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:24272":{"id":"2:11550:24272","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1080":{"id":"0:0:1080","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1434,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.23\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:267","0:268","0:269","0:37:2215","0:286:1080","0:287:1890"],"is_stripped":false}},"5:5110:34459":{"id":"5:5110:34459","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:33798":{"id":"2:11517:33798","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11531:24366":{"id":"2:11531:24366","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11543:33807":{"id":"2:11543:33807","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:2149":{"id":"0:15:2149","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7049:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7049:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:686:110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:92:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11490:33792":{"id":"2:11490:33792","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:2982","str::split":"2:11478:28213","str::split_terminator":"2:11487:33791"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50154:8752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11521:33800":{"id":"2:11521:33800","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:33805":{"id":"2:11537:33805","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:340:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[161,0],"end":[165,1]},"visibility":{"restricted":{"parent":"0:124:1653","path":"::__private"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RepInterp","id":"0:349:1910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:215:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:84:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11454:20295":{"id":"2:11454:20295","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50062:8742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":["0:342:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11451:28205":{"id":"2:11451:28205","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11452:28206"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11528:33804":{"id":"2:11528:33804","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:2982"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:33787":{"id":"2:11438:33787","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:336:1651":{"id":"0:336:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11554:3150":{"id":"2:11554:3150","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4475:3150"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50394:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:656":{"id":"0:302:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:108:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11441:23555":{"id":"2:11441:23555","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11467:2365":{"id":"2:11467:2365","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:338:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11519:33799":{"id":"2:11519:33799","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11508:33795":{"id":"2:11508:33795","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11130:2982","`DoubleEndedIterator`":"2:7086:120","str::matches":"2:11505:2487","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50308:8751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:656":{"id":"0:55:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"f64"},"items":["0:348:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:338:1651":{"id":"0:338:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Punct","id":"21:875:2238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80:2267":{"id":"0:80:2267","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1651":{"id":"0:92:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:656":{"id":"0:304:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:1651":{"id":"0:95:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:1651":{"id":"0:328:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:2745":{"id":"5:5112:2745","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:306:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:344:1651":{"id":"0:344:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:897:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:114:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:316:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:342:1651":{"id":"0:342:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:2233":{"id":"2:11464:2233","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:2982"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11552:33808":{"id":"2:11552:33808","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4474:33808"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50385:8745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1891":{"id":"0:61:1891","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:830:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11493:28219":{"id":"2:11493:28219","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:2982","str::rsplitn":"2:11496:28221"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50190:2896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:334:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:340:1651":{"id":"0:340:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428":{"id":"2:11428","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10693:1360","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11429:796","2:11430:2674","2:11431:33784","2:11432:33785","2:11434:33786","2:11437:27364","2:11438:33787","2:11439:310","2:11440:23514","2:11441:23555","2:11443:28181","2:11445:28182","2:11447:28183","2:11449:33788","2:11450:33789","2:11451:28205","2:11452:28206","2:11453:20384","2:11454:20295","2:11455:2981","2:11456:30790","2:11457:30805","2:11458:20562","2:11459:33790","2:11460:30804","2:11461:23554","2:11464:2233","2:11467:2365","2:11470:2708","2:11474:2673","2:11478:28213","2:11481:28215","2:11484:28217","2:11487:33791","2:11490:33792","2:11493:28219","2:11496:28221","2:11499:33793","2:11502:33794","2:11505:2487","2:11508:33795","2:11511:33796","2:11514:33797","2:11517:33798","2:11519:33799","2:11521:33800","2:11523:33801","2:11524:33802","2:11525:33803","2:11528:33804","2:11531:24366","2:11534:28223","2:11537:33805","2:11540:33806","2:11543:33807","2:11546:1977","2:11548:20425","2:11549:24271","2:11550:24272","2:11551:24273","2:11552:33808","2:11554:3150","2:11555:33809"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:123:2267":{"id":"0:123:2267","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324:1651":{"id":"0:324:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:28217":{"id":"2:11484:28217","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11130:2982","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409","str::split":"2:11478:28213"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50104:2898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34:2131":{"id":"0:34:2131","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:836:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:120:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11505:2487":{"id":"2:11505:2487","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7086:120","str::matches":"2:11505:2487","self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50290:8750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:101:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11502:33794":{"id":"2:11502:33794","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:215:1651":{"id":"0:215:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/runtime.rs","begin":[162,4],"end":[164,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:1651":{"id":"0:346:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:11:2134":{"id":"0:11:2134","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2488:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:836:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:330:1651":{"id":"0:330:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11487:33791":{"id":"2:11487:33791","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"2:11490:33792","prim@char":"1:12298:409","str::split":"2:11478:28213","`DoubleEndedIterator`":"2:7086:120","self::pattern":"2:11130:2982"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50136:8753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:2134":{"id":"0:22:2134","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2488:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:836:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:88:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:10:1654","glob":false}},"0:98:1651":{"id":"0:98:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:2266":{"id":"0:79:2266","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1651":{"id":"0:105:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1891":{"id":"0:57:1891","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:830:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:348:1651":{"id":"0:348:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":["0:322:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11549:24271":{"id":"2:11549:24271","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":["0:324:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11534:28223":{"id":"2:11534:28223","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:24269":{"id":"5:5113:24269","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11550:24272"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:336:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5099:34457":{"id":"5:5099:34457","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11496:28221":{"id":"2:11496:28221","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409","str::splitn":"2:11493:28219"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50208:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310:656":{"id":"0:310:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:28182":{"id":"2:11445:28182","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:122:1651","0:123:2267"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11434:33786":{"id":"2:11434:33786","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11432:33785"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1656":{"id":"0:77:1656","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:78:1651","0:79:2266","0:80:2267"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:81","0:85","0:89","0:93","0:96","0:99","0:102","0:104","0:321","0:323","0:325","0:327","0:329","0:331","0:333","0:335","0:337","0:339","0:341","0:343","0:345","0:347","0:107","0:109","0:111","0:113","0:115","0:117","0:119","0:121","0:213"]}},"0:29:2153":{"id":"0:29:2153","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7049:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7049:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11478:28213":{"id":"2:11478:28213","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11484:28217","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409","str::split_whitespace":"2:11456:30790","self::pattern":"2:11130:2982"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50086:2894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1651":{"id":"0:116:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11449:33788":{"id":"2:11449:33788","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2982:2598","str::slice_mut_unchecked":"2:11450:33789","`str`":"1:12304:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:314:656":{"id":"0:314:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:1891":{"id":"0:50:1891","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:830:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5094":{"id":"5:5094","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5005:1360","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5095:34456","5:5096:3306","5:5099:34457","5:5102:34458","5:5110:34459","5:5111:34460","5:5112:2745","5:5113:24269","5:5114:24270"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11447:28183":{"id":"2:11447:28183","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:30804":{"id":"2:11460:30804","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50378:8737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:2981":{"id":"2:11455:2981","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50072:3303","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11525:33803":{"id":"2:11525:33803","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:2982"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11155:8713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:656":{"id":"0:318:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:2674":{"id":"2:11430:2674","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:344:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:286:1080":{"id":"0:286:1080","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[473,0],"end":[477,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro::TokenStream`":"20:2604:230","`format_ident!`":"0:37:2215","`proc_macro2::TokenStream`":"21:825:230"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[33,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:54:1891","0:55:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:46:656":{"id":"0:46:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[13,4],"end":[13,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Literal","id":"21:902:2237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:118:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5102:34458":{"id":"5:5102:34458","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":["0:330:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5095:34456":{"id":"5:5095:34456","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2269","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2269","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1651":{"id":"0:101:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":["0:328:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11459:33790":{"id":"2:11459:33790","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50350:8747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11524:33802":{"id":"2:11524:33802","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:20384":{"id":"2:11453:20384","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50056:2978","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:103:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:314:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:77:1656","glob":false}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[58,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:686:110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:61:1891","0:62:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:26:2149":{"id":"0:26:2149","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7049:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7049:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:1890":{"id":"0:287:1890","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[612,0],"end":[616,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:312:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11458:20562":{"id":"2:11458:20562","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50340:3305","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:312:656":{"id":"0:312:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:30790":{"id":"2:11456:30790","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11457:30805"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50360:8739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[23,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:50:1891","0:51:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":{"restricted":{"parent":"0:4:1649","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:10:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:2134","0:24:2144","0:26:2149","0:29:2153"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11481:28215":{"id":"2:11481:28215","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:2982"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10954:2910","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"isize"},"items":["0:332:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:108:1651":{"id":"0:108:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:34460":{"id":"5:5111:34460","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2269","`String`":"5:6969:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2269","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11511:33796":{"id":"2:11511:33796","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11130:2982","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409","str::rmatch_indices":"2:11514:33797"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50236:8748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:33784":{"id":"2:11431:33784","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:33801":{"id":"2:11523:33801","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1650","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:302:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:110:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11457:30805":{"id":"2:11457:30805","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11456:30790"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50369:8738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1651":{"id":"0:114:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:796":{"id":"2:11429:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12298:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:120:1651":{"id":"0:120:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1654":{"id":"0:10:1654","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:11:2134","0:13:2144","0:15:2149","0:18:2153"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:34:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:21"]}},"2:11440:23514":{"id":"2:11440:23514","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12315:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1651":{"id":"0:78:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:306:656":{"id":"0:306:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:2215":{"id":"0:37:2215","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::LowerHex":"2:8621:2356","`std::fmt`":"5:4439:656","proc_macro2::Ident":"21:897:2222","proc_macro2::Span":"21:830:1892","std::fmt::Binary":"2:8619:2358","proc_macro2::Span::call_site":"21:528:2288","`format!`":"5:6:665","crate::IdentFragment":"0:45:1655","std::fmt::Octal":"2:8617:2355","std::fmt::UpperHex":"2:8623:2357"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2670:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"5:4531:201","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:98:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5096:3306":{"id":"5:5096:3306","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:332:1651":{"id":"0:332:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1651":{"id":"0:103:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"f32"},"items":["0:346:1651"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:18:2153":{"id":"0:18:2153","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7049:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7049:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:45:1655":{"id":"0:45:1655","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[11,0],"end":[21,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.","links":{"`format_ident!`":"0:37:2215","`Ident`":"21:897:2222"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:46:656","0:47:1891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:48","0:52","0:56","0:59","0:301","0:303","0:305","0:307","0:309","0:311","0:313","0:315","0:317","0:319"]}},"2:11474:2673":{"id":"2:11474:2673","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48112:176","self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:8714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1651":{"id":"0:112:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:334:1651":{"id":"0:334:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5114:24270":{"id":"5:5114:24270","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11551:24273"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1891":{"id":"0:54:1891","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:830:1892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:23554":{"id":"2:11461:23554","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:656":{"id":"0:308:656","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8570:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8559:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11540:33806":{"id":"2:11540:33806","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:2982","prim@char":"1:12298:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:1651":{"id":"0:122:1651","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:825:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":{"restricted":{"parent":"0:64:1651","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Group","id":"21:851:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:1651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"6:5841:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9388:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2631:16011":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11528:16213":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11684:19026":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2964:2607":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10088:16169":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:246:34645":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:50694:8754":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5525:15938":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:3951:31119":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21889:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:2617:2615":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"14:221:14929":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5498:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12148:19116":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"20:218:34650":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:7008:2756":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:4042:21039":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2823:2584":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6241:15960":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2675:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4506:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3194:3324":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:320:20543":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9155:16311":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:8847:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:5202:8774":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:48423:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:1241:3177":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:47308:2778":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:52042:3608":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12140:21093":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12308:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:3232:3326":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:1600:10642":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"12:1555:14914":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:6909:3236":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13572:20053":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:49402:8846":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9303:16085":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6690:15885":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2739:22938":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:53072:3614":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7396:15986":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4768:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:98:20541":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:8561:16044":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6572:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"19:0:1007":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:12296:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1864:3212":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3473:3002":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:5680:3477":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:54106:8677":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10859:3325":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:47577:2741":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:49411:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"12:762:2638":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:50714:2976":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"14:215:14923":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"8:0:2374":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:4082:8809":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:52358:3609":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:545:3126":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13374:20004":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8624:3346":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11137:16502":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11703:21092":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:4433:3395":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9317:16081":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4461:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9627:16112":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11800:19092":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7388:15901":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:9623:2911":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:49941:2757":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:2740:2658":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6329:3434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"13:0:2372":{"crate_id":13,"path":["std_detect"],"kind":"module"},"21:676:2995":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:3157:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5541:15939":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6430:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4200:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3230:3325":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:21955:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3594:20168":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:9328:16080":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4425:3394":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:0:2381":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:49107:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:10394:16257":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11343:16719":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2383:3263":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4698:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:52480:3602":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4302:3369":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4969:3432":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11263:3214":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:2485:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10973:16318":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11161:16538":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:46877:8828":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:21988:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:9478:2614":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11288:26077":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7747:23426":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:8871:16307":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:20493:2131":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11584:21090":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:4574:15555":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:9463:26043":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13148:19929":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9282:3495":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10875:16280":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:4273:2851":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:8510:15991":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4690:981":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:50072:3303":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21442:3360":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:1608:10643":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:53946:3600":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:3363:2614":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:0:1352":{"crate_id":1,"path":["std"],"kind":"module"},"12:777:14907":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"18:599:34590":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8070:3254":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:9585:2895":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4206:12839":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9791:16156":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1632:2635":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9501:16085":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:1751:22940":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:57049:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2565:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:4537:2971":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:2023:34597":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:6017:3546":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:5727:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11547:16212":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8589:3344":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:12302:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:7237:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:6162:21035":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6720:2562":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3163:2604":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5595:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6359:15963":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:1737:9013":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:57010:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46921:8822":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:5184:15995":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9658:16152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:649:14729":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:5761:15946":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46417:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:51000:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11576:18917":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:531:20115":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:5235:21920":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7567:15907":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:1002:3173":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4575:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4307:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:49394:23316":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:7435:15919":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:6980:2965":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12816:19434":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3231:2553":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:9223:16062":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:49226:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13114:19923":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12739:19385":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:8378:3278":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:2720:1928":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"5:1446:3187":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1707:3389":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:20752:3571":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12860:19478":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:902:2237":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"1:8961:3466":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:12318:1455":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"14:0:2379":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:21380:31110":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6137:21071":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"6:5835:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:20343:3567":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:870:2314":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:50254:8749":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:495:9741":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:9454:2314":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5815:15949":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:48863:2356":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3479:3281":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:271:21035":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:8055:16283":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4191:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9671:16119":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:4263:8805":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:50154:8752":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:10425:3212":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:2714:2656":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4644:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"7:32:14680":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:21318:22948":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4449:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1574:10639":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5703:15944":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4179:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2465:16004":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"9:800:14832":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:50488:8718":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12748:19386":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:7736:16300":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:52242:3633":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:56653:3643":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:6877:15973":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:274:23282":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8740:3434":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:52632:23058":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1954:20438":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2320:15863":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:49433:23317":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10321:20257":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9751:16127":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:47104:3251":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:7923:3153":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1686:10649":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6316:15906":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:50208:2892":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:5887:3493":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:4373:2853":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2154:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1643:10645":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4489:3422":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:2678:3072":{"crate_id":20,"path":["proc_macro","LineColumn"],"kind":"struct"},"20:436:21027":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:7278:15980":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:524:21068":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8762:3381":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:48178:2614":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3107:2638":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:10296:16223":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10755:3480":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:9601:16105":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"21:108:3004":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:47014:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:7049:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:47094:3252":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:1595:10641":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4475:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2367:16000":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:6952:3235":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11559:18914":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6735:3182":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11902:8688":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:49386:8847":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:8617:2355":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:5516:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:11383:21088":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13141:19928":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:51767:23044":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:1903:16140":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:781:2222":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"21:708:2237":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:3402:16028":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:247:34574":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:54220:8685":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:5348:26048":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:50809:9101":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46355:2608":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"11:0:2377":{"crate_id":11,"path":["adler"],"kind":"module"},"6:1550:10637":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:6437:2683":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11372:21087":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11389:21089":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:20093:32091":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:46575:2603":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"20:2761:2222":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"1:1938:3231":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:47214:2771":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:977:14795":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6171:15927":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13279:19965":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13327:19966":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:7149:23424":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"14:40:2222":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:10698:8740":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6528:15967":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"12:669:3167":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:6752:3183":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:50671:8730":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10670:16273":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:48461:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:5178:3430":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:9312:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"9:676:14773":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:2743:33102":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:50582:8726":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9778:16128":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:5695:3478":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:4700:31240":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:12319:1452":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:6424:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8649:3338":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8447:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:57023:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"14:187:14930":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:47031:20411":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12305:1438":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"13:220:22157":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:47266:2775":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:10264:2908":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"9:382:14813":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9764:16155":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:6790:20439":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1511:10632":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2825:16019":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6790:15972":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:47591:2742":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4280:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:21017:3568":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2673:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:1931:16100":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11267:20197":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:46901:8831":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:0:2383":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:47625:2750":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:50104:2898":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10608:16269":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:6010:3545":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:46840:8797":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:7208:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:4662:15573":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3160:20246":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7938:3156":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:33:14776":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5203:15993":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9250:16063":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8390:3282":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:5552:9329":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"0:37:2215":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"2:54030:3638":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5534:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10257:16226":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21015:2131":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"12:2053:3174":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:47299:2777":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"21:696:2236":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"12:1836:2615":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:574:3133":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8329:3277":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:7226:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"9:956:14786":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:2749:16016":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:7747:2555":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"9:592:14727":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:9691:16126":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8092:3258":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7557:15881":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:2418:2127":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:2578:3314":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"12:300:20544":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2433:16003":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:8991:34576":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13594:20089":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:3188:16026":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:6923:20411":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:11201:8720":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:11356:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:1114:3176":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7847:2131":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13354:19968":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:47584:23315":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:10625:16270":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:12320:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9722:16151":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2785:2531":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:519:9745":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6109:15902":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6719:20748":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4055:8808":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:1615:2638":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11762:20186":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:52456:3601":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2769:2574":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:2320:2222":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:1525:10634":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5596:15941":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12322:19194":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7942:15990":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:20474:3566":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9071:34575":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:242:34582":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:628:3148":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:8752:3303":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11259:16703":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:1500:10630":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3271:3322":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:7045:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:48727:3544":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46543:2601":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:8619:2358":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"15:0:2380":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1701:10651":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:12322:1099":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13192:19955":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:608:9756":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:1349:2314":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:20040:31871":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6593:15968":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:480:2518":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"1:11456:3483":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:46521:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7890:15893":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:2700:2127":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:12225:19182":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:8621:2356":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7093:15975":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5772:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:5780:15947":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13071:19918":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"20:140:21219":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:10139:16086":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4581:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8075:3256":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:52312:3621":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:48246:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4427:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6517:14934":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:5064:3384":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11853:19096":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:9779:2893":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:965:3167":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9573:3559":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6277:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:681:3157":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7977:3214":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:6766:2739":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:3485:3189":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1359:2614":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13478:20020":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5646:3475":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8421:2781":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:8882:8844":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9193:34581":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:2948:2314":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:107:34663":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:12730:19384":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8704:3392":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4124:2547":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:52836:3634":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4335:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:12087:8835":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:47237:2773":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:560:9749":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5996:15953":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7785:21081":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12850:19477":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:582:8834":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4551:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1889:3220":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4635:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12768:19430":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10476:16262":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:9369:3548":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:8559:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:990:3171":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:900:2614":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:9383:26060":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:0:1499":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8494:15993":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:49641:20423":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:48575:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:1072:1892":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:8341:20363":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6409:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4527:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11485:18907":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11761:19089":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9577:16107":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:11712:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:8610:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:4117:3352":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2834:2587":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"12:646:2614":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9553:16086":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:49626:9091":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:9401:16082":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5614:20603":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:3314:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:11922:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:484:21092":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:10580:3489":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:50236:8748":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46477:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:20757:3594":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12060:19110":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:48689:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7309:15983":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:825:230":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"9:19:14775":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:50801:9098":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:3192:3323":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4246:3365":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5625:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:4904:22832":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:50813:9102":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:707:8715":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:507:9743":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12896:19544":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10332:16254":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:2981:2635":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:5900:21045":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:2477:20459":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:420:15862":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6352:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46609:31132":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:4972:3405":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11468:27182":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:487:16299":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:7440:2754":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11893:19098":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12033:19108":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1944:3126":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13059:19917":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:8393:16295":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13340:19967":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11271:16706":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10283:16224":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11330:16718":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5605:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:8272:16298":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:3010:16024":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10854:16279":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:4439:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:4318:8806":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:51857:3619":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3461:2836":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4605:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:2445:2131":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:8177:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:5227:3440":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4653:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46433:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:755:20109":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:944:2969":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:996:3172":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11276:3481":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:217:8703":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:3125:16172":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4559:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11606:3490":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4534:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2261:15996":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:8631:16046":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4629:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:370:34646":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:4379:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6014:21035":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12485:19320":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2797:2579":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"20:481:21028":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"2:29640:20408":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2515:3313":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:48305:2614":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:960:3166":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"14:202:2968":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6043:3547":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:21251:23294":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:10684:2882":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:21409:23298":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:1123:3177":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:967:16083":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:53286:3623":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:521:20111":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9127:21063":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:1672:1063":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:1825:2556":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10919:9112":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:6729:2615":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:2184:22158":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"12:822:3170":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2389:16001":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"20:2495:3075":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:49875:2889":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"9:896:14793":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:47000:8827":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:592:9754":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13382:20005":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9362:16086":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:5968:2969":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4212:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3377:3294":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13580:20055":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:48110:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:1426:3168":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1668:10647":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:21291:3356":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7956:15890":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:7220:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:53:20205":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"6:4417:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:4786:15591":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7319:15984":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2759:2578":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13214:19962":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:719:3159":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:6876:2627":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:9080:21057":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"17:9844:16163":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:20469:2131":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:20074:32094":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2341:15999":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2674:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:49996:2904":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11315:16717":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6392:10575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:29379:3355":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4274:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7859:26981":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:5672:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:6774:2615":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:53634:3611":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:9526:16102":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:534:20605":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"21:772:2236":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:8362:2739":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:4744:3405":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:766:20110":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:562:16300":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:6782:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8441:3305":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4817:15604":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9947:16210":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2986:2599":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:58363:23111":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:13126:19926":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:50340:3305":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:21430:3357":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:29598:8770":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10901:3132":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:51081:8697":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:9535:3503":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:736:20108":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6479:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12514:19321":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:1552:3294":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:4951:8706":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:12312:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:14:20832":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"1:1091:3174":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13459:20014":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11495:3286":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"21:830:1892":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"17:11828:19094":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10321:16219":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6903:15974":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:11725:8841":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:7289:14664":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:753:2994":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:7981:20463":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:7249:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:2613:3067":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:14:2490":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11997:19105":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:4347:2661":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11687:23341":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:29804:20410":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:47154:2767":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9857:16186":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2813:2583":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13031:19912":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6270:15879":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10845:16260":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10997:2222":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:50308:8751":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:671:20102":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:9112:21059":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2994:20436":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:6570:23384":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:50030:2979":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2989:2636":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4324:3373":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11846:3352":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:52948:3622":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:8475:16035":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:2916:16167":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12315:1456":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"21:686:1892":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:10880:9113":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11186:16540":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:2652:3316":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10385:16256":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:39390:20463":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:51833:3627":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:8014:15922":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4441:15495":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:11964:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:4327:2852":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:5631:32970":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:29626:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:967:21029":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:7012:2755":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:49976:2905":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4565:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:54095:8676":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:54167:8682":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10233:16251":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:12317:1454":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:48856:2355":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:11476:9119":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:9061:16086":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2705:16014":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:21235:20318":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:609:34591":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11133:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11681:23340":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13039:19913":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9909:16164":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:46974:8825":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:21724:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4894:3368":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:8951:34573":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:590:21240":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47124:2757":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13436:20011":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:3542:2638":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:53744:3631":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"0:0:1080":{"crate_id":0,"path":["quote"],"kind":"module"},"17:10121:16166":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:21922:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8638:3349":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:6817:2615":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:7874:3130":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12073:19111":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"20:2664:1892":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"17:10752:16258":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:47391:2783":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1678:10648":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10894:16281":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:12304:1360":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:954:2638":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:96:20129":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:52101:3597":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4540:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:8110:16306":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9406:24379":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:6314:8775":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:386:16175":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:5625:3294":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11639:23190":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1826:3200":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:1887:3219":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10497:16264":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:50062:8742":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"12:1534:14913":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11825:3350":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1580:10640":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12781:19431":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2494:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4496:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:1691:2638":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"12:1065:20540":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:48195:3448":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:20287:3576":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:47047:9058":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7869:3120":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:1611:2969":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5741:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13527:20046":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:6939:3234":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:6708:3556":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:46661:8790":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2852:2591":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6837:3557":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:46602:15922":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"20:2294:2238":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:9897:16209":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:51043:3644":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1654:10646":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:4519:15499":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10445:16260":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2498:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4126:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:1828:3201":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:20500:3572":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:9765:2897":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8105:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8533:1892":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:52119:23048":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2535:16007":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3998:8701":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"12:387:23378":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"20:2565:3075":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:49815:20375":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11106:16500":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:20055:31871":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:48322:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4816:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7511:15859":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:20300:2131":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:50681:8731":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5823:3485":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2282:15997":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:2745:2325":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"2:7109:2640":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13518:20045":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4385:15487":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"10:0:2376":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:2233:20830":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:50350:8747":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:790:2237":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:8428:3303":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:7853:2975":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13221:19963":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"12:0:2378":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7211:15869":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9212:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:49122:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:581:9752":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5699:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:4192:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:49174:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:1044:23383":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7135:20587":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11111:23334":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:6811:2615":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12278:19186":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11054:16491":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:48313:2615":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:12316:1453":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2557:16008":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2588:21059":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11500:18908":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"20:1202:193":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"6:4185:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3154:20244":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:5163:15820":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10466:16261":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7483:15888":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:538:20116":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:50290:8750":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:49967:2902":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:50821:9104":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:8576:3343":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"18:481:20112":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12955:19560":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12301:1025":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:6676:2742":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:4906:22834":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:6523:2766":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4665:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:47185:2768":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3764:21035":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:661:3152":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6538:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8612:3345":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:7299:23385":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:9503:2894":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2579:16009":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9206:3480":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:7436:2617":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:4196:8799":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5684:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6816:20752":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"2:9737:2896":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4361:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13100:19921":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:11091:2524":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:8666:16047":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:4531:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"12:1085:14910":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8065:3253":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:9830:3254":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10520:16265":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10667:26990":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:5374:15877":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:183:34648":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:9283:16089":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6704:15898":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:2657:16012":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21790:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:46316:2609":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"13:108:34545":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5763:3481":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:7825:15987":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:52866:3637":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2927:2595":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:979:3170":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9539:16101":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:46457:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:8615:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:5510:15937":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5011:3382":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:21416:3358":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:2740:2238":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"2:48870:2357":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:1967:3232":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"12:1866:2635":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6743:15971":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:53992:3618":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:48651:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:1962:16124":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:5387:2772":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8886:3462":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46834:3151":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5523:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:2255:20460":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:598:3135":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:1637:2637":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4838:3421":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:51064:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:8627:2841":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11798:8842":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:6826:2156":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:47615:2748":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12134:19115":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10434:16259":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:50609:8727":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10682:16274":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"12:1029:3176":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:46499:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:7288:15981":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:1626:2634":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1212:3176":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11199:16541":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:2050:20456":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4437:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:48849:2358":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6865:20755":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:8941:16308":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1518:10633":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:600:9755":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13134:19927":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11974:19104":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47376:2782":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:644:3002":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:10546:16267":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12022:19107":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7895:3132":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:50534:8725":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:3734:2969":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6252:15961":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"20:2715:2236":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"16:4262:15443":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:931:2615":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"11:44:14897":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:54068:3603":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10506:16227":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:2370:2237":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"15:193:14938":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:8911:34580":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11070:16492":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12176:19131":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5720:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5568:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:153:15866":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5169:3429":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:4947:8705":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:4849:15611":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:7603:15904":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"12:353:20542":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:22453:3353":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:4545:15553":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11356:16732":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:586:9753":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4294:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:8339:16302":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:2793:16018":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7538:27420":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:2695:2995":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:2933:2597":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:8570:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:9930:16185":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9276:2615":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4598:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6654:15970":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:3632:14969":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8686:3344":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:8763:31131":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:50817:9103":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:2579:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:7279:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6676:15884":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11513:23189":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:8981:16309":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6137:15874":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:4721:15579":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9433:16076":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:49904:2901":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:21108:23292":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:10444:23388":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9712:16154":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:49645:2918":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:50837:9119":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:630:23422":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4606:15560":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11306:3484":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:5536:2541":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3611:2615":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11014:16430":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:4726:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13536:20047":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1714:10652":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:51008:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3963:31128":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10350:16255":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2671:2550":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7372:20759":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6330:15962":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4216:3363":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:1608:2615":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4329:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4737:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3599:14960":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6070:15868":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:11135:2975":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:9554:3286":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2818:2290":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:513:9744":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:21691:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:3716:15011":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9681:16153":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11087:16499":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9293:16087":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4592:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:10843:9111":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:51911:3640":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:2525:23231":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:49866:2891":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:853:3181":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3086:3329":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:7497:15883":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3194:2552":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:3249:16191":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:7266:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2844:2589":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6545:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:4403:20282":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:12313:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12980:19908":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5013:3383":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:3263:16027":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:2604:230":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:13231:19964":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12836:19475":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:21364:31117":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11098:3256":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:7214:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8718:3402":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:2738:33187":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11069:3433":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:6456:21045":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"9:863:14792":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6408:21078":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:4454:3397":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:327:2518":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:6668:20750":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2300:15998":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:8212:16285":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6345:15882":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3142:2602":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"9:709:3461":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:4921:15634":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4726:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2848:2590":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:50056:2978":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"18:636:21248":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:1771:16106":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47275:2762":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:48385:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:8441:16296":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2912:2593":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:6392:3646":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2663:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:11990:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:8336:20362":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8146:3002":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10360:16220":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12046:19109":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11909:19099":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6567:15896":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8863:3461":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:51811:3639":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13176:19953":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:20312:3565":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:10856:3323":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:1541:10636":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9118:34579":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:686:3158":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:54243:8686":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:1227:3175":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:49113:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:53884:3635":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8122:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:8172:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6376:15964":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:50833:9107":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47606:2746":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:1760:9012":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10221:16250":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13413:20010":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4317:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2491:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5628:15942":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6448:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:7961:3207":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4797:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8955:2314":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11813:19093":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8130:20238":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2771:16017":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11368:16733":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:4:991":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"12:1859:2634":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12609:19323":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:7954:3179":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:6760:33114":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:4585:3399":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3169:2606":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:54086:8675":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:50403:8746":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11746:32243":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11532:3503":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:57062:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51787:23045":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:54152:8681":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:9530:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"15:175:14937":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:21214:22942":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:545:9747":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:7433:2616":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:2509:16006":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12797:19432":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:7163:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:7117:20586":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:50378:8737":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"12:815:3169":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4217:15394":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:836:2127":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:2775:2577":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:4903:21035":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:782:3180":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3157:20245":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:50856:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:49140:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:501:9742":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:3953:3347":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9371:16090":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:49441:23318":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:652:21238":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:5852:2785":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3422:3279":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49954:2906":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9831:16206":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:9700:16125":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"9:586:14717":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:2894:16022":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11748:19088":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"12:1832:2314":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:7749:3450":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8903:3463":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:8881:34577":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9441:26062":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"21:668:230":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:135:9422":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49152:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:6293:9620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5782:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:51051:3645":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11247:16594":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9274:16065":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:48186:2615":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3179:20333":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10403:16258":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9263:16064":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12926:19546":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:20095:32093":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:2764:2575":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:286:2269":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4441:3396":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:46616:2851":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"4:0:2373":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:50503:8721":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10494:20211":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:22021:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11945:14946":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12311:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:3566:14952":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:5826:3486":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:6316:21071":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:8082:3257":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:50990:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4115:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12756:19428":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:0:1051":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"1:4262:3367":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:2482:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7329:15985":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:748:23228":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"6:4716:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:672:2518":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:678:3155":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:50136:8753":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:1872:2637":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:50517:8724":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11217:16542":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:6217:3493":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9382:16084":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46960:8745":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11721:19086":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:52082:23047":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:131:9421":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:5219:15991":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6415:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10798:21086":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:9525:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12695:19380":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6829:20753":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4139:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10708:16275":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5839:15950":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9108:16090":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:8629:2842":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:2399:3268":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"9:0:2375":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8369:3328":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:9302:2131":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8736:3431":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:49423:3461":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10668:2880":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6440:26091":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12264:27435":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:1604:2314":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12874:19480":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9820:16205":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4210:3364":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:2840:2588":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6298:15905":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46593:8778":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:6087:2615":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10642:16271":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:4635:15568":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12298:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:11144:8715":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:7063:8771":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10528:16301":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5793:15948":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:6463:15965":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:52012:3620":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13184:19954":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:53822:3615":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:50889:9121":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:5660:3476":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:3689:14978":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:2670:2231":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12630:19376":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:7058:2641":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6543:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:2385:3264":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12349:19257":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:875:2238":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"16:7872:15894":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9394:3131":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:662:3005":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:554:9748":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2806:2585":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9314:3497":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7970:15891":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:22054:3359":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6892:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:52609:23057":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11288:16713":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6284:15889":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6781:15897":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12211:19181":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5878:15951":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8470:3340":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:51879:3607":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:47019:3237":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8712:3349":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4673:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:11130:2982":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:4689:15576":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7166:15976":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7343:15886":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11708:19085":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"0:287:1890":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"2:20224:3574":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11654:23338":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"12:834:3171":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9094:21058":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:8887:8845":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:851:2236":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"17:9446:16091":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5317:26048":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5737:15945":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:52212:3629":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:5427:2969":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13168:19952":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6554:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:50360:8739":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:54115:8678":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10490:16263":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6781:3552":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:119:20545":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4778:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:5494:15936":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2487:16005":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9835:21085":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:1532:10635":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7056:3562":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:853:3172":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46944:8823":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12265:19185":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1562:10638":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1595:21035":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:699:20105":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10921:16316":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:567:9750":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1196:3174":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:7059:3448":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12291:19192":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12361:19260":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9458:16118":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:49210:2840":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4239:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11444:3482":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11785:3351":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:8138:3315":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11088:23328":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:49915:2907":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4810:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5876:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"15:214:14942":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:6851:3558":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:9004:9075":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4745:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11034:16431":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8693:3400":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:4766:3406":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:4268:2300":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"18:507:21238":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12303:1330":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:4105:21039":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8226:3317":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:9436:26067":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:5087:3378":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:624:34587":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:950:21035":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7944:3178":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:50660:8729":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9873:16207":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:727:20107":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"9:827:14852":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:54190:8683":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5472:15935":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8411:2767":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:5894:3494":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10245:16252":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:8056:15860":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:50086:2894":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:6920:26047":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:918:3164":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4505:3398":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13393:20006":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10075:16168":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:1919:8702":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:1415:3167":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8644:3348":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:973:3169":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8972:3467":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12118:19114":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13007:19910":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1387:3164":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5510:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9422:16077":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:80:20128":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:8833:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8216:20217":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6953:9699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:7848:3146":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4247:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:0:2027":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"12:810:3166":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2754:2530":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12884:19542":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:6969:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:9546:2910":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:9268:3492":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:49894:2900":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11153:3278":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:2727:16015":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:48170:2314":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:515:20114":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46861:20344":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:2609:2518":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"6:7255:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2842:16020":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:6991:2966":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:8295:16303":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:11773:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"9:505:14892":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:7748:2554":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4761:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13506:20044":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10182:16171":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:8701:16048":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5541:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11617:19018":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:681:20103":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12299:1472":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:5709:3479":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11515:18909":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"12:2178:2236":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:62:9355":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3314:3310":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6735:15900":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:564:20117":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:3347:2746":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7929:15989":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10721:16276":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:719:20106":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11951:19103":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5664:15943":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:48537:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3365:8780":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"14:31:14920":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:2727:2549":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4014:3351":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:39354:3487":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:12310:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:11933:3646":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"20:2261:2236":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:47633:2752":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:6617:2736":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9339:16079":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9805:16204":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:910:2615":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:57036:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9636:3219":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:50825:9105":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12307:19193":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:36:3196":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6864:2626":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:8796:16305":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10159:16173":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4354:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:8162:16294":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:0:2382":{"crate_id":17,"path":["object"],"kind":"module"},"5:2737:2533":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:3152:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1982:20457":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10455:16249":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11787:19091":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:58384:23112":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:1738:10654":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:3457:16029":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4201:8800":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:651:3077":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"5:6744:2969":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:2069:3175":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:47325:2779":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:50646:8728":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:51941:3628":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9631:16099":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6495:3493":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12237:19183":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:50877:3561":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:6324:8776":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"12:1120:14911":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5460:15934":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:1695:10650":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4367:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:10297:2909":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2793:2580":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11125:16501":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12269:3160":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:50369:8738":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12164:19117":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6524:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:5464:2761":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12323:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5861:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:574:21238":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:54126:8679":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9031:34583":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7426:15903":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:969:3168":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:48228:3449":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7267:15979":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10310:16253":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"9:111:14743":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:11774:19090":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3269:3321":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1636:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10062:16170":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:50044:8744":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11143:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:7243:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12617:19324":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7469:15887":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9738:16129":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6842:23280":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5733:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10796:16277":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9429:26082":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"12:632:2314":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7249:15978":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4152:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"12:1845:2638":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"20:407:34594":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:4286:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11734:19087":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5122:15643":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:48254:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:9488:16103":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:12309:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:8774:16304":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4102:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"9:920:14794":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:48161:2146":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7659:15875":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:659:2615":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:9885:16208":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:52790:3630":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:9696:2899":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4312:3370":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:9658:2898":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:1518:14912":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:10903:9110":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:3561:21035":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:897:2222":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"17:11661:19025":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:21856:2887":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1060:20454":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:38181:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"7:79:14687":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:1105:3175":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:47176:2760":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:702:2222":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:46402:2600":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:2030:33148":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"12:697:3168":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:4908:22836":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:13091:19920":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:9301:3496":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:690:20104":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:39403:2657":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5447:15933":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:46891:8830":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13047:19916":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:8137:16284":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5587:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:5814:3648":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10420:16248":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4621:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4017:3350":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4224:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:3911:2314":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11093:23330":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:49089:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1887:10790":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47205:2770":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7237:15977":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5554:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:5361:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:57075:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5749:22749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13557:20048":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:7191:21080":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:50466:8717":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"12:60:23377":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:52531:23055":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:21303:20314":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6998:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6619:15969":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9183:16312":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:160:14920":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1722:10653":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9644:16098":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3470:27615":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11163:27178":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"12:2190:34544":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2993:16023":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7166:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"14:165:14921":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:47145:2758":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46913:8746":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"20:2551:3076":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:12550:19322":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:3079:2523":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8487:3341":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2923:2594":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:6481:21049":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:359:3145":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:9260:2314":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:52166:3564":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11669:23425":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12934:19547":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7298:15982":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5692:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2605:16010":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12087:19112":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:6322:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46849:8829":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:9475:16104":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:4749:15587":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:47195:2769":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12008:19106":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4413:15491":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:38198:8834":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:29698:20409":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:660:20101":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"12:1044:14909":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11600:23335":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:20909:2888":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:20390:3570":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:8822:34585":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10270:16225":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13366:20003":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:8949:1330":{"crate_id":2,"path":["core","slice"],"kind":"module"},"1:5009:3379":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12909:19545":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11149:16537":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1405:3166":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:3854:15014":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:21326:22949":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:8241:16297":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:762:1892":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"12:393:23379":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10374:16222":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:10862:3321":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"0:286:1080":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"17:13492:20038":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:3350:2314":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:20027:8834":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:21823:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6981:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5949:15952":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:1852:2636":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6146:15926":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:1021:16088":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:9449:15974":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:4357:15481":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:10954:2910":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:4268:3368":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:54282:8687":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11300:16714":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:54205:8684":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"14:7:14920":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2446:8837":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10207:16239":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10583:16268":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:50394:3151":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:8623:2357":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2868:16021":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5713:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4300:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:6680:3549":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:49986:2903":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11436:18906":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6603:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9484:23184":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3377:8784":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10822:16278":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:47350:2764":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:539:9746":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6509:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6034:15955":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"20:1397:16300":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:6472:14935":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11952:14946":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7637:15892":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5411:15931":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9238:3483":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7357:15899":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:51981:23046":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:998:230":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"5:2960:20435":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"12:1840:2969":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5472:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4804:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"12:985:3174":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13203:19956":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:9330:3498":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:11150:8714":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6269:9661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8434:2894":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:6079:3555":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:738:3165":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10949:16317":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:739:230":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"21:855:1928":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"9:188:14751":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:46967:8824":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3975:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10774:16255":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:2411:16002":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:20261:3575":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6200:15958":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4657:3393":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13082:19919":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4346:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4659:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9823:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:12948:19548":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:48499:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:1643:8866":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:29564:3007":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:8368:16286":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6186:15878":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:8526:16043":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:1505:10631":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10108:16165":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:113:20130":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46938:3151":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:12045:2561":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2250:3255":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11594:18961":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4257:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4316:3371":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12972:19881":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13024:19911":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4327:15475":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:7804:21083":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:52264:3636":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12337:16260":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:3430:21035":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:9751:2892":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:47289:2776":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13158:19951":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7909:15895":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"22:0:2513":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"17:12198:19180":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9165:34584":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6052:15956":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:1003:3175":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11235:16593":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2899:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4747:2541":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:4144:15128":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:53026:3610":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4888:15619":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:52388:3613":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:7046:2638":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:6375:10572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:39394:9036":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:1370:2615":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6639:26047":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:54141:8680":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:20341:2131":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:8315:656":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"5:6412:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7543:15880":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8945:3464":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:3486:3289":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:2257:3260":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:2857:2592":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4231:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:48237:9062":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:47600:2744":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:11920:23191":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8553:20280":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:20072:32089":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:1138:3177":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:50190:2896":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:52434:3598":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6496:15966":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:53492:3642":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1396:3165":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"9:622:14728":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:7086:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8698:3401":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"12:1628:21033":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2411:3274":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:53136:3599":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:487:9740":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6311:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21757:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:2198:22160":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11606:19017":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9350:16078":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3903:3294":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:3404:3280":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:2253:3259":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2677:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2612:3307":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"12:751:2969":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:29604:8988":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:21267:22944":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"21:881:2325":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"18:491:23234":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:52410:3616":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3015:2637":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4096:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12280:26602":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:25263:3354":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2401:3269":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2488:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:646:9785":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"12:861:3173":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2683:16013":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2828:2586":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:20502:3570":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6017:15954":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"12:2080:3176":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:12297:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:8596:16045":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:51093:2560":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:21161:23293":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11174:16539":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4683:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4398:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6059:20737":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"20:2574:20823":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:5981:20609":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:48347:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2801:2581":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:52064:3612":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:11155:8713":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:353:3144":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:887:2314":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:931:3165":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:49884:2890":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6161:15957":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9021:16310":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5660:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:21343:31120":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:4679:3161":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:105:3003":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:1620:2636":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:575:9751":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11873:19097":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11536:16211":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:11123:3257":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5433:15932":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:52578:23056":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8795:3441":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4267:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5582:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2930:15864":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:47246:2774":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:6:665":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"17:11841:19095":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8504:3342":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:2747:33101":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:4254:3366":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:725:3164":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2982:2598":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:50829:9106":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47255:2784":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2789:2582":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5388:15930":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7847:15988":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8221:20218":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:47223:23311":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:1029:2995":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:5504:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:36:22162":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:12314:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:9514:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5480:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:20349:3569":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12103:19113":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:8560:2836":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6500:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2682:2548":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12964:19880":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2930:2596":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:6295:8774":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11639:19019":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:644:21238":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:48297:2314":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:9252:3484":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:4297:15464":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12638:19378":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:20921:31869":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:6784:3553":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:57088:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8813:3451":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10650:3479":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:46981:8826":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:53102:3617":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:4626:3294":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6210:15959":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6302:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13404:20007":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2781:2576":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9346:3499":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:50805:9100":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:2766:2237":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"16:6123:15876":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:47167:2759":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:47340:2780":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:2955:2634":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5558:15940":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6975:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:1814:21226":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:1636:10644":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4706:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:4072:3294":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2869:20220":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12251:19184":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11939:19102":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4611:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:9224:3482":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:52712:3641":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:51963:3632":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47361:2781":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:48613:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:6885:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:50385:8745":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4515:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1078:20455":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7044:20583":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:8625:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:614:34589":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5443:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12674:19379":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12321:1509":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:3026:16025":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"12:2205:2626":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8418:16293":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:3805:2614":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7980:15923":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"}},"external_crates":{"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":null},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.51/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}