{"root":"0:0:1091","crate_version":"1.0.26","includes_private":false,"index":{"2:11872:33463":{"id":"2:11872:33463","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11916:1379","crate::ops::IndexMut":"2:2993:2614","str::slice_unchecked":"2:11871:33462"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:364:659":{"id":"0:364:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404:1670":{"id":"0:404:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:402:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5332:2795":{"id":"5:5332:2795","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:103:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11896:2725":{"id":"2:11896:2725","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:33467":{"id":"2:11921:33467","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11974:33482":{"id":"2:11974:33482","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:33482"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42950:6713","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:396:1670":{"id":"0:396:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:25208":{"id":"2:11972:25208","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:25260":{"id":"2:11865:25260","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:26489":{"id":"5:5333:26489","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11972:25208"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1910":{"id":"0:54:1910","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:874:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:659":{"id":"0:378:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1670":{"id":"0:78:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":["0:382:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:58:659":{"id":"0:58:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[48,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:110:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:13:2166":{"id":"0:13:2166","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7136:150","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:120:1670":{"id":"0:120:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:880:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:120:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315-0:77:1675":{"id":"0:315-0:77:1675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:77:1675","glob":false}},"2:11878:30439":{"id":"2:11878:30439","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11879:30452"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42925:6768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:314-0:45:1674":{"id":"0:314-0:45:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[111,0],"end":[111,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:45:1674","glob":false}},"0:392:1670":{"id":"0:392:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370:659":{"id":"0:370:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"f64"},"items":["0:406:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11869:25262":{"id":"2:11869:25262","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:25286":{"id":"2:11874:25286","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11873:25285"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:6670":{"id":"2:11877:6670","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42637:3711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:3040":{"id":"2:11883:3040","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:2175":{"id":"0:29:2175","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7136:150","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1670":{"id":"0:98:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:2255":{"id":"2:11886:2255","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:2760":{"id":"2:11892:2760","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40661:177","prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:25299":{"id":"2:11915:25299","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591","str::rsplitn":"2:11918:25301"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42755:2925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1670":{"id":"0:92:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:33471":{"id":"2:11936:33471","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11552:12591","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::match_indices":"2:11933:33470"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42819:6762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:33479":{"id":"2:11959:33479","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[43,0],"end":[56,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:941:2244","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:1910","0:58:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"5:4750:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:98:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11850":{"id":"2:11850","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11851:802","2:11852:2726","2:11853:33458","2:11854:33459","2:11856:33460","2:11859:24906","2:11860:33461","2:11861:312","2:11862:3006","2:11863:3041","2:11865:25260","2:11867:25261","2:11869:25262","2:11871:33462","2:11872:33463","2:11873:25285","2:11874:25286","2:11875:6771","2:11876:6780","2:11877:6670","2:11878:30439","2:11879:30452","2:11880:6927","2:11881:33464","2:11882:30451","2:11883:3040","2:11886:2255","2:11889:2393","2:11892:2760","2:11896:2725","2:11900:25293","2:11903:25295","2:11906:25297","2:11909:33465","2:11912:33466","2:11915:25299","2:11918:25301","2:11921:33467","2:11924:33468","2:11927:2514","2:11930:33469","2:11933:33470","2:11936:33471","2:11939:33472","2:11941:33473","2:11943:33474","2:11945:33475","2:11946:33476","2:11947:33477","2:11950:33478","2:11953:24091","2:11956:25303","2:11959:33479","2:11962:33480","2:11965:33481","2:11968:1998","2:11970:25206","2:11971:25207","2:11972:25208","2:11973:25209","2:11974:33482","2:11976:7207","2:11977:33483"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11918:25301":{"id":"2:11918:25301","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11910:412","str::splitn":"2:11915:25299","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42773:2921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1670":{"id":"0:118:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:2156":{"id":"0:22:2156","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:880:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:33480":{"id":"2:11962:33480","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406:1670":{"id":"0:406:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:30451":{"id":"2:11882:30451","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42943:6770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:374:659":{"id":"0:374:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:101:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:11:2156":{"id":"0:11:2156","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:880:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"f32"},"items":["0:404:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:88:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:402:1670":{"id":"0:402:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:1670":{"id":"0:108:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:312":{"id":"2:11861:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11862:3006","`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:366:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11912:33466":{"id":"2:11912:33466","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11552:12591","str::split":"2:11900:25293","prim@char":"1:11910:412","str::split_terminator":"2:11909:33465"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42719:6758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:370:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:366:659":{"id":"0:366:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:34133":{"id":"5:5331:34133","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2291","`String`":"5:7179:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2291","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2582","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:2514":{"id":"2:11927:2514","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11552:12591","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:2514"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42855:6764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400:1670":{"id":"0:400:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1670":{"id":"0:112:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:2175":{"id":"0:18:2175","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7136:150","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11906:25297":{"id":"2:11906:25297","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11552:12591","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split":"2:11900:25293"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42669:2927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:659":{"id":"0:55:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1910":{"id":"0:47:1910","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:874:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:84:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:122:1670":{"id":"0:122:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33476":{"id":"2:11946:33476","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1910":{"id":"0:61:1910","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:874:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11965:33481":{"id":"2:11965:33481","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:2726":{"id":"2:11852:2726","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:362:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:380:1670":{"id":"0:380:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":["0:376:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11853:33458":{"id":"2:11853:33458","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:33474":{"id":"2:11943:33474","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34:2153":{"id":"0:34:2153","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:372:659":{"id":"0:372:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[163,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RepInterp","id":"0:407:1931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:228:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11880:6927":{"id":"2:11880:6927","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42905:6766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1670":{"id":"0:88:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:25209":{"id":"2:11973:25209","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:1670":{"id":"0:84:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1674":{"id":"0:45:1674","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[11,0],"end":[21,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.","links":{"`Ident`":"21:941:2244","`format_ident!`":"0:37:2237"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:46:659","0:47:1910"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:367","0:56","0:363","0:359","0:371","0:361","0:52","0:59","0:375","0:377","0:48","0:369","0:373","0:365"]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:122:1670","0:123:2289"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11879:30452":{"id":"2:11879:30452","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11878:30439"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42934:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:3047":{"id":"5:5316:3047","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5322:34131":{"id":"5:5322:34131","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:2393":{"id":"2:11889:2393","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:33473":{"id":"2:11941:33473","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2291","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:95:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5314":{"id":"5:5314","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5315:34129","5:5316:3047","5:5319:34130","5:5322:34131","5:5330:34132","5:5331:34133","5:5332:2795","5:5333:26489","5:5334:26490"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:116:1670":{"id":"0:116:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1670":{"id":"0:105:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:1670":{"id":"0:390:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1670":{"id":"0:101:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:33470":{"id":"2:11933:33470","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11552:12591","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::rmatch_indices":"2:11936:33471"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42801:6761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:360:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:26:2171":{"id":"0:26:2171","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7136:150","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":["0:384:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:362:659":{"id":"0:362:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:25303":{"id":"2:11956:25303","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:364:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11876:6780":{"id":"2:11876:6780","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42627:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:33465":{"id":"2:11909:33465","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11552:12591","str::split":"2:11900:25293","prim@char":"1:11910:412","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11912:33466"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42701:6757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315:34129":{"id":"5:5315:34129","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2291","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2582","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2291","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:2582","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:33475":{"id":"2:11945:33475","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:25206":{"id":"2:11970:25206","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:2289":{"id":"0:80:2289","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1910":{"id":"0:57:1910","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:874:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:668:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:677:110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:92:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:388:1670":{"id":"0:388:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1673":{"id":"0:10:1673","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:11:2156","0:13:2166","0:15:2171","0:18:2175"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:34:2153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:21"]}},"0:398:1670":{"id":"0:398:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:384:1670":{"id":"0:384:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:1670":{"id":"0:95:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:1910":{"id":"0:50:1910","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:874:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:659":{"id":"0:51:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1670":{"id":"0:110:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:2289":{"id":"0:123:2289","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:372:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:378:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Punct","id":"21:919:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:398:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:394:1670":{"id":"0:394:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:659":{"id":"0:376:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":["0:400:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":["0:388:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:941:2244","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:114:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1091":{"id":"0:0:1091","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1434,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.26\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:313-0:10:1673","0:314-0:45:1674","0:315-0:77:1675","0:37:2237","0:344:1091","0:345:1909"],"is_stripped":false}},"2:11854:33459":{"id":"2:11854:33459","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11856:33460":{"id":"2:11856:33460","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11854:33459"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863:3041":{"id":"2:11863:3041","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:360:659":{"id":"0:360:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:6771":{"id":"2:11875:6771","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42621:6751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:25295":{"id":"2:11903:25295","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11376:2939","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:2288":{"id":"0:79:2288","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:33469":{"id":"2:11930:33469","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11552:12591","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::matches":"2:11927:2514"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42873:6765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:33472":{"id":"2:11939:33472","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:1998":{"id":"2:11968:1998","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11514:126","`FromStr`":"2:11513:2548"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11513:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11513:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:7207":{"id":"2:11976:7207","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:7207"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42959:6701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5319:34130":{"id":"5:5319:34130","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:33462":{"id":"2:11871:33462","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11916:1379","str::slice_mut_unchecked":"2:11872:33463","crate::ops::Index":"2:2989:2613"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1670":{"id":"0:114:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:33461":{"id":"2:11860:33461","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:33468":{"id":"2:11924:33468","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11572:12589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:24091":{"id":"2:11953:24091","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"isize"},"items":["0:390:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:108:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:15:2171":{"id":"0:15:2171","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7136:150","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":["0:386:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:368:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:313-0:10:1673":{"id":"0:313-0:10:1673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:10:1673","glob":false}},"0:37:2237":{"id":"0:37:2237","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::UpperHex":"2:9061:2385","`format!`":"5:6:670","std::fmt::LowerHex":"2:9059:2384","proc_macro2::Span":"21:874:1911","proc_macro2::Span::call_site":"21:553:2310","crate::IdentFragment":"0:45:1674","proc_macro2::Ident":"21:941:2244","std::fmt::Octal":"2:9055:2383","std::fmt::Binary":"2:9057:2386","`std::fmt`":"5:4664:659"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Literal","id":"21:946:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:118:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:103:1670":{"id":"0:103:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:392:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:10:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:2156","0:24:2166","0:26:2171","0:29:2175"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[33,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:54:1910","0:55:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[58,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:668:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:677:110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:61:1910","0:62:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:344:1091":{"id":"0:344:1091","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[473,0],"end":[477,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro2::TokenStream`":"21:869:231","`proc_macro::TokenStream`":"20:2636:231","`format_ident!`":"0:37:2237"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"},"2:11859:24906":{"id":"2:11859:24906","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11120:12592"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11873:25285":{"id":"2:11873:25285","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11874:25286"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:33464":{"id":"2:11881:33464","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42915:6767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:25293":{"id":"2:11900:25293","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11552:12591","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11910:412","str::split_whitespace":"2:11878:30439","str::rsplit":"2:11906:25297"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42651:2923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5330:34132":{"id":"5:5330:34132","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:33477":{"id":"2:11947:33477","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11577:12587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:802":{"id":"2:11851:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11910:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:26490":{"id":"5:5334:26490","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11973:25209"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345:1909":{"id":"0:345:1909","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[612,0],"end":[616,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"},"2:11971:25207":{"id":"2:11971:25207","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:33478":{"id":"2:11950:33478","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11910:412","self::pattern":"2:11552:12591"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11557:12588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11977:33483":{"id":"2:11977:33483","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:33483"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42968:6706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:368:659":{"id":"0:368:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:1670":{"id":"0:386:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:659":{"id":"0:62:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Group","id":"21:895:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:374:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:396:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:46:659":{"id":"0:46:659","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[13,4],"end":[13,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[23,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:50:1910","0:51:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":["0:380:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:394:1670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:382:1670":{"id":"0:382:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:3006":{"id":"2:11862:3006","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:1670":{"id":"0:228:1670","crate_id":0,"name":"to_tokens","span":{"filename":"src/runtime.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:869:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:25261":{"id":"2:11867:25261","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:24:2166":{"id":"0:24:2166","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7136:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7136:150","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1675":{"id":"0:77:1675","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:78:1670","0:79:2288","0:80:2289"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:379","0:226","0:89","0:93","0:403","0:85","0:115","0:81","0:397","0:387","0:405","0:393","0:395","0:401","0:104","0:385","0:117","0:99","0:381","0:109","0:399","0:107","0:121","0:383","0:113","0:119","0:102","0:391","0:111","0:389","0:96"]}}},"paths":{"20:2037:34789":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:5921:2835":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:6945:6663":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:920:6939":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9178:6883":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:7878:3561":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:39007:4752":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:39414:6720":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:41698:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13145:4324":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11109:3831":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5352:7437":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:7136:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3245:7325":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:707:6458":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10216:7439":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:6547:3408":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:797:34849":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:12134:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"21:919:2260":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"1:8340:7416":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:2855:2605":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:6128:29404":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:38822:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2771:2590":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:8573:19520":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:4872:4626":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10721:6350":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10303:19591":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11193:3842":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:1589:5150":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:1872:2642":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:1978:6903":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:3977:31567":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6079:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13721:4497":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:8667:3704":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:7489:7023":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12307:4080":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:621:7010":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:38838:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"10:36:4952":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11923:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:2357:4552":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:20395:32002":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:21735:6056":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:9316:6680":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11154:3422":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:43394:6804":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2757:2706":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:41658:6158":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6919:34659":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4387:2708":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:772:2644":{"crate_id":21,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:39738:2832":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:7197:2646":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3749:4605":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:39341:6715":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:7259:2643":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:8986:29392":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:9512:6888":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1520:5112":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:1044:18510":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3674:7344":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13159:4325":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9959:6469":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7437:4754":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5383:7439":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:1832:2340":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"20:2432:2149":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"5:4253:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13499:4412":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:6174:3328":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4988:5612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12072:4027":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11060:3795":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:38980:2618":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9469:19535":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"0:0:1091":{"crate_id":0,"path":["quote"],"kind":"module"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:7590:6307":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:46550:6285":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:14:3092":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"1:10957:3421":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"20:967:3286":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:8757:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:368:34791":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"21:505:2544":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"2:8997:2877":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"20:2752:1949":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"6:5917:5763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:2830:3393":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3504:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8933:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43620:7539":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"21:699:2544":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:38926:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4680:7367":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"15:219:18536":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:165:18520":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10589:6481":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13257:4351":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7711:4763":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:5745:2562":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2971:2622":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10798:19523":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:10039:19590":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:9968:2939":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8751:6959":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:853:7221":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10334:3732":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:12467:2581":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:41950:6743":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"20:2793:2244":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"2:44916:6214":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1604:5162":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13135:4323":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10598:3822":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12236:4066":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:7797:3654":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:2426:4555":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:531:6449":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5759:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2470:4557":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11859:24103":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13316:4365":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12959:4285":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6220:3305":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3992:7358":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4871:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11914:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:736:23391":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:44794:6210":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10257:6911":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11063:6388":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:8994:6383":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:48965:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:2777:2316":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"2:43458:12909":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:7655:7213":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7133:31574":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:41774:2894":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"21:895:2258":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"1:4639:7378":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:2104:6655":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"20:2636:231":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:42873:6765":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:3640:2628":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:3640:3616":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5847:6522":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:6655:6943":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4805:5515":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4248:5270":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5878:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:10731:24097":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:42595:6173":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:44564:6197":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2612:7322":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10440:6916":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4253:7376":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:6851:2790":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11372:3885":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10426:7329":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:39014:31578":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:874:1911":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"20:2772:2260":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"17:10270:19592":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"8:0:2401":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13857:4524":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:2933:6912":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9696:3725":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:42627:6752":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11355:3883":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:4071:6955":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:154:3287":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:914:2643":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:43382:6801":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8821:2628":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13265:4353":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:4742:31780":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11319:3878":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:10661:6828":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:9059:2384":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11136:3832":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:1786:6945":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12126:4035":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9075:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:1969:3561":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40659:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:2395:6023":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:25618:3468":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:3146:2641":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:405:7146":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:2678:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:8360:19513":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8769:6375":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:43215:6785":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5402:3704":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:46304:6280":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:594:5103":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:8389:19514":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9628:19538":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4766:5494":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:644:3584":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"21:783:231":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:12358:4085":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9946:6468":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6254:4644":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8168:2923":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7449:19454":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42609:6750":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:2642:4564":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:1401:6650":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11946:4009":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4501:5411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9617:6893":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"14:7:6995":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"0:344:1091":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"2:48939:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46623:6291":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"20:1403:3569":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:7635:4760":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"9:421:18432":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:8953:3714":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:3932:3333":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13332:4367":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8162:3711":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:1230:7002":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41975:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:7529:2804":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6649:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:8632:19497":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13461:4404":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11909:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:951:3305":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:41096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7814:6309":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"11:1836:2628":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1704:2643":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:21683:31570":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:8774:32053":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:11341:6763":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8408:6167":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41997:6747":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:39551:2818":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:42651:2923":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4307:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8236:6818":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:42429:2920":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:9188:34740":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:586:5098":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:8909:3711":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"20:2247:2341":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:878:6649":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46649:6293":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8187:6954":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1840:3328":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:39491:2807":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10321:6959":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:939:7219":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2808:4571":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:8718:3706":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13744:4498":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:8109:6638":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"20:217:34784":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"20:434:3283":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"11:777:3299":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:8072:6632":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11459:3900":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:535:6492":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11177:6962":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4540:4616":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9382:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:22175:2916":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:39228:31577":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:7452:6006":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:3151:34524":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3936:7353":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:1138:7002":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:2177:6660":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:3266:6914":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46568:6286":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6791:5980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2788:2591":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6004:3399":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1723:5237":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:3595:3305":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2894:34463":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11012:6375":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:3644:3561":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:7713:29379":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9839:19545":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:49004:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6992:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:247:34729":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:521:23393":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11917:1458":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13367:4378":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:2198:4950":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:30205:31610":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:5071:4632":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:4325:7373":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:582:3592":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:6327:29405":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:1451:6942":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:4494:2326":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"2:39305:6701":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8255:6952":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:4596:4618":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5741:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8490:6819":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7027:2628":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:10656:6826":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4539:5413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:7021:2628":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1645:5194":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9028:6880":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6474:4596":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4408:5362":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2993:2614":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12046:4024":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10104:3743":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8827:6378":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4994:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:11024:6376":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:6519:2735":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:3127:27516":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7709:7011":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10951:3420":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6943:19450":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:42968:6706":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6981:19451":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:9432:3370":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:30027:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:3247:7326":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4877:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2216:7277":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4468:5394":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:4568:4617":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:646:2627":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:7446:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:4757:4622":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13689:4482":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:3353:3333":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:3225:4601":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:735:2259":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:39288:12660":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:1597:2642":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13033:4296":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:20652:7501":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11240:7021":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:540:5074":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11922:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:6954:3328":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:4664:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:30603:3592":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:42934:6769":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13659:4475":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:2841:2602":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4678:7366":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:0:2410":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:38862:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2370:7290":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10857:19524":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6594:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12318:4081":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:10233:24338":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:5902:5761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4842:7403":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:38948:2616":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:41016:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:6372:3305":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:112:34850":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:3376:12623":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"14:31:6995":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:39021:2895":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:46226:6279":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3815:4607":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:12355:3383":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:499:5045":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2989:2613":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6336:6564":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7244:34722":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10691:6309":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5752:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4952:5590":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10823:3675":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5963:6533":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11163:3838":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:3172:2642":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:11566:6458":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4841:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5418:4636":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:39958:2794":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5497:5791":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:22208:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:5318:7435":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:614:34751":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10429:7325":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:5573:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:1731:5241":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:45554:6242":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:1649:1074":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"20:141:3562":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:20435:32051":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:42701:6757":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4261:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:2275:2258":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:10885:6489":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"7:32:18416":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6548:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9641:6894":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:1859:2639":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7803:4772":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11921:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:39632:2825":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40777:2690":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5561:3396":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:387:6932":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2835:2601":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1083:7002":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4476:5398":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:3030:4598":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:9029:6386":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:3732:3305":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9478:19541":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:481:5037":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4636:7405":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:10080:2927":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9973:6470":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1442:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6939:2628":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7366:19453":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39935:2791":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:42915:6767":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13344:4373":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5728:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10835:5010":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:42621:6751":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:2230:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8783:6376":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:21728:6692":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:5171:12582":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:350:2544":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:2339:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12085:4029":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10705:3799":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:42943:6770":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6512:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:5450:2822":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:44494:6194":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:12147:12672":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:39367:6139":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:6521:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11935:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:4510:4615":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:119:13186":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:40871:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:39654:2826":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:22808:3467":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10967:3822":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:20367:3592":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:1896:6037":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:7522:2629":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:42005:6748":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1747:5246":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11933:1529":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11234:3851":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"18:755:6465":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6666:3345":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2764:4569":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:1866:2640":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:43567:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:632:2340":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4571:5881":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6460:4579":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11069:19526":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:1534:18514":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:43057:6772":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9057:2386":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:8025:4810":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11925:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:39386:6719":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7683:4595":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3171:2619":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12550:4121":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:9065:2878":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3380:6353":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9380:19532":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:1737:6034":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:5697:32620":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"18:491:6448":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:4480:4614":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:5245:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:4037:4610":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:2900:33336":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:7467:6621":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10052:19603":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:2720:4567":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11800:3985":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:7686:6812":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:20683:7503":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:574:3584":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:7099:2805":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12372:4088":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13516:4419":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1704:5230":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:6080:3383":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9670:6895":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9218:3732":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:62:13132":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"20:2645:2963":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"5:4298:3333":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6321:19445":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:5655:4581":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:5167:12581":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:11376:2939":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:42549:2932":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11892:24080":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8124:7295":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"14:187:18527":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42504:2807":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:6023:7541":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:636:3604":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:2583:2966":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:4313:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10000:3806":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:9876:2340":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:1787:6897":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2879:4574":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:1802:2576":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:12344:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9063:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4109:7374":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:12386:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4353:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:659:2628":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:52:18448":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:43378:6800":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:578:5093":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"20:479:3285":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:13453:4403":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7077:19452":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:2184:4947":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6506:6581":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4697:5463":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:7525:2630":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:42539:2934":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4445:4613":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8307:6356":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4757:5491":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:208:3304":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:7074:2637":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:7481:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6496:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:699:6456":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:762:2643":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:6488:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4969:4629":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:39942:6732":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11274:3424":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:46687:6295":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10316:3780":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2679:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5931:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:1518:18513":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:39327:6713":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"10:44:4953":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:9098:6881":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:184:34794":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"5:3138:2640":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:98:6642":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46512:6284":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"21:723:2258":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:3168:7328":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:7527:3412":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:20809:2153":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"21:695:231":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"9:481:18429":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:2319:4544":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:2539:6443":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"6:1663:5206":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11585:3927":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6053:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6376:4578":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4361:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2333:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:38904:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:1919:19574":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11915:1349":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:45508:6241":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6431:6571":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:2502:4558":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6764:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:9108:34744":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11969:4014":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11502:3910":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:42819:6762":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:5417:3341":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2804:2594":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:933:7218":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12293:4078":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:899:1949":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:8281:7406":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:21586:6039":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12607:4129":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:638:7209":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11881:7215":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2080:7224":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:8181:6952":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46116:6278":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10092:6910":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"20:998:231":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"20:2597:2965":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:4673:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11577:12587":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:39381:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:5834:3333":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11472:6398":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4:1001":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5557:4577":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22043:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4093:6956":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13419:4395":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:41790:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44870:6212":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:946:2259":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"20:1029:2964":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:43035:12603":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:1849:6949":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1030:6940":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2497:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4910:5574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:815:7218":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:39207:6702":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:9866:19557":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41256:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:671:3561":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"5:1201:7224":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:8683:3705":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"14:215:6640":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10701:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:9394:3416":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13426:4396":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3612:7342":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:10173:2921":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:9514:3373":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4781:5501":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12483:4114":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39461:3363":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7119:6665":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:22340:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46702:6296":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10058:7022":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:43151:6783":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:43386:6802":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10068:6909":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:0:2404":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11927:1476":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6773:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11932:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1983:7227":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:60:6931":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6611:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6719:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6628:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:624:34754":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:649:2967":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:2249:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2825:2315":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:4768:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10527:19651":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5944:19438":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2934:2610":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10761:19522":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3930:7352":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:8185:2575":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10465:19629":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:1600:3305":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5920:6530":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8247:7372":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13292:4357":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7837:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:39724:2831":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:39641:2812":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6819:4687":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42719:6758":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:7589:2153":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:3979:2627":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:21570:6686":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:505:3321":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"22:0:2539":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:4656:5441":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3872:7349":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11924:4008":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:44938:6215":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2940:2612":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:11265:6754":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:2572:4561":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:4624:4619":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:4851:7404":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:1824:6947":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:39311:12661":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:4092:7147":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:7606:6308":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43374:6799":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12403:4094":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10936:3821":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:7218:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3878:7348":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6236:19444":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:534:3386":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9734:19546":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:7102:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:4241:7006":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:20640:2153":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11861:3997":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:3984:7356":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3166:7327":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:21448:6684":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:22307:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10615:6482":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10923:6490":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5990:5790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9008:23905":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2503:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5910:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9275:34736":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9523:19539":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:39258:6704":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:5761:13106":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13233:4346":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:0:2408":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:725:6649":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:1575:2643":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2808:2596":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13777:4505":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11395:7343":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11934:1111":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9322:34743":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2538:3390":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10844:7440":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11600:3933":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4122:6958":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6442:6572":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10743:6920":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:868:2340":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11225:6836":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11471:3901":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:7193:6672":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:8490:19517":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13309:4364":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:6616:29405":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:9900:2627":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1509:5107":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6524:3351":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:39664:2827":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8797:6377":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:929:6938":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10626:6483":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:22241:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:40574:31580":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:904:3328":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:766:23392":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:39580:2821":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9389:6950":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4862:5551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4559:5415":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6558:6583":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:487:5040":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:5691:7455":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:44724:6208":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2766:2593":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7837:6628":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:3063:3612":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2546:4560":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7807:6815":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:38882:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6575:19447":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:21662:31597":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2298:18552":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:39201:6701":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1354:2627":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2745:2703":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:13698:4484":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4411:7378":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:1828:3570":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:10142:19622":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13469:4406":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:22142:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:40744:2689":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4714:5474":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:29971:6059":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:21249:2917":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10840:3818":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7029:6615":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6890:4587":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44840:6211":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:5123:3305":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:11106:2911":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:38760:2623":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:7870:7016":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10354:3782":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4618:5421":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11710:3430":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:6962:3316":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4945:5587":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10416:6915":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:1620:6030":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2342:6033":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:6930:2582":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12576:4123":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:2937:2611":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5886:6524":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8103:6349":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4628:5428":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:320:3292":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45272:6237":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:9311:12675":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"20:2606:6446":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:7854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1571:3328":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:41668:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:1847:6948":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13791:4512":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:803:3311":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:21097:7529":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3133:30000":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"0:345:1909":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"2:42559:2933":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:8090:6635":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:2649:2628":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:13821:4520":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6520:4652":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:10045:2940":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:4303:3361":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12388:4090":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:44583:6198":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"20:2798:2259":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"17:11446:3898":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"15:180:6921":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:8779:31059":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2548:3374":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:11354:7344":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:7201:5989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40710:2168":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:43577:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7259:2689":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9772:3737":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:668:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5305:4634":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:42925:6768":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:8753:659":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:43670:2580":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3105:2340":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11844:3994":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5332:7436":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9895:19562":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:8858:3710":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:3300:4602":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:738:6650":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9826:6904":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8846:6379":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:5760:3398":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:40645:6153":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4575:5885":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:9080:6387":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13211:4340":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11926:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:39348:12662":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12563:4122":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:20681:2153":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:4232:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4681:5455":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43658:6810":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8914:6382":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:46588:6288":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4981:5609":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40719:2340":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:48952:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10478:6918":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:891:6650":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:45430:6240":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4416:5367":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43390:6803":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:1788:6946":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6698:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:0:2405":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41987:6167":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:2075:6653":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12331:4083":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:5797:6515":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:564:3591":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:20380:32002":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:484:3385":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:9192:6948":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:2069:7223":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:2454:2153":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:1074:7224":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:2710:2962":{"crate_id":20,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:43398:6805":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9596:3729":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:9925:2923":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:7095:2806":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40846:2340":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:8187:2691":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12345:4084":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"7:79:18423":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:671:6879":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:6970:33396":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44962:6216":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:12220:12673":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:9545:3698":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5000:5617":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4929:5582":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9577:3727":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8974:29417":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:6183:3396":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"13:226:4946":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9228:34735":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:8753:3707":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11331:3426":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1559:5131":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44524:6195":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11299:3868":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6534:3352":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:3528:2627":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10711:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:2227:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:9723:2153":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2930:2609":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:30011:6062":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:4164:2568":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6544:4584":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:505:5048":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:690:6455":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"20:2308:2260":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:44269:6185":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:46764:6298":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4313:2895":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:45348:6239":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1609:5164":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13477:4407":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2448:4556":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6022:19440":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13249:4349":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12902:4247":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8891:7467":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13356:4374":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:22076:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4967:2562":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9907:3740":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"13:0:2399":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6854:4691":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13639:4469":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:11325:6760":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:20412:32047":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12634:4132":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9498:3725":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:7280:30055":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:531:5068":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:609:34755":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:22109:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"20:2641:2544":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"17:8256:19496":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:6608:2816":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:123:13187":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:590:3593":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:9566:6884":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:21637:6043":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:21554:6038":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:2862:4573":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5716:5661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9126:24964":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"16:5032:4631":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41136:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:3117:34520":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:7179:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1527:5115":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13433:4397":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:41418:2386":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5708:6508":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11171:6833":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2719:2701":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"20:2747:2258":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"2:39268:6705":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:48926:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:558:7194":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:6889:7020":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1029:7224":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13101:4311":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7862:29409":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13506:4414":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:621:7003":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9068:34738":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:1431:6938":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:8979:34731":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:55:4800":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:553:5080":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44339:6188":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:1714:12833":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"10:0:2403":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7016:6612":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:1845:2643":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"11:353:3294":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:851:3313":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44601:6199":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4328:5323":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13667:4476":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1628:3300":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7588:19455":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:39621:2834":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:41176:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6990:4701":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:2624:6027":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8096:2790":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8506:6374":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:42457:2929":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4921:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:39398:31574":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2694:4566":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12019:3750":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:2209:7276":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4583:5417":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10491:19628":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11391:3890":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:42669:2927":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:9055:2383":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44315:6187":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6571:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:0:2400":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3779:7345":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:4750:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:546:5077":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:45318:6238":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43263:6794":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:40727:2627":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3242:2573":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12178:4040":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9340:6886":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:646:7211":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4720:5477":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10377:3783":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42950:6713":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42530:2931":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5800:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42205:6749":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:487:19510":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:45091:6219":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8448:7430":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4728:4621":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43425:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8263:6355":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:1613:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8229:6817":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:5811:6516":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"9:325:4990":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1216:7223":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:4932:4628":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10712:19653":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4637:5433":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:31808:2707":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46428:6282":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8112:6350":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:44892:6213":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:7173:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11641:3944":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8939:7192":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3264:2643":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:39533:2809":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7475:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:43086:6781":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6218:19443":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8859:7466":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:20627:7511":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9148:34746":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:7478:3569":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40854:2627":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11532:3914":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:0:2402":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:507:3584":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13066:4307":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5843:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5104:4633":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39991:2802":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42478:2936":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12098:4031":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7557:4756":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:8823:3709":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:3907:3328":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6868:4693":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2675:2253":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:975:2628":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"16:4400:4612":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2668:4565":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3782:4606":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:44293:6186":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7519:6626":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4379:5351":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:4358:3362":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"7:0:1519":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6231:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11416:7345":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2455:12668":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10735:3803":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:30099:31611":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:4561:7353":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:119:3290":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:7469:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12461:4103":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:12195:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:38721:2624":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12449:4101":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:1339:2340":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:0:1062":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"5:1066:6941":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5741:19437":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4962:5595":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"20:2732:2149":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:2761:2551":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2905:4575":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2732:2645":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:7627:3418":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:5500:7441":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10283:3777":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8928:29415":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7000:6664":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:0:2048":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"2:41216:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:3290:7318":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40786:2952":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"2:43402:6806":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5779:4638":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:6293:2628":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12006:4018":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:2919:2608":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:860:2627":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:2212:3357":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:46634:6292":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2344:7280":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:39713:2814":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3206:7329":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:10007:2924":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40896:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7859:19459":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2682:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"14:40:2244":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:21355:2153":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43406:6178":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46474:6283":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:11302:6759":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:7039:6963":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:538:3589":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:2572:7015":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:40554:1911":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2786:4570":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:3677:7343":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5386:3703":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:2297:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:21261:32005":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:5177:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4775:5500":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:6691:3356":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9118:6825":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5890:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:40735:2628":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4787:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46366:6281":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2813:2600":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:39520:2817":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:40491:6143":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:834:2259":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:6404:3407":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10428:19650":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:2475:7321":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13121:4319":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4224:5253":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:29782:7346":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2859:2606":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11090:3828":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:48978:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1420:6937":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44393:6190":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4402:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7511:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:4702:4620":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:4577:12654":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2851:2604":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:3142:6913":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10364:3417":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:8192:7340":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2676:2570":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:1534:5117":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:41958:6745":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"14:0:2406":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4795:5509":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10580:6480":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2796:2597":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4367:2896":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:5568:3397":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:6477:7017":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7529:4592":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10897:3820":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41056:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:20564:7509":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6728:6589":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2967:18579":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:43072:6778":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:42378:6944":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:43370:6798":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4703:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:11572:12589":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6634:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:2334:2244":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"5:277:2291":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9721:6896":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8981:29411":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8500:2340":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:3437:2877":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:962:7222":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5346:4635":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6671:4675":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5945:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:525:5065":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:2190:34651":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:54:3281":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"16:5976:6494":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11556:3916":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:473:5032":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:4757:7363":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6293:4647":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7802:6950":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:9061:2385":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:0:1371":{"crate_id":1,"path":["std"],"kind":"module"},"1:11876:30056":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:599:34752":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:5905:3396":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:9099:6388":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:8292:12588":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5367:18550":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1687:5223":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4439:5380":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9917:3741":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4611:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11924:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12433:4097":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:2904:33337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4334:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"21:689:6437":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"13:110:34653":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:10874:6377":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12059:4026":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:4721:7216":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:1927:7261":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3462:7313":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:6581:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:21761:7347":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7670:7214":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:1728:6031":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:3505:3328":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1580:2641":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1583:5148":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:9378:1349":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:42467:2930":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39589:6724":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4662:5444":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2830:2599":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2385:2416":{"crate_id":1,"path":["std","io"],"kind":"module"},"21:713:1911":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:11908:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9409:19533":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:2820:2598":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7757:6627":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5660:5621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1550:5125":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5000:4630":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:39603:2823":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:361:7204":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:1898:7012":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:44445:6192":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:1120:18512":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:4122:6673":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:567:5088":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8145:2817":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7335:34698":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45584:6243":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2668:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11916:1379":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:42855:6764":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:46608:6290":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:660:6875":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:8186:2574":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1392:6649":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5998:19439":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:39028:6135":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12799:4161":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12835:4192":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:44546:6196":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4727:5479":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:41439:2385":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11011:3824":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11434:3895":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13651:4472":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11258:3865":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:274:6643":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:7958:7323":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:9989:6947":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:45013:6217":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4218:5252":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11902:4001":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:20433:32049":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10989:3790":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:10159:2925":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10679:6832":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:41716:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:39571:2820":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:20814:7502":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4520:5412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:39964:2796":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44361:6189":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10452:6917":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6757:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:10666:6815":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6179:19441":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:3455:7294":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:39428:7263":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:6935:19449":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12894:4244":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:653:13542":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:2404:4554":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"9:445:18430":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:40976:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:3922:7351":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10681:6486":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:975:6891":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"0:37:2237":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"1:1771:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:42959:6701":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7065:6619":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11911:1492":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2864:2607":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11910:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:11623:12597":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:11120:12592":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:7204:7004":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:3899:4609":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10008:6966":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:38987:6134":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11339:3879":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13376:4381":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3087:2547":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11993:4015":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13564:4456":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1695:5224":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:109:6436":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:4024:12578":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:12412:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4549:5414":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:39673:2828":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:1899:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4346:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10831:7011":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:39973:2798":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8875:7465":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5823:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4396:5357":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4789:4623":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:8651:3703":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:9053:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6743:5962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:3872:4608":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4687:5457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2847:2603":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4676:7364":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:242:34739":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7509:4591":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:2157:33389":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6728:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7543:4593":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11484:3902":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:2687:2569":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13169:4326":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5019:29381":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:50300:6306":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:6400:6569":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7411:4753":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:44249:6184":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12510:4116":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:46597:6289":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13181:4329":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:3208:7330":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4389:5354":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12496:4115":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4489:5402":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11520:3911":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43103:6782":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:40633:6152":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:21501:6685":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:20840:7507":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46577:6287":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7948:29389":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:8129:19460":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13041:4297":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:8443:19516":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:9531:3374":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12138:4036":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11410:3891":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11832:3992":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:10145:7443":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:4173:7375":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:44746:6209":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12923:4255":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9986:6471":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:2727:2964":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"5:1370:2628":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7488:6624":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:35:3302":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:950:7220":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5786:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4734:3394":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:39612:2824":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:8214:4752":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:5368:7438":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:4505:7396":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:751:3328":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1652:5198":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:40795:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:2358:7284":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6201:19442":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6662:6587":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6307:4576":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:1185:6620":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:956:7221":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:6984:2628":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:43585:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:7498:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:9546:3378":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11920:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:2053:6620":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9059:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:847:2340":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:3446:27177":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"9:234:6167":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:9796:3739":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:8142:19461":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:2696:1911":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"2:48569:7538":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:12646:4139":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:2742:4568":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:108:34778":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"16:7042:6618":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:46725:6297":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8175:6766":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:45974:6277":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:7676:6811":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:8420:19515":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:39244:6138":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6059:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:2893:2554":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4274:5290":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4828:5526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11220:3850":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:2378:4553":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:6096:3403":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:1046:33363":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:1555:18515":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13411:4392":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3323:2796":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:39703:2830":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4820:5521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:39752:2833":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:2360:7285":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:669:6937":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:8310:19512":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:39334:6714":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:2337:4546":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:20833:2153":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4573:5883":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:6702:2787":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39216:6703":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:8156:4597":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40610:6817":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4597:5418":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4743:5486":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:386:19509":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:7086:2638":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:31799:6699":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42905:6766":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13082:4310":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:861:7222":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:41296:7453":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9265:6884":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13219:4343":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12980:4290":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9933:6466":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7626:19457":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6327:6563":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:6480:7460":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11490:6399":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:11929:1474":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6361:4649":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6000:5793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9038:34734":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:39280:6706":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6533:7462":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:3656:7227":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:941:2244":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"17:8283:19511":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22274:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:11513:2548":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10856:24112":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5677:19436":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2800:2595":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13324:4366":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"9:502:5013":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7478:4590":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:42438:2918":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"9:174:18496":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5959:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9488:19540":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42637:3711":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:4268:3335":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:2896:6026":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:0:2409":{"crate_id":17,"path":["object"],"kind":"module"},"16:2616:4563":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:9007:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6094:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5951:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:10469:3418":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13678:4481":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:9067:2879":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4850:5542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11628:3943":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:2776:2589":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:8195:19498":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11252:6838":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:20730:3464":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4882:5562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"1:6931:3410":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:1051:6620":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:7252:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:1592:2640":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:80:6869":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:14:2517":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11422:3894":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"9:388:18431":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:572:5090":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7434:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"14:221:4899":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:5693:6505":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40525:7341":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5690:5646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:10719:2938":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7317:34719":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6351:19446":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4890:5567":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4733:5482":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5967:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:5724:6510":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"21:806:1911":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:10125:3745":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:39983:2800":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6696:19448":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9653:19556":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:4331:3335":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10670:3798":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:1065:34652":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8431:6369":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:38807:2615":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:5571:4580":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:5437:7440":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:697:6938":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:3177:2621":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1541:5120":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7596:19456":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:727:3608":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:31795:29379":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:10423:7327":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:9268:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:355:7203":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6752:7499":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:9138:6882":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:719:3605":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13812:4518":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9683:19547":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:5639:3328":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:8180:19462":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:44648:6200":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2792:2552":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:816:2258":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"21:766:2341":{"crate_id":21,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:12419:4095":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10187:2926":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:7428:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:8606:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:792:6438":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:11544:3915":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10516:3785":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:8047:4811":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:40936:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9312:6885":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:2065:3321":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:925:6937":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8813:6961":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:5527:2811":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4099:3333":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"20:2384:2259":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:20842:3464":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:729:2244":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:31759:4949":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"11:2178:2258":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:8931:3713":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5630:19435":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10015:19620":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:41738:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:515:3587":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:6106:3345":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9534:6889":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13443:4400":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:8548:19519":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:22373:3466":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:10637:7407":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11037:19525":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4900:5573":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:42773:2921":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22010:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:3130:29996":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1085:18511":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8358:6366":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6535:3289":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:8788:3708":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9443:6887":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:9201:31562":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"21:869:231":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:5698:5648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7743:4583":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1571:5140":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:8598:19521":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:6911:2178":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:7276:3347":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12915:4254":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4483:5400":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12536:4118":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11770:3976":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:30005:6060":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:7149:6668":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:1852:2641":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:5921:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:39542:2810":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4457:5389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12033:4023":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:641:7210":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:42190:6171":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:45768:6245":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:4413:2897":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:8170:6639":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10080:19621":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13763:4503":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:1072:1911":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:9453:19534":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:562:3569":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4751:5490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6390:6568":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5805:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:30041:31609":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12592:4125":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"20:2509:2965":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:45060:6218":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:810:6939":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41686:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:6:670":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:9048:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:4139:2340":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:3446:4603":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4451:5386":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10635:3794":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:1514:5109":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:245:34787":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:6368:7457":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:4327:4611":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9886:19563":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11515:6841":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:11090:2909":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4649:5440":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10649:6484":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:985:6620":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:7145:2647":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12224:4064":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9350:34750":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10555:6472":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:6488:6573":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:679:7212":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:50279:6305":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:43229:12604":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2931:18578":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:3398:7149":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4433:7379":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:39471:7148":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:21610:6690":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1564:2340":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:481:6447":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:2782:2592":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13240:4348":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:20689:7505":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1710:5233":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:7546:3414":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1716:5234":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:30575:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8241:7377":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:20414:32052":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:21357:7504":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5813:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11930:1475":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4988:29381":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7195:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2131:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:39511:2808":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:113:6873":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1586:2639":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:3585:4604":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7162:6671":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3970:7354":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13385:4382":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6832:3424":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"1:588:7206":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13194:4335":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4101:6957":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:46672:6294":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:5717:7456":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:420:3661":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2830:4572":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9424:3722":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12194:4045":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9885:6738":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:300:6646":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3112:2639":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4429:5373":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4322:5321":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13488:4411":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13865:4527":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:44694:6207":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4900:7412":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:2524:4559":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9822:19550":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7572:34660":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:7693:7251":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:42209:2947":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:681:6452":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"20:1205:194":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"16:6164:6561":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11210:6397":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10569:6476":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:6505:3341":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:42517:2935":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11615:3939":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:45194:6221":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4237:5262":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:8285:5870":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:40803:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5722:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:96:6870":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13612:4457":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:4236:7005":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12522:4117":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:8611:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1065:7223":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:3190:32263":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13024:4295":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:41432:2384":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:262:3305":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:1410:6939":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4812:989":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5065:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13803:4514":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21749:6695":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8155:2831":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13625:4463":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:41966:6746":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6667:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43250:6790":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:771:3308":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10940:3419":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3989:31572":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4422:5370":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3937:3305":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"21:880:2149":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:6643:5900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3047:18580":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:1034:6892":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:45618:6244":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:10201:2922":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:40508:6145":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:1677:5217":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:20601:7510":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:7498:6625":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:3713:2643":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"9:352:18445":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:42755:2925":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:7487:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:7953:29382":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4818:4624":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12259:4075":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2594:4562":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"15:198:6926":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11573:3924":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:3205:2572":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7767:19458":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43641:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:7566:32054":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7697:4585":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:42801:6761":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13053:4302":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1568:2628":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11081:6396":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:9276:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:21092:7506":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11913:1036":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9853:6905":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:43283:6796":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12113:4034":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6904:4696":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:43628:6181":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6132:6558":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10505:6919":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:43240:6786":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11036:24094":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7103:6383":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:40862:2628":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44463:6193":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11931:1472":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:39949:2792":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10545:3790":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:7521:6021":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7824:6816":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:8996:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:12770:4141":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6793:6602":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3150:2617":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4904:4627":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:7440:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9557:3732":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11721:3951":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40468:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11522:6841":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11813:3987":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"19:0:1018":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11653:3947":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11821:3989":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:1003:7223":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:6364:2792":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:7463:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:5725:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10026:6906":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:21645:6044":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:11557:12588":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6876:4586":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8805:2340":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:6622:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:10686:2937":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10660:3795":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4571:5416":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:11552:12591":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5554:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11928:1473":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:3058:7332":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:12168:31847":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8063:7293":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"15:0:2407":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11879:3998":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11282:2244":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:652:3584":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:43178:6784":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:4069:3333":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12282:4076":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:825:2244":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:5684:7454":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12622:3795":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8951:23914":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:1617:5169":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6717:6588":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10402:19641":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:1947:6900":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8517:6822":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9748:3732":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:48991:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7601:7197":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:561:5085":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5616:6499":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:4845:4625":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"14:202:12605":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6291:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:4846:3333":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6530:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:493:5043":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:8256:4823":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:11778:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:1529:3333":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3980:7355":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:41425:2383":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6061:18551":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:703:2964":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:4369:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6767:6601":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13879:4530":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:822:7219":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11044:6178":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:7293:4734":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:925:2316":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:10691:19652":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:44423:6191":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:870:2628":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:8521:19518":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5594:4582":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:21699:31596":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:834:7220":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5643:6503":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5938:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7669:4594":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5772:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:9070:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:11258:6839":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2865:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:40597:6741":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:393:6933":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7386:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:3515:2340":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11100:6387":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10721:3800":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:6541:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"14:160:6995":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:45114:6220":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13399:4389":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:39689:2829":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:43446:6807":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:3160:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6243:34705":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:9733:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:39561:2819":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4301:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42447:2919":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11785:3980":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13015:4291":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11891:4000":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9876:3582":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13842:4523":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3908:7350":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3388:12627":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"11:2205:2637":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:21622:31573":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:10118:2928":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12158:4039":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.56/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}