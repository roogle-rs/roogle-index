{"root":"0:0:1050","crate_version":"1.0.20","includes_private":false,"index":{"2:13348":{"id":"2:13348","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12445:1316","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13349:776","2:13350:2612","2:13351:60407","2:13352:60408","2:13354:60409","2:13357:58366","2:13358:60410","2:13359:291","2:13360:57221","2:13361:57217","2:13363:57218","2:13365:57219","2:13367:57220","2:13369:3267","2:13370:60411","2:13371:57240","2:13372:57241","2:13373:3808","2:13374:3526","2:13375:2880","2:13376:31801","2:13377:31791","2:13378:4276","2:13379:60412","2:13380:31786","2:13381:54648","2:13384:2185","2:13387:2317","2:13390:2646","2:13394:2611","2:13398:56533","2:13401:31658","2:13404:57250","2:13407:60413","2:13410:60414","2:13413:57252","2:13416:57254","2:13419:60415","2:13422:60416","2:13425:2437","2:13428:60417","2:13431:60418","2:13434:60419","2:13437:60420","2:13439:60421","2:13441:60422","2:13443:60423","2:13444:60424","2:13445:60425","2:13448:60426","2:13451:14416","2:13454:57256","2:13457:60427","2:13460:60428","2:13463:60429","2:13466:1929","2:13468:3961","2:13469:55049","2:13470:55050","2:13471:55051","2:13472:60430","2:13474:3085","2:13475:60431"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13358:60410":{"id":"2:13358:60410","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10262:2772":{"id":"2:10262:2772","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6078:3043":{"id":"5:6078:3043","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:1602":{"id":"0:148:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[161,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:57240":{"id":"2:13371:57240","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15759:2360"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5714:3010":{"id":"1:5714:3010","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5715:5354"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3774:2498":{"id":"2:3774:2498","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8358:135":{"id":"2:8358:135","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8360:669"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[166,0],"end":[171,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"bool"},"items":["0:150:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3313:2519":{"id":"2:3313:2519","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:170","2:3316:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8406:119":{"id":"2:8406:119","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8407:2606","2:8408:2607","2:8409:2608","2:8410:2609","2:8414:2610","2:8417:2611"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13354:60409":{"id":"2:13354:60409","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15759:2360"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13004:3498":{"id":"2:13004:3498","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13006:3519","2:13007:905","2:13008:59620","2:13009:59621"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:150:1602":{"id":"0:150:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[167,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13363:57218":{"id":"2:13363:57218","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i64"},"items":["0:410:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:37:2101":{"id":"0:37:2101","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[93,4],"end":[103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8362:150","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3372:2528":{"id":"2:3372:2528","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:170","2:3375:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13404:57250":{"id":"2:13404:57250","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12985:2881","str::split":"1:15759:2360","`DoubleEndedIterator`":"2:8406:119","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49322:2811","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13416:57254":{"id":"2:13416:57254","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15753:2355","str::splitn":"1:15759:2360","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49426:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416:1602":{"id":"0:416:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3467:2537":{"id":"2:3467:2537","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13475:60431":{"id":"2:13475:60431","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15753:2355"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49621:3791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[33,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:72:1843","0:73:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13360:57221":{"id":"2:13360:57221","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15770:2369"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:645":{"id":"0:390:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[58,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:210","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:79:1843","0:80:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3070:3624":{"id":"2:3070:3624","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3069:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[79,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:124:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4745:3494":{"id":"2:4745:3494","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4746:2094","2:4747:59641","2:4748:2616"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:2317":{"id":"2:13387:2317","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12985:2881","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:2535":{"id":"2:3401:2535","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:1210"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13376:31801":{"id":"2:13376:31801","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15759:2360"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49578:3787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3737:2497":{"id":"2:3737:2497","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:430:1602":{"id":"0:430:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:428:1602":{"id":"0:428:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5828:2783":{"id":"5:5828:2783","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:170","5:5831:418"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:408:1602":{"id":"0:408:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:388:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[173,0],"end":[177,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Group","id":"21:935:2189","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:152:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3245:106":{"id":"2:3245:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7886:2672":{"id":"2:7886:2672","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7887:59718","2:7888:59719","2:7889:59716","2:7890:59714","2:7891:59720","2:7892:59717","2:7893:59715"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:76:645":{"id":"0:76:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[48,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:418:1602":{"id":"0:418:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1602":{"id":"0:154:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6376:2986":{"id":"1:6376:2986","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6377:55084","1:6378:7224","1:6379:55085","1:6380:55086","1:6381:55087","1:6382:55088"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6707:2983":{"id":"1:6707:2983","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6708:56008"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:64:645":{"id":"0:64:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[13,4],"end":[13,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:120:2219":{"id":"0:120:2219","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[71,4],"end":[76,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:427":{"id":"0:427","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f32"},"items":["0:428:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13422:60416":{"id":"2:13422:60416","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[197,0],"end":[201,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:920:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:160:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:394:645":{"id":"0:394:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10252:2307":{"id":"2:10252:2307","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10253:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3355:2529":{"id":"2:3355:2529","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3356:170","2:3357:936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8325:2688":{"id":"2:8325:2688","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8327:2660"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3481:129":{"id":"2:3481:129","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:363"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13469:55049":{"id":"2:13469:55049","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10254:2310":{"id":"2:10254:2310","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10255:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3338:2526":{"id":"2:3338:2526","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3340:1332"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6778:2991":{"id":"1:6778:2991","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6779:55021"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5636:3003":{"id":"1:5636:3003","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5637:56665","1:5638:56667","1:5639:56666","1:5640:56668"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:208":{"id":"2:3247:208","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22992:3554":{"id":"2:22992:3554","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23641:3549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22983:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:138:1602":{"id":"0:138:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3240:2182":{"id":"2:3240:2182","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6474:3121":{"id":"1:6474:3121","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6475:55388","1:6476:55389"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:422:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10258:2309":{"id":"2:10258:2309","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10259:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13439:60421":{"id":"2:13439:60421","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9237:3104":{"id":"1:9237:3104","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9238:56063","1:9239:56064","1:9240:56065","1:9241:56066","1:9242:3819","1:9243:39146","1:9244:56062"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6404:211":{"id":"5:6404:211","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:2184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5652:3004":{"id":"1:5652:3004","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:5354","1:5654:7691"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3324:2521":{"id":"2:3324:2521","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3326:170","2:3327:1086"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13398:56533":{"id":"2:13398:56533","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15759:2360","self::pattern":"2:12985:2881","str::rsplit":"1:15759:2360","`DoubleEndedIterator`":"2:8406:119","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49304:2803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13698:137":{"id":"2:13698:137","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13699:170","2:13700:997"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"usize"},"items":["0:426:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63:1606":{"id":"0:63:1606","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[11,0],"end":[21,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.","links":{"`format_ident!`":"0:47:2165","`Ident`":"21:981:2172"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:64:645","0:65:1843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:66","0:70","0:74","0:77","0:383","0:385","0:387","0:389","0:391","0:393","0:395","0:397","0:399","0:401"]}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[61,0],"end":[104,1]},"visibility":{"restricted":{"parent":"0:4:1600","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TokenStreamExt","id":"0:18:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:30:2082","0:32:2092","0:34:2097","0:37:2101"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10256:2308":{"id":"2:10256:2308","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10257:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3318:2518":{"id":"2:3318:2518","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:170","2:3321:544"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13380:31786":{"id":"2:13380:31786","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49596:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i8"},"items":["0:404:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10526:3145":{"id":"2:10526:3145","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10527:145","2:10528:33101","2:10529:56344"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5644:3002":{"id":"1:5644:3002","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5645:5354","1:5646:58509","1:5647:58510"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13468:3961":{"id":"2:13468:3961","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12924:2469":{"id":"2:12924:2469","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12925:125","2:12926:55123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:417":{"id":"0:417","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u16"},"items":["0:418:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13407:60413":{"id":"2:13407:60413","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15753:2355","`DoubleEndedIterator`":"2:8406:119","str::rsplit_terminator":"1:15759:2360","str::split":"1:15759:2360","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49354:3777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1605":{"id":"0:18:1605","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[10,0],"end":[59,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:19:2082","0:21:2092","0:23:2097","0:26:2101"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"private::Sealed","id":"0:44:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:29"]}},"0:34:2097":{"id":"0:34:2097","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[79,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8362:150","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13375:2880":{"id":"2:13375:2880","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49290:3040","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:412:1602":{"id":"0:412:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2933:173":{"id":"2:2933:173","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2935:981","2:2936:809","2:2937:775","2:2938:698","2:2939:681"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6354:2983":{"id":"1:6354:2983","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6355:3383","1:6356:3384","1:6357:56060","1:6358:56081","1:6360:56085","1:6362:56082","1:6363:56083","1:6365:56084"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:160:1602":{"id":"0:160:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13351:60407":{"id":"2:13351:60407","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:1602":{"id":"0:156:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[186,4],"end":[188,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13413:57252":{"id":"2:13413:57252","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12985:2881","str::rsplitn":"1:15759:2360","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49408:2815","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:60415":{"id":"2:13419:60415","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3244:205":{"id":"2:3244:205","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2923:166":{"id":"2:2923:166","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2924:401","2:2925:2602","2:2926:2603","2:2927:2604"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:163:2219":{"id":"0:163:2219","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[208,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[109,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:141:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8841:2555":{"id":"2:8841:2555","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13010:3500":{"id":"2:13010:3500","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13012:2606","2:13013:59049","2:13014:59050"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13004:3498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8371:2579":{"id":"2:8371:2579","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8373:2103","2:8375:2613","2:8376:2614"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[185,0],"end":[189,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Punct","id":"21:959:2191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:156:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4908:3087":{"id":"1:4908:3087","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4909:2266","1:4910:55669"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13361:57217":{"id":"2:13361:57217","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:410:1602":{"id":"0:410:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3696:136":{"id":"2:3696:136","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3698:672"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u16"},"items":["0:394:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3330:2520":{"id":"2:3330:2520","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:170","2:3332:896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8838:2554":{"id":"2:8838:2554","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:398:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8321:2689":{"id":"2:8321:2689","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8323:2659"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4623:3036":{"id":"1:4623:3036","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4624:56375","1:4625:39621","1:4626:56376","1:4627:56377"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i128"},"items":["0:412:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5564:3081":{"id":"1:5564:3081","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5565:58481","1:5566:4041"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:47:2165":{"id":"0:47:2165","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::Octal":"2:10252:2307","proc_macro2::Span":"21:914:1844","crate::IdentFragment":"0:63:1606","std::fmt::LowerHex":"2:10256:2308","std::fmt::UpperHex":"2:10258:2309","proc_macro2::Span::call_site":"21:914:1844","std::fmt::Binary":"2:10254:2310","proc_macro2::Ident":"21:981:2172","`std::fmt`":"5:5088:645","`format!`":"5:6:656"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[191,0],"end":[195,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Literal","id":"21:986:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:158:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:396:645":{"id":"0:396:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:60429":{"id":"2:13463:60429","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12985:2881","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:60414":{"id":"2:13410:60414","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15753:2355","self::pattern":"2:12985:2881","str::split_terminator":"1:15759:2360","str::split":"1:15759:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49372:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3543:2540":{"id":"2:3543:2540","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:737"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3539:2539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:69:645":{"id":"0:69:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13441:60422":{"id":"2:13441:60422","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12995:2876":{"id":"2:12995:2876","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12997:3498","2:12998:59405","2:12999:59406","2:13000:59407","2:13001:59409","2:13002:59408","2:13003:59410"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2857:104":{"id":"2:2857:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2858:395","2:2859:397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2569:126":{"id":"1:2569:126","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2570:7767","1:2572:2338","1:2573:56462","1:2574:56463"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10250:118","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1079:3083":{"id":"1:1079:3083","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2479","1:1081:3961","1:1082:55047","1:1083:55048","1:1084:55049","1:1085:55050","1:1086:55051"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13394:2611":{"id":"2:13394:2611","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47340:165","prim@char":"1:15753:2355","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3397:2534":{"id":"2:3397:2534","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:344"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5570:3079":{"id":"1:5570:3079","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:4739","1:5572:58366"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10481:141":{"id":"2:10481:141","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10482:700","2:10484:58485"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:210":{"id":"5:783:210","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2479","5:785:2668","5:786:2669"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[103,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"5:5310:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:138:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13454:57256":{"id":"2:13454:57256","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12985:2881","prim@char":"1:15753:2355"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u32"},"items":["0:420:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"20:676:2976":{"id":"20:676:2976","crate_id":20,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:677:61380"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3393:2533":{"id":"2:3393:2533","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3395:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:23:2097":{"id":"0:23:2097","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[44,4],"end":[48,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8362:150","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13428:60417":{"id":"2:13428:60417","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15759:2360","prim@char":"1:15753:2355","`DoubleEndedIterator`":"2:8406:119","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49526:3785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[43,0],"end":[56,1]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:981:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:75:1843","0:76:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3521:2547":{"id":"2:3521:2547","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:225","2:3524:195","2:3525:59271"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:392:645":{"id":"0:392:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:429":{"id":"0:429","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:430:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[23,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:68:1843","0:69:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13434:60419":{"id":"2:13434:60419","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15753:2355","`DoubleEndedIterator`":"2:8406:119","str::match_indices":"1:15759:2360","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49472:3782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5702:3007":{"id":"1:5702:3007","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5703:55701"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:73:645":{"id":"0:73:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"str"},"items":["0:386:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:422:1602":{"id":"0:422:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:1602":{"id":"0:158:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[192,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u128"},"items":["0:424:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:21:2092":{"id":"0:21:2092","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[35,4],"end":[38,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8362:150","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:22798:3107":{"id":"2:22798:3107","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22788:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:414:1602":{"id":"0:414:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8362:150":{"id":"2:8362:150","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8363:2094","2:8364:2553","2:8365:751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3962:68":{"id":"2:3962:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3963:1403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3148:215":{"id":"2:3148:215","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:126","2:3151:1389"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8845:2687":{"id":"2:8845:2687","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7886:2672","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3539:2539":{"id":"2:3539:2539","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3541:170","2:3542:736"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13444:60424":{"id":"2:13444:60424","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"bool"},"items":["0:384:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u32"},"items":["0:396:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13470:55050":{"id":"2:13470:55050","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10264:2773":{"id":"2:10264:2773","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9217:2500":{"id":"2:9217:2500","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:79:1843":{"id":"0:79:1843","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8560:156":{"id":"2:8560:156","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8561:2094","2:8562:905","2:8563:2615","2:8566:2616","2:8567:481","2:8569:2322","2:8572:2617","2:8573:2618","2:8574:2619","2:8575:2620","2:8577:2621","2:8579:2622","2:8580:2623","2:8582:824","2:8585:2624","2:8592:2625","2:8594:2315","2:8597:2106","2:8598:2626","2:8599:2627","2:8601:2628","2:8603:2629","2:8606:1284","2:8607:2630","2:8608:2631","2:8612:2632","2:8615:2633","2:8616:2634","2:8617:2635","2:8619:2636","2:8620:2273","2:8622:2637","2:8625:2638","2:8627:2639","2:8637:2640","2:8652:2641","2:8654:2642","2:8658:2643","2:8667:2320","2:8670:2644","2:8672:2645","2:8675:264","2:8682:281","2:8689:2646","2:8696:2647","2:8705:2648","2:8715:998","2:8722:2649","2:8729:2602","2:8730:2603","2:8731:2650","2:8743:2651","2:8750:2652","2:8762:2653","2:8769:2654","2:8770:2655","2:8775:2656","2:8778:2657","2:8781:2658","2:8782:2659","2:8784:2660","2:8786:401","2:8789:2661","2:8792:981","2:8795:2662","2:8798:590","2:8801:2663","2:8804:890","2:8806:809","2:8808:775","2:8810:698","2:8812:681","2:8814:2664","2:8815:2665","2:8823:2666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3383:2531":{"id":"2:3383:2531","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:170","2:3386:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:132:1602":{"id":"0:132:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:60425":{"id":"2:13445:60425","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15753:2355","self::pattern":"2:12985:2881"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13015:3501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13384:2185":{"id":"2:13384:2185","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15753:2355","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3610:2468":{"id":"2:3610:2468","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:58649","2:3613:58650","2:3614:54648"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:404:1602":{"id":"0:404:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6870:2988":{"id":"1:6870:2988","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6871:55136"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369:1842":{"id":"0:369:1842","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[612,0],"end":[616,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[203,0],"end":[211,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:162:1602","0:163:2219"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3702:2544":{"id":"2:3702:2544","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3704:53882"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13474:3085":{"id":"2:13474:3085","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15753:2355"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49612:3086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6780:2992":{"id":"1:6780:2992","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6781:55996"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4605:2771":{"id":"1:4605:2771","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4606:2440","1:4607:56224","1:4609:56225","1:4610:4199","1:4611:56226","1:4612:56227","1:4613:55379","1:4622:2636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:124:1602":{"id":"0:124:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5832:2784":{"id":"5:5832:2784","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:170","5:5835:2323"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10250:118":{"id":"2:10250:118","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10251:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:2524":{"id":"2:3342:2524","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:876"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3350:2525":{"id":"2:3350:2525","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1087"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3141:134":{"id":"2:3141:134","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3143:666"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:60430":{"id":"2:13472:60430","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15753:2355"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49603:3790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12432:3957":{"id":"2:12432:3957","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12433:2094","2:12434:59696"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3235:199":{"id":"2:3235:199","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:398:645":{"id":"0:398:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3334:2476":{"id":"2:3334:2476","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:426:1602":{"id":"0:426:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:2218":{"id":"0:119:2218","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[61,4],"end":[65,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3454:115":{"id":"2:3454:115","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:209","2:3456:529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:117:1607":{"id":"0:117:1607","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[12,0],"end":[77,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:118:1602","0:119:2218","0:120:2219"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:121","0:125","0:129","0:133","0:136","0:139","0:142","0:144","0:403","0:405","0:407","0:409","0:411","0:413","0:415","0:417","0:419","0:421","0:423","0:425","0:427","0:429","0:147","0:149","0:151","0:153","0:155","0:157","0:159","0:161"]}},"0:68:1843":{"id":"0:68:1843","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[160,0],"end":[164,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"char"},"items":["0:148:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6776:2989":{"id":"1:6776:2989","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6777:56782"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23641:3549":{"id":"2:23641:3549","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23642:3553"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23637:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"isize"},"items":["0:414:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4630:3039":{"id":"1:4630:3039","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4631:56529","1:4632:56530","1:4633:56532","1:4635:3038","1:4636:56531","1:4638:56533","1:4639:4276"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4548:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9218:2499":{"id":"2:9218:2499","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10885:202":{"id":"2:10885:202","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10887:170","2:10888:57217","2:10889:57218","2:10890:57219","2:10891:57220","2:10892:736","2:10893:737"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10876:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:384:645":{"id":"0:384:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[179,0],"end":[183,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:981:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:154:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6098:2680":{"id":"5:6098:2680","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u128"},"items":["0:400:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13451:14416":{"id":"2:13451:14416","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12985:2881","prim@char":"1:15753:2355"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:645":{"id":"0:386:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:424:1602":{"id":"0:424:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[85,0],"end":[89,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:128:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"usize"},"items":["0:402:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:75:1843":{"id":"0:75:1843","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3144:216":{"id":"2:3144:216","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3146:126","2:3147:1390"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13367:57220":{"id":"2:13367:57220","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:128:1602":{"id":"0:128:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[86,4],"end":[88,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145:1602":{"id":"0:145:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:420:1602":{"id":"0:420:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13374:3526":{"id":"2:13374:3526","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49280:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6077:61065":{"id":"5:6077:61065","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2221","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[123,0],"end":[127,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:145:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6602:3005":{"id":"1:6602:3005","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6603:55152","1:6604:7147","1:6605:7148","1:6606:7150","1:6607:7149","1:6608:7151","1:6609:7152","1:6610:7154","1:6611:5395","1:6612:7157","1:6613:7158","1:6614:7159","1:6615:7160","1:6616:7161","1:6617:7162","1:6618:7155","1:6619:7156"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13349:776":{"id":"2:13349:776","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:60426":{"id":"2:13448:60426","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15753:2355","self::pattern":"2:12985:2881"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10243:109":{"id":"2:10243:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10244:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13370:60411":{"id":"2:13370:60411","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15759:2360","crate::ops::IndexMut":"2:3543:2540","str::slice_unchecked":"1:15759:2360"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:291":{"id":"2:13359:291","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15770:2369","str::as_mut_ptr":"1:15759:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13471:55051":{"id":"2:13471:55051","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3132:75":{"id":"2:3132:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134:292"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3487:131":{"id":"2:3487:131","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:170","2:3490:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"char"},"items":["0:390:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3308:2522":{"id":"2:3308:2522","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:170","2:3311:1331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3691:212":{"id":"2:3691:212","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3692:170","2:3693:2544","2:3694:671","2:3695:356"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3696:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10193:2771":{"id":"2:10193:2771","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10194:1503","2:10195:59508","2:10197:55379"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13460:60428":{"id":"2:13460:60428","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15753:2355","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13372:57241":{"id":"2:13372:57241","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15759:2360"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7695:3194":{"id":"1:7695:3194","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7696:56164"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13365:57219":{"id":"2:13365:57219","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:60420":{"id":"2:13437:60420","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10491:145":{"id":"2:10491:145","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10492:637","2:10493:2440","2:10494:55749","2:10495:55750","2:10496:55751","2:10497:55752","2:10498:55753","2:10499:55754","2:10500:55755","2:10501:55756","2:10502:55757","2:10503:55758","2:10504:55759","2:10505:55760","2:10506:55761","2:10507:1503"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3276:2494":{"id":"2:3276:2494","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3389:2532":{"id":"2:3389:2532","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3391:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4548:3017":{"id":"1:4548:3017","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4549:3318","1:4550:55216","1:4552:55217","1:4553:55218","1:4554:3033","1:4555:55219","1:4556:55215","1:4558:55220","1:4559:2636","1:4560:2880","1:4561:2620","1:4563:2630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14097:140":{"id":"2:14097:140","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14098:265","2:14099:504","2:14100:268","2:14101:1063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:2536":{"id":"2:3406:2536","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:19:2082":{"id":"0:19:2082","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[14,4],"end":[16,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:920:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:406:1602":{"id":"0:406:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3346:2523":{"id":"2:3346:2523","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:545"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13401:31658":{"id":"2:13401:31658","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12985:2881","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12777:2817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13369:3267":{"id":"2:13369:3267","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3539:2539","`str`":"1:15759:2360","str::slice_mut_unchecked":"1:15759:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13373:3808":{"id":"2:13373:3808","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49274:2877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u8"},"items":["0:416:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13357:58366":{"id":"2:13357:58366","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12456:3922"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:1602":{"id":"0:141:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[110,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135:1602":{"id":"0:135:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[98,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:1602":{"id":"0:118:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[55,4],"end":[55,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6704:3109":{"id":"1:6704:3109","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6705:56051","1:6706:58469"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i16"},"items":["0:406:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13390:2646":{"id":"2:13390:2646","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15753:2355","`None`":"2:47340:165","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13713:149":{"id":"2:13713:149","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13714:170","2:13715:149","2:13716:750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:2542":{"id":"2:3679:2542","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3610:2468","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:60423":{"id":"2:13443:60423","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3135:74":{"id":"2:3135:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3137:2605"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3243:206":{"id":"2:3243:206","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80:645":{"id":"0:80:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13378:4276":{"id":"2:13378:4276","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49558:3042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[117,0],"end":[121,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"str"},"items":["0:143:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13379:60412":{"id":"2:13379:60412","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49568:3786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3377:2530":{"id":"2:3377:2530","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:170","2:3380:1209"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:402:645":{"id":"0:402:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13377:31791":{"id":"2:13377:31791","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15759:2360"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49587:3788","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6081:61066":{"id":"5:6081:61066","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3303:2475":{"id":"2:3303:2475","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3305:170","2:3306:253"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5692:3006":{"id":"1:5692:3006","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5693:58396","1:5694:58397","1:5695:58398","1:5696:58399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:388:645":{"id":"0:388:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1843":{"id":"0:65:1843","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5706:3008":{"id":"1:5706:3008","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5707:55380"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13352:60408":{"id":"2:13352:60408","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32:2092":{"id":"0:32:2092","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[69,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8362:150","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:1929":{"id":"2:13466:1929","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12924:2469","FromStr::Err":"2:12924:2469"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12924:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12924:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:143:1602":{"id":"0:143:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[118,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3362:2527":{"id":"2:3362:2527","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:170","2:3365:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2835:2477":{"id":"2:2835:2477","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2837:55000"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3367:2242":{"id":"2:3367:2242","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:170","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6097:61069":{"id":"5:6097:61069","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2221","`String`":"5:8352:204"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:49:1601","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u8"},"items":["0:392:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:368:1050":{"id":"0:368:1050","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[473,0],"end":[477,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro::TokenStream`":"20:2976:1783","`format_ident!`":"0:47:2165","`proc_macro2::TokenStream`":"21:909:1783"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"},"2:13350:2612":{"id":"2:13350:2612","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:2101":{"id":"0:26:2101","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[54,4],"end":[58,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8362:150","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:162:1602":{"id":"0:162:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[204,4],"end":[206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6096:61068":{"id":"5:6096:61068","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6099:55047":{"id":"5:6099:55047","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15759:2360"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22947:15903":{"id":"2:22947:15903","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22948:6303","2:22949:59709","2:22950:59710"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22940:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6100:55048":{"id":"5:6100:55048","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15759:2360"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2892:123":{"id":"2:2892:123","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:30:2082":{"id":"0:30:2082","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[62,4],"end":[67,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:920:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1050":{"id":"0:0:1050","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1434,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.20\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:18:1605","0:63:1606","0:117:1607","0:47:2165","0:368:1050","0:369:1842"]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[97,0],"end":[101,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2221","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:135:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[91,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:210","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:132:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2887:172":{"id":"2:2887:172","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:590","2:2890:890"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10260:178":{"id":"2:10260:178","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10261:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3484:130":{"id":"2:3484:130","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:364"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3487:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:72:1843":{"id":"0:72:1843","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:914:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:61067":{"id":"5:6084:61067","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[141,0],"end":[158,1]},"visibility":{"restricted":{"parent":"0:82:1602","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i32"},"items":["0:408:1602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13431:60418":{"id":"2:13431:60418","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15759:2360","prim@char":"1:15753:2355","self::pattern":"2:12985:2881","`DoubleEndedIterator`":"2:8406:119"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49454:3781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2832:97":{"id":"2:2832:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2834:2173"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:152:1602":{"id":"0:152:1602","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[174,4],"end":[176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:909:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:2437":{"id":"2:13425:2437","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12985:2881","`DoubleEndedIterator`":"2:8406:119","str::matches":"1:15759:2360","prim@char":"1:15753:2355"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49508:3784","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3213:114":{"id":"2:3213:114","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3214:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3138:148":{"id":"2:3138:148","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3140:2105"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13381:54648":{"id":"2:13381:54648","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15753:2355","self::pattern":"2:12985:2881"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3478:2538":{"id":"2:3478:2538","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1316","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:61065","5:6078:3043","5:6081:61066","5:6084:61067","5:6096:61068","5:6097:61069","5:6098:2680","5:6099:55047","5:6100:55048"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13015:3501":{"id":"2:13015:3501","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5658:3005":{"id":"1:5658:3005","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:6800","1:5660:55701","1:5661:5354","1:5662:55702","1:5663:3383","1:5664:3384","1:5665:55703","1:5666:1280","1:5667:55704","1:5668:55705","1:5669:55706","1:5670:55707","1:5671:55708","1:5672:55709","1:5673:55710","1:5674:55711"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:400:645":{"id":"0:400:645","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14169:2506":{"id":"2:14169:2506","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14170:58414","2:14171:58415","2:14172:58416","2:14173:58417","2:14174:58418","2:14175:58419","2:14176:2636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8431:2578":{"id":"2:8431:2578","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8432:776","2:8433:2612"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13457:60427":{"id":"2:13457:60427","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12985:2881","prim@char":"1:15753:2355"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3500","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:11277:3110":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6208:4393":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:10491:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:13843:3188":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:14376:7692":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:569:6427":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4501:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"0:117:1607":{"crate_id":0,"path":["quote","ToTokens"],"kind":"trait"},"6:670:39911":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"8:0:2326":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5580:4564":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:5073:2899":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9689:61301":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7236:4419":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:47382:2266":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:56000:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3506:4594":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11458:5370":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:4489:2681":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:5001:3720":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10758:2924":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:49526:3785":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10950:7752":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:50012:3796":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:1501:3129":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:46825:2677":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4523:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4033:6711":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12494:5576":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1700:6582":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:3145:4597":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:45790:186":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9665:5041":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:11406:5352":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:45869:2543":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:14406:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:49722:3505":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:14846:3231":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:12995:2876":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:632:6462":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:49890:3514":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10271:7809":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:543:6407":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:432:2221":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:160:4230":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:1476:2869":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7360:183":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:48428:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"19:117:5190":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:15258:4257":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:15778:2377":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:9404:5285":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:45956:3707":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:7264:4338":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:10716:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:3543:5022":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1522:6466":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:0:781":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9627:3356":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:52167:3568":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:53097:3558":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:3365:2574":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:4922:6060":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:27918:3457":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:5314:5281":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11178:3363":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2460:7771":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:3957:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:50036:3803":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:13231:3376":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11588:5397":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:1908:40883":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10028:46499":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5197:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10912:46706":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:24567:3836":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:7714:2698":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4521:3025":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7827:3303":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:50032:3802":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:15503:5052":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:1762:4991":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11184:3364":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5371:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:1195:7764":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9551:4700":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1723:6592":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:15110:3361":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:5898:3436":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9849:61305":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11199:5346":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12155:5507":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:2976:1783":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:5170:2902":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10460:3274":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8032:3304":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:12431:5567":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"12:930:3130":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4704:6053":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2192:2575":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:49372:3778":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2968:4585":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:7764:222":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:47511:2266":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4276:3346":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:23993:7295":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10553:3139":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:14338:3111":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:48464:2890":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"20:2754:2189":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:12327:5531":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:48124:2309":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2843:4582":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:5410:3025":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:3962:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:49105:2798":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4073:6729":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12408:5566":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:8321:2689":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3244:205":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"20:1074:1783":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"6:5945:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5969:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:578:6433":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:24601:3837":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:1708:6583":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:3350:2525":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"3:0:416":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"18:857:4778":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2166:2869":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6636:4339":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:903:3278":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7549:4331":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7250:4420":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:5790:4383":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12568:5587":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11915:5457":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:6468:2869":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10353:4716":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5996:4388":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11019:2803":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:5561:4374":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:32204:3883":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:8808:2677":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:49204:2810":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9005:46446":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12725:5615":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7160:56820":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22551:59265":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10827:4733":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:8430:2576":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:2366:586":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5386:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:52245:3575":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2170:2576":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:5652:3004":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5469:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:754:61309":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:50083:3880":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:10690:3316":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13370:5837":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:4008:7750":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:46448:2691":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:205:2913":{"crate_id":21,"path":["proc_macro2","fallback","unforce"],"kind":"function"},"17:11539:5386":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:11362:2813":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:3243:206":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10407:4710":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11026:7756":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7042:4631":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:3117:3318":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:3966:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7870:4329":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6100:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:51388:3594":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10864:5331":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3774:2498":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:3862:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11238:3434":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:50966:3577":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6176:4392":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3737:2497":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"20:2787:2191":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"1:15774:2373":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:5636:3003":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4331:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5384:4365":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7073:4410":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7875:5024":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:14363:3015":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:3070:2075":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:4193:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12195:5512":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:15759:2360":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"12:1667:4240":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12343:5536":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12076:3208":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:5346:4321":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11981:5477":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:14413:3035":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10635:5296":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:157:39581":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13054:5744":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:15232:55201":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8825:3409":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:5241:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11045:46452":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12756:5621":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45657:2548":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:12066:3217":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4095:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11304:46454":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7146:4411":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:11399:3164":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:49408:2815":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"12:2323:6305":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:48376:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:52431:3581":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4005:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6110:4361":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6238:4325":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:2933:173":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:49290:3040":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:12726:3780":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12287:5524":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:49322:2811":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11015:7755":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4052:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:49223:2809":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:3487:131":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10926:7751":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:46157:3670":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:47340:165":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:45721:183":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:755:2917":{"crate_id":21,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"1:2159:2266":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5505:4372":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2835:2477":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:0:474":{"crate_id":2,"path":["core"],"kind":"module"},"2:46144:3669":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3114:3317":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:49133:2801":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12229:7771":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13532:5881":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47519:2552":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:5542:10684":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:51365:3591":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:8105:3970":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:6:656":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"17:9729:61299":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11164:7683":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:2487:3495":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:32210:59611":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:3338:4573":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:7695:3194":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10571:46641":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11604:5398":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:4392:3056":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:1021:3304":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:50024:3800":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:15223:7546":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"18:694:4788":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:12027:3252":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:54:4216":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:10260:178":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:1432:2552":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4641:6051":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5130:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3444:3048":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12010:5482":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12095:5496":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:15760:2361":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:53261:7455":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:12985:2881":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:8838:2554":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6185:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:4386:6044":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:24011:38821":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7342:4356":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:10481:3282":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5815:4384":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9886:7734":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:47459:177":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3964:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:56026:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:52638:3601":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13488:5867":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:4304:6042":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6577:4403":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5433:4368":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:13396:7773":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"14:56:2172":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:7520:3183":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:10996:2699":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"20:452:61331":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:11196:2804":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7191:56820":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:866:4779":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11378:4659":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:0:2334":{"crate_id":17,"path":["object"],"kind":"module"},"2:23916:7648":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:24033:38813":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:47687:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:7437:4993":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46536:2716":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2859:168":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:49143:2791":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13685:5945":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:51927:3588":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7158:4412":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5456:4369":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:53360:7462":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:463:7759":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4630:3039":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:55987:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10236:4670":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:21:657":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:41:4145":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11089:3097":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"20:2985:2967":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:1450:3125":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:47939:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11767:5432":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6518:4401":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46318:3862":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4203:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:4890:6059":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"12:840:3125":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:1554:6479":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:5832:2784":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:8371:2579":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13637:5908":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"21:914:1844":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"17:12982:5685":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6744:4621":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:11992:5020":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4377:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46466:2700":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11834:170":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:3085:2189":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"16:3287:4593":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:23985:7294":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46476:2701":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46575:2709":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:6396:2704":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:14876:7693":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10833:3228":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12610:5595":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12442:5569":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:3467:2537":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:1511:3131":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:49274:2877":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:1613:2553":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10504:3284":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:4157:4736":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5736:4380":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:15768:2367":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12234:5517":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:354:7637":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:11234:2818":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46173:3672":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3043:60150":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:48394:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:12783:5625":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4702:3626":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:8282:4038":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:24465:3307":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7894:4359":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"12:0:2330":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:11348:2815":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:4714:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:12568:5047":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4494:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:53250:7454":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1623:3135":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3454:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:11376:2816":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6780:4407":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10838:3052":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:3939:6040":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"20:482:4985":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:12559:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:6239:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3377:2530":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10828:3227":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:14714:5050":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2171:7287":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:3245:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:50040:3797":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10071:4760":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6881:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11779:5435":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7378:4327":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7406:4326":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:25107:3697":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:14000:6018":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:365:2463":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"5:3336:3978":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5941:178":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:3338:2526":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4317:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1596:6507":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12507:5577":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3543:2540":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:3978:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:2754:4575":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:2981:2463":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"2:3355:2529":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:4182:3064":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:23899:3689":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46637:2714":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5295:44867":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:53281:7457":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6731:4620":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7333:4342":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4614:55378":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:5868:5002":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"19:0:978":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:14169:2506":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:51848:3600":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5548:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7195:4415":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:784:3128":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10260:5350":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:5783:4993":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"7:85:44421":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13627:5903":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10458:5188":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2773:4608":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7971:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:47729:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:10346:5045":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:11258:3382":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:620:7586":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:6616:7161":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:5221:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:739:61312":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:127:52947":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:12742:3783":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:47603:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"20:2946:4801":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"21:981:2172":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"21:687:2466":{"crate_id":21,"path":["proc_macro2","token_stream"],"kind":"module"},"2:8138:2104":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:15777:2376":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:885:4780":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46863:2685":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:9210:46451":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:8065:2674":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4279:3347":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:5882:5005":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:11956:2553":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1419:2266":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12221:5515":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:50044:3798":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12795:5632":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:49612:3086":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46242:3941":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:4995:6062":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22994:3553":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11616:5401":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:5589:762":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:8160:3967":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5459:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:10252:2307":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:13215:7766":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:10403:4676":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:3241:2495":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13331:5827":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:5563:3656":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5927:4386":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1457:3137":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46565:2708":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7856:4425":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:51515:3571":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:11001:46693":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11006:2713":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8280:3304":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:8288:3164":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:49123:2800":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:14052:3060":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:7582:3187":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4790:6056":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:37472:167":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:50281:3115":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6605:4337":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:155:2461":{"crate_id":21,"path":["proc_macro2","fallback"],"kind":"module"},"17:13119:5781":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:49262:3604":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4614:6050":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6051:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:53322:7460":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46547:2707":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3320:4646":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4535:6049":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:10117:4756":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11233:3431":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4425:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3696:136":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"12:877:2576":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"18:766:5205":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:1105:2190":{"crate_id":20,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"17:13221:5801":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:3972:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:51586:3559":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:189:7796":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:38653:3114":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4127:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1676:6565":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:14000:3496":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1045:3124":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9074:56813":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:10321:5043":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11555:5390":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:584:6436":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5421:4367":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:1235:4022":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10750:3050":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13986:6015":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:14826:7545":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:50048:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:46129:3086":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7738:4422":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:4438:2266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4341:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13842:5985":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6864:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9533:58364":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:1934:2576":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:6614:7159":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:49828:3511":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:9237:3104":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2031:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6091:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11877:3192":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10304:4652":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4371:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7804:4332":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:3241:4591":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"12:1688:4241":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1622:6523":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:47813:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:1043:4986":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"7:0:1454":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2889:4602":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46435:2699":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:15764:2363":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"9:157:4112":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:9839:4677":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:3391:2575":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3330:2520":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4401:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12552:5586":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1655:3138":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"13:232:6302":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11885:7684":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:6999:4409":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2733:4559":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4272:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5522:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:7626:4007":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11678:5409":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6176:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:53222:3561":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:4992:2900":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:9528:5039":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:51076:3590":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5282:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:8234:2564":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1658:3128":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:892:4218":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:7205:2869":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:3135:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:8954:4667":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:51053:3586":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1658:6553":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5414:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1441:3135":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"10:0:2328":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"21:846:1844":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"5:8346:7285":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:8590:3390":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:32198:3222":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5273:4576":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"13:120:44762":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:48687:7672":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:45746:184":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:1236:7739":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"20:0:1021":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"18:837:3498":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"14:250:6257":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3610:2468":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:13748:59585":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"13:0:2324":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:13010:3500":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11244:3374":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4745:3494":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:8363:2865":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8873:3221":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4364:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10656:5298":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7366:2553":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12566:3316":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13540:5884":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:0:2335":{"crate_id":18,"path":["memchr"],"kind":"module"},"14:244:7635":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:14983:3269":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6887:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:10481:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11628:5402":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3141:134":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:8887:952":{"crate_id":2,"path":["core","option"],"kind":"module"},"1:8963:3212":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:965:2277":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:11086:3096":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:3195:4589":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"9:603:44593":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:48361:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:23932:7290":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:49304:2803":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:542:4296":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:48640:3146":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:51220:3555":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4548:3017":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9280:5282":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:51200:7395":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5707:4378":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"15:0:2332":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10317:4655":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:24533:3308":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6554:4402":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12247:5519":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4419:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:15769:2368":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11337:4661":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:3483:2576":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:11982:3249":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:47645:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3070:3624":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11970:5474":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3521:2547":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:4690:3625":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13865:5986":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:4506:6048":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5672:4377":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:15751:2353":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:14720:5051":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:9162:4702":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:2887:172":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6636:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3406:2536":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6910:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46495:2703":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10953:3063":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:10256:2308":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:48117:2308":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9440:5286":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5360:4364":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9039:3207":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23957:3684":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"12:866:2869":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:11141:55206":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:6464:4335":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:6469:2693":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1463:3126":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:9726:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:8374:191":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6807:4408":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4230:6041":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:15754:2356":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:14097:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:6354:2983":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"12:1144:3137":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:2484:46540":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:11269:2811":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:8447:4003":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:57296:7473":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:2548:4027":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:3951:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"20:2897:7583":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"21:1015:2553":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:11434:5356":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5210:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:9217:2500":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:5293:3362":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9896:61295":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10611:46642":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:49568:3786":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:920:2075":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:6155:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12126:3233":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:3132:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:52781:3569":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:24101:3854":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4314:3058":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:10876:2079":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4449:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:823:1783":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:50249:3811":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:24635:3195":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6136:4362":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:3868:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13377:5839":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:15724:10683":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:50020:3801":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2187:2573":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:53437:7465":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:15247:4257":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:729:61308":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46313:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7174:4413":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:812:3129":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:48665:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:23641:3549":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:4350:6043":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:47855:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:23806:3829":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:8090:2507":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5231:6064":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:11157:2817":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:1167:2976":{"crate_id":20,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"17:10489:4678":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:15756:2357":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4300:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:13061:3504":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:49913:39109":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:7786:4333":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4762:6055":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:49195:2807":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:8114:2869":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"9:1075:4163":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:51611:3560":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1528:3133":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:51127:3578":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13098:5776":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:15169:3369":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11032:3089":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:11900:56818":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:3362:2527":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:4671:6052":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"20:2813:2075":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"16:3064:4644":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10106:4755":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:53307:7459":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4023:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45911:2899":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:51158:3566":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:7928:3620":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4605:2771":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13318:5821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:8187:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46279:3944":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13402:5844":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13205:5798":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:88:39515":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:4417:6045":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:15776:2375":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:55974:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:2726:4810":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:49426:2813":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12081:3209":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:12051:3395":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5359:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2376:2501":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1584:6499":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:8314:4039":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:6757:3025":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1602:6509":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10224:7741":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5407:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:5564:3081":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"15:248:4249":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:49354:3777":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6964:3867":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2401:7769":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:3946:2576":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:6124:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:986:2190":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"16:3091:4645":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:3429:4309":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7250:4993":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4120:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"0:368:1050":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"2:45876:3116":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:6602:3005":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7420:4344":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:13210:7804":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:8431:2578":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3917:3230":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2816:4601":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:50893:7393":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:0:1979":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"17:10516:4679":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:531:6402":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:3621:3051":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3346:2523":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10742:3339":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10599:7746":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10988:7754":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"12:976:3134":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:5828:2783":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:49472:3782":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:3276:2494":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10543:5335":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5775:3427":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:1311:4761":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:13824:32856":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:3115:2277":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"5:3834:4993":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5702:3007":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11750:5424":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9600:61297":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:46348:3864":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13429:5848":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:11059:3091":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:49603:3790":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11993:5479":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10448:4675":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8739:56813":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"14:47:7796":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9971:61296":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10160:5293":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2257:4024":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46843:2681":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49621:3791":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:525:6399":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7927:3304":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"21:204:2912":{"crate_id":21,"path":["proc_macro2","fallback","force"],"kind":"function"},"1:11281:7146":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13465:5862":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:15771:2370":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5420:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:13732:3187":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:10591:4030":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13497:5870":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9574:4668":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:0:2329":{"crate_id":11,"path":["adler"],"kind":"module"},"1:6776:2989":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:607:46443":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9592:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"3:300:194":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6893:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6200:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:644:4785":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:14389:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"12:181:4234":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12168:5303":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3213:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"12:1180:4227":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"20:270:61337":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:14955:3262":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13282:5816":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:15148:3362":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:51095:7394":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6949:4627":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:7412:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:50989:3565":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:23637:2079":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"12:2331:2564":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:22851:3553":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1690:6576":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3039:60152":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:51437:3579":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:783:210":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7205:4416":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:2794:4308":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9809:61307":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4282:3348":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:374:4060":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:8325:2688":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13506:5871":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:53144:3576":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:3218:4590":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:23735:3827":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12275:5523":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:14:2440":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:1744:6599":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:10563:3140":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7843:4424":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:3743:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13746:5952":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12051:5486":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:52214:3572":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:5370:2871":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7692:3193":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10558:7743":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:12666:3776":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:15753:2355":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4013:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:162:5178":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:6778:2991":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5855:4385":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12537:5582":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4262:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4215:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11118:46453":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:610:4783":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9943:61306":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:6250:4006":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:4927:2492":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22798:3107":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"14:231:2868":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12771:5622":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:48367:132":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:10262:2772":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10081:4649":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:49169:2789":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:9755:5042":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:8310:4067":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"18:744:61311":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:10250:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10887:5332":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:3905:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:8181:2553":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"12:774:2553":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:774:5194":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11509:3170":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:6376:2986":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13924:6002":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6068:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46188:3945":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"9:722:4096":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:8929:46445":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13272:5815":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"20:676:2976":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"17:10253:4713":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13172:5787":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:1486:2576":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:5522:4373":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:53241:7453":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3318:2518":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:13748:56174":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11809:5447":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7477:4345":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11847:3190":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2856:169":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:5415:3369":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8703:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:377:4233":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"0:0:1050":{"crate_id":0,"path":["quote"],"kind":"module"},"1:6848:2993":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3069:2079":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:3877:2924":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:8388:3247":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6812:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13912:6000":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:10734:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3389:2532":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5228:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:49578:3787":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"20:3131:2172":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"0:18:1605":{"crate_id":0,"path":["quote","TokenStreamExt"],"kind":"trait"},"2:49182:2790":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11026:3042":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:12777:2817":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7226:4418":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:52280:3557":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:24363:3832":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8902:46444":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"21:744:2916":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:4459:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3265:3332":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:49801:3510":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:10946:2674":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46236:3086":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:4694:4998":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9339:2876":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:14358:7687":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:2727:3112":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:24049:38822":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:5472:4370":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4316:3059":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:5147:2600":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:49558:3042":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1492:3127":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:4510:4050":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:11940:2266":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:22947:15903":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9933:7735":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11862:3191":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13810:5970":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11482:3167":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:1472:3136":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3962:194":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:5658:3005":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:10192:194":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:4347:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2175:2574":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11492:2266":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:3881:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1665:6557":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4133:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:45767:187":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:14566:7805":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13582:5893":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:45904:3621":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13942:6008":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:48887:3959":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:55881:3614":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10673:46643":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13564:5889":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10203:133":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10584:4735":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9930:3759":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3720:3622":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11907:7541":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:10502:7591":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:13894:59583":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:46426:2690":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:5127:2901":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:56039:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5255:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:6592:59640":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:5869:3432":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:11065:2266":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10179:5295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:51974:3592":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:2195:4995":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:50872:7392":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10938:46715":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:7808:5007":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:68:4982":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:47450:39070":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"20:1253:2172":{"crate_id":20,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"6:3990:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6252:4395":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2748:565":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10243:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:994:3969":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6072:4341":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1680:183":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:14807:3232":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46556:2694":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:7628:2621":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7279:4632":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11822:5451":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:24737:3840":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:782:5194":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4145:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11738:5423":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:15775:2374":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4358:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46457:2692":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10095:4754":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:10526:3145":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:46258:3790":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1306:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6366:4246":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:13015:3501":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:32023:3893":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:1630:3125":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5978:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:2196:1034":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"14:11:7796":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3240:2182":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:13595:3197":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:1602:2552":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3034:60151":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:939:1880":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"6:519:6396":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:7884:4330":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"21:542:2463":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"2:51743:7405":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:14884:3198":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11254:4701":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:50196:7391":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:3263:2597":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:14423:55213":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6021:4581":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11330:14016":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:469:7760":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4353:3060":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10477:4673":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4387:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2832:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:1198:2974":{"crate_id":20,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"17:681:5350":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13446:5855":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:740:2463":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"5:1486:3138":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12645:5607":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:14794:3191":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:511:6391":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11062:3095":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:22523:3629":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:790:4772":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:50204:179":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:47390:2552":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11226:3089":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13590:5895":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:786:2172":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:2269:3486":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11828:3188":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3237:3321":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:47981:3873":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:24114:3853":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:46504:7667":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:3018:4586":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:837:2915":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:10266:4712":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5975:4387":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:23970:3685":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10702:3016":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:4623:223":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12712:5614":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:1253:3138":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"12:949:3132":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10459:2079":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9133:46450":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:3090:1880":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"1:14570:3082":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:8845:2687":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1736:6595":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:5999:3371":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6357:4397":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:23877:7288":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:46852:2683":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:4638:4998":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"12:925:3127":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6391:4398":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:14049:3058":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:7604:4006":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6768:4623":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5753:4381":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9332:4657":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:51484:3567":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5570:3079":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13574:5892":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:5118:3726":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9659:61300":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:5088:645":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"9:1020:4162":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:24431:3834":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:5987:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:8122:3971":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5632:4376":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"9:809:3164":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1572:6490":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11277:5347":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"9:749:4097":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"12:1235:4229":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:14989:3270":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4517:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2437:7770":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:10531:3609":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13356:5835":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12671:5609":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"21:935:2189":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"1:12011:3251":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"12:2032:2572":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5436:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:900:6358":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13453:5856":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:820:4775":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:53034:3593":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:1838:4993":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"9:1056:4155":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11499:5375":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"9:927:44518":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11835:5452":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10041:7737":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:22591:59314":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9649:7730":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11482:2172":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6221:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:7832:56173":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:10529:7592":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10685:3018":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:563:6424":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:3892:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13772:5961":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:7886:2672":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:5766:4382":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10587:7805":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3539:2539":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:856:2189":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:13062:5746":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:10258:2309":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:811:4774":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:8352:204":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9961:7736":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12598:5593":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13799:5969":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13240:5802":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:3383:2531":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:10885:202":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:49247:2878":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1505:3130":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10420:4709":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:1100:3135":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:46818:2676":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2246:3482":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12659:5608":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:46265:3942":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13348:5832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:49900:3515":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:14353:7685":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6087:4320":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:15088:3099":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:3041:4587":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9759:7732":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:50016:3799":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:7022:14015":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11696:5418":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:8406:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:10246:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:0:2325":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:3549:6036":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"20:1136:2916":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:3324:2521":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"14:194:44790":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:10264:2773":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4306:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:792:2190":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:46219:3940":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"15:230:4248":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"12:853:3126":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:5644:3002":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:1269:1844":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:10331:4677":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5330:5282":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"9:0:2327":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:51334:3587":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"12:2005:2266":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12699:5613":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:51181:3570":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:53296:7458":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:3253:2493":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:9925:3758":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8960:3396":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3484:130":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:0:265":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:10211:46511":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:13004:3498":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:50293:2505":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10570:11679":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:3365:4574":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:1091:4993":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13788:5965":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9368:5284":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:50918:3597":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:2937:2974":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:6014:4389":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:8358:135":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12118:5502":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46584:2710":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11186:7594":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:547:4566":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13547:5885":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12632:5606":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9719:7731":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:8375:2866":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:48103:2310":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11030:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10844:4677":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"21:780:2189":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:1442:2553":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46198:3946":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5379:7039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10149:7734":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47771:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7637:3189":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:923:3968":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5167:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:6947:3962":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8381:3246":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:50941:3585":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:6707:2983":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11847:5455":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5953:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10128:4757":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"9:692:4095":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:6923:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"12:2025:2574":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13394:5842":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:52005:3595":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:3136:2190":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"1:10974:3037":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5563:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:48695:7673":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5269:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"12:2309:6303":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:7346:174":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9034:46447":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:51022:3598":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:4210:2869":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:14781:3190":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6591:4404":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:429:4231":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:11439:3166":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:15758:2359":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:53270:7456":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10532:10676":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:46:6307":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:13377:7770":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:15763:2362":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:1592:2266":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3247:208":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4060:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13554:5886":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:49879:3513":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:599:6444":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:48480:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:3110:2191":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"16:3488:4595":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13884:5991":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5292:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:47527:2553":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:7237:175":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:5604:1285":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"16:3800:6039":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:22788:2079":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5274:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:50240:3810":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12582:5589":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:15752:2354":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:24086:3898":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1079:3083":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:52892:3589":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"20:2409:5185":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:12182:5511":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:510:46442":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:46331:3863":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"12:1159:4226":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:3331:2572":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12917:5634":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:49454:3781":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2569:126":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:9769:61291":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9528:3040":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8560:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11013:3040":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13898:5993":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:11089:2552":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:14061:190":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:10001:46498":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:13789:176":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:12432:3957":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5290:3361":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11653:5407":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:2892:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:6612:7157":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:4996:3719":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11962:3248":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:4:963":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2260:3485":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"18:829:4776":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:896:4781":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11328:5622":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:8099:2553":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:4860:2252":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"5:3033:2479":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:51767:7406":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:2039:2573":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:849:4777":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:37496:3629":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:832:7580":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:1522:3132":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:699:3273":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5717:4379":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"21:770:1844":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:5428:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6424:4399":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:8328:4040":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3372:2528":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:736:1783":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"12:1118:3136":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4227:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:49114:2802":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9476:5287":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3397:2534":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13760:5958":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:4566:3034":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:49865:3512":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:2325:4023":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6620:4614":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:6780:2992":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:3478:2538":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:22570:59313":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:7816:3632":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6085:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3253:3326":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"9:996:4161":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10200:7740":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:3691:212":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:53183:3596":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"21:865:2172":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:46616:2696":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:51538:3574":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11358:4660":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1563:6484":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:10254:2310":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7568:3186":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7303:4421":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13477:5863":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46272:3943":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:9245:4656":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5185:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3120:3033":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:4847:3717":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1669:3129":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4439:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8297:3863":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3357:2573":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7453:4323":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13163:5786":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9488:5038":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10435:7742":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:3313:2519":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"12:937:3131":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13180:5788":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:15767:2366":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:3148:215":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6935:7282":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:1475:180":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:48110:2307":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46518:2705":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12385:5557":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2462:7772":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:15765:2364":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4255:3381":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:7534:3184":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2181:2572":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3533:3049":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6106:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10962:3035":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"0:63:1606":{"crate_id":0,"path":["quote","IdentFragment"],"kind":"trait"},"2:22568:59311":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10547:10679":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3035:7284":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:3918:6648":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10814:4732":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:624:6457":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:786:5042":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:2303:2189":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"9:776:4142":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:10193:2771":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7024:4630":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:51287:3599":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8539:3387":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3679:2542":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8638:3399":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:897:3277":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:22589:59316":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10468:4674":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:1489:7581":{"crate_id":20,"path":["proc_macro","bridge","handle","NonRandomState"],"kind":"struct"},"1:11056:3090":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:4623:3036":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"12:2018:2576":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:53345:7461":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7571:4319":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:5885:3435":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11962:5472":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:12703:3779":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:48406:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"12:2315:61261":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:46606:2712":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:45813:188":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:4734:6054":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:0:2333":{"crate_id":16,"path":["gimli"],"kind":"module"},"9:27:4144":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:10377:4714":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6644:4405":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5407:4366":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12480:5574":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9264:5281":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4395:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6718:4619":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:57275:7472":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"21:959:2191":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"17:13192:5793":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:1527:6468":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:12924:2469":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6691:4406":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:13770:3189":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4112:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12073:5495":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5692:3006":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:3050:2917":{"crate_id":20,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:51711:7404":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12307:5530":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:51663:7403":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:6404:211":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:8849:4699":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11947:5467":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11498:3169":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:52971:3573":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:47407:3867":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7761:4423":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:7554:3185":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2060:3025":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:9218:2499":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:55961:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9296:5283":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11519:5385":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"20:213:61364":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:10801:46619":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:169:7727":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:5310:189":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46396:5014":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:1534:3134":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1153:10678":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11121:1844":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:48677:3164":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:50186:190":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3393:2533":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:24397:3833":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13609:5900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1760:6604":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:667:4787":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:3392:4599":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10471:55203":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:7467:4324":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:8152:183":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2945:4607":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13296:5817":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8546:3389":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:3172:4588":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:1156:10680":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7392:4328":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12262:5522":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:1194:10682":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:1011:2266":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4066:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47441:3869":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:3997:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:3743:4729":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11348:3154":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:15757:2358":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:2512:4711":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11114:2803":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:11995:3250":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:8144:2553":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:11390:2814":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2163:2553":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:5488:4371":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"12:747:2266":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:3945:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:717:2924":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:2923:166":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47536:167":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:3138:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:3714:6037":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:45897:3620":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"12:2045:2575":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:3239:3322":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:49096:2799":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3401:2535":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:38:44414":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45705:185":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11794:5441":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:1855:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:10398:59675":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:1540:6474":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:407:52937":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:49596:3789":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:161:39582":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46596:2711":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6028:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:3604:5211":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:5714:3010":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7823:4334":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:22940:2079":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:6870:2988":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11189:3365":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:1689:4019":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:4955:6061":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:605:6447":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2866:4583":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46135:7658":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"9:686:4093":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:13780:5964":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3567:3044":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:909:1783":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:0:1307":{"crate_id":1,"path":["std"],"kind":"module"},"6:4293:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11665:5408":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6644:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:8362:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:52088:3580":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:49684:3499":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:46406:12286":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:6858:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:51239:7396":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10975:46694":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:48656:3610":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6614:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:4394:3057":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3144:216":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10623:7747":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13933:6006":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:1637:3136":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4823:6057":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:12106:3232":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:8122:7765":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"12:1651:4239":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:46647:2715":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:591:6439":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"12:761:2552":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:9521:58365":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:4281:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:24703:3839":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:3754:2266":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46211:3791":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10279:4649":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6152:4322":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10140:4677":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:2772:4026":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"9:963:4160":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:32163:3861":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10788:7748":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10695:3015":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:537:6404":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10052:46500":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:2213:3981":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:6236:3380":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:8247:2565":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12456:5571":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7295:4340":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9088:46449":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:5877:3433":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10962:7753":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:46627:2713":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4410:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5312:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"9:469:44524":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6682:4336":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:24499:3835":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:49213:2808":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:49707:3502":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3255:3327":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:712:3629":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:4301:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:396:4232":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4478:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:14970:3263":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"15:269:4253":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12741:5617":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13041:5737":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:4883:3718":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:2305:4074":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:24669:3838":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:1547:6476":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:152:7724":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5029:6063":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4083:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4101:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:13468:3182":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:53398:7464":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:49587:3788":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:15773:2372":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6569:4616":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9660:5040":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:3772:6038":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:14055:3056":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:14130:3284":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"12:1200:4228":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:2009:2553":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46486:2702":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4241:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46834:2679":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:32362:59609":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:15735:55204":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:2991:4596":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:4511:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:823:5042":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:11932:5463":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:13713:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4164:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:4594:4996":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"20:3036:1844":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"2:48891:2792":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:49280:3773":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:50263:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12142:5504":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9612:3355":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:1136:3117":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12373:5555":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:3767:2552":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10061:46512":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:11859:2805":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:2912:4584":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:3264:4592":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4040:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1215:4021":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3342:2524":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47561:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13733:5946":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:3118:4598":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4431:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:15719:56042":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:15772:2371":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:6681:4063":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:7833:5012":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:38716:2598":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13819:5972":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6214:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:10486:3302":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:15770:2369":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:4632:3025":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:1648:3127":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:4237:4993":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4470:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13620:5901":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10596:2699":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"16:6166:4391":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:2543:4671":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13598:5896":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6005:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6899:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:9721:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11726:5422":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13154:5782":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4448:6046":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:14583:3192":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4477:6047":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3708:2546":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13520:5878":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:136:7723":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2769:3113":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7104:5007":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"0:369:1842":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"17:11147:7593":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:5063:3725":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:2013:2869":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:3965:4993":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3308:2522":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11889:55209":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"18:677:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6101:4318":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:69:4002":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:234:4120":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:14698:5049":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:5706:3008":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:6704:3109":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:11892:2806":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:5191:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3235:199":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47897:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6852:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:1161:10681":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:8841:2555":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13258:5810":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:24:4814":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:50028:3804":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4046:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12208:5514":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9361:7808":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:650:4782":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11092:3204":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:4908:3087":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:22992:3554":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:14010:3812":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:6851:2717":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3522:5207":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4325:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1646:3137":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:46527:2706":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12521:5580":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:49508:3784":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"18:704:5194":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:56013:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12040:5485":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46298:3674":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:53375:7463":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:610:6449":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12685:5610":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:294:61298":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5528:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11252:3363":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11572:5392":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:24079:7652":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13306:5818":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3324:2266":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1729:3375":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:616:6452":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13978:6012":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12086:3231":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:1533:6471":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6413:4245":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:0:2331":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3889:4068":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"20:2923:2975":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:4340:2553":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5595:4375":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:22983:2079":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11082:4666":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5400:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6032:4313":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1639:3126":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6219:4394":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9065:46448":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9799:7733":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2586:7806":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:23542:3106":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"12:556:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11231:4703":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:12456:3922":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:47398:2553":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:6665:2486":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2399:7768":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:8130:60168":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:15766:2365":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5159:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:50070:3235":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:9219:3287":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"0:47:2165":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"1:14939:3261":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7514:4343":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:5531:2486":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:49753:3509":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"20:3065:2916":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:12071:3401":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5998:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7185:4414":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:1630:6528":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:5847:3430":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11100:4705":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7216:4417":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4183:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:660:4786":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6126:4390":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3702:2544":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11948:3245":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:636:5194":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3303:2475":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2164:564":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:1717:6589":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7119:4314":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"21:874:2190":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:1497:3128":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11159:5345":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:32262:59610":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11714:5419":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:4852:6058":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:51563:3556":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5960:4571":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:2314:4715":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:45629:2549":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:6116:3379":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:13916:5048":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:3334:2476":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12946:5654":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3370:3979":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:720:5196":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"14:216:44796":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11422:3165":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49736:3508":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:13698:137":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:3112:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:48648:7671":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"12:968:3133":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3481:129":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1617:6521":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6870:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:45836:2541":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:4028:3463":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"20:2989:2553":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:8189:3304":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"12:112:7758":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:299:61304":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:11307:2812":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:47467:194":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12467:5572":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6269:4396":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:49045:3772":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3367:2242":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5347:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:801:4773":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:22792:3105":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12028:5483":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9186:4665":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11640:5405":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11303:2990":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:6474:3121":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22536:59265":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"22:0:2459":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"1:4355:3061":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8093:5024":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:47373:2094":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13386:5840":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13963:6011":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:6491:4400":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:48343:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.40/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}