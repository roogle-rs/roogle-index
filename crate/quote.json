{"root":"0:0:1350","crate_version":"1.0.35","includes_private":false,"index":{"2:12973:31350":{"id":"2:12973:31350","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12974:31346"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43482:7273","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenTree","id":"21:876:2506","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:402:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:384:2016":{"id":"0:384:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13072:26186":{"id":"2:13072:26186","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38283"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:109:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[60,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:732:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:62:2256","0:63:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13075:7849":{"id":"2:13075:7849","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4707:7849"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43516:7212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:3166":{"id":"5:5618:3166","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:2016":{"id":"0:394:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:781":{"id":"0:378:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:2019":{"id":"0:11:2019","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:12:2513","0:14:2523","0:16:2527","0:19:2531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:35:2510","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22"]}}},"5:5605:33665":{"id":"5:5605:33665","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:32952":{"id":"2:12963:32952","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12300:1672","str::slice_mut_unchecked":"2:12964:32953","crate::ops::Index":"2:38925:2974"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:26281":{"id":"2:12968:26281","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12967:26280"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:7435":{"id":"2:12975:7435","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43462:7271","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2593":{"id":"0:38:2593","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::UpperHex":"2:10078:2744","`format!`":"5:6:794","std::fmt::LowerHex":"2:10076:2743","proc_macro2::Span":"21:870:2257","proc_macro2::Span::call_site":"21:555:2668","crate::IdentFragment":"0:46:2020","proc_macro2::Ident":"21:935:2601","std::fmt::Octal":"2:10072:2742","std::fmt::Binary":"2:10074:2745","`std::fmt`":"5:4836:781"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"}},"2:12942":{"id":"2:12942","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12943:974","2:12944:3094","2:12945:32948","2:12946:32949","2:12948:32950","2:12951:25234","2:12952:32951","2:12953:334","2:12954:26253","2:12955:26249","2:12957:26250","2:12959:26251","2:12961:26252","2:12963:32952","2:12964:32953","2:12965:26276","2:12966:26277","2:12967:26280","2:12968:26281","2:12970:7276","2:12971:7285","2:12972:7162","2:12973:31350","2:12974:31346","2:12975:7435","2:12976:32954","2:12977:31338","2:12978:26293","2:12981:26294","2:12984:26295","2:12987:3130","2:12991:3093","2:12995:25438","2:12998:26283","2:13001:26285","2:13004:32955","2:13007:32956","2:13010:26287","2:13013:26289","2:13016:26291","2:13019:26292","2:13022:2865","2:13025:32957","2:13028:32958","2:13031:32959","2:13034:32960","2:13036:32961","2:13038:32962","2:13040:32963","2:13041:32964","2:13042:32965","2:13045:32966","2:13048:2612","2:13051:26296","2:13054:32967","2:13057:32968","2:13060:32969","2:13063:2344","2:13065:26177","2:13066:26178","2:13067:26180","2:13068:26181","2:13069:26182","2:13070:26184","2:13071:26185","2:13072:26186","2:13073:32970","2:13075:7849","2:13076:32971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:104:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i16"},"items":["0:382:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13051:26296":{"id":"2:13051:26296","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2531":{"id":"0:19:2531","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:11:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:2513","0:25:2523","0:27:2527","0:30:2531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[35,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:55:2256","0:56:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:315-0:78:2021":{"id":"0:315-0:78:2021","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:78:2021","glob":false}}},"0:106:2016":{"id":"0:106:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:32965":{"id":"2:13042:32965","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12659:13300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:296:2648","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f64"},"items":["0:406:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12943:974":{"id":"2:12943:974","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12294:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13036:32961":{"id":"2:13036:32961","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2646":{"id":"0:124:2646","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13071:26185":{"id":"2:13071:26185","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38283"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:7162":{"id":"2:12972:7162","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43194:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Literal","id":"21:940:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Group","id":"21:891:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:113:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:935:2601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:406:2016":{"id":"0:406:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:32958":{"id":"2:13028:32958","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12633:13304","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::rmatch_indices":"2:13031:32959"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43358:7266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2523":{"id":"0:25:2523","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:781":{"id":"0:56:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[40,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13066:26178":{"id":"2:13066:26178","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39280:13382","Self::is_ascii":"2:13065:26177"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39280:13382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13067:26180":{"id":"2:13067:26180","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[25,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:51:2256","0:52:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12945:32948":{"id":"2:12945:32948","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:26287":{"id":"2:13010:26287","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304","str::rsplitn":"2:13013:26289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43312:3302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:7276":{"id":"2:12970:7276","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12294:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43178:7256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:2016":{"id":"0:404:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380:2016":{"id":"0:380:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:31338":{"id":"2:12977:31338","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43500:7275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:2255":{"id":"0:345:2255","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[622,0],"end":[626,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"}},"5:5619:27537":{"id":"5:5619:27537","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13068:26181"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:2865":{"id":"2:13022:2865","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12633:13304","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::rmatches":"2:13025:32957"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43412:7269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:26253":{"id":"2:12954:26253","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12311:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:7285":{"id":"2:12971:7285","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12294:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43184:7257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2256":{"id":"0:55:2256","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:870:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2256":{"id":"0:58:2256","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:870:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:33666":{"id":"5:5608:33666","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:781":{"id":"0:59:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[50,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f32"},"items":["0:404:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:366:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:370:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:2016":{"id":"0:99:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2016":{"id":"0:104:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:25438":{"id":"2:12995:25438","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12633:13304","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::split_whitespace":"2:12973:31350","str::rsplit":"2:13001:26285"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43208:3300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:31346":{"id":"2:12974:31346","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12973:31350"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43491:7274","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2016":{"id":"0:390:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13076:32971":{"id":"2:13076:32971","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4704:32971"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43525:7217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:3130":{"id":"2:12987:3130","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41318:190","prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[45,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:935:2601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2256","0:59:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:2016":{"id":"0:109:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:32959":{"id":"2:13031:32959","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12633:13304","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::match_indices":"2:13028:32958"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43376:7267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:3094":{"id":"2:12944:3094","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:26277":{"id":"2:12966:26277","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12965:26276","str::split_at_mut_checked":"2:12968:26281"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313-0:11:2019":{"id":"0:313-0:11:2019","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[120,0],"end":[120,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:11:2019","glob":false}}},"0:370:781":{"id":"0:370:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2523":{"id":"0:14:2523","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:732:119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:93:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:362:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:376:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:781":{"id":"0:374:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:781":{"id":"0:364:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2531":{"id":"0:30:2531","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:781":{"id":"0:368:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2527":{"id":"0:27:2527","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::rc::Rc","id":"5:4925:216","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:99:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2256":{"id":"0:48:2256","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:870:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:2016":{"id":"0:382:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1350":{"id":"0:0:1350","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1444,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```\n\n<br>\n\n# Non-macro code generators\n\nWhen using `quote` in a build.rs or main.rs and writing the output out to a\nfile, consider having the code generator pass the tokens through\n[prettyplease] before writing. This way if an error occurs in the generated\ncode it is convenient for a human to read and debug.\n\n[prettyplease]: https://github.com/dtolnay/prettyplease","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.35\")]","#![allow(clippy::doc_markdown, clippy::missing_errors_doc,\nclippy::missing_panics_doc, clippy::module_name_repetitions,\nclippy::wrong_self_convention,)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:313-0:11:2019","0:314-0:46:2020","0:315-0:78:2021","0:38:2593","0:344:1350","0:345:2255"],"is_stripped":false}}},"2:13019:26292":{"id":"2:13019:26292","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:781":{"id":"0:372:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13057:32968":{"id":"2:13057:32968","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13069:26182":{"id":"2:13069:26182","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600":{"id":"5:5600","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5601:33664","5:5602:13537","5:5605:33665","5:5608:33666","5:5616:33667","5:5617:33668","5:5618:3166","5:5619:27537","5:5620:27538"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12951:25234":{"id":"2:12951:25234","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12181:13305"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13065:26177":{"id":"2:13065:26177","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:13537":{"id":"5:5602:13537","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13068:26181":{"id":"2:13068:26181","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314-0:46:2020":{"id":"0:314-0:46:2020","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,0],"end":[121,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:46:2020","glob":false}}},"0:46:2020":{"id":"0:46:2020","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[13,0],"end":[23,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.\n\n[`format_ident!`]: crate::format_ident","links":{"crate::format_ident":"0:38:2593","`Ident`":"21:935:2601"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:47:781","0:48:2256"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:377","0:371","0:363","0:361","0:57","0:375","0:365","0:367","0:49","0:53","0:369","0:373","0:60","0:359"]}}},"0:115:2016":{"id":"0:115:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"items":["0:89:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:2016":{"id":"0:119:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:2016":{"id":"0:400:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388:2016":{"id":"0:388:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2513":{"id":"0:12:2513","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:876:2506","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:63:781":{"id":"0:63:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:360:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:2016","0:124:2646"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i32"},"items":["0:384:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:398:2016":{"id":"0:398:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:32955":{"id":"2:13004:32955","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12633:13304","str::split":"2:12995:25438","prim@char":"1:12294:458","`DoubleEndedIterator`":"2:8007:130","str::rsplit_terminator":"2:13007:32956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43258:7262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:364:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:2021":{"id":"0:78:2021","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:79:2016","0:80:2645","0:81:2646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:379","0:114","0:90","0:97","0:389","0:403","0:112","0:393","0:94","0:405","0:82","0:385","0:118","0:100","0:387","0:122","0:381","0:110","0:120","0:401","0:395","0:391","0:108","0:86","0:383","0:397","0:105","0:103","0:399","0:116"]}}},"2:12955:26249":{"id":"2:12955:26249","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41318:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:33664":{"id":"5:5601:33664","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2648","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2648","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:26295":{"id":"2:12984:26295","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:26251":{"id":"2:12959:26251","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:2016":{"id":"0:386:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:26283":{"id":"2:12998:26283","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12449:3316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:26285":{"id":"2:13001:26285","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12633:13304","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::split":"2:12995:25438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43226:3304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:85:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12957:26250":{"id":"2:12957:26250","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41318:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:111:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13025:32957":{"id":"2:13025:32957","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12633:13304","`DoubleEndedIterator`":"2:8007:130","prim@char":"1:12294:458","str::matches":"2:13022:2865"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43430:7270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13038:32962":{"id":"2:13038:32962","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402:2016":{"id":"0:402:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13034:32960":{"id":"2:13034:32960","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2646":{"id":"0:81:2646","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31796:2610","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:334":{"id":"2:12953:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12954:26253","`u8`":"1:12311:1799"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2527":{"id":"0:16:2527","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7969:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7969:164","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5617:33668":{"id":"5:5617:33668","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2648","`String`":"5:7616:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2648","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:32956":{"id":"2:13007:32956","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12633:13304","str::split":"2:12995:25438","prim@char":"1:12294:458","str::split_terminator":"2:13004:32955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43276:7263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:372:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:378:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:398:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:400:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12948:32950":{"id":"2:12948:32950","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12946:32949"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13060:32969":{"id":"2:13060:32969","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13073:32970":{"id":"2:13073:32970","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4706:32970"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43507:7218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i128"},"items":["0:388:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:2256":{"id":"0:62:2256","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[64,4],"end":[66,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:870:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2645":{"id":"0:80:2645","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:32949":{"id":"2:12946:32949","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:32954":{"id":"2:12976:32954","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43472:7272","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2016":{"id":"0:85:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:2016":{"id":"0:113:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13054:32967":{"id":"2:13054:32967","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:102:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:781":{"id":"0:47:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[15,4],"end":[15,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:79:2016":{"id":"0:79:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13063:2344":{"id":"2:13063:2344","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12594:136","`FromStr`":"2:12593:2902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41459:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12593:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12593:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:26291":{"id":"2:13016:26291","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2256":{"id":"0:51:2256","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:870:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:32966":{"id":"2:13045:32966","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:26293":{"id":"2:12978:26293","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2016":{"id":"0:111:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:32953":{"id":"2:12964:32953","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12300:1672","crate::ops::IndexMut":"2:3184:2975","str::slice_unchecked":"2:12963:32952"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:26294":{"id":"2:12981:26294","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"isize"},"items":["0:390:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i64"},"items":["0:386:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:368:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:2513":{"id":"0:23:2513","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2660:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:876:2506","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:26252":{"id":"2:12961:26252","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10721:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:26289":{"id":"2:13013:26289","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12294:458","str::splitn":"2:13010:26287","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43330:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:392:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13041:32964":{"id":"2:13041:32964","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:781":{"id":"0:52:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:781":{"id":"0:362:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:781":{"id":"0:366:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2016":{"id":"0:123:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344:1350":{"id":"0:344:1350","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[483,0],"end":[487,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/2.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro2::TokenStream`":"21:865:251","`proc_macro::TokenStream`":"20:2620:251","`format_ident!`":"0:38:2593"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"}},"2:12967:26280":{"id":"2:12967:26280","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12968:26281"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:33667":{"id":"5:5616:33667","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7616:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2016":{"id":"0:102:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Punct","id":"21:914:2618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13040:32963":{"id":"2:13040:32963","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:32951":{"id":"2:12952:32951","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2016":{"id":"0:93:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:781":{"id":"0:360:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2016":{"id":"0:96:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:3093":{"id":"2:12991:3093","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41318:190","prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12654:13302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2016":{"id":"0:121:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:2612":{"id":"2:13048:2612","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12294:458","self::pattern":"2:12633:13304"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41316:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12639:13301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2016":{"id":"0:89:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2510":{"id":"0:35:2510","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:374:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i8"},"items":["0:380:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:396:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:2016":{"id":"0:117:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:394:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:2016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12965:26276":{"id":"2:12965:26276","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12967:26280","str::split_at_mut":"2:12966:26277"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:27538":{"id":"5:5620:27538","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13069:26182"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7616:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:2016":{"id":"0:392:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:781":{"id":"0:376:781","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10039:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10020:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:2016":{"id":"0:396:2016","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:865:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13070:26184":{"id":"2:13070:26184","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38283"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10769:34498":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44122:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:13522:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:25511:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10661:7384":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:41515:2990":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5897:4854":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:8197:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:687:2989":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"15:306:7434":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40522:3162":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7446:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:754:6930":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:39747:7215":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5236:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:2323:19945":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:39087:2979":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7436:7490":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:39999:3181":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:9664:7478":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:11799:7408":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:40131:3200":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:37632:2967":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:396:7444":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:39692:7212":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:39986:3190":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:9302:6833":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:14436:4238":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15058:4431":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11709:3315":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:4837:5512":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11676:3314":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:13577:2942":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11227:20912":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11524:7407":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5640:8103":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:4153:8024":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:45172:6612":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:38997:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:491:5268":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5390:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12318:1370":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3426:7972":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:1087:34398":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15138:4449":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:588:7848":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:11163:3298":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:5222:25646":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45125:6607":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:12165:3288":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:11154:6825":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5536:5807":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4976:4844":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46363:6724":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3793:3657":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2749:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:3398:3006":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:2429:6329":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5225:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:33424:2674":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:22060:8243":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:10828:34507":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:1327:7869":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13946:4138":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:8434:3176":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:1585:3006":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:8341:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:12181:13305":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:21251:32647":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:10721:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:2536:2616":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:7460:7471":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10170:3815":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:10518:25993":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:918:7453":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:5783:7319":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7356:2990":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:10074:2745":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5266:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10947:25277":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12056:3894":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2286:7927":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:719:2616":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:11661:6940":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:6714:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:8139:7478":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10683:3865":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:2203:7402":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:15342:4502":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:523:5291":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:1794:1311":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:46151:6712":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:45189:6613":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11883:7356":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:4182:13291":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6278:20812":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22413:7196":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:9723:31805":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1527:7134":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3615:7964":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:6460:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:39817:13372":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:1072:7549":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12251:7420":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10399:3822":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:44126:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:15313:4494":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:4718:4835":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6442:7047":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:6393:7318":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:10871:7340":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5995:7005":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10866:7338":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:39698:7213":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:364:7442":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:4412:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11898:3861":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:10997:3301":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:2758:6322":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11089:7390":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:351:7439":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:12395:7265":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15197:4468":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"20:2493:127":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:15376:4515":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:43922:7304":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:4666:2685":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"17:9755:20869":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13774:4112":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:5897:8118":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:16235:4751":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:41524:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:45417:6638":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11467:3855":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5361:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:1155:7457":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7629:7164":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:2590:6911":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:1063:7869":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:1602:3003":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:8118:7114":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:42587:7252":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1862:7475":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10887:34499":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9107:6826":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:926:7871":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6574:4812":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:2738:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"8:0:2755":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:1699:5460":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:7698:3006":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:680:6917":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:914:2618":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"11:2124:7102":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1040:7102":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:43023:3296":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:21505:8157":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8844:7333":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10900:6758":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:1526:5348":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:39037:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10137:20870":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5314:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5122:5636":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:531:6914":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2431:7930":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3596:28279":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2196:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:11825:20994":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2987:2972":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:12485:21043":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:41399:3050":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:22569:31318":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15126:4446":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"20:2324:2601":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"17:12929:3944":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:2562:5172":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15434:4527":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:3155:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3377:7980":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15635:4601":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:0:2759":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7813:7109":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10439:3825":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7823:20830":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:3030:6319":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43167:7255":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:4469:7336":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:0:979":{"crate_id":6,"path":["libc"],"kind":"module"},"11:832:7454":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:8428:2992":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8817:7330":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:6658:7178":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:1356:7549":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11128:3805":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:718:3704":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7880:26006":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11189:3841":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:10039:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11313:6934":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"10:0:2757":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4971:5583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:671:7551":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:39920:7168":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:42045:2742":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5181:5642":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:768:3007":{"crate_id":21,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:39017:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12993:20899":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4924:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:513:20888":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:891:2616":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"2:21280:32643":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:45630:6649":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43005:3297":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4077:8018":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:7561:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:45434:6639":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:45774:6671":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"20:458:34593":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"20:2371:2617":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:6650:7321":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:44207:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:9209:8129":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10982:20907":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:150:6970":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11865:7412":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:3597:7416":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8739:6587":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:8161:7325":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:261:34444":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43178:7256":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7037:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:21929:2510":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13473:4034":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"9:424:19790":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:1207:7394":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11324:20946":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6047:20809":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:9219:13301":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5037:4846":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43611:7277":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:2878:4791":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:10078:2744":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12683:7427":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:8564:7328":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4262:7484":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"19:0:1248":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:1007:7102":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:989:2257":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:3264:7414":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2970:2953":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13723:4099":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:2629:3343":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"18:563:3690":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:37577:2966":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:7575:6263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4932:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1723:5469":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:30228:2931":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4607:8048":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:5890:8117":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6441:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4870:5536":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:6755:32867":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5588:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5370:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7987:3865":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:39768:7217":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:8116:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:3475:4818":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13814:4120":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:43507:7218":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:14575:3910":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2303:19919":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:41440:2936":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:7485:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"0:345:2255":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"1:3499:7336":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5528:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6763:6066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:5423:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:7512:3158":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:4773:13365":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:659:7377":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:3844:7998":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8144:7324":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:6936:13335":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:39094:6428":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:46297:6718":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7857:4991":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:573:3683":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:9294:25661":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40017:3191":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1535:5354":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41821:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:39880:7225":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2670:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:2719:2295":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"1:3284:7982":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4864:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11567:20975":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:3121:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:3029:3711":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2458:4772":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8449:6799":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:41441:2935":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5436:5765":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:1496:2990":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15010:4422":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:41382:2989":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:12308:875":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3286:7983":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"0:0:1350":{"crate_id":0,"path":["quote"],"kind":"module"},"5:6394:8252":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:637:7851":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11497:7406":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:10324:7949":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:22481:7197":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:11149:3302":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13797:4117":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6636:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6231:7041":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:16223:4748":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:45516:6643":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11651:7354":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7355:4953":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11716:7494":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14260:4204":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7681:30799":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:2438:4771":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:256:34447":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:43705:7289":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15249:4477":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5191:5649":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8511:7271":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:8226:20834":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13538:4050":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:42059:2744":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:10958:3316":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12887:6968":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"21:876:2506":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:44136:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:1903:3004":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:30260:6354":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10889:7346":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6746:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:2788:4787":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4424:4827":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:39902:7912":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:3038:32776":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14489:4242":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:9248:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2636:4780":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:7395:3188":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:507:3683":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6532:5960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2998:4814":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43115:3311":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:1917:3003":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15102:4444":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11392:7398":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45449:6640":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8498:3822":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:43106:3308":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:40:7880":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13292:4002":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7695:4979":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:7546:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7741:4811":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:545:5304":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12080:7782":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7888:7110":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:15324:4498":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14516:4246":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1628:5421":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:12304:716":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:13485:7194":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:7306:6128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:12301:1760":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:5064:7336":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8029:7857":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13437:4025":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12353:6959":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5336:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11812:20981":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12863:3942":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:10501:31733":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:9398:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4858:8032":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:4150:2989":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10350:3821":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14212:4199":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13399:4021":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5617:5847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6456:20818":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:3019:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6756:6065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"14:0:2760":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:788:6903":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:12317:1859":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:3636:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:7593:7163":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:14066:4157":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10635:7982":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:3027:2911":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:5769:6984":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7396:7154":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5382:5732":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7098:7097":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4959:5578":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21778:2510":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:16198:4742":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:15078:4439":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1585:5387":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7376:7455":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:4830:4839":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:2542:5168":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:40305:3204":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1559:5371":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15760:4634":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21496:2510":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:32458:2951":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:6413:8253":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5260:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5831:6989":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:44223:3001":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6900:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:41138:2257":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:12076:20982":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:40170:3203":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13272:4001":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8827:2699":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12433:3910":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:3014:19948":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11743:6946":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:589:3692":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7528:7103":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:8282:6299":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46317:6720":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:10866:2699":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15206:4469":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:7511:2999":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22281:8237":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1446:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:7108:32888":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6160:19918":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:726:8002":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"20:244:34559":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:13024:20900":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21783:8162":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:8253:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4942:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5472:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:328:7130":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:2581:127":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"21:812:2616":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:1968:7908":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:45707:6668":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6948:4802":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:9536:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13785:4115":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1051:7869":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2663:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22360:7195":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43950:7311":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8173:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:5949:3183":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4818:8070":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:39892:3822":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:8351:6314":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7321:3050":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41940:8116":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46061:6710":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1663:5446":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:30292:31413":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:3278:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:12306:887":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11153:7386":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:1386:3665":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:43590:13316":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:44234:2941":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5212:5661":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"10:36:5174":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:16121:4724":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12478:3914":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:41374:2699":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2466:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5686:4793":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:434:7447":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10068:20876":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:1887:2990":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46401:6732":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8134:3759":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40140:3201":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:39719:31343":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:12654:13302":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:4836:781":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:1546:7452":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:216:34557":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"20:949:251":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:11645:7353":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2457:7940":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:12293:1149":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:22638:6352":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:557:7835":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7656:20828":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:4771:4837":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40087:3207":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:39057:2977":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7639:7552":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15356:4509":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12557:3837":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"11:1923:3005":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2282:7341":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:16093:4717":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:42278:6578":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10284:3819":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5598:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4091:8019":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:12312:1781":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7397:34484":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:6338:25732":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12464:21042":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:42317:5006":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:45580:6647":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:8271:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:4075:7455":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:1863:13559":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10905:7388":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4754:6174":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:5219:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7604:4809":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:39849:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12030:7413":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6698:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5329:5715":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6524:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:836:2699":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15596:4589":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:39950:7943":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:10020:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11764:6950":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:8216:7122":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:10876:7324":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7727:4810":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3247:28548":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:4856:4840":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40538:3165":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41782:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6706:6048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:16050:4001":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13674:4074":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3614:4819":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6758:4894":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1064:32867":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4270:7485":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7085:7094":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6689:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:6821:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12201:21040":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5914:6996":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13015:3910":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:2114:7875":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:22631:7203":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:7539:4806":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2277:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:15039:4430":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12399:6962":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:11061:26002":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12310:862":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:14356:4218":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:10847:8072":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:39757:7216":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:11191:3299":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:2307:651":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:113:7375":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:45157:6611":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:765:25105":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6895:4906":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11579:7489":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:12305:732":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3149:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2738:7977":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12792:3780":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6427:20817":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5160:5639":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:42799:3325":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:183:34624":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:31852:3008":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11016:7389":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14855:4371":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5756:20806":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:821:2601":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"18:635:3703":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:7967:6757":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:9868:3247":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:7258:25991":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:578:5322":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:12449:3316":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:9261:25269":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13064:3954":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3021:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"21:710:2257":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"16:872:34444":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:6657:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43358:7266":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15214:4471":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9541:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:12633:13304":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:5406:32867":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:1565:5373":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8619:6161":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2503:2770":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:7566:13589":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5347:4850":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14051:4154":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9671:20872":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2660:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4916:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7436:7155":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5636:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:11070:3304":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:4540:13355":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11214:7395":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:4439:32863":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6543:7054":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2790:7911":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:15720:4623":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12362:6960":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"7:0:1849":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:32996:2957":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:5268:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:45907:6676":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5283:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:1025:7868":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6915:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11773:3926":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11314:7582":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:7616:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:6653:7180":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:12300:1672":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"20:2743:2675":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"3:0:487":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1826:7474":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:3808:7874":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16032:3991":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:13465:7192":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:481:25996":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:43080:3179":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:43954:7312":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1607:3005":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7559:7107":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2497:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6738:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:586:5326":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15092:4443":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:42795:7254":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:41587:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:33770:2963":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:43125:3309":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:7584:6266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:4105:8021":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4985:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40156:3202":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2503:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:473:5260":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10018:20873":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:5714:13334":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15678:4617":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7497:4973":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6478:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15655:4604":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10282:7493":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:8517:7480":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2041:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:4416:7553":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6811:6081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8437:6798":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:12309:881":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:5557:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:2309:7146":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:5586:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5376:5729":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7379:34468":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:45110:6604":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41507:2989":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10622:34492":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:732:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3381:32177":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:39776:7212":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9807:20877":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14912:4409":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14284:4207":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:2352:7869":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:3873:3006":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:8306:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"20:628:3346":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"20:2523:6908":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:5535:8100":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6775:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:11239:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5014:5607":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:811:3006":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:5571:8102":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:9120:6827":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6648:7065":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9254:7832":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12969:3946":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10818:7386":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14402:4225":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:43934:7307":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2528:4775":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11221:6842":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:10435:13602":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13606:4070":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:7359:6157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:8007:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4909:5557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12150:3900":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11702:6943":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11634:6938":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15222:4473":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45563:6646":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12245:25261":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:3329:4817":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:41256:7328":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:8012:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:6306:25964":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21388:8159":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15390:4517":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:13271:32099":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:43516:7212":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:12319:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21931:8158":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2902:2929":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:46493:6751":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:14235:4200":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13387:4018":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:5103:8076":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8674:8080":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41244:7246":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:1676:7772":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5052:5623":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:553:5309":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:33597:2961":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:903:3006":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2660:4781":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10317:3820":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6609:6009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:31797:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:706:2898":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:11166:3839":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4811:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:3145:2970":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8481:3190":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:702:251":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"5:7537:7156":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:44185:6601":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7570:4807":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12238:21019":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:2572:4777":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10998:6827":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:6131:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8293:25710":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3368:2982":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8777:8094":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:40037:3193":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:45257:6621":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:41078:3561":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12824:20898":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3251:32827":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12584:7386":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:12695:21048":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14463:4240":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:42288:3246":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:3669:3716":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43491:7274":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"15:288:7429":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42556:7251":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"21:113:6901":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"11:742:7453":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5817:6986":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:1757:650":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:1886:6330":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:15624:4596":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:6214:26012":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:6435:5916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11493:20940":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:43938:7308":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1536:7454":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2982:2971":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:1939:7561":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:8202:4813":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14325:4212":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:21400:3560":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5020:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:12307:869":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:10080:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:16187:4741":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"11:2403:2989":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"20:53:7178":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:42380:3248":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:45204:6614":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12659:21046":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11026:20908":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:22:796":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:38925:2974":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:16151:4732":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:43014:3295":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:9728:31912":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1518:7133":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5277:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:966:3344":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"16:2418:4770":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5296:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5457:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45819:6672":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:4240:7336":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11557:20974":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"14:165:19881":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:12292:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7347:2943":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8571:7329":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:870:7870":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6519:5954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5448:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4860:8034":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:914:7452":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:4159:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1692:5457":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:2699:7565":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:920:2675":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"11:2383:2699":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:41901:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8425:2991":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4992:5594":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9194:8127":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:22098:8244":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15521:4576":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2374:4768":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4149:8023":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:6848:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:29835:8001":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4824:5502":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:12867:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7111:7100":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6066:7014":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10890:2989":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:3341:2978":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:1680:5453":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:1877:6327":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:6:794":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"1:2595:7975":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6120:20811":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9144:2990":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15608:4592":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40571:3173":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4268:7777":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3605:7944":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:731:2617":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"11:2548:5169":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:356:7846":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:4105:32867":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:2323:13550":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"20:140:3658":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:22604:31367":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:16079:4713":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:4882:4841":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"20:108:34519":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:43043:3307":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10524:7382":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14386:4221":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:33055:2956":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6417:5903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13363:4014":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1639:5429":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6471:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1887:7477":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:30266:6356":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2992:2973":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:13832:4121":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:41499:2699":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:10021:3253":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:5969:7780":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12300:21041":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:46259:6716":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:16138:4726":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:8247:6291":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"14:202:13318":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:4240:7483":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:860:34477":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:1581:7455":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3433:2934":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:16212:4746":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:12707:13310":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12328:6951":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:3134:2933":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:21807:3293":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"15:327:19903":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11269:20930":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5643:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46337:6722":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:22189:8248":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13855:4124":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:8288:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:2234:7405":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:41278:6571":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:33251:2960":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:38266:2969":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10720:34497":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:935:2601":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"16:5075:4847":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43135:3310":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10919:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:43462:7271":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11063:20917":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6606:7063":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5407:1218":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11841:7411":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:45242:6620":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40515:7238":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:1107:19870":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:31853:3067":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4967:31747":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:22276:8239":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13252:3991":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:31761:29032":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:7429:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7464:2990":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4802:4838":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:45647:6650":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7461:6191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:12659:13300":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:16105:4719":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"18:735:25104":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7537:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7052:20823":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:9371:7336":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:6562:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:1142:19871":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:12335:7259":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43154:6593":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:30662:3691":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7549:7106":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11739:7999":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:4743:4836":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:837:7863":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:2620:251":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"20:2633:2990":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:9781:20889":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:2569:2999":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:859:2990":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43312:3302":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12298:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:5927:6997":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"20:413:34591":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:3842:4822":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5466:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"13:109:34403":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6480:4794":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:39708:7214":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:6458:3208":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22553:6340":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3184:2975":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:32878:2909":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7516:6230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:15273:4485":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:4310:2699":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:491:6913":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:0:545":{"crate_id":2,"path":["core"],"kind":"module"},"1:8035:7898":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:4201:13347":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:40055:7230":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14876:4379":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7522:3000":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:4468:4828":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43817:7300":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:9363:7570":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:10938:25272":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:43276:7263":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14529:4247":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:21295:32651":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14311:4209":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:40315:3205":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9083:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5653:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:2445:7934":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12316:943":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:3034:32777":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:608:34517":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1311:7102":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:40329:3206":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:10329:7184":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4278:8044":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:2304:7102":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:12314:1793":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:0:2394":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"18:613:34518":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6749:7069":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:5802:20807":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11540:25721":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"11:2443:7455":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:1517:5343":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:597:3665":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:521:25106":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13146:3965":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8428:3161":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2338:4760":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12724:20897":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:559:5312":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:5848:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7714:7466":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:774:7133":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6725:8122":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:3778:4820":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10155:3814":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12264:21018":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:38957:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:867:7133":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:9916:20892":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:4641:4834":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:4587:4832":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8528:7995":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7168:6833":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:0:2762":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2708:4783":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11605:3857":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:22651:7206":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:969:2990":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:5515:5801":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:43184:7257":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6441:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11634:7581":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:10915:3300":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10218:3817":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1726:32867":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:2714:2616":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"2:3396:2932":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10424:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:8615:8071":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3362:2980":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:1910:3002":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:10981:25266":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:4531:4830":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:515:3686":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:41316:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11915:21013":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:38881:2984":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:38929:2976":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6721:6053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:11877:3859":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:42565:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14091:4159":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12443:3913":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10612:7383":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:3742:32867":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22016:8242":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:8259:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12508:3919":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41442:3333":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:41296:6572":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"21:895:2295":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"14:214:7123":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13173:3973":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:533:7833":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13959:4141":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:2231:7135":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:9077:7487":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:4270:7336":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:8029:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5415:4851":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:9109:3052":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:16176:4740":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11688:6942":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:2554:34399":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12543:21047":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:40069:3196":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:45338:6626":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6813:7071":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:3280:3004":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41056:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:10289:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:564:5314":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40008:3182":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:350:2898":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:14271:4205":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:15383:4516":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:503:7828":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:13298:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:4916:8036":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:39791:13371":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:3244:28544":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:46352:6723":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:12593:2902":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15836:4650":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:39977:3180":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:9289:25651":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42548:7250":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11537:20947":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1596:3002":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6504:7051":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:40553:3169":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2909:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:4291:7486":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5781:4797":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5489:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40121:3199":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:43640:7286":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12127:3899":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5344:5717":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:1503:5338":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:10065:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43976:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:403:20887":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:2768:4786":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12107:3848":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:40108:3184":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:7330:6145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12043:20983":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5665:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:15281:4486":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11715:6944":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:22531:31342":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14449:4239":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4876:5538":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9385:7578":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:7899:26008":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4885:5543":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:670:7381":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13485:4037":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7755:4801":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11573:7347":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:875:7866":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:725:2601":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:1671:5447":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:7965:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3241:25960":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7840:7583":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14246:4202":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12949:3907":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:40046:3194":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:1764:6326":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:15569:4577":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2405:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:43930:7306":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2321:13549":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:11035:3317":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:15168:4460":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2072:6333":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12808:3940":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:6913:13334":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:1054:7868":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:12313:1787":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:40099:3198":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15992:4698":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:37522:2965":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:465:5255":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2955:2908":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40027:3192":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5112:5635":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:41094:3563":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:6353:4861":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2427:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:2103:7874":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:2197:7828":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12294:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:4352:4826":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:2423:2990":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:39854:7224":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9938:20893":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:0:2763":{"crate_id":17,"path":["object"],"kind":"module"},"1:8491:3204":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:39107:6429":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:16165:4735":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:46280:6717":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4979:5588":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6588:7055":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:30281:3246":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5200:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:4343:8045":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:43525:7217":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1824:7473":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22150:13549":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:11779:7998":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6670:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12295:1820":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:532:5297":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:40:2601":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7412:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3379:7981":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7799:4799":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:5960:7003":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4629:8049":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6491:5942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"21:793:34628":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:5630:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:5214:2920":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:844:7864":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:6793:7576":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:10263:7475":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:42359:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:8175:20832":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8225:3657":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3764:2990":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5722:4798":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:698:6921":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6976:4915":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13455:4033":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1480:2989":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43500:7275":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:2854:4790":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:5367:20805":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4147:31340":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5083:5633":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:2763:2617":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"2:31765:4971":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:2904:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11674:6941":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:7744:2534":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:43835:7302":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6079:6974":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13568:4062":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4062:4825":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:4424:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9984:20894":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9179:8128":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:538:5300":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15333:4501":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:42780:6591":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:4913:4842":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12516:21052":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:31795:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8461:7945":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12671:7426":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5846:6991":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8833:6824":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12422:6963":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13211:3988":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:10966:8103":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:8050:7560":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6597:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11583:20952":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:680:3657":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:6722:7573":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:10711:2510":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:481:6912":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11755:6949":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11242:7396":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6592:32867":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7473:4972":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9094:6825":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15957:4668":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:12189:7417":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:6055:13828":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:2469:3006":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:4560:4831":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43626:7283":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12175:21031":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43093:3312":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6335:20815":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:7006:20821":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"0:344:1350":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"2:8472:31804":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41548:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10185:3816":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6872:7084":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:3334:7984":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:12261:30787":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:14986:4420":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:39803:7219":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9669:25401":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:2838:4789":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:21507:3560":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:32644:2954":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2447:7935":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8189:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12371:3944":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:39280:13382":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14131:4163":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:9335:6836":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:5711:8104":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1686:5456":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:3239:2699":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:11753:3318":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5624:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:5454:13295":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12900:3943":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14372:4219":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10958:7560":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:13344:4013":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15410:4523":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:45292:6623":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5445:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:30635:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14587:4256":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14868:4378":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:943:2699":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:883:7867":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:12411:7268":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:45309:6624":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:2680:2257":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"17:12572:3848":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"20:2416:2506":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"20:1126:207":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:15023:4427":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:2728:4784":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4891:5545":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:2037:7399":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:43033:3306":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15701:4618":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:7314:6133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9496:7476":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:5033:8068":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:4299:7166":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:44177:8250":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13526:4047":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9737:20871":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:2951:3065":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:44011:13635":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:15400:4520":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:4161:8026":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:7943:2510":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:479:5263":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6991:34429":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:7452:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8691:6816":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13581:4066":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:2265:2616":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"21:779:251":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:9886:20891":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:7932:3177":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:7420:2990":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8762:6819":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12647:7425":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:939:7865":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10929:6799":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:640:7852":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11367:3837":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7581:7160":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:9416:6837":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11547:3681":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6342:34467":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:21380:2510":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7648:20827":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5046:5621":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:2298:2618":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:2175:20963":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15445:4531":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12597:3921":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:42540:7248":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3336:7985":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:2960:2955":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7428:20825":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8151:6758":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9128:2699":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6317:20814":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8298:25724":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:1809:674":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5521:8099":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:11167:6826":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13594:4067":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6026:7011":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46306:6719":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13844:4123":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3548:7779":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41704:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:8582:8041":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46416:6733":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:45140:6608":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:15289:4487":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:4058:7336":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13877:4131":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:1818:3666":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:437:3766":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:45869:6674":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:706:6923":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:43482:7273":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5546:5813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6927:4910":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:7083:32847":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:865:251":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:40529:3163":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7910:20831":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:21278:32653":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6412:20816":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:5769:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:414:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:5555:8101":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:6647:3185":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:4821:7423":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15582:4583":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6779:8124":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:3285:32834":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10284:25674":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:40544:3167":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:22466:6334":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:2279:7926":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6098:20810":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7686:20829":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13553:4056":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2657:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13089:3955":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:31723:5171":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1485:5330":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:12639:13301":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:21382:8156":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:45271:6622":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15748:4632":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:32937:2959":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2632:2510":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:43208:3300":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:3246:3002":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:330:5213":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14847:4368":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"20:2237:2700":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"6:1580:5385":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:39865:13589":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42954:7472":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:7406:32828":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13235:2601":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43054:3313":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11730:6945":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:5352:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"18:598:34516":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:16069:4712":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:11293:20931":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:43330:3298":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5039:5619":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5064:5632":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:800:7455":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:12149:3286":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40180:3187":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:2902:19946":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:7467:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:53:19806":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1342:7868":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:2236:7141":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5483:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:8301:5042":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1593:5392":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13922:4137":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7553:7157":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11269:6843":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:7389:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14079:4158":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:3103:2983":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:5385:3814":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:11177:3303":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7633:34428":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2633:13381":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2684:4782":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40563:3171":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7984:6275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:3899:4823":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:645:7853":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7590:4808":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43226:3304":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1496:5335":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:4939:8031":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15456:4532":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:16259:4018":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:14038:4152":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:22497:6335":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:9702:781":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:6290:7192":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6494:7050":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1171:32779":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43657:7287":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:1883:2699":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:7061:4920":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7769:4982":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4946:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:674:2900":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"18:581:3691":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7618:4975":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:22520:7201":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4502:4829":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:542:6972":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:43472:7272":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:23111:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:43376:7267":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6621:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8195:7326":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:3028:32778":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:41626:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:447:19788":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13325:4008":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:7364:7153":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:2011:34536":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"16:2612:4779":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15176:4463":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:7386:7456":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:38845:2985":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10671:34504":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4139:8022":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:4:1231":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46106:6711":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:570:5317":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"20:0:1298":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"2:43783:13317":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"20:2758:2601":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"2:41110:7996":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:46378:6725":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:41862:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15814:4644":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2663:7976":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:42052:2743":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:2207:7139":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9282:25703":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15646:4602":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:700:2990":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13116:3961":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:2914:2928":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:1566:19872":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11204:6837":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"14:7:7542":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11142:3848":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4742:8021":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:123:7126":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15426:4526":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11341:7397":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:296:2648":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11788:21011":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44144:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"14:160:7542":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1490:5332":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5244:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8209:25677":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3356:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:696:6902":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:3530:6802":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:951:7867":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:31796:2610":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15266:4484":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7830:3665":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11354:20937":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:7928:3178":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:4342:2927":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"14:31:7542":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:39734:6559":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10954:20906":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:80:7371":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:4549:3272":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44000:7313":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:6159:7336":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:2694:3344":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:11595:3856":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:8060:3009":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4047:8016":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43732:7290":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:1577:7459":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:45225:6619":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2808:4788":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12408:3909":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:6002:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:22589:31370":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11075:3837":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4952:5575":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:1582:19873":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:623:34515":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:45757:6670":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:42038:2745":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9150:6828":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11443:3853":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5380:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:1952:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14177:4187":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4821:8048":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12707:7428":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:7944:6756":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:31772:31344":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:5708:6082":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13046:3951":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:14025:4150":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:22234:2510":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12318:3907":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:46326:6721":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:32272:2952":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10419:3824":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6379:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:2625:2898":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"2:35646:2964":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5290:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12277:25282":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:6034:2920":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"9:502:5236":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11620:7351":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:45396:6637":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9358:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13509:4039":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8200:7327":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:1066:19869":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13497:4038":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2478:4773":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:2369:19875":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"11:787:7134":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:2936:19947":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15301:4493":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:46431:6734":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:5835:3195":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4099:8020":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:9390:7579":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:12089:3897":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:46454:6735":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13424:4024":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"14:220:5120":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15368:4512":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13308:4006":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12530:7422":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:7605:2926":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:5047:8069":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5477:5791":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46180:6713":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:6664:6031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13375:4017":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6634:4800":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1707:5464":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11647:6939":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:5307:4849":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14560:4253":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:6673:2990":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11510:20935":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:22545:6339":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6782:20820":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7962:7838":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:8259:4971":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5002:5601":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7428:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:5024:8067":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:41459:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21297:32649":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:2738:2618":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"17:14723:4265":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:43946:7310":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:2289:32902":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:867:34447":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:41665:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:43942:7309":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:725:2510":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:4041:8017":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:0:2764":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:651:3683":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13766:4110":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:3521:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10044:20895":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:12372:7264":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:45848:6673":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:14414:4227":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:33114:2958":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:9243:25725":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21329:8160":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13738:4103":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6300:20813":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"20:2567:3345":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:10534:34502":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6505:5953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11800:8000":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:6946:13336":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:8265:6294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:7456:2990":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:762:2700":{"crate_id":21,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:11574:7135":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4756:6176":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:14111:4162":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:39930:7778":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4965:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6385:4864":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:15:2868":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5031:5615":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12297:1269":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:16249:4752":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:31882:3066":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"11:2140:7868":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9858:20890":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:0:2758":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7509:20826":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3925:4824":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10350:8106":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:10533:7487":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5400:3815":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:43194:3822":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11051:20922":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:43804:7296":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11115:7391":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:10084:3255":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6940:4912":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6542:5967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:5918:7455":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:922:7863":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5102:5634":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4424:8046":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10641:7980":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:856:7865":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8641:6805":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13999:4147":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:4614:4833":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4707:8066":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15944:3988":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11055:26005":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2394:4769":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11044:26003":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"15:394:19909":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5677:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1547:5363":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9434:7337":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5146:5638":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:7348:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6665:20819":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2986:25399":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:0:2754":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6620:4871":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12213:7418":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14994:4421":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:7684:3161":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42333:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:96:7372":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13187:3974":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:2151:7869":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3044:2962":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12768:20874":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42305:31414":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11621:6936":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8155:7120":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6962:4803":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10997:3834":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10576:25989":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"14:187:19888":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:9136:7488":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1510:5340":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:22248:8238":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:1574:2699":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21309:32654":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:5776:7318":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:430:7446":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6614:8119":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15473:4539":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:621:7559":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9230:6832":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:10638:7984":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:9167:6829":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:8188:20833":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12851:6967":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:43430:7270":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9375:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13899:4132":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6629:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10759:3848":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6263:7044":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1465:2699":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:219:7550":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:37687:2968":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8523:7482":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:517:5288":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13986:4146":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:5758:7336":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:14475:4241":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:4986:7424":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:11376:5233":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:945:7866":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:15799:4643":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3210:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"10:44:5175":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7580:7108":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15190:4466":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:7366:6161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:43258:7262":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5006:4845":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14977:4419":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5565:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7290:3103":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"13:226:5167":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2355:4762":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2548:4776":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"22:0:2893":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"17:12621:3922":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:8093:5030":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"9:0:2756":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:849:2989":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6678:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:10441:25402":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:2677:25993":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:45367:6628":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:281:32867":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22203:13549":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:8015:7856":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12278:7421":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:1885:7476":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:15418:4524":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:116:34643":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"11:1160:7549":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6768:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:5191:25646":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45324:6625":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11466:25999":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:4498:8042":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9657:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:5700:4796":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:12648:6923":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:367:34625":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"16:7132:7101":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14933:4414":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8596:6804":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:41222:31364":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:7396:3189":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44198:8249":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:4787:5475":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3841:7999":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4752:6172":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:22148:32120":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:6788:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1975:764":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:39957:3179":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:45886:6675":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:830:2617":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:4421:7554":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2408:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3946:8000":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:723:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42342:3246":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2944:3063":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12225:7419":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15463:4534":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12388:6961":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5400:5744":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:31:19774":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:8294:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:45662:6651":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15778:4640":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:41743:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11875:7356":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10877:7387":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:6610:3163":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8590:7480":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:12299:1638":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:8317:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13972:3867":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14503:4245":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46238:6715":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:45531:6644":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14545:4249":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:42595:7253":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:21819:32641":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:7978:3010":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:45984:6709":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:538:3688":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:31779:3271":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:14298:4208":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:485:5266":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:1603:19874":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4800:5484":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11853:21012":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40078:3197":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:44246:7316":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:6880:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:31884:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:1896:3006":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14189:4190":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:909:7454":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2508:4774":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:41430:3051":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8576:8047":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:507:2898":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"1:11178:25259":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:6504:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:5924:8081":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15151:4455":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:299:7127":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1621:5417":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:7602:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6447:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14788:4316":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14012:4149":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:38979:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5581:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:10391:1638":{"crate_id":2,"path":["core","slice"],"kind":"module"},"11:673:2699":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:12266:7858":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5107:4848":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:11562:26060":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:10072:2742":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41365:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:13447:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6433:7046":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2748:4785":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11868:25719":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:1830:3006":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15734:4625":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:4485:7167":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8303:7978":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:102:7125":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:46209:6714":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:4569:3069":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:11108:3305":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:16269:4023":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"20:2699:2506":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:45478:6641":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:2326:7868":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:2666:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14147:4168":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4897:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10915:34508":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:21327:2510":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:10082:3254":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:10076:2743":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:2654:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:14599:4263":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:39836:6560":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:8006:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"9:178:19855":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5863:20808":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:893:7455":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:22136:8247":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12494:3915":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:3469:3167":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5174:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6532:7053":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7306:34476":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:1557:7453":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44119:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:726:3707":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10092:20896":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:362:7847":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10710:7385":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:8073:5029":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3152:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5742:6979":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12315:1775":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7076:8154":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5306:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15116:4445":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5250:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:1891:7455":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:21241:3691":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12342:6955":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6802:7070":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10281:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:1653:5440":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11606:6850":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6409:5901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11042:20909":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5502:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:12311:1799":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6398:4792":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:5450:13294":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"9:482:19787":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:22122:2510":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6650:6029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:4495:3271":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:880:7134":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11256:6931":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:3810:4821":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3630:7455":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"0:38:2593":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"18:689:6920":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:15931:3974":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"7:78:19781":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1191:7458":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"15:0:2761":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8504:3300":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11186:6598":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:1098:7393":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10573:34501":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:42577:6587":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"13:0:2753":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:5047:954":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12454:6965":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"20:932:34561":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:10533:31381":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:43412:7269":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:1590:3004":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4862:8035":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:9315:25287":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:45548:6645":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:4940:4843":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:4503:32863":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:643:3683":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43794:7292":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5134:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6849:7083":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:22662:8015":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3351:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:4596:3273":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:2089:3657":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"9:238:6587":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:10070:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:7969:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:45609:6648":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10251:3818":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3587:3253":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:3473:7415":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2461:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15616:4595":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7144:20824":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6466:4868":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:6115:7318":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:13323:13385":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5320:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:8300:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"21:940:2617":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"16:3196:4759":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"9:392:19789":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:7339:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12289:3902":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:8328:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:710:7452":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:15822:4647":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14968:4415":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:43958:6598":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:0:1664":{"crate_id":1,"path":["std"],"kind":"module"},"16:8136:7117":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3272:3003":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3649:2699":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:43926:7305":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2592:4778":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:830:7774":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13412:4023":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:6546:7455":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8217:7566":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7287:7580":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:41390:2990":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"21:870:2257":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"21:802:2257":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:45353:6627":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11856:6851":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10910:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"9:357:19803":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13753:4108":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:39784:7218":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3779:7997":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:41451:2937":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1578:2990":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:3306:3005":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:21263:32647":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6729:6054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:31786:7210":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11419:3848":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:45736:6669":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6560:4795":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:39810:7220":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7014:20822":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5671:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5415:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6874:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:928:7864":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14341:4214":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:14752:4285":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:4135:31358":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:43769:7291":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:2527:6316":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:1678:7336":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:497:5271":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15769:4638":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11405:20936":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:9380:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:5662:7336":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10156:7243":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:3662:2989":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:45499:6642":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:728:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:5005:7987":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11102:20913":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7330:7781":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.79/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}