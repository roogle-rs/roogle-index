{"root":"0:0:1221","crate_version":"1.0.33","includes_private":false,"index":{"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenTree","id":"21:889:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:402:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:714":{"id":"0:63:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:1841":{"id":"0:121:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12672:27588":{"id":"2:12672:27588","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11915:13188"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:109:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[60,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:687:116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:62:2081","0:63:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:714":{"id":"0:374:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12687:27701":{"id":"2:12687:27701","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12686:27700"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12699:27721":{"id":"2:12699:27721","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12734:27718":{"id":"2:12734:27718","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:27183":{"id":"2:12786:27183","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2081":{"id":"0:62:2081","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[64,4],"end":[66,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12695:30291":{"id":"2:12695:30291","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44063:7250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1841":{"id":"0:79:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5549:27180":{"id":"5:5549:27180","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12786:27183"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:104:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i16"},"items":["0:382:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12678:27675":{"id":"2:12678:27675","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[35,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:55:2081","0:56:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:11:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:2340","0:25:2350","0:27:2354","0:30:2358"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372:714":{"id":"0:372:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:1841":{"id":"0:400:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12691:30294":{"id":"2:12691:30294","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12692:30290"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44045:7248","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2358":{"id":"0:30:2358","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7714:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:714":{"id":"0:59:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[50,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:714":{"id":"0:52:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f64"},"items":["0:406:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:276:2475","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:398:1841":{"id":"0:398:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:32617":{"id":"2:12722:32617","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12360:13187","str::split":"2:12713:27708","prim@char":"1:12032:448","`DoubleEndedIterator`":"2:7752:127","str::rsplit_terminator":"2:12725:32618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43821:7237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:2692":{"id":"2:12740:2692","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12360:13187","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatches":"2:12743:32619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43975:7244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Literal","id":"21:955:2444","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Group","id":"21:904:2443","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:113:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:950:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:364:714":{"id":"0:364:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1841":{"id":"0:119:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313-0:11:1844":{"id":"0:313-0:11:1844","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[120,0],"end":[120,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:11:1844","glob":false}}},"5:5535:33304":{"id":"5:5535:33304","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12787:27184":{"id":"2:12787:27184","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:33305":{"id":"5:5538:33305","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12731:27716":{"id":"2:12731:27716","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:448","str::splitn":"2:12728:27714","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43893:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2081":{"id":"0:58:2081","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[25,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:51:2081","0:52:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12693:7416":{"id":"2:12693:7416","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44025:7246","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:1841":{"id":"0:406:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1841":{"id":"0:93:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12725:32618":{"id":"2:12725:32618","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12360:13187","str::split":"2:12713:27708","prim@char":"1:12032:448","str::split_terminator":"2:12722:32617"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43839:7238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2350":{"id":"0:14:2350","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7714:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:362:714":{"id":"0:362:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:32629":{"id":"2:12772:32629","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12692:30290":{"id":"2:12692:30290","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12691:30294"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44054:7249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:32631":{"id":"2:12778:32631","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:27181":{"id":"5:5550:27181","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12787:27184"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:32627":{"id":"2:12760:32627","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12385:13183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1221":{"id":"0:0:1221","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1444,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```\n\n<br>\n\n# Non-macro code generators\n\nWhen using `quote` in a build.rs or main.rs and writing the output out to a\nfile, consider having the code generator pass the tokens through\n[prettyplease] before writing. This way if an error occurs in the generated\ncode it is convenient for a human to read and debug.\n\n[prettyplease]: https://github.com/dtolnay/prettyplease","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.33\")]","#![allow(clippy::doc_markdown, clippy::missing_errors_doc,\nclippy::missing_panics_doc, clippy::module_name_repetitions,\nclippy::wrong_self_convention,)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:313-0:11:1844","0:314-0:46:1845","0:315-0:78:1846","0:38:2420","0:344:1221","0:345:2080"],"is_stripped":false}}},"0:404:1841":{"id":"0:404:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388:1841":{"id":"0:388:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2350":{"id":"0:25:2350","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7714:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:714":{"id":"0:366:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f32"},"items":["0:404:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:314-0:46:1845":{"id":"0:314-0:46:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,0],"end":[121,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:46:1845","glob":false}}},"2:12688:7251":{"id":"2:12688:7251","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43741:7231","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12694:32616":{"id":"2:12694:32616","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44035:7247","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:33303":{"id":"5:5531:33303","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2475","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2475","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:366:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115:1841":{"id":"0:115:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:370:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:1841":{"id":"0:104:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:2439":{"id":"2:12766:2439","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:33307":{"id":"5:5547:33307","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2475","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2475","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12702:27722":{"id":"2:12702:27722","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2081":{"id":"0:51:2081","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2337":{"id":"0:35:2337","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:38:2420":{"id":"0:38:2420","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::UpperHex":"2:9808:2571","`format!`":"5:6:726","std::fmt::LowerHex":"2:9806:2570","proc_macro2::Span":"21:883:2082","proc_macro2::Span::call_site":"21:563:2495","crate::IdentFragment":"0:46:1845","proc_macro2::Ident":"21:950:2428","std::fmt::Octal":"2:9802:2569","std::fmt::Binary":"2:9804:2572","`std::fmt`":"5:4772:714"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"}},"0:85:1841":{"id":"0:85:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12673:32613":{"id":"2:12673:32613","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12682:27677":{"id":"2:12682:27677","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12794:32633":{"id":"2:12794:32633","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4594:32633"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44088:7192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[45,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:950:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2081","0:59:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:360:714":{"id":"0:360:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12709:2913":{"id":"2:12709:2913","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41875:197","prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:32622":{"id":"2:12752:32622","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12664:869":{"id":"2:12664:869","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12686:27700":{"id":"2:12686:27700","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12687:27701"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12791:32632":{"id":"2:12791:32632","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4596:32632"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44070:7193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12667:32611":{"id":"2:12667:32611","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12784:27618":{"id":"2:12784:27618","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39822:27587","Self::is_ascii":"2:12783:27178"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39822:27587","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:362:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:687:116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:93:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:376:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1841":{"id":"0:102:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::rc::Rc","id":"5:4860:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:99:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2081":{"id":"0:48:2081","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:27719":{"id":"2:12737:27719","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:1841":{"id":"0:109:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:714":{"id":"0:56:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[40,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:1841":{"id":"0:394:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1841":{"id":"0:99:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:33306":{"id":"5:5546:33306","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:32624":{"id":"2:12756:32624","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2354":{"id":"0:16:2354","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7714:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12663":{"id":"2:12663","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12664:869","2:12665:2914","2:12666:32610","2:12667:32611","2:12669:32612","2:12672:27588","2:12673:32613","2:12674:339","2:12675:27678","2:12676:27674","2:12678:27675","2:12680:27676","2:12682:27677","2:12684:32614","2:12685:32615","2:12686:27700","2:12687:27701","2:12688:7251","2:12689:7260","2:12690:7155","2:12691:30294","2:12692:30290","2:12693:7416","2:12694:32616","2:12695:30291","2:12696:27720","2:12699:27721","2:12702:27722","2:12705:2950","2:12709:2913","2:12713:27708","2:12716:27710","2:12719:27712","2:12722:32617","2:12725:32618","2:12728:27714","2:12731:27716","2:12734:27718","2:12737:27719","2:12740:2692","2:12743:32619","2:12746:32620","2:12749:32621","2:12752:32622","2:12754:32623","2:12756:32624","2:12758:32625","2:12759:32626","2:12760:32627","2:12763:32628","2:12766:2439","2:12769:27723","2:12772:32629","2:12775:32630","2:12778:32631","2:12781:2169","2:12783:27178","2:12784:27618","2:12785:27182","2:12786:27183","2:12787:27184","2:12788:27621","2:12789:27622","2:12790:27623","2:12791:32632","2:12793:7747","2:12794:32633"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12684:32614":{"id":"2:12684:32614","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1531","str::slice_mut_unchecked":"2:12685:32615","crate::ops::Index":"2:3095:2795"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:1841":{"id":"0:392:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12675:27678":{"id":"2:12675:27678","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:32626":{"id":"2:12759:32626","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"items":["0:89:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12676:27674":{"id":"2:12676:27674","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:2986":{"id":"5:5548:2986","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:1841","0:124:2473"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:360:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376:714":{"id":"0:376:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i32"},"items":["0:384:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:364:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:384:1841":{"id":"0:384:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:13410":{"id":"5:5532:13410","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1841":{"id":"0:123:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:714":{"id":"0:47:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[15,4],"end":[15,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:85:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:1841":{"id":"0:396:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:111:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:345:2080":{"id":"0:345:2080","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[622,0],"end":[626,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"}},"0:382:1841":{"id":"0:382:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12685:32615":{"id":"2:12685:32615","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1531","crate::ops::IndexMut":"2:3099:2796","str::slice_unchecked":"2:12684:32614"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12788:27621":{"id":"2:12788:27621","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34541"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1841":{"id":"0:96:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:1841":{"id":"0:390:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2354":{"id":"0:27:2354","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7714:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402:1841":{"id":"0:402:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:372:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:378:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:398:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:400:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12690:7155":{"id":"2:12690:7155","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43757:3933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:33303","5:5532:13410","5:5535:33304","5:5538:33305","5:5546:33306","5:5547:33307","5:5548:2986","5:5549:27180","5:5550:27181"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i128"},"items":["0:388:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:2358":{"id":"0:19:2358","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7714:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7714:162","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:378:714":{"id":"0:378:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:27178":{"id":"2:12783:27178","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1841":{"id":"0:117:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1841":{"id":"0:113:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2473":{"id":"0:81:2473","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2806:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12666:32610":{"id":"2:12666:32610","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12713:27708":{"id":"2:12713:27708","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12360:13187","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split_whitespace":"2:12691:30294","str::rsplit":"2:12719:27712"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43771:3119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:1841":{"id":"0:386:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2081":{"id":"0:55:2081","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:714":{"id":"0:370:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:102:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:89:1841":{"id":"0:89:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12689:7260":{"id":"2:12689:7260","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43747:7232","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1846":{"id":"0:78:1846","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:79:1841","0:80:2472","0:81:2473"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:108","0:397","0:385","0:395","0:391","0:105","0:383","0:100","0:403","0:389","0:110","0:399","0:405","0:122","0:90","0:381","0:401","0:82","0:94","0:86","0:103","0:118","0:120","0:387","0:112","0:379","0:114","0:116","0:97","0:393"]}}},"0:46:1845":{"id":"0:46:1845","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[13,0],"end":[23,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.\n\n[`format_ident!`]: crate::format_ident","links":{"crate::format_ident":"0:38:2420","`Ident`":"21:950:2428"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:47:714","0:48:2081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:367","0:373","0:361","0:53","0:377","0:363","0:57","0:371","0:375","0:365","0:359","0:60","0:49","0:369"]}}},"0:315-0:78:1846":{"id":"0:315-0:78:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:78:1846","glob":false}}},"0:380:1841":{"id":"0:380:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:27712":{"id":"2:12719:27712","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12360:13187","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::split":"2:12713:27708"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43789:3123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2472":{"id":"0:80:2472","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2340":{"id":"0:12:2340","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:889:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i64"},"items":["0:386:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"isize"},"items":["0:390:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:368:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12669:32612":{"id":"2:12669:32612","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12667:32611"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1844":{"id":"0:11:1844","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:12:2340","0:14:2350","0:16:2354","0:19:2358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:35:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22"]}}},"2:12674:339":{"id":"2:12674:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12675:27678","`u8`":"1:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:392:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368:714":{"id":"0:368:714","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9770:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9751:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:1841":{"id":"0:111:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12680:27676":{"id":"2:12680:27676","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:27723":{"id":"2:12769:27723","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:32630":{"id":"2:12775:32630","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2340":{"id":"0:23:2340","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2564:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:889:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12705:2950":{"id":"2:12705:2950","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41875:197","prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:32620":{"id":"2:12746:32620","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12360:13187","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::rmatch_indices":"2:12749:32621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43921:7241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:32628":{"id":"2:12763:32628","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:27714":{"id":"2:12728:27714","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187","str::rsplitn":"2:12731:27716"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43875:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12785:27182":{"id":"2:12785:27182","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2473":{"id":"0:124:2473","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1841":{"id":"0:106:1841","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Punct","id":"21:928:2445","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12665:2914":{"id":"2:12665:2914","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12789:27622":{"id":"2:12789:27622","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34541"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12793:7747":{"id":"2:12793:7747","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4597:7747"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44079:7187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12716:27710":{"id":"2:12716:27710","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12176:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12696:27720":{"id":"2:12696:27720","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:448","self::pattern":"2:12360:13187"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344:1221":{"id":"0:344:1221","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[483,0],"end":[487,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro2::TokenStream`":"21:878:258","`proc_macro::TokenStream`":"20:2631:258","`format_ident!`":"0:38:2420"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"}},"2:12754:32623":{"id":"2:12754:32623","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:374:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i8"},"items":["0:380:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:396:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:394:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12743:32619":{"id":"2:12743:32619","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12360:13187","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::matches":"2:12740:2692"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43993:7245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12749:32621":{"id":"2:12749:32621","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12360:13187","`DoubleEndedIterator`":"2:7752:127","prim@char":"1:12032:448","str::match_indices":"2:12746:32620"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43939:7242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12365:13184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12380:13185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:27623":{"id":"2:12790:27623","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34541"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:32625":{"id":"2:12758:32625","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12781:2169":{"id":"2:12781:2169","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12321:133","`FromStr`":"2:12320:2728"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12320:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12320:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:7643:2337":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4998:5882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:10164:3587":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:10532:7876":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13365:4141":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:45935:6651":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:42150:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:48062:6745":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:596:5430":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3295:31633":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10852:20292":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:22056:8128":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:6781:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2567:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2558:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2954:2789":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46784:6697":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2652:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:542:5402":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10968:26145":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:2015:33627":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:2799:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43614:3132":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5743:6994":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7128:6839":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43593:3125":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:1094:7374":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4566:5705":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:216:33630":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:8300:7444":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11657:6955":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4491:7928":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5859:5981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2359:4875":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11981:26148":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7855:6765":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:580:5421":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2962:2791":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:4824:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3032:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:10054:7844":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1758:7437":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12898:20285":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:41070:2982":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:31111:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4745:5746":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10890:3117":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:16076:4842":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:12264:6966":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:4487:3093":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:40571:3012":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40417:7200":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9479:3632":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:2806:2437":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:119:13781":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:6194:26264":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:8195:7124":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44514:7286":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:10724:3120":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:9770:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:2562:5277":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:14221:4316":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"11:2124:7105":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15200:4594":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9196:6847":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:41119:2993":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:16180:4131":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:7544:7111":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:4773:7404":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:41690:2082":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2197:13419":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:45873:6649":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:555:5408":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11412:20321":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11945:20369":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12872:4054":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:52:19195":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:15337:4633":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:6346:8136":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:4312:7498":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:6525:3524":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5867:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1528:5447":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3936:7897":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:9814:3075":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6485:4902":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:39628:2800":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:15287:4622":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:2586:3606":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:39530:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3282:2803":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7523:7110":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15645:4732":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6927:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:10767:7295":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2350:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:5612:4905":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:16170:4126":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15943:4099":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:6426:2983":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:3966:7899":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:875:7764":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5403:3925":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:4949:4950":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6898:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11690:20397":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7371:6323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15961:4109":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:708:2725":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"5:6837:3556":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:41924:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:46572:6678":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12356:6971":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12596:7409":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:12032:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5632:3618":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:1796:7439":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:21373:8044":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8453:6627":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10051:3926":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2644:4887":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:53:3501":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:46860:6699":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4764:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:2043:3775":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:12345:4022":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:8167:20220":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:3191:31997":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:12125:7240":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13633:4207":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:6107:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:6599:2810":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3239:7878":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13182:4109":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:21170:30345":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:654:14138":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:5928:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15224:4601":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5111:5937":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:46626:6680":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:4015:3541":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6764:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:9014:26591":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10803:7369":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"15:0:2588":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:12365:13184":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:10449:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"14:7:7487":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11800:3971":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1063:7767":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9021:26302":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"21:15:3238":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"1:8011:7872":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:5963:20197":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:15345:4634":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12746:6973":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4428:5639":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:1490:7431":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4870:5811":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:5051:26562":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16134:4855":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"13:0:2580":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14021:4270":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14887:4526":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:710:7429":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:1007:7105":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:825:3530":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6261:20203":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:501:5373":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:43565:3116":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:40384:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1146:7433":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:599:33622":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:719:3820":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1562:2823":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4955:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:7360:33579":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:23048:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:7633:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4738:5744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15192:4593":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5121:4955":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10813:33617":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:2149:7138":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10172:3930":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2966:2792":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14385:4348":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:4742:7915":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:7556:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:7732:7755":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3045:2758":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:4376:3577":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6901:4909":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:1910:2822":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10667:33619":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:6543:8007":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1639:5525":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:7677:2997":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43821:7237":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15671:4741":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:766:24442":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:744:2444":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"5:7518:2751":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2303:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:3602:2809":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5992:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12510:4030":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"20:2601:6917":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:15133:4580":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11617:6950":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12459:3947":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:41833:6612":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:738:2428":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"5:3813:2826":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13347:4133":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8796:7451":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11604:6949":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15013:4551":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14208:4315":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11817:20399":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:42608:2569":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7417:2819":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2574:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:22955:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2622:7508":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:614:33623":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13395:4145":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:30549:6398":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12366:20428":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:46382:6672":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:9459:30870":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:12003:7756":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:30543:6396":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:7923:7509":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:22095:8129":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12921:4019":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11340:6856":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2696:4889":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:43153:7227":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"20:2640:3161":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"18:671:7362":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12035:1145":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:507:5376":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11001:20299":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10067:3927":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"7:78:19170":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2856:2828":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:1682:5551":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9034:6839":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:48214:6756":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:6420:3501":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:922:7761":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4401:5616":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22415:7171":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12255:6965":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:5415:7985":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:22362:7170":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43514:7436":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"20:958:3508":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:3060:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10473:3633":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:563:5413":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45781:6645":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1632:5521":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5634:6983":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2522:13260":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:4177:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:1819:7440":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10738:7956":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:7828:5096":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:30577:30641":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:681:6923":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2810:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:1507:5439":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7782:7112":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:511:20274":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:2187:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5753:8002":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:21484:2337":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:22675:7896":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"20:0:1169":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"5:4439:3549":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15557:4709":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1664:5544":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44151:13199":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6691:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6415:7053":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7341:3366":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10726:33599":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13162:4099":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:867:3365":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14662:4392":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11516:7892":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:41092:2987":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7692:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44079:7187":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14399:4349":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:3461:4925":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:12320:2728":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:533:5396":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:10685:3135":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6915:4910":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:781:2827":{"crate_id":21,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"14:202:13201":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7534:4914":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:107:33702":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:11666:6956":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:11915:13188":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13684:4220":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14439:4354":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13202:4110":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4947:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13516:4178":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1576:5477":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15329:4631":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4921:4949":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:5645:3556":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:12055:1691":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:15480:4684":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13436:4155":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:13259:2767":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8232:7446":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5009:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10155:7515":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:8551:6830":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:3014:2804":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6467:7057":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:9810:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11449:3797":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11313:7454":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:22649:6394":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:934:2502":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"6:5910:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"20:2750:2445":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"16:8134:7123":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:30282:7895":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:22613:30647":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8330:6204":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5866:7006":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43729:7230":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:11436:3134":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12548:20432":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"0:345:2080":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"2:23079:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3600:4926":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:22011:8127":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:10831:27402":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:2561:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14485:4019":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:12039:1617":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:4303:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:40853:3024":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:4040:31457":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6804:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:8847:2873":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:12380:13185":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:3460:7396":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11215:6855":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:801:6909":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:482:3602":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11307:20322":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4641:4941":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:45827:6647":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44188:7258":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12127:7400":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:12038:1531":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:12052:4009":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40401:31333":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5746:8001":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:2339:4869":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:3584:7397":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:7901:7297":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"21:843:2444":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:11476:7893":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7621:20215":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:9891:20259":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:39596:2798":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"10:36:5279":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11269:3947":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6346:20204":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10102:3928":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:43685:3128":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14296:4328":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6658:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6204:20200":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:0:2581":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:4431:3578":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:39649:6471":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39457:2797":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"14:221:5225":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13491:4174":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11321:3958":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:149:3509":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:521:24443":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:43757:3933":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7291:3541":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7529:3783":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10569:33600":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:7580:3628":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40723:3007":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:276:2475":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"20:183:33675":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:41949:2810":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:595:3783":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"11:2469:2826":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46525:6677":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11168:20316":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:2428:4878":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11593:6857":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"18:531:6920":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10432:33611":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11051:3637":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:5872:3541":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14822:4516":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:40280:7190":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11215:6940":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44345:13200":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:811:2826":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8226:7444":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13419:4147":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:1472:3365":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"21:712:3162":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:42615:2570":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:47738:6739":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14359:4346":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8157:6806":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:32295:5276":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1703:5561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:44578:13509":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"9:0:2583":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4724:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11453:3640":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5982:6040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:15108:4575":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7318:5058":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:41644:3682":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:30565:3066":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11113:7376":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:14786:4486":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12056:1241":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2907:2781":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:2853:2883":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:42906:3066":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"7:31:19163":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:12591:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:984:2810":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:15980:4819":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"9:177:19244":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:883:7765":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"9:237:6627":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46160:6660":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:727:3823":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1531:7434":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:16087:4847":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:7660:5084":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:40266:6601":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:7429:2981":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:7613:20214":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:2564:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:1019:3524":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14312:4332":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:2251:7145":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:43839:7238":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13083:4081":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:41086:2985":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15184:4592":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:41941:2809":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13297:4126":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:299:7128":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22524:7176":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"21:792:258":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:13787:4239":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15855:4096":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:7489:2361":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:122:33728":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:1538:2810":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:1558:5467":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:859:2810":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8286:7926":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3425:6809":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:2542:5273":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6513:7058":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15311:4627":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:45975:6653":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:2744:4891":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:7262:2768":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3160:29947":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4845:31621":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5033:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5431:7986":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6721:20207":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:3232:4866":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7639:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15301:4624":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:4235:2752":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9559:20258":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6352:7049":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13869:4249":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:44045:7248":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:5825:3612":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:21801:3112":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5085:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:32349:3091":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13218:4114":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12290:6967":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10941:20295":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11563:6946":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12930:20286":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40651:3004":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12220:4016":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:1087:33518":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15589:4724":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:45761:6644":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:640:7750":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:140:3776":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:22188:8133":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12166:20404":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6913:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8200:3024":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7054:7100":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:11885:3106":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13056:4073":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:844:7762":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3186:2822":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:2352:7767":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:6318:4971":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:2305:19333":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:44687:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11459:20360":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:12045:792":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:10538:7874":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8562:7304":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:489:5368":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7865:7296":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22146:30778":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:6596:8009":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:5802:3003":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46603:6679":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40474:7682":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:918:7430":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"21:878:258":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"16:5648:20194":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:434:7424":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"9:357:19192":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:39574:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:367:33672":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"6:4814:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2958:2790":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:1760:7438":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"22:0:2720":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:39371:2806":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13026:4069":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:2169:20349":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8169:7839":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3797:4928":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:898:2526":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7391:20212":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2821:2753":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3276:2801":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:0:2591":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:41774:31334":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:32342:31034":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12999:4063":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5384:20193":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:939:7763":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2304:7105":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:435:3879":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3980:7900":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6943:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2920:2786":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:14099:4297":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8545:2526":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:1648:6368":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11194:20317":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11439:20333":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4628:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5969:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:637:7749":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9678:20263":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:43747:7232":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11645:6952":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"21:775:2527":{"crate_id":21,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"2:2927:2784":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:1501:5436":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:21776:8047":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:4703:7927":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"14:31:7487":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:41810:7299":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:15003:4550":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1784:2826":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1496:5434":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13254:4121":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1281:7767":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3220:2824":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10035:3925":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2386:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5123:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13989:4266":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:11144:6831":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1556:2822":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4776:5765":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10510:7364":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:10535:7878":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:32331:26934":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6047:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:0:530":{"crate_id":2,"path":["core"],"kind":"module"},"1:2352:6371":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:42869:30642":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40290:7191":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:478:3507":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:11469:20361":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:16016:4826":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:9790:20278":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3270:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:23234:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:2974:32005":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4388:5606":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:10578:3634":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12191:4011":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:30741:30645":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"10:44:5280":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:12684:3893":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6944:33539":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:908:2120":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"9:450:19177":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8146:6805":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10608:7366":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4824:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22500:6377":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:43715:6633":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:39410:2805":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:1956:6375":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14156:4309":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14698:4423":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:3394:3547":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:40599:7205":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4789:5769":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11536:6944":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:9454:31846":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:3589:2526":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40863:3025":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"20:2705:3162":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:4860:5807":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"21:928:2445":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"17:13383:4142":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:15384:4646":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12324:6969":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6059:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:950:2428":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"6:4908:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:9806:2570":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6968:20209":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:1546:5458":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11158:6832":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:7651:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44070:7193":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4808:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6929:5020":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:6681:3524":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12418:20438":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:10338:26899":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11714:20367":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7884:20218":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:40238:7189":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:48100:6748":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4783:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"14:160:7487":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:7492:7153":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:10121:1498":{"crate_id":2,"path":["core","slice"],"kind":"module"},"6:4893:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1566:19261":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:80:7352":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:2057:7770":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6083:19306":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11958:4003":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5052:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11932:7394":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:2644:2810":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:39635:6470":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:1567:2825":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:40590:3014":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:3166:26791":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11426:7388":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7708:4918":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4884:5816":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:2771:2428":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"21:698:6908":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:4488:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:40464:3579":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:849:2809":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14633:4372":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:41873:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:2228:7386":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6456:7056":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:4663:13244":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6798:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:43143:6627":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7663:7737":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13584:4182":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:7848:7295":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12784:6974":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6687:7072":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11399:7387":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14765:4478":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7436:5077":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4698:5741":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:22559:6382":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13676:4218":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13322:4131":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:4557:4938":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:7259:2978":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:7311:32002":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"13:110:33519":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:16146:4858":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:40501:2999":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12202:20427":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:40310:7187":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:7710:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40877:3026":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:14426:4353":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:10011:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:43574:3114":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14122:4306":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14057:4276":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"20:433:3505":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:3491:26407":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2284:19307":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12486:4029":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14373:4347":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1537:5452":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5322:4956":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:41958:2871":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"15:394:19297":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:7629:3561":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7041:7097":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:504:3538":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:1821:7441":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:6540:7510":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6222:6138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2380:4876":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2915:2782":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5363:4957":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2199:13420":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4616:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:15374:4641":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46095:6658":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12301:6968":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"11:2443:3541":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:3066:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6682:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12445:20433":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:48024:6744":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:357:7744":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"14:187:19276":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2883:2775":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12153:7401":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11170:27400":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:22536:31339":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5419:3926":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:40530:3010":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46058:6656":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:401:20273":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:3179:2526":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:40521:3000":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:44486:7279":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:15244:4608":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43975:7244":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:574:3799":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:351:7420":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12410:4027":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:5830:7000":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15680:4745":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7599:3630":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:2968:32028":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:430:7423":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13896:4254":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:4862:4947":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:8181:4920":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8936:8014":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1650:5533":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:14509:4370":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:4192:7158":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:48199:6755":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:44035:7247":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44761:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:3347:2759":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14181:4312":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4666:5738":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15507:4696":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12432:7403":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:4038:7904":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:44356:7267":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:47020:6701":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:3065:3827":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6813:6234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:5689:3015":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"20:404:7680":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:41063:7213":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:8959:6838":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14904:4528":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10207:3931":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11355:7320":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16032:4831":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:774:3365":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:1040:7105":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:44219:7262":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:742:7430":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44566:7288":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44697:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11701:7389":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15903:4805":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:7843:7442":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9918:20281":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:7931:3775":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13309:4129":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11345:3963":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13648:4211":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:21124:30332":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13754:4231":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:1769:6372":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4740:7913":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:8846:2760":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41661:7890":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"20:2534:6914":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:42425:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:328:7131":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:893:3541":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10944:5338":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:483:5365":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21314:8045":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:3063:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11497:3966":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:22202:13419":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12050:1633":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:256:33605":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7554:4915":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:46706:6681":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"13:226:5272":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:13204:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1545:2826":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:10840:27405":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:0:2585":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:46113:6659":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7462:7150":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:7838:3872":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15747:4757":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10775:7368":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:21386:3678":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:42111:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11485:20338":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4543:5692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22986:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:6430:8004":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:8845:2761":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:5780:8003":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:1676:3518":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:4613:4940":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:2933:19334":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:22663:7181":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4045:3524":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:42851:3066":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"20:2504:3163":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:48184:6754":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2526:4882":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:43741:7231":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12042:688":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:6079:6097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3056:2794":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"21:834:2428":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:43131:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:7752:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:3212:2823":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9026:26296":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4719:4942":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8891:6835":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"15:288:7410":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11141:7377":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8207:3933":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:1570:5475":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12273:4052":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:8168:2811":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:43640:2999":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:9599:3067":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:11126:20298":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:9751:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:6249:3618":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14145:4307":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:955:2444":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"18:652:3799":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44748:6641":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2209:7821":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:40613:3016":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2284:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2811:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"21:883:2082":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"2:44803:7291":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:673:2526":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15356:4638":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5015:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40552:3002":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43122:7226":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:3930:7898":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7513:7109":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11045:3636":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:42881:5111":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:48237:6757":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:15710:4750":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12828:4052":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:41077:2983":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1514:5442":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12659:20260":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:13013:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12614:20283":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5712:6989":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11178:6638":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:14266:4325":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:6866:3567":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:23110:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:9800:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:1394:3783":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:12310:4018":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:1883:2526":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"9:507:5341":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10757:7308":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5816:6999":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44267:7264":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:4585:4939":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4496:5670":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4744:7916":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2281:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"18:481:6918":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:4376:3549":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:687:2809":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7102:20211":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:536:6976":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:10797:3123":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7597:33538":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:2403:2809":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12009:3958":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2392:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:9795:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13145:2428":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13121:4096":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44541:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13882:3976":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:41111:2991":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5673:4904":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9730:20276":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43921:7241":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2641:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2948:2788":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:945:7764":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:3251:7395":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:2423:2810":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:15631:4730":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:1555:3547":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:5727:6992":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:207:3523":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4914:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7279:7149":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:2383:2526":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:645:7751":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:699:6927":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46428:6674":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4455:5649":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:755:6936":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14896:4527":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:9267:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3837:7894":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:1891:3541":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:2809:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2932:2501":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6156:7044":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4311:7925":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"20:1819:3784":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"11:1887:2810":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10822:6806":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:15689:4747":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:1450:2810":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:16004:4824":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13097:4082":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:42010:2762":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6893:5017":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2205:3573":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10471:33620":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:574:5418":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4087:13174":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:22134:8132":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:6960:20208":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:39822:27587":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14778:4485":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:3032:4921":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6248:6153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7613:2826":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"11:1896:2826":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12850:4016":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:40302:7192":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:7540:7516":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:0:2586":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4676:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15101:4573":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:14934:4534":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:10617:2809":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:1203:7375":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13976:4265":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:9147:7307":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6600:20206":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:15519:4699":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:10986:6833":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12536:7406":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:23172:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8493:7978":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:12431:13193":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2971:2793":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:8205:20221":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12584:20434":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:5395:7984":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2861:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"21:515:2725":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"17:15493:4690":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:42086:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:43875:3121":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:62:13727":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:10904:3122":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:12102:7239":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4497:4936":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:8115:7120":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10716:7367":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:3099:2796":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:2231:7135":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:6696:4999":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:9812:3074":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11901:3108":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15733:4754":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:7738:7792":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:7792:20217":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10988:7371":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3431:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:40344:7195":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:12964:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:43161:7228":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:48146:6752":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6100:6109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6159:6124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:621:7503":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39470:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13935:4258":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3280:7875":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13809:4240":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15049:4556":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6792:7086":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5891:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12115:7399":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4529:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:16049:4833":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:2426:2597":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:48276:6758":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:6856:3566":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9186:26827":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:2548:4883":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11779:3969":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48080:6746":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:22248:8123":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:12047:794":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:11403:3133":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"18:515:3802":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"15:306:7415":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4434:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:8958:13184":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7689:3634":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5004:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:7616:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:8352:6812":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5941:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7492:7106":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:6112:3547":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10242:3932":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2903:2783":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2504:4881":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:10642:3119":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10896:3944":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6376:20205":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:7610:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:8097:7117":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:47096:6703":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4710:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:21923:2337":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:5571:7988":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:42841:6618":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:9272:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:2662:7871":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:3888:4930":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1680:3524":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:904:2443":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"6:6666:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"20:2710:2333":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"1:9128:6843":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:881:3532":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6718:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2596:4885":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6711:6200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:1917:2823":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4610:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:12951:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:636:3819":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10953:7987":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:4928:7405":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:5987:2745":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:9433:714":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:8326:7955":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:4469:7927":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2618:4886":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10950:20308":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15566:4711":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:9808:2571":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:22119:2337":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:15079:4567":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13448:4158":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"9:330:5318":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46036:6655":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:12986:31811":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15612:4725":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:4602:2512":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"5:7476:31333":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9624:20256":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:2776:2444":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"14:40:2428":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:40664:3019":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:21493:8042":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:363:7745":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4578:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7503:4913":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6279:4968":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:4087:2809":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4383:7922":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2788:4893":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:15177:4591":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:16123:4853":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:40699:3022":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"21:722:2082":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"20:2592:3163":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:12077:20417":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46306:6670":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:3310:2757":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14413:4352":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:40229:7188":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1265:7105":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:2321:4867":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11369:3965":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:3655:3832":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:4635:6215":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:4745:4943":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13961:4262":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3199:7876":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:2303:2445":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:44494:7281":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:1550:2824":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:42189:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7862:7113":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:43939:7242":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:837:7761":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"21:732:2443":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"0:38:2420":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"6:6086:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8850:2526":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:3968:3547":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:40713:3023":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:12065:7234":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:0:2589":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:48120:6750":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4637:6217":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:14969:4538":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8237:7889":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11395:20326":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"8:0:2582":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:96:7353":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44294:7265":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43789:3123":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10962:20303":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:2151:7767":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:3764:4927":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10520:33607":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:48109:6749":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11027:3916":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4053:4932":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43583:3115":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:660:7358":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40683:3021":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:42464:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:42018:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:22576:30637":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:16109:4849":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:44502:7283":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:47986:6743":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:9651:20275":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15546:4708":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4902:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1126:32030":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46006:6654":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43365:3143":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11605:26579":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4151:7448":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10095:7458":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1652":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:14843:4521":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2518:7870":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4625:7902":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7015:5025":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:2600:3591":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:42061:2526":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40431:7807":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8137:2981":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4595:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14878:4522":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:2178:7140":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:12044:795":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11549:6945":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46206:6667":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:15:2695":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:2406:4877":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11743:7392":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7694:4917":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:4351:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:16098:4848":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:7343:6320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14757:4475":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:2231:33473":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:7717:7754":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:10315:3935":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11755:20398":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:12054:844":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:557:7734":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:10439:2337":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3241:7879":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:16160:4859":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4854:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1718:5568":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4535:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8001:26595":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4603:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:4440:3092":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:8239:5076":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7269:33590":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:1678:1182":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:30509:2756":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2868:2734":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3732:7893":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7023:3572":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3192:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13832:4245":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:1746:13429":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:3500:7838":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:3830:4929":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10657:3958":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:1481:7134":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:1296:7766":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2942:2787":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8476:6825":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3443:7683":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:6466:3622":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:2242:2527":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:8920:8012":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:12049:1636":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:7702:6359":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12335:4019":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:2698:6365":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:914:7429":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11294:7379":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:393:19178":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6499:4919":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:44088:7192":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2859:2885":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"18:491:6919":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2202:7820":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:1051:7767":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6818:7087":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8904:8013":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46450:6675":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:113:7356":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:8177:2996":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:14194:4314":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2873:2779":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12230:6957":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7657:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:15117:4576":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:14324:4334":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:909:7431":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:45805:6646":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:42267:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:15027:4552":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:42601:2572":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6479:3541":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:10019:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6569:4907":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46236:6668":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41797:7221":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:9968:20282":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5897:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4129:7447":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:4460:2889":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12474:3958":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:11612:7325":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8006:26283":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12140:20405":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4523:5682":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6531:7066":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4755:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:10593:2526":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:6225:3028":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3265:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6070:3613":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:1603:19263":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1697:5560":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:244:33711":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:12180:7402":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:43675:3130":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8220:7246":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5075:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44399:7277":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11590:6948":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4830:5791":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1541:3541":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13724:4228":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3674:2810":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:21925:8043":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:14282:4326":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:11382:7322":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:12048:790":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12718:20284":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:2326:7766":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:2670:4888":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4375:5596":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:800:3541":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2816:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:23710:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5760:20196":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5068:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:9802:2569":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:7714:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3323:7867":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:1511:7430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:700:2810":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:951:7765":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:2369:19264":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:10422:7363":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:44506:7284":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1591:5489":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6041:20199":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6560:3511":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11014:7372":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4449:5647":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:15160:4584":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13463:4164":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7090:7104":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:12031:1028":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4473:5661":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2832:4895":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7722:4908":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:261:33615":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2907:4898":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6401:4901":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5023:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8535:7301":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:41991:2872":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:46404:6673":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1873:7505":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:4:1108":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:1641:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47130:6704":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10915:7370":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:21102:3807":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4989:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7388:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:690:6926":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8828:6832":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:4406:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:7370:2810":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:45905:6650":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:1604:5496":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:123:3512":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:5383:13177":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:0:2590":{"crate_id":17,"path":["object"],"kind":"module"},"5:3338:2826":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11088:3951":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6700:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15659:4739":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:44522:6638":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:12360:13187":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"0:0:1221":{"crate_id":0,"path":["quote"],"kind":"module"},"2:7673:2998":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:10262:3595":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:44063:7250":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4847:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2889:2778":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2693:7805":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:4042:7905":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6268:33582":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6332:4899":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2569:2819":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8292:7921":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:12374:6929":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14497:4363":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:889:2333":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"5:7325:2810":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15125:4578":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7651:20216":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13235:4116":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6189:7047":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6226:20201":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:0:2219":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"2:4883:7881":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:6610:3623":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:1760:6369":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2380:7834":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"20:2730:2120":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"6:4364:5588":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13285:4125":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8403:6822":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"14:165:19269":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3915:4931":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10337:3936":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46474:6676":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:23141:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47940:6742":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4159:7449":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:3735:7892":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4549:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11388:7323":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:6998:3568":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:2911:2780":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"20:2379:2444":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:10059:7166":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:8171:2812":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:4386:3091":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4028:7903":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13407:4146":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15432:4683":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4700:7954":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47066:6702":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:2810:4894":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10925:20294":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6879:5015":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6961:6314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5146:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"20:2578:3164":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:10876:3121":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:43666:3127":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11243:7378":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1434:2809":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10247:7990":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:533:3603":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:6896:3625":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:7543:7157":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12560:7407":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:7143:3009":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9274:7440":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:1066:19258":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:10780:7315":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:2450:4879":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12387:20429":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:2140:7766":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12091:7398":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:2536:2443":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6008:13701":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5939:7014":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:10940:7504":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4977:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12797:4051":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8190:3010":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:2521:2337":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:1909:701":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:13038:13263":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6012:6063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14455:4356":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4180:7450":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:119:6907":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"6:4516:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13273:4122":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"9:486:19176":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:102:7127":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2368:7828":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:4064:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:4774:4944":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5500:7987":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11370:7514":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:7362:2810":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"14:215:7125":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6837:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21112:30332":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6753:7074":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46830:6698":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6844:5011":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44202:7261":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5974:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1913:15130":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"11:1142:19260":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11619:7325":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:1903:2824":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"11:2548:5274":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:39510:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40642:3018":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:2970:6364":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9474:7442":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:5574:4900":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:48161:6753":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10785:33606":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:5381:7983":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:22277:8124":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:5130:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5088:4954":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5435:4958":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:9971:7218":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:39486:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:40543:3001":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8213:3119":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:9069:6842":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:6741:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40561:3011":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:42946:3068":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44025:7246":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:2329:2428":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"5:3246:2825":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15990:4820":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:15235:4605":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12701:4048":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14950:4537":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:3095:2795":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10293:3933":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:5588:4903":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40325:13250":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:624:33625":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:7604:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47816:6740":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1419:2526":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:12176:3135":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:35:3521":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:4307:7497":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:42384:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15321:4630":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15279:4619":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:475:5360":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47878:6741":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:7505:7156":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:21771:2337":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:5518:3547":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:21367:8041":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4964:7961":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5829:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6263:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:7445:3551":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:2031:7380":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:2967:2737":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5971:3618":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:7805:2829":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:43106:7223":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:787:7134":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:7679:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:10230:3590":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13856:4246":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:23017:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:3482:3073":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:6583:7068":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:22282:8122":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14346:4345":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:44778:2821":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:21495:3678":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:2878:2776":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8385:7965":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13765:4232":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:44510:7285":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7342:33549":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15087:4570":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:42345:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:21158:30342":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:1534:2526":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7271:2810":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:6983:7513":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:15212:4600":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:32335:5076":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:11537:7894":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:42503:8000":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:12037:1498":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:11477:3137":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:47280:6705":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:23203:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13909:4255":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:1310:7494":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11290:3638":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:1521:5444":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:396:3516":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2766:4892":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:7668:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:5798:4961":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:22642:7178":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8973:26291":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:1674:5550":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:12052:1635":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2472:4880":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:41101:2989":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:40581:3013":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:40631:3027":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:7861:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4440:5642":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13742:4229":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10974:3947":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:856:7763":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44379:7275":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:15037:4553":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10137:3929":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44054:7249":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:40223:7187":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6017:20198":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:44490:7280":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:2631:258":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:4569:7945":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6545:4976":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:32443:2888":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:44518:7287":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:23265:3679":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:4527:4937":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:4906":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4050:7907":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:46076:6657":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:44498:7282":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:3994:7902":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:47486:6737":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:40494:7837":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:43993:7245":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4167:7923":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"0:344:1221":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"17:9860:20280":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:5568:6125":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"15:327:19291":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:7037:2923":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:785:3527":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:4924:850":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:8991:26104":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6386:4973":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:31139:3807":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:7723:2830":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6071:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:7380:26284":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10430:7451":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5905:7008":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:45957:6652":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4841:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3255:2799":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"21:806:33717":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:42897:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:3510:7859":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"21:680:3775":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"5:5339:3524":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:609:33624":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:21312:2337":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:22148:13419":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:2864:4896":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11632:6951":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4821:7912":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11034:3635":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8984:7732":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"20:648:3165":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"18:538:3804":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7284:2871":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3278:7874":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40622:3017":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2469:6361":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:4772:714":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:40250:30635":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:44173:7252":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5117:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:46258:6669":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14041:4271":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:590:3808":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11256:20323":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5044:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4584:5714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6228:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:41627:3680":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:10247:3591":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11675:4034":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12103:20426":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12572:7408":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:2570:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7554:7496":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2807:2754":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:4999:3547":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40674:3020":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4968:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:2197:7383":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:2978:32006":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6243:20202":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:3049:19336":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11197:6843":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:2895:2777":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5049:4953":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:7754:7504":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:4462:4935":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:46352:6671":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4906:7952":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:41604:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:1923:2825":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2911:3609":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:30635:30651":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9759:20277":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4556:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:32356:7185":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:21139:30336":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11978:20368":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13948:4260":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5921:6009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42622:2571":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11507:3967":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7301:3535":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10881:20293":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13707:4225":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:15868:4775":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5982:7017":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:4247:2526":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:6819:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11727:20380":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10559:7365":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2937:2785":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11998:26307":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6889:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:123:13782":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:815:2082":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:7598:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:10097:26574":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:1734:5573":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7365:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:5387:13178":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:4806:4945":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:48135:6751":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:588:7746":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15527:4702":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:5639:7292":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:14087:4295":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11523:6942":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:6415:7162":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:43361:7229":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6934:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3988:7901":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:13166:3600":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:4889:4948":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:707:6929":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:1107:19259":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:15294:4623":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6868:6272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12953:4059":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:6409:3005":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8842:6833":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7915:26575":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8814:6831":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"20:989:258":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"5:1500:7429":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:7622:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5017:4952":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22468:6376":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:2354:7824":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:12141:7243":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4798:3610":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14921:4529":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:5082:26562":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3733:3775":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:13155:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5955:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8308:6811":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:45851:6648":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:4161:7681":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:15062:4562":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:26112:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:8215:31844":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4686:5740":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6114:6111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13922:4257":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9943:20262":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:44331:7266":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1902:7802":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:7645:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14001:4267":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15267:4616":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7568:4916":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:6162:3617":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5104:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4932:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:2636:2725":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"6:4878:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:40389:7199":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:21813:30343":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:1072:7494":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:8050:5134":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8866:2810":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43346:6631":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"20:2691:2082":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"17:14251:4321":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3201:7877":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:1160:7494":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:2139:3538":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:10918:3118":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1710:5564":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4461:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11991:4006":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:1025:7766":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8274:7299":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"20:1196:214":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"16:3315:4924":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:507:3799":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:42924:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:1582:19262":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1691:5557":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2881:4897":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:836:2526":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:7026:3626":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"10:0:2584":{"crate_id":10,"path":["adler"],"kind":"module"},"1:1054:7766":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:40337:7194":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:21365:2337":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14235:4319":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:15535:4703":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42077:2810":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"18:644:3799":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4647:5737":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44790:2766":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11041:3958":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:364:3514":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4231:7924":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11576:6947":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:1020:3162":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:39552:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:7644:6763":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:10835:3124":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:42069:2809":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12758:4050":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13334:4132":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13504:4175":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:1110:7432":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13663:4216":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:44705:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:22484:7172":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9164:26600":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:7067:7103":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6169:6127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11052:7367":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:2725:2443":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"5:261:3524":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:41933:2526":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42228:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:9804:2572":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:495:5371":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:44740:8134":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4207:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44366:7271":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10618:33610":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11155:6937":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4922:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5140:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11816:3644":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:10762:3136":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8872:6834":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2899:2735":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:8072:5135":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12029:4008":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43603:3126":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12014:26153":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43653:3131":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5152:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:41852:6613":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:1063:2082":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:2370:7829":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:588:5426":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:4344:4933":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:12385:13183":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:7136:7455":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4800:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"21:704:258":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:4506:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:40318:7193":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12244:6961":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:21141:30341":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:5696:20195":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:3748:7770":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:629:7495":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:6146:3600":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8281:7300":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9813:20279":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:8281:5147":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:3682:3524":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:928:7762":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:4986:4951":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6136:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:9048:26152":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:5885:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:527:5393":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"20:2270:2443":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:15842:4082":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:7582:5080":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:43771:3119":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:10792:6765":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:7429:2820":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:2864:2887":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:4417:4934":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:880:7134":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:48089:6747":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7474:20213":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6128:6116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:736:24441":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:3225:32001":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:564:3806":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:2969:19335":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10076:7439":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:8858:7453":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14989:4546":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:5149:2745":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:40370:6602":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:6811:8039":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:832:7431":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:15367:4639":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:1836:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11767:7393":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:21156:30338":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3670:7891":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:5613:3547":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12396:4024":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4052:31456":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7006:20210":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:10762:7310":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:22924:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:43114:7225":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43695:3129":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:8154:20219":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11476:7135":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:2755:2502":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"2:47628:6738":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13478:4170":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4639:6219":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:7207:7435":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4835:4946":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"14:0:2587":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:15253:4609":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1743:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:15725:4751":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12043:690":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11307:7316":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7736:5087":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5661:6987":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2574:4884":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:42001:3151":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12972:4062":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3540:3541":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10016:20257":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:12030:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12380:4023":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:9752:3073":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:7906:7298":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:7462:5078":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:548:5405":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"9:426:19179":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:40351:13251":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:903:2826":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:7668:6764":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:16062:4839":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:569:5416":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:43893:3117":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14470:4360":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:6:726":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"6:4480:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:42306:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3366:2987":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6425:7054":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:825:2443":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"16:5995:6978":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:360:2725":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:11065:3949":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3163:26792":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14170:4311":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:0:1523":{"crate_id":1,"path":["std"],"kind":"module"},"16:2722:4890":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:22233:2337":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:13695:4223":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4915:7953":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:46942:6700":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1596:5491":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:2554:33515":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:2427:2333":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:2355:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:22551:6381":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:582:3807":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11226:20332":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:22597:30636":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6361:7050":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6742:7073":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6120:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.70/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}