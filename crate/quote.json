{"root":"0:0:1437","crate_version":"1.0.36","includes_private":false,"index":{"0:362:830":{"id":"0:362:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:2452":{"id":"0:404:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenTree","id":"21:889:2954","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:400:2452":{"id":"0:400:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:402:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13855:33869":{"id":"2:13855:33869","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388:2452":{"id":"0:388:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:109:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[60,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:787:122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:62:2694","0:63:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:398:2452":{"id":"0:398:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:830":{"id":"0:366:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2452":{"id":"0:85:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:2452":{"id":"0:111:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:1437":{"id":"0:513:1437","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[490,4],"end":[494,5]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/2.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro2::TokenStream`":"21:878:266","`proc_macro::TokenStream`":"20:2611:266","`format_ident!`":"0:38:3041"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"}},"2:13829:26398":{"id":"2:13829:26398","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:2452":{"id":"0:384:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:104:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:380:2452":{"id":"0:380:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i16"},"items":["0:382:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:11:2455","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:2961","0:25:2971","0:27:2975","0:30:2979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[35,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:55:2694","0:56:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13819:33858":{"id":"2:13819:33858","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13453:13954","str::split":"2:13812:26388","prim@char":"1:12652:492","`DoubleEndedIterator`":"2:8394:134","str::rsplit_terminator":"2:13821:33859"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44784:7680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:3648":{"id":"5:5727:3648","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2452":{"id":"0:96:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:34584","5:5713:13919","5:5715:34585","5:5717:34586","5:5725:34587","5:5726:34588","5:5727:3648","5:5728:26124","5:5729:26123"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:299:3095","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f64"},"items":["0:406:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:382:2452":{"id":"0:382:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:3093":{"id":"0:124:3093","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1437":{"id":"0:0:1437","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1464,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```\n\n<br>\n\n# Non-macro code generators\n\nWhen using `quote` in a build.rs or main.rs and writing the output out to a\nfile, consider having the code generator pass the tokens through\n[prettyplease] before writing. This way if an error occurs in the generated\ncode it is convenient for a human to read and debug.\n\n[prettyplease]: https://github.com/dtolnay/prettyplease","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.36\")]","#![allow(clippy::doc_markdown, clippy::missing_errors_doc,\nclippy::missing_panics_doc, clippy::module_name_repetitions,\nclippy::wrong_self_convention,)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:313-0:11:2455","0:314-0:46:2456","0:315-0:78:2457","0:38:3041","0:513:1437","0:514:2640"],"is_stripped":false}}},"2:13816:26392":{"id":"2:13816:26392","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13453:13954","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split":"2:13812:26388"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44752:3759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314-0:46:2456":{"id":"0:314-0:46:2456","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,0],"end":[121,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:46:2456","glob":false}}},"2:13797:31684":{"id":"2:13797:31684","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45026:7693","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Literal","id":"21:953:3064","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Group","id":"21:904:3063","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:113:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:948:3049","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13831:26399":{"id":"2:13831:26399","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13839:33861":{"id":"2:13839:33861","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13453:13954","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatch_indices":"2:13841:33862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44884:7684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2452":{"id":"0:99:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:33866":{"id":"2:13850:33866","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2694":{"id":"0:58:2694","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13788:26387":{"id":"2:13788:26387","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13787:26386"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13880:33873":{"id":"2:13880:33873","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:33873"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45033:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:33871":{"id":"2:13865:33871","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[25,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:51:2694","0:52:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:2452":{"id":"0:121:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:33856":{"id":"2:13784:33856","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12658:1772","crate::ops::IndexMut":"2:3628:3427","str::slice_unchecked":"2:13783:33855"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13882:8278":{"id":"2:13882:8278","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:8278"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45042:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2961":{"id":"0:12:2961","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:889:2954","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13814:26390":{"id":"2:13814:26390","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13240:3767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2452":{"id":"0:104:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:2452":{"id":"0:113:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13808:3544":{"id":"2:13808:3544","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:3041":{"id":"0:38:3041","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::UpperHex":"2:10669:3190","`format!`":"5:6:843","std::fmt::LowerHex":"2:10667:3189","proc_macro2::Span":"21:883:2695","proc_macro2::Span::call_site":"21:566:3115","crate::IdentFragment":"0:46:2456","proc_macro2::Ident":"21:948:3049","std::fmt::Octal":"2:10663:3188","std::fmt::Binary":"2:10665:3191","`std::fmt`":"5:4901:830"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"}},"2:13794:31683":{"id":"2:13794:31683","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13793:31682"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45017:7692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f32"},"items":["0:404:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:2457":{"id":"0:78:2457","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:79:2452","0:80:3092","0:81:3093"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:82","0:86","0:90","0:94","0:97","0:100","0:103","0:105","0:379","0:381","0:383","0:385","0:387","0:389","0:391","0:393","0:395","0:397","0:399","0:401","0:403","0:405","0:108","0:110","0:112","0:114","0:116","0:118","0:120","0:122"]}}},"0:372:830":{"id":"0:372:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13826:26396":{"id":"2:13826:26396","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12652:492","str::splitn":"2:13824:26394","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44856:3761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:26125":{"id":"2:13872:26125","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:366:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5728:26124":{"id":"5:5728:26124","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13875:26122"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:370:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13802:26402":{"id":"2:13802:26402","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:34587":{"id":"5:5725:34587","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:33874":{"id":"2:13883:33874","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:33874"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45051:7634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:830":{"id":"0:47:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[15,4],"end":[15,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:89:2452":{"id":"0:89:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13812:26388":{"id":"2:13812:26388","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13453:13954","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::split_whitespace":"2:13793:31682","str::rsplit":"2:13816:26392"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44734:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[45,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:948:3049","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2694","0:59:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:2452":{"id":"0:119:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:3059":{"id":"2:13857:3059","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:26303":{"id":"2:13877:26303","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38443"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:352":{"id":"2:13773:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13774:26359","`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:13919":{"id":"5:5713:13919","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2975":{"id":"0:16:2975","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8326:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:370:830":{"id":"0:370:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:33851":{"id":"2:13765:33851","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2694":{"id":"0:62:2694","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[64,4],"end":[66,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:362:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2694":{"id":"0:48:2694","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:376:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:787:122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:93:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376:830":{"id":"0:376:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::rc::Rc","id":"5:4990:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:99:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402:2452":{"id":"0:402:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2971":{"id":"0:25:2971","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8326:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2975":{"id":"0:27:2975","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8326:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:830":{"id":"0:52:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:33852":{"id":"2:13766:33852","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:7694":{"id":"2:13790:7694","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44704:7674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:2452":{"id":"0:396:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:26355":{"id":"2:13775:26355","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13800:26401":{"id":"2:13800:26401","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:33862":{"id":"2:13841:33862","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13453:13954","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::match_indices":"2:13839:33861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44902:7685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13824:26394":{"id":"2:13824:26394","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954","str::rsplitn":"2:13826:26396"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44838:3765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13862:33870":{"id":"2:13862:33870","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:2782":{"id":"2:13870:2782","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13412:149","`FromStr`":"2:13411:3354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43002:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13411:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13411:3354","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:2640":{"id":"0:514:2640","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[639,4],"end":[643,5]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"}},"0:80:3092":{"id":"0:80:3092","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2979":{"id":"0:19:2979","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8326:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:360:830":{"id":"0:360:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"items":["0:89:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:2452","0:124:3093"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:360:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13792:7580":{"id":"2:13792:7580","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44720:4253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13805:3582":{"id":"2:13805:3582","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42736:203","prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:26126":{"id":"2:13874:26126","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i32"},"items":["0:384:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13884:27584":{"id":"2:13884:27584","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13812:26388","`str::find`":"2:13805:3582"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40309:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2694":{"id":"0:55:2694","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:830":{"id":"0:364:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:364:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368:830":{"id":"0:368:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:33854":{"id":"2:13772:33854","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:3093":{"id":"0:81:3093","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:2452":{"id":"0:406:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:3545":{"id":"2:13764:3545","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:26356":{"id":"2:13777:26356","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42736:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:7852":{"id":"2:13795:7852","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44988:7689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2452":{"id":"0:79:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13798:26400":{"id":"2:13798:26400","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32946:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:85:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13846:33864":{"id":"2:13846:33864","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2961":{"id":"0:23:2961","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3069:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:889:2954","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:33853":{"id":"2:13768:33853","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13766:33852"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:111:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13791:7703":{"id":"2:13791:7703","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12652:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44710:7675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2452":{"id":"0:117:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:2455":{"id":"0:11:2455","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:12:2961","0:14:2971","0:16:2975","0:19:2979"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:35:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22"]}}},"2:13793:31682":{"id":"2:13793:31682","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13794:31683"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45008:7691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:33865":{"id":"2:13848:33865","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2452":{"id":"0:102:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13852:33868":{"id":"2:13852:33868","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13482:13955","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:2452":{"id":"0:386:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:26300":{"id":"2:13873:26300","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40630:13766","Self::is_ascii":"2:13872:26125"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40630:13766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:34586":{"id":"5:5717:34586","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:2452":{"id":"0:109:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:26386":{"id":"2:13787:26386","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13788:26387"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:372:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:378:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:398:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:400:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13851:33867":{"id":"2:13851:33867","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2694":{"id":"0:51:2694","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:883:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i128"},"items":["0:388:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13786:26383":{"id":"2:13786:26383","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13785:26382","str::split_at_mut_checked":"2:13788:26387"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:1027":{"id":"2:13763:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12652:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:26359":{"id":"2:13774:26359","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12671:1903"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:33860":{"id":"2:13836:33860","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13453:13954","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::matches":"2:13834:3317"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44956:7688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:34584":{"id":"5:5712:34584","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3095","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3095","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:102:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:830":{"id":"0:63:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2452":{"id":"0:123:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13785:26382":{"id":"2:13785:26382","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13787:26386","str::split_at_mut":"2:13786:26383"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:34585":{"id":"5:5715:34585","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:830":{"id":"0:56:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[40,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313-0:11:2455":{"id":"0:313-0:11:2455","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[120,0],"end":[120,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:11:2455","glob":false}}},"0:392:2452":{"id":"0:392:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13878:26304":{"id":"2:13878:26304","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38443"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2452":{"id":"0:115:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"isize"},"items":["0:390:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13779:26357":{"id":"2:13779:26357","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i64"},"items":["0:386:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13876:26121":{"id":"2:13876:26121","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:368:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93:2452":{"id":"0:93:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:2452":{"id":"0:394:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13879:26305":{"id":"2:13879:26305","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:38443"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:392:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13834:3317":{"id":"2:13834:3317","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13453:13954","`DoubleEndedIterator`":"2:8394:134","prim@char":"1:12652:492","str::rmatches":"2:13836:33860"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44938:7687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762":{"id":"2:13762","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13763:1027","2:13764:3545","2:13765:33851","2:13766:33852","2:13768:33853","2:13771:26296","2:13772:33854","2:13773:352","2:13774:26359","2:13775:26355","2:13777:26356","2:13779:26357","2:13781:26358","2:13783:33855","2:13784:33856","2:13785:26382","2:13786:26383","2:13787:26386","2:13788:26387","2:13790:7694","2:13791:7703","2:13792:7580","2:13793:31682","2:13794:31683","2:13795:7852","2:13796:33857","2:13797:31684","2:13798:26400","2:13800:26401","2:13802:26402","2:13805:3582","2:13808:3544","2:13812:26388","2:13814:26390","2:13816:26392","2:13819:33858","2:13821:33859","2:13824:26394","2:13826:26396","2:13829:26398","2:13831:26399","2:13834:3317","2:13836:33860","2:13839:33861","2:13841:33862","2:13844:33863","2:13846:33864","2:13848:33865","2:13850:33866","2:13851:33867","2:13852:33868","2:13855:33869","2:13857:3059","2:13859:26403","2:13862:33870","2:13865:33871","2:13867:33872","2:13870:2782","2:13872:26125","2:13873:26300","2:13874:26126","2:13875:26122","2:13876:26121","2:13877:26303","2:13878:26304","2:13879:26305","2:13880:33873","2:13882:8278","2:13883:33874","2:13884:27584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:830":{"id":"0:374:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:830":{"id":"0:59:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[50,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2958":{"id":"0:35:2958","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:30:2979":{"id":"0:30:2979","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8326:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:830":{"id":"0:378:830","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10623:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10604:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13821:33859":{"id":"2:13821:33859","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13453:13954","str::split":"2:13812:26388","prim@char":"1:12652:492","str::split_terminator":"2:13819:33858"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44802:7681","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:33872":{"id":"2:13867:33872","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13796:33857":{"id":"2:13796:33857","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44998:7690","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Punct","id":"21:927:3065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:106:2452":{"id":"0:106:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13844:33863":{"id":"2:13844:33863","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13859:26403":{"id":"2:13859:26403","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12652:492","self::pattern":"2:13453:13954"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42734:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13460:13956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13477:13957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:26122":{"id":"2:13875:26122","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:26123":{"id":"5:5729:26123","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13876:26121"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:2452":{"id":"0:390:2452","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:878:266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:374:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i8"},"items":["0:380:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:394:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:2456":{"id":"0:46:2456","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[13,0],"end":[23,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.\n\n[`format_ident!`]: crate::format_ident","links":{"crate::format_ident":"0:38:3041","`Ident`":"21:948:3049"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:47:830","0:48:2694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:49","0:53","0:57","0:60","0:359","0:361","0:363","0:365","0:367","0:369","0:371","0:373","0:375","0:377"]}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:396:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["to_token_stream","into_token_stream"],"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:2452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:315-0:78:2457":{"id":"0:315-0:78:2457","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:78:2457","glob":false}}},"2:13781:26358":{"id":"2:13781:26358","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11577:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:34588":{"id":"5:5726:34588","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3095","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3095","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:26296":{"id":"2:13771:26296","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12976:13958"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14:2971":{"id":"0:14:2971","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8326:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:8326:177","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13783:33855":{"id":"2:13783:33855","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12658:1772","str::slice_mut_unchecked":"2:13784:33856","crate::ops::Index":"2:40277:3426"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6694:21342":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:5732:8538":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:781:3455":{"crate_id":21,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"5:40:8310":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:39039:3420":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:4384:7903":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:41323:7586":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:36998:3416":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:689:7331":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:8562:7538":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"0:513:1437":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"17:10369:21421":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5165:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:15477:4816":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"9:412:20318":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:23095:2958":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:5585:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13971:4456":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7459:21352":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11963:4288":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:8616:3635":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:43058:3438":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:16380:5079":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9569:7246":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:564:5709":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:10990:1738":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11447:7252":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:8343:25825":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:44998:7690":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41265:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14883:4647":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3782:3429":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15995:4956":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:927:7551":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46786:7015":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6617:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:23109:8673":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:4840:7585":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1632:5816":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:851:8296":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:889:2954":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:2422:7820":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:8315:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1643:3454":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6651:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41237:7637":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:22163:33141":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47368:7076":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:5505:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:586:5721":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:1352:7812":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44612:3611":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:5022:8467":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5488:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:888:8195":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:16301:5059":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:0:3209":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41598:3619":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5477:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12814:7838":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:10667:3189":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"10:36:5569":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7383:5349":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40446:6832":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"20:131:35330":{"crate_id":20,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"5:214:7967":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10657:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:2341:8354":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14558:4581":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12103:4290":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:41947:3645":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:988:8294":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:12032:7771":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10431:21423":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6571:7457":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:23607:6748":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:8011:5243":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:8499:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:6030:7872":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11585:7257":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:47418:7078":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6792:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:42790:3500":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"21:116:35425":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:2820:3380":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"18:598:35312":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:1591:7871":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:6197:3626":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7072:21348":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:1862:3438":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:33918:3403":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:820:8294":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13608:21397":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6459:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:7806:7888":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44106:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:2354:3145":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6543:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41549:3631":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:6121:7754":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13436:4376":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:48249:7161":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46985:7033":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12761:7836":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:16058:4970":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:34391:3405":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:3080:33641":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:5415:5282":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2878:5220":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12670:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:5447:5283":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6438:21337":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:45026:7693":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:9309:7238":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:43002:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:16359:5076":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6419:7390":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:6747:5296":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:23052:8683":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15691:4880":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:14924:4652":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3331:30410":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14110:4485":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11493:7253":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5222:5276":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:12077:3762":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11458:7807":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:34949:3413":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:702:8281":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:7562:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7355:5236":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:8162:5235":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:953:7872":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7209:7488":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:7445:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:15985:4953":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:16766:5177":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12864:7367":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:32945:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1643:5824":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:12677:1967":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4990:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:2297:8298":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:7326:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7347:5347":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47291:7057":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:11604:8006":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11512:21445":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:8559:3643":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7013:7481":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:9372:7241":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:16005:4959":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5271:6082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13947:4452":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46999:7034":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:11844:3767":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:12038:7772":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4929:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11757:7345":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:4157:33430":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:8090:2982":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13892:4444":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1573:7551":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"9:318:5608":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:1667:5841":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:321:35246":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:4255:8457":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:1871:3454":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:11752:3145":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1654:3450":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:22675:3742":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:983:7520":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3373:8416":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14776:4627":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4984:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:23434:31578":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10515:7910":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:13186:7683":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:1942:7893":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:813:8293":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:16744:5171":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11794:21469":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:42762:3145":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3426:8418":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5154:8500":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:4355:7901":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:41517:3629":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43806:6983":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:16350:5074":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6864:21347":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12344:7364":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:4850:6569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:47209:7053":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"0:514:2640":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"17:10975:35286":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6719:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:123:7544":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:978:7870":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11552:21460":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7880:5406":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41104:6964":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:31062:8434":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10821:35285":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:4842:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15733:4886":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:41395:3612":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40389:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1883:7890":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:41445:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:9225:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:1365:4081":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:22653:8597":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6121:5231":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:680:4081":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:299:3095":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6967:5229":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15785:4903":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10766:4252":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:42496:3972":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4517:8477":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5205:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11090:7764":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:16417:5086":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:46865:7022":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12045:4098":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6040:5230":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:1639:7872":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:31358:31588":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:44570:3753":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:47192:7052":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:44643:3758":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:1114:8298":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:3358:3453":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22165:33143":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1636:3438":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13673:4393":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:41042:7629":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41981:3653":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:44591:3746":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:4897:13740":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:6132:8202":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"10:0:3204":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4239:5258":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11200:4281":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:8582:21361":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4937:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1520:3145":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1122:33430":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3357:3512":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:45740:8687":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12150:8429":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:219:5554":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15353:4722":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8428:25827":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44838:3765":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:7984:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1675:5842":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3082:6714":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12173:7355":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:41962:3649":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5107:6029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:22178:33146":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:13126:7677":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5529:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"14:40:3049":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6835:21346":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:2364:7564":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:5343:25847":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:32915:5405":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44884:7684":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15534:4851":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4896:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13093:4270":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:16538:5104":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"21:715:266":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:6053:8552":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1539:5749":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:16613:4429":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:15389:4753":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:2453:7823":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:43587:3190":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:16672:5153":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:9236:7234":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3985:4147":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:15951:4945":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13108:4281":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:491:5663":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:42821:3501":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2511:8364":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11145:25949":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:5134:7754":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:7527:7571":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:46953:7031":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:31732:4111":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:8326:6709":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1521:5738":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8648:7899":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6406:7430":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:33036:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"13:110:35205":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:2099:7520":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14585:4586":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:12671:1903":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"20:58:7596":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:10810:26071":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:1597:5787":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:16051:4968":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:16755:5176":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:5611:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:4965:8465":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:45372:7718":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:2282:3065":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"17:15937:4938":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:41127:7633":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5664:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:2624:3438":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:14069:4475":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:4842:5264":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5058:5270":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:4901:830":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12187:7356":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:3590:7754":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:5289:3371":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10255:21417":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14021:4463":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:2525:35200":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"21:0:2832":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"20:2690:2954":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:15062:4680":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13509:4341":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6203:21335":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4703:8479":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9528:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:42662:7661":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:6087:8513":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:4959:3724":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:1494:5727":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5357:6113":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:4928:3518":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:42734:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11690:4274":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14322:4541":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:47642:7086":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:5604:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:10924:7602":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:48015:7126":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:2772:7981":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:23142:8672":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:42674:7746":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41141:7634":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48134:7135":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:7424:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10815:21428":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:22648:2958":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:48157:7142":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:11084:32350":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:3124:20475":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11438:4264":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4902:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13304:21430":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11643:4281":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:2275:7520":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:9447:3502":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"21:801:7314":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:383:8276":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43845:5440":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:7619:3438":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"15:394:20436":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:8666:5405":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5230:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3560:3649":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12133:7352":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13195:21587":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:6841:7465":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44902:7685":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8694:7747":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:47994:7125":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8949:7748":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:5575:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4970:5975":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:3042:2958":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:5280:5278":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12373:7828":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:41275:7639":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14165:4504":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:2671:2695":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"5:3303:33632":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11576:4270":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:896:3145":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12357:21534":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:8063:21357":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5088:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11814:7348":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:47241:7055":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4890:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:969:7871":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:8278:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6858:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:48093:7132":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"14:0:3207":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4881:5933":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2521:8369":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:8277:3661":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:7901:8002":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:8447:3459":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:12063:3766":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7027:5306":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:1858:3145":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:9292:7237":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8806:8512":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:14346:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41733:3636":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:47530:7082":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:12662:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:5282:6090":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8965:7233":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:45481:7723":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:6898:8557":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15896:4929":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:4134:8448":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8288:7168":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:3334:30411":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10114:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:43431:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:45489:7725":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:763:7552":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:7679:3448":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15587:4857":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5682:8535":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45477:7722":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:23695:6756":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:45699:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13207:7843":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"21:825:3063":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"6:5471:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:31326:3521":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11161:35290":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:7553:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44720:4253":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:10673:3705":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14870:4645":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:2448:5194":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:901:35245":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15578:4856":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:8266:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:907:35329":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"21:792:266":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:7740:3620":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"20:113:35317":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:11715:7813":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13344:4373":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5179:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44734:3763":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:42861:3387":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:1885:3454":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10311:21419":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:5873:8540":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:7308:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10455:21424":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:2291:7559":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:23362:6728":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5652:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:2948:5223":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:47177:7051":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11318:7805":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22925:8678":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10661:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:23222:7612":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11670:5628":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"20:2574:7322":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:4171:8449":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:719:3350":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:5932:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:531:7325":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5748:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12749:7835":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7189:21349":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:3337:33636":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2348:8355":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:34190:3359":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12924:7377":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9209:8531":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"6:5311:6102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44551:3750":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:23001:8682":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14788:4630":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:4536:13731":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14690:4599":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:45748:7009":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47862:7121":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4333:7900":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:42753:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:1781:33430":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5450:6166":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:635:4123":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:964:2695":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"14:31:7959":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:10665:3191":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12969:4344":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9551:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5217:6056":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5377:5281":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13079:21588":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:14483:3391":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:10876:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:2344:7759":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:41078:7631":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:47057:7045":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:47663:7087":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:6502:25881":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:33706:3400":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7041:5234":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11063:35288":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:1579:20402":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1589:5782":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:1996:7977":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:45809:3390":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7334:5345":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2770:5215":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41426:3614":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:45509:7730":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10571:4245":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3576:3360":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:6157:7402":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:10623:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5707:21332":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12935:7378":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7977:5241":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22265:8594":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8871:6994":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:9351:8564":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:48172:7143":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:1944:7894":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6939:7472":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:2323:8299":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"21:904:3063":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"18:80:7789":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:45273:7708":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:42474:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:15771:4900":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:41539:3630":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:11161:7976":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:10880:4256":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11346:7806":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:42640:31606":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12907:4379":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2818:5217":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14258:4512":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:7524:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11770:21468":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12287:21551":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:13163:7682":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1132:7966":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13730:4403":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43468:8551":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5117:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:40233:3424":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:13453:13954":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:23332:6727":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:12676:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:45677:7008":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:11116:7249":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"18:765:25654":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4363:7902":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:22373:2958":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:32947:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6171:7405":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41526:3616":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:14571:4302":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5441:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2568:3217":{"crate_id":1,"path":["std","io"],"kind":"module"},"11:1542:20400":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:7004:7598":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12008:21473":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:9286:3438":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:2519:5564":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11759:26073":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6995:7474":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:519:4191":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6398:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"15:0:3208":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:47613:7085":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"20:2249:3063":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"21:883:2695":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"6:6687:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:10586:4246":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:6774:3645":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12624:8286":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:12665:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"11:2374:3437":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12663:4333":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9249:7235":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11404:25950":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7539:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22204:2958":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:8220:7527":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7413:21350":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:9533:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:538:4108":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"7:0:1957":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:4621:8198":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1247:7875":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15102:4685":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13000:21583":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14373:4552":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:16288:5054":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3199:8339":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:7962:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:2400:2954":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:40331:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:919:3438":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:41048:7630":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:10109:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:22881:8677":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:284:33430":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1690:5851":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:0:3211":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3012:20473":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13928:4451":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:6953:8559":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:5387:6127":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:6700:7872":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:693:4068":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:12239:25912":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:14710:4602":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15876:4922":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"20:2616:3350":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"2:42852:3781":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:3712:3437":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41505:3638":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:12946:3736":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:738:3049":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:11153:8502":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:10889:8417":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:8438:8411":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22259:8591":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:553:5704":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46970:7032":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7501:8203":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:16802:5184":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:0:1764":{"crate_id":1,"path":["std"],"kind":"module"},"16:4692:5261":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6702:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"8:0:3202":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15721:4883":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6816:7739":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6638:21339":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:8175:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:4322:7754":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:358:3350":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:34257:3408":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:6295:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:8394:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1625:5812":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3822:32582":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"20:1802:4082":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:22790:8593":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:1104:220":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:10496:7892":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:16395:5080":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:22788:2958":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:40281:3428":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:32936:7627":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:10669:3190":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12889:7375":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:14746:4608":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"3:2062:3970":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"1:12171:8431":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:1919:13877":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:8653:8426":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8166:8285":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:44704:7674":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:1632:7876":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:1118:20399":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8976:7751":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1211:7874":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5802:8539":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13021:21584":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13876:4440":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:776:7872":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11590:7808":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:32869:5566":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:3843:4068":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9219:7904":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9436:25878":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15844:4913":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7997:5242":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6887:5228":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:41496:3628":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:45689:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"18:726:4127":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:7750:7581":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:933:3121":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"6:485:5661":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:7549:7873":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:570:5712":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:45239:7707":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9477:7245":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:3877:7833":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:1136:7966":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43096:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5381:6124":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43244:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:11776:3437":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:23596:6747":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:7390:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12397:7829":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"14:213:7541":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:45505:7729":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40309:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:7872:7883":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:34324:3406":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:6513:14362":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:14389:7611":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:8500:5464":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:8326:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8027:26082":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11485:21444":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:26660:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:13482:13955":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:15611:4859":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5375:6123":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7407:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5687:3967":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:2658:5210":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:23137:8674":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:3108:5248":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:4193:8451":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7108:13990":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:12659:1862":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5349:6112":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10132:21413":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:517:5683":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:316:35245":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5395:6132":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:2243:7817":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:4848:6567":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:6769:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13771:4412":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:8206:5233":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4140:8447":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:3743:7832":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44856:3761":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:38929:3418":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:465:5650":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:15595:4858":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11079:7742":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:41417:3613":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:31332:6760":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:48082:7131":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:44334:7672":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12655:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:4488:33440":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:12679:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6096:21333":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:41353:8340":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12672:1885":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:15861:4920":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43318:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6452:6324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11174:8539":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:8642:7897":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:982:8293":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:4808:5263":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8894:7228":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11210:35291":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:11109:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:12055:21512":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:43573:3188":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4957:5970":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1657:5835":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2229:8358":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:11502:7342":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:9597:13956":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:16684:5155":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"11:686:7869":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11564:21455":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:13530:13964":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:595:8262":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6950:7473":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:4519:7754":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11014:35287":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40369:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:8025:5409":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46771:7012":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:22257:2958":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12990:7381":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2722:5213":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11616:7809":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12667:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:11215:32351":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:11868:4270":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7987:7526":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6779:5299":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:10656:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:2308:3049":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:6416:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:44321:6998":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:41089:31601":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13399:4375":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:8623:7540":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:16029:4963":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:47480:7080":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:5725:4245":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11069:7756":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3371:8415":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:3792:33430":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9321:8563":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:23548:2958":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:16512:4412":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:14081:4476":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:7539:7872":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:16730:5168":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:7515:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10601:4247":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:2533:5567":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8568:7208":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2484:5202":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11981:7765":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:16573:5134":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43072:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:1042:20397":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44097:7669":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:16403:5083":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:33494:3401":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7956:7524":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:16203:5028":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:33033:3515":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:5946:7737":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:4967:8466":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8764:7215":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:2810:6717":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14678:4598":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6878:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"9:226:6994":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1885:7891":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:102:7543":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:6274:7754":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2433:20472":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"15:327:20430":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:45531:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12898:7376":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:12635:25944":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9513:7754":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:41378:3611":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:11921:3768":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:578:5717":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:16631:4439":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13757:4411":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6820:21345":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:8807:3439":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1684:5848":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:45154:7701":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:41574:3633":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:8176:5416":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:787:3454":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:5328:7841":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:43833:6992":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40439:3432":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13183:7842":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:41989:3655":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13052:21593":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15513:4846":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2025:8336":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5057:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13465:4377":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:12686:4334":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6428:6315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"9:345:20331":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43566:3191":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6460:21338":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9674:7893":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:15624:4864":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4591:8473":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12656:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:1696:5852":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42982:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:11915:4281":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15699:4881":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13996:4461":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5512:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:45181:7705":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12093:4289":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4947:5967":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45485:7724":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2548:5205":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:41455:3624":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:11883:3764":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5241:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1584:5780":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7728:3500":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5255:6073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14365:4550":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11629:4229":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:7856:3454":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:47270:7056":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:32911:25990":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:48108:7133":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"20:2507:7319":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:4771:7970":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:41301:7640":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7889:8001":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:45682:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:9270:3145":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5405:6139":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:3423:3409":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:12673:1891":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:3809:3434":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:754:7341":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11494:4268":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:8101:8267":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:6893:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:23410:6732":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:10671:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:9444:7242":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12021:7999":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5346:5280":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12653:1925":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43883:3697":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14039:4471":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"20:2355:3064":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:4906:3723":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5325:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:44663:3757":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:6967:7994":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10766:7904":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2638:5209":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:11994:3760":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8091:7166":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:3306:5193":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"9:380:20317":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:43281:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:45390:7720":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:909:8433":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:47435:7079":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3332:3452":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41203:7636":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:14521:4577":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44956:7688":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:5939:7736":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13700:4399":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:12087:7911":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:47740:7119":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:41933:7653":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:6:843":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"1:5222:8508":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2235:6722":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6729:21344":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14476:4571":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13219:7844":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:45782:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:2618:5208":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:5323:32340":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15198:4700":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:3571:3384":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13648:4392":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12298:21552":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:6237:5288":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:1652:8193":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:45017:7692":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:473:5655":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10062:21412":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6792:7462":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:42696:6976":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5019:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14307:4537":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:2142:4068":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14093:4477":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:3448:3454":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:683:7975":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:515:4106":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:16250:5040":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:23684:6755":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:7344:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15088:4682":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:43042:3145":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2043:7754":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:5295:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11053:7801":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:23516:7623":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7972:4081":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13260:21429":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5051:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:41286:14026":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5482:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"9:490:5631":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8705:8472":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:6670:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:23496:7620":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:8813:3658":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40197:3422":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7738:7578":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"21:732:3063":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:1648:3452":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22277:3971":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:44560:3751":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6631:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11728:21450":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:948:3049":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"17:12022:7825":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1551:3438":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:2344:33522":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:2465:5196":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:4555:13732":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:47224:7054":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4199:8452":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:11956:3759":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:7694:7574":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7935:7521":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7468:5354":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2964:5224":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:940:7552":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:16013:4960":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:2507:3063":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4838:8452":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:427:7864":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:5316:5279":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:3693:5253":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:2620:3791":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"16:6026:5227":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13030:4348":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7165:5329":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:8804:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3291:3145":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5575:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2811:8410":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:185:35333":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:47160:7050":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:2126:8299":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:13240:3767":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12385:21553":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12146:7353":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:34458:3407":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:23015:13931":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:2898:5221":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:581:4111":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:13477:13957":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:1892:3451":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:6915:33430":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6711:21343":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:659:7795":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:6378:26061":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:10296:32907":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:23277:7613":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:48210:7145":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7877:8000":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"11:0:3205":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"0:0:1437":{"crate_id":0,"path":["quote"],"kind":"module"},"1:12666:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:14897:4648":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:518:3350":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"6:4914:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6082:7395":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15809:4907":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:974:7869":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7518:7518":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:507:4103":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5557:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:13688:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12246:7774":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:5821:13988":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8823:7225":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:670:7799":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:1083:20398":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10733:4251":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5550:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"9:49:20334":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:45555:7731":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10479:21425":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:8148:5245":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:698:7332":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:14350:4548":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:1995:35364":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"16:6254:7412":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:8030:3643":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:4292:7754":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6387:21336":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:7367:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"20:595:3794":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"16:4182:5257":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:78:20310":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15115:4686":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:14665:4597":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12575:21523":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12711:21572":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42714:6977":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1727:5864":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12272:4359":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:7635:3555":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1514:5735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15159:4693":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:9396:8261":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:3139:4134":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11112:35289":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5069:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:22176:33144":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12263:7363":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:15001:4665":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6500:20444":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:48187:7144":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5224:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12120:7350":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4997:5989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:14072:13770":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:7539:7519":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9863:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6142:21334":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11102:7802":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5044:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8797:7984":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"15:288:7846":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:12227:7262":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:41313:4253":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:32922:31711":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"6:5539:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1632:3145":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:5414:3377":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:5186:6037":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2838:5218":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:12007:7769":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:43207:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:41435:3623":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6186:7407":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:4127:7872":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:15448:4805":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"20:2221:3146":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:11151:7803":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15971:4951":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:5560:13948":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:4552:7754":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:11855:21475":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10553:21427":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:44623:3747":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41588:3634":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13387:7383":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:5647:5284":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:14369:7609":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15928:4937":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:6998:3617":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9385:25871":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12958:7379":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:23347:7614":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:45761:31742":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:41971:3651":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43861:31674":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"18:651:4103":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12979:4346":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:6169:14354":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42528:8427":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:16838:4456":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:613:35313":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7256:7501":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7569:7907":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3467:8413":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10667:4249":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:4850:3722":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44580:3754":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:1001:8298":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:41487:3627":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3364:3514":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4233:8453":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:2604:3796":{"crate_id":20,"path":["proc_macro","escape","EscapeOptions"],"kind":"struct"},"21:113:7312":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:8909:8526":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:10388:7658":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:6454:7609":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:47509:7081":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44634:3755":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4964:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:31294:3383":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:2534:8371":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"16:4764:5262":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:589:4112":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12318:7826":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:4171:3438":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:22152:33138":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:5130:8498":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12081:21490":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11395:21441":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:23640:6751":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"12:0:3206":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:2551:3793":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"5:3858:8304":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8086:2958":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:6746:33430":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"21:806:35424":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:44081:7666":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:47397:7077":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46818:7019":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12608:21522":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7505:7515":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3628:3427":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8172:8326":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:11801:3763":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:44089:7668":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10674:28279":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:1011:8297":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:23585:6746":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"21:878:266":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"5:5564:13949":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:15792:4904":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1665:3453":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:909:3437":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:12580:3749":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:6578:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43875:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:12229:7359":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:12065:21513":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:707:8282":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:7250:8589":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:2414:7872":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44988:7689":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13959:4455":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:2206:7553":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:12035:3765":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:0:3201":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7966:7525":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6756:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:537:8255":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6602:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:13411:3354":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:2251:8255":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:23385:7618":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45501:7728":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:16191:5025":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:16791:5182":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15801:4905":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:538:5695":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:16164:5013":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:8134:5244":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1551:5758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1382:8299":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5265:6079":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:218:35325":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6645:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4247:8455":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4829:5897":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:22134:4111":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:12674:1897":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11206:7236":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:24260:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2663:8408":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11901:21474":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:8230:21359":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1703:5855":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5025:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3061:25829":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11099:7168":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:8249:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:2750:14047":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:34603:3412":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7575:7242":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5755:5285":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3688:29941":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:423:7863":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10634:4248":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:43900:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:8633:21363":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8687:7746":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:4927:5267":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5196:5275":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:31705:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3540:3423":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:5696:8536":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10860:4255":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:47308:7058":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:15640:4867":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:23066:13931":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:13630:4389":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:7430:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8959:3145":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:44491:7889":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:9500:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"20:2477:130":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:15013:4667":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:7:7959":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1005:8296":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:7292:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:2440:3454":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:16700:5160":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:344:7856":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:7762:3378":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:8055:21356":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4725:8480":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12621:4332":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:47568:7084":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:42778:3438":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:7787:7582":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:1027:8299":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6679:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:7741:3621":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:5515:33430":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2858:5219":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5170:5274":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:41473:7645":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:377:8275":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:14611:4589":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:22206:8595":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:7074:13988":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:16219:5032":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:8708:5476":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13489:4379":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:12976:13958":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12836:21582":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:44752:3759":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10274:830":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:45042:7629":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10892:8413":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14057:4472":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:48062:7129":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2834:3519":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:7599:7573":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:573:4103":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:10675:3706":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5568:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:113:7793":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:4701:3379":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14598:4587":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5617:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:2528:5204":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:45338:13971":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:2167:8305":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:619:8264":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"20:0:1384":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"17:12588:4329":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10150:21414":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5301:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12409:4294":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13795:4426":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5319:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13856:4439":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:5312:25847":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4921:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:45821:7734":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:4954:5268":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6710:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:8260:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1535:3437":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46833:7020":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:42556:2695":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"20:425:35331":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"16:2413:20445":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12214:7358":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5503:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:13243:7845":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:545:5699":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:22188:33147":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:14545:4578":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:4922:8501":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6850:7466":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:485:21410":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:724:7968":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:718:4124":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2340:20403":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:41157:7635":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:10301:31802":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:14971:4659":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8276:7895":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"21:744:3064":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:12651:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7713:35251":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12787:7837":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43133:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2493:8358":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:15746:4892":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:46918:7029":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:508:26033":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:22987:2958":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:45566:14072":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:13471:7334":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:11564:2958":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7583:3438":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6523:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4871:5265":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:7463:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:6727:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:13423:7384":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12201:7357":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8330:7744":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:42830:3386":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12331:21521":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"7:31:20303":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:10441:3698":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:5136:13750":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:14178:4505":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8719:7214":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:596:21411":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:45051:7634":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7471:26077":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:47907:7122":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:2729:3065":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"17:14940:4654":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:11577:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:8237:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43580:3189":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8152:8284":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5623:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40457:6833":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:15469:4815":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4436:8476":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8629:3763":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:23503:6745":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:676:3438":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2988:5225":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:45139:7695":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:12619:3773":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5658:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3803:3431":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:246:35372":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:9403:25875":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11423:21442":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"20:2705:3063":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"13:229:5562":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:608:35316":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7982:8004":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44338:3744":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:14212:13771":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:14427:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11654:7804":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11469:21443":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:23013:33372":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:23651:6752":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:13202:7686":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:2394:21501":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:41371:8372":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:8284:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12725:7834":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:3439:5251":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:1500:5730":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:479:5658":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"22:0:3346":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:42909:7664":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:6668:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:1878:3452":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8298:7743":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11540:4269":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:7317:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6605:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13585:21433":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"6:6500:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3043:13765":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:16717:5162":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:14095:3627":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:8124:4300":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:3079:3362":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:2754:3064":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"17:13819:3049":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:14845:4642":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:2156:8304":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:7551:21353":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11259:7804":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:8852:32906":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:3086:33639":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"10:44:5570":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:47323:7059":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:7494:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:984:8301":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5366:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:4981:5269":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44136:7671":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:6547:8684":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:5870:6477":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:23469:31580":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:6310:3615":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:42869:7663":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"16:8264:5425":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7055:7483":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44693:7673":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:16525:4426":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"14:201:13972":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:3090:33640":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2685:13931":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:2568:5206":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41244:7638":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5420:6145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:4118:5255":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:15035:4678":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1660:3451":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:750:7551":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8543:7535":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1582:7552":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5196:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:40294:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8636:7689":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6109:7400":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6513:6355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1711:5859":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12562:7830":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:2734:3121":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"2:12547:3748":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"21:834:3049":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:5139:8499":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:43816:3697":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:15:3320":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:39618:3421":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:47139:7049":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6267:7413":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:7668:3447":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:15144:4689":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12643:4281":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:680:7328":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:389:7861":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:40630:13766":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14190:4508":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45497:7727":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13133:4354":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:16230:5037":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7302:5341":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7904:5407":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:4925:8479":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8351:7982":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6335:7421":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:4501:31716":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5127:6031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4185:8450":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:4776:7971":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12242:7360":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:2261:7557":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7723:14026":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6366:7427":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:7786:35252":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6505:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:9262:7236":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7916:21355":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6901:7469":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11825:21484":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6806:5226":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11412:7005":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"20:145:4073":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:47817:7120":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40277:3426":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:1569:5768":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7559:7572":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"18:491:7324":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6656:21340":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:8093:21358":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5334:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:7797:7969":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6486:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13553:21432":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:23618:6749":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:14160:32956":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15048:4679":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:9846:26066":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:9834:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:16269:5053":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13044:4352":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:11050:8503":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:12603:25915":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:14008:4462":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3679:3704":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:1919:7892":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7835:21354":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13575:4344":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4976:5978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:2394:3438":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:5083:5271":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:46903:7028":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4805:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13529:4381":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:10935:4300":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12254:7362":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7398:35247":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13157:4355":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:8738:8502":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:982:3438":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:10405:21422":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3396:3358":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16040:4967":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3925:3454":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2746:5214":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42770:3437":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46801:7016":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:23673:6754":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:14413:4560":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2918:5222":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16814:5187":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:5375:8399":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:12664:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14730:4603":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3431:3411":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13592:4384":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:16241:5038":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11939:4286":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11603:21451":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:4900:5266":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3887:4139":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11888:7816":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12072:7553":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15908:4930":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:43050:3437":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:8480:5463":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:14187:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12737:21581":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:38874:3417":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14137:4494":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:7519:3438":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:2513:5563":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5521:6197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:33004:3516":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4653:7584":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4792:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11393:7235":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6470:26065":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6873:5303":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6749:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:6060:8553":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:23662:6753":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"9:0:3203":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14337:4546":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:562:8200":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:7408:7998":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"11:718:7870":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:2794:5216":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"21:815:2695":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:15963:4948":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5428:6150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6390:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:41149:7629":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:8294:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:1898:3453":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7369:5237":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2495:8359":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7510:3392":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:8595:21362":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5139:6032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3707:8394":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7421:21351":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4071:7872":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"20:941:3792":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:9587:7755":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11430:7246":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:45033:7635":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3517:8403":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:321:7548":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15659:4868":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:2687:13932":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:3622:7212":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:6279:7736":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:1366:7520":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16848:4461":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:3585:5252":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:45324:7709":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:96:7790":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41723:3635":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:7580:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:155:7386":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:8699:8478":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6695:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:2424:6726":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8106:7167":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:23527:8432":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12160:7354":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:563:4110":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:42961:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:44784:7680":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9538:7996":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"11:2540:3447":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:521:25655":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12800:21559":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:706:7334":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:48073:7130":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:16341:5070":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:1397:8298":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8324:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45685:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9431:25877":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:4803:8497":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8577:7209":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11074:7758":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14834:4640":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:38984:3419":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5494:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:4489:31715":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:6778:8554":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15174:4344":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44938:7687":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44680:7000":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:8316:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:7284:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9214:8532":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"18:735:25653":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:3832:5254":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3934:8430":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:45168:7704":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:11222:32352":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:4963:8463":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:15456:4808":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:34776:3120":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:709:7313":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:15884:4923":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9390:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5389:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11269:21445":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7022:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10830:4129":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:1233:7811":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5249:6071":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:927:3065":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"1:12668:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:8243:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:649:3145":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:41464:3625":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47965:7124":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:8609:5247":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:43355:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6981:5246":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:953:3064":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"16:6062:5232":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:5240":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:45359:7714":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5288:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10333:21420":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6300:7419":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:2736:8409":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:7710:7575":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10524:21426":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:4039:8431":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10840:4253":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:7915:8003":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"3:2077:3969":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"17:14811:4639":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:1601:7869":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:23629:6750":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:4243:8454":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46932:7030":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12774:21560":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1530:5743":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7220:7489":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:11993:7261":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:3046:20474":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:1411:7966":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6736:35243":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:544:7388":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7098:13989":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:928:8300":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:10663:3188":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44653:3756":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6360:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7279:7502":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46886:7027":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:16211:5031":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12944:4343":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14498:4572":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11995:7824":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:47014:7035":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7819:28333":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11189:25899":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:12652:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:40349:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:3640:8201":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:1227:33638":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2588:5207":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7492:7512":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3481:3414":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:5154:7840":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:1507:5733":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:4565:33440":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:999:8295":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1123:8299":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:3872:8428":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13328:4205":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6744:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:13836:4429":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5740:4246":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:4413:7754":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:14985:4661":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:12657:1738":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5640:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:11989:21478":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4402:5260":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:8231:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11266:26069":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2226:13941":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:8007:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:775:3146":{"crate_id":21,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:5630:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:808:7871":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8187:7976":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:44802:7681":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:16650:5148":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:7857:3640":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:11917:6994":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:12619:28334":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"14:186:20415":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:699:8280":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:15677:4876":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13231:21589":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:2682:5211":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:16777:5178":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7273:33493":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:8272:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:4202:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15569:4852":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45707:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6422:6314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11272:26070":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47078:7046":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:12650:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4150:5256":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:13460:13956":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13983:4459":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7627:3438":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1885:3450":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3699:3145":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:687:3352":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:45798:3449":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1489:5725":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13120:7804":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:6810:3639":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:16021:4962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:2710:2733":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:12960:3738":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:41333:8199":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"2:41747:3637":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:14910:4649":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:44128:7670":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"9:168:20383":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:43170:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41404:3622":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10700:4250":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6586:5293":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:10604:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:3327:3381":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:1558:20401":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:7337:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:31347:3697":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8586:8374":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:859:8297":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:8225:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:6148:3371":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:41117:7632":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14454:4564":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6737:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:1563:5766":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:42831:3385":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:8281:3660":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46850:7021":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:33035:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"1:963:3454":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12430:4296":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:47110:7048":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45118:13970":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4852:6571":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5341:6111":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:5716:8537":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6590:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:47547:7083":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:10919:8378":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:532:5692":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14859:4644":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:894:35244":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14152:4500":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:3424:8417":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:12110:8430":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5007:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:12675:1879":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:48053:7128":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8335:3460":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13909:4446":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5462:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:12270:26080":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"15:306:7851":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:47095:7047":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11743:7814":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:6678:21341":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:4265:5259":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:44118:6994":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6911:7470":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:45349:7710":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"20:2685:3792":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:22385:3971":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13360:21431":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6659:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:906:35246":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:7990:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15978:4952":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8359:4068":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:14637:4592":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1001:3145":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:14055:31737":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:10886:8415":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:6441:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:15817:4909":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12825:4336":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"14:164:20408":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7569:33519":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:523:5686":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:16329:5068":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8271:4185":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:45513:7005":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10176:21415":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:41940:3644":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3328:30263":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7248:33489":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:14384:4555":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:15074:4681":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:47936:7123":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:12678:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6802:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9278:7905":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9457:25880":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:3937:8429":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:3411:3402":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:12049:3761":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11842:7815":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:16177:5019":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"9:470:20315":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7156:7487":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:42512:3974":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10202:21416":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5036:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1612:7870":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4816:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:832:8295":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:35122:3415":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:22142:33138":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41252:6965":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3401:3404":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:1063:35203":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:6895:7991":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:41558:3632":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:14955:4658":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8713:7897":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:40409:3430":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:663:3437":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11465:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:4875:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:8102:5413":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:22963:8679":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14624:4590":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:45008:7691":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6638:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:8295:7528":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11251:26067":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:5045:8462":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:5142:5273":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"20:2749:3049":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"20:369:3502":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"14:159:7959":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8281:7742":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44710:7675":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:8317:21360":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5151:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:10884:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:15763:4897":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3469:8414":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6472:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12447:21554":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6623:7460":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3587:3425":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11137:25946":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:12253:7774":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8606:3622":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15186:4696":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:3426:3410":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:650:8277":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2228:13942":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:7439:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:42937:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"16:8040:35279":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3298:3450":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6610:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7762:5387":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:15868:4921":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:3524:7831":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:2579:6711":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"9:435:20316":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14431:4561":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:357:7859":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:5253:5277":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15713:4882":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:16315:5061":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:23706:6757":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:48119:7134":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:16828:5188":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:22686:33149":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10965:7800":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:4371:8475":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15324:4702":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10283:21418":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13014:4347":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:9543:7997":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:6566:8685":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:8310:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45772:8686":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:11356:35293":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:32946:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"0:38:3041":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"1:8623:4253":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:723:2695":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"18:623:35314":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:12438:8204":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15128:4687":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1100:7520":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:4362:3145":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:23454:31579":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12035:21485":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:41956:3647":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:45493:7726":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:2702:5212":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:1866:7872":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"13:0:3200":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3697:8373":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:0:3210":{"crate_id":17,"path":["object"],"kind":"module"},"1:11165:8534":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"21:843:3064":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:44542:3752":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:9424:25876":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:33003:3456":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:2509:8363":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4728:3131":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"17:16068:4975":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4869:5930":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14443:4563":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:32929:3722":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:8525:7532":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2129:6721":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14396:4557":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:43921:3699":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8742:6556":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:47028:7036":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9336:8562":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:3324:3451":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:7009:7596":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:12658:1772":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11667:4272":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:2115:8298":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:41164:13756":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:48036:7127":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42927:7665":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:9505:7988":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:8335:7745":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:11359:32353":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:12669:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"20:2565:130":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:10517:25893":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:11128:7209":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:5111:5272":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8433:25828":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12878:7371":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:643:4103":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:292:7545":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:16116:5012":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7804:35259":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:481:7323":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:10605:3704":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:14650:4594":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11380:7234":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"20:2611:266":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:13066:7839":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16658:5149":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:9841:7895":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12854:4341":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6852:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:23396:31576":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:908:2733":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:8304:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:497:5666":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:43394:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2504:5203":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:15919:4934":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:6826:3438":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:6557:7736":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:12663:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14122:4488":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11328:35292":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:22383:8592":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"20:924:266":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:23418:6733":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9484:3503":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11987:7906":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:559:5707":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.86/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}