{"root":"0:0:1066","crate_version":"1.0.20","includes_private":false,"index":{"2:10222:2797":{"id":"2:10222:2797","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10223:1530","2:10224:55879","2:10226:55878"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:441:1965":{"id":"0:441:1965","crate_id":0,"name":"push_add_spanned","span":{"filename":"src/runtime.rs","begin":[327,0],"end":[327,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4717:2797":{"id":"1:4717:2797","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4718:2466","1:4719:58904","1:4721:58905","1:4722:4224","1:4723:58906","1:4724:8309","1:4725:55878","1:4734:2662"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:119:2244":{"id":"0:119:2244","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[61,4],"end":[65,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:507:1993":{"id":"0:507:1993","crate_id":0,"name":"push_rem_spanned","span":{"filename":"src/runtime.rs","begin":[360,0],"end":[360,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13449:56346":{"id":"2:13449:56346","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15939:2381","self::pattern":"2:13018:2907","str::splitn":"1:15945:2386"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49529:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3561:2566":{"id":"2:3561:2566","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3563:181","2:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13383:2638":{"id":"2:13383:2638","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:808:3009":{"id":"20:808:3009","crate_id":20,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:809:61808"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:3020":{"id":"1:5775:3020","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:6833","1:5777:57792","1:5778:5387","1:5779:57793","1:5780:3415","1:5781:3416","1:5782:57794","1:5783:1302","1:5784:57795","1:5785:57796","1:5786:57797","1:5787:57798","1:5788:57799","1:5789:57800","1:5790:57801","1:5791:57802"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:2809":{"id":"5:5833:2809","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3385:2268":{"id":"2:3385:2268","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3387:181","2:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13392:304":{"id":"2:13392:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15956:2395","str::as_mut_ptr":"1:15945:2386"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3364:2550":{"id":"2:3364:2550","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:454:1923":{"id":"0:454:1923","crate_id":0,"name":"push_caret","span":{"filename":"src/runtime.rs","begin":[334,0],"end":[334,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:503:1991":{"id":"0:503:1991","crate_id":0,"name":"push_rarrow_spanned","span":{"filename":"src/runtime.rs","begin":[358,0],"end":[358,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3150:75":{"id":"2:3150:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:462:1912":{"id":"0:462:1912","crate_id":0,"name":"push_comma","span":{"filename":"src/runtime.rs","begin":[338,0],"end":[338,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13412:60508":{"id":"2:13412:60508","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49671:3824","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3253:211":{"id":"2:3253:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:468:1913":{"id":"0:468:1913","crate_id":0,"name":"push_dot","span":{"filename":"src/runtime.rs","begin":[341,0],"end":[341,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:7799","1:2579:2364","1:2580:58363","1:2581:58364","1:2582:57540"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13476:60519":{"id":"2:13476:60519","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5681:3071":{"id":"1:5681:3071","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:55744","1:5683:4070"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:118:1629":{"id":"0:118:1629","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[55,4],"end":[55,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:500:1941":{"id":"0:500:1941","crate_id":0,"name":"push_question","span":{"filename":"src/runtime.rs","begin":[357,0],"end":[357,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:21:2121":{"id":"0:21:2121","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[35,4],"end":[38,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8384:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8384:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:451:1970":{"id":"0:451:1970","crate_id":0,"name":"push_at_spanned","span":{"filename":"src/runtime.rs","begin":[332,0],"end":[332,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:522:1951":{"id":"0:522:1951","crate_id":0,"name":"push_star","span":{"filename":"src/runtime.rs","begin":[368,0],"end":[368,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10520:146":{"id":"2:10520:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10521:652","2:10522:2466","2:10523:57442","2:10524:57443","2:10525:57444","2:10526:57445","2:10527:57446","2:10528:57447","2:10529:57448","2:10530:57449","2:10531:57450","2:10532:57451","2:10533:57452","2:10534:57453","2:10535:57454","2:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:56344":{"id":"2:13446:56344","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381","str::rsplitn":"1:15945:2386"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49511:2841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445:1967":{"id":"0:445:1967","crate_id":0,"name":"push_and_spanned","span":{"filename":"src/runtime.rs","begin":[329,0],"end":[329,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:289:2005":{"id":"0:289:2005","crate_id":0,"name":"parse_spanned","span":{"filename":"src/runtime.rs","begin":[187,0],"end":[190,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:295:1954":{"id":"0:295:1954","crate_id":0,"name":"push_lifetime","span":{"filename":"src/runtime.rs","begin":[218,0],"end":[246,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["lifetime",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13413:8618":{"id":"2:13413:8618","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49699:3827","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13394:56309":{"id":"2:13394:56309","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:531:1539":{"id":"0:531:1539","crate_id":0,"name":"0","span":{"filename":"src/runtime.rs","begin":[402,50],"end":[402,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"1:1079:3057":{"id":"1:1079:3057","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2506","1:1081:3985","1:1082:55710","1:1083:55711","1:1084:55712","1:1085:55713","1:1086:55714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:505:1992":{"id":"0:505:1992","crate_id":0,"name":"push_larrow_spanned","span":{"filename":"src/runtime.rs","begin":[359,0],"end":[359,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10283:2336":{"id":"2:10283:2336","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:23:2126":{"id":"0:23:2126","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[44,4],"end":[48,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8384:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8384:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:480:1932":{"id":"0:480:1932","crate_id":0,"name":"push_ge","span":{"filename":"src/runtime.rs","begin":[347,0],"end":[347,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13461:60513":{"id":"2:13461:60513","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13018:2907","`DoubleEndedIterator`":"2:8428:120","str::matches":"1:15945:2386","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49629:3823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5687:3073":{"id":"1:5687:3073","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5688:4722","1:5689:55774"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13437:56342":{"id":"2:13437:56342","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15939:2381","`DoubleEndedIterator`":"2:8428:120","str::split":"1:15945:2386","self::pattern":"2:13018:2907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49425:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[8,0],"end":[8,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::option::Option","name":"Option","id":"2:47440:176","glob":false}},"2:13423:2672":{"id":"2:13423:2672","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15939:2381","self::pattern":"2:13018:2907","`None`":"2:47440:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5819:3022":{"id":"1:5819:3022","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:57792"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3565:2567":{"id":"2:3565:2567","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3561:2566","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:242:2292":{"id":"0:242:2292","crate_id":0,"name":"Iter","span":{"filename":"src/runtime.rs","begin":[84,8],"end":[84,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"2:13387:60505":{"id":"2:13387:60505","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15945:2386"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:483:1982":{"id":"0:483:1982","crate_id":0,"name":"push_gt_spanned","span":{"filename":"src/runtime.rs","begin":[348,0],"end":[348,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3984:68":{"id":"2:3984:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13501:3985":{"id":"2:13501:3985","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:60512":{"id":"2:13455:60512","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3368:2552":{"id":"2:3368:2552","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:135":{"id":"2:3159:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:519:1998":{"id":"0:519:1998","crate_id":0,"name":"push_shr_spanned","span":{"filename":"src/runtime.rs","begin":[366,0],"end":[366,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:82:1629":{"id":"0:82:1629","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[1,0],"end":[211,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:117:1634"],"is_stripped":true}},"2:3718:137":{"id":"2:3718:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:458:1915":{"id":"0:458:1915","crate_id":0,"name":"push_colon","span":{"filename":"src/runtime.rs","begin":[336,0],"end":[336,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13478:60521":{"id":"2:13478:60521","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13048:3529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12465:3981":{"id":"2:12465:3981","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12466:2123","2:12467:59057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13396:56310":{"id":"2:13396:56310","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10555:3160":{"id":"2:10555:3160","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10556:146","2:10557:8361","2:10558:58623"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:496:1940":{"id":"0:496:1940","crate_id":0,"name":"push_or_or","span":{"filename":"src/runtime.rs","begin":[355,0],"end":[355,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:368:1066":{"id":"0:368:1066","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[473,0],"end":[477,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`format_ident!`":"0:47:2192","`proc_macro::TokenStream`":"20:3002:1810","`proc_macro2::TokenStream`":"21:997:1810"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"},"0:346:1635":{"id":"0:346:1635","crate_id":0,"name":"spanned","span":{"filename":"src/spanned.rs","begin":[1,0],"end":[43,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:357:2337"],"is_stripped":true}},"2:8343:2715":{"id":"2:8343:2715","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8345:2685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:2548":{"id":"2:3342:2548","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:526:1953":{"id":"0:526:1953","crate_id":0,"name":"push_sub_eq","span":{"filename":"src/runtime.rs","begin":[370,0],"end":[370,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:521:1999":{"id":"0:521:1999","crate_id":0,"name":"push_shr_eq_spanned","span":{"filename":"src/runtime.rs","begin":[367,0],"end":[367,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8453:2605":{"id":"2:8453:2605","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8454:793","2:8455:2638"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10914:214":{"id":"2:10914:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10916:181","2:10917:56309","2:10918:56310","2:10919:56311","2:10920:56312","2:10921:753","2:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10905:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:465:1974":{"id":"0:465:1974","crate_id":0,"name":"push_div_spanned","span":{"filename":"src/runtime.rs","begin":[339,0],"end":[339,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:231:2280":{"id":"0:231:2280","crate_id":0,"name":"RepIteratorExt","span":{"filename":"src/runtime.rs","begin":[55,4],"end":[59,5]},"visibility":"public","docs":"Extension trait providing the `quote_into_iter` method on iterators.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:232:1886"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:232:1886":{"id":"0:232:1886","crate_id":0,"name":"quote_into_iter","span":{"filename":"src/runtime.rs","begin":[56,8],"end":[58,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"Self"},{"kind":"resolved_path","inner":{"name":"HasIter","id":"0:191:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:514:1947":{"id":"0:514:1947","crate_id":0,"name":"push_shl","span":{"filename":"src/runtime.rs","begin":[364,0],"end":[364,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13504:55714":{"id":"2:13504:55714","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7908:2698":{"id":"2:7908:2698","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7909:59985","2:7910:59986","2:7911:59983","2:7912:59981","2:7913:59987","2:7914:59984","2:7915:59982"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4735:3090":{"id":"1:4735:3090","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4736:58654","1:4737:40377","1:4738:58655","1:4739:58656"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:60522":{"id":"2:13481:60522","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13403:60507":{"id":"2:13403:60507","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3565:2567","`str`":"1:15945:2386","str::slice_unchecked":"1:15945:2386"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3506:131":{"id":"2:3506:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13434:8879":{"id":"2:13434:8879","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12810:2843","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:461:1958":{"id":"0:461:1958","crate_id":0,"name":"push_colon2_spanned","span":{"filename":"src/runtime.rs","begin":[337,0],"end":[337,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4742:3110":{"id":"1:4742:3110","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4743:55558","1:4744:55559","1:4745:55561","1:4747:3109","1:4748:55560","1:4750:55562","1:4751:4301"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4660:3036","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3401:2558":{"id":"2:3401:2558","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:509:1994":{"id":"0:509:1994","crate_id":0,"name":"push_rem_eq_spanned","span":{"filename":"src/runtime.rs","begin":[361,0],"end":[361,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3331:2546":{"id":"2:3331:2546","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:181","2:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2506","5:785:2694","5:786:2695"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:434:1539":{"id":"0:434:1539","crate_id":0,"name":"0","span":{"filename":"src/runtime.rs","begin":[141,24],"end":[141,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:22802:3686":{"id":"2:22802:3686","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22803:59447","2:22804:1225","2:22805:1226","2:22806:59448","2:22807:59449","2:22808:59450","2:22809:59451","2:22810:59452","2:22811:59453","2:22812:59454"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13409:8880":{"id":"2:13409:8880","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15945:2386"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49681:3825","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13507:3059":{"id":"2:13507:3059","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49715:3060","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:488:1936":{"id":"0:488:1936","crate_id":0,"name":"push_mul_eq","span":{"filename":"src/runtime.rs","begin":[351,0],"end":[351,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:164:1631":{"id":"0:164:1631","crate_id":0,"name":"__private","span":{"filename":"src/runtime.rs","begin":[1,0],"end":[438,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]","#[path = \"runtime.rs\"]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:207:1627","0:191:1901","0:193:1900","0:431:1889","0:286:1906","0:287:1959","0:288:1956","0:289:2005","0:293:1904","0:294:1957","0:295:1954","0:304:2003","0:440:1916","0:441:1965","0:442:1917","0:443:1966","0:444:1918","0:445:1967","0:446:1919","0:447:1968","0:448:1920","0:449:1969","0:450:1921","0:451:1970","0:452:1922","0:453:1971","0:454:1923","0:455:1972","0:456:1924","0:457:1973","0:458:1915","0:459:1964","0:460:1905","0:461:1958","0:462:1912","0:463:1961","0:464:1925","0:465:1974","0:466:1926","0:467:1975","0:468:1913","0:469:1962","0:470:1927","0:471:1976","0:472:1928","0:473:1977","0:474:1929","0:475:1978","0:476:1930","0:477:1979","0:478:1931","0:479:1980","0:480:1932","0:481:1981","0:482:1933","0:483:1982","0:484:1934","0:485:1983","0:486:1935","0:487:1984","0:488:1936","0:489:1985","0:490:1937","0:491:1986","0:492:1938","0:493:1987","0:494:1939","0:495:1988","0:496:1940","0:497:1989","0:498:1911","0:499:1960","0:500:1941","0:501:1990","0:502:1942","0:503:1991","0:504:1943","0:505:1992","0:506:1944","0:507:1993","0:508:1945","0:509:1994","0:510:1946","0:511:1995","0:512:1914","0:513:1963","0:514:1947","0:515:1996","0:516:1948","0:517:1997","0:518:1949","0:519:1998","0:520:1950","0:521:1999","0:522:1951","0:523:2000","0:524:1952","0:525:2001","0:526:1953","0:527:2002","0:315:1955","0:316:2004","0:317:2195","0:528:2198","0:184","0:185","0:188"],"is_stripped":true}},"2:12957:2496":{"id":"2:12957:2496","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12958:126","2:12959:55691"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8863:2582":{"id":"2:8863:2582","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6105:2706":{"id":"5:6105:2706","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3088:3578":{"id":"2:3088:3578","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3087:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:492:1938":{"id":"0:492:1938","crate_id":0,"name":"push_or","span":{"filename":"src/runtime.rs","begin":[353,0],"end":[353,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2941:177":{"id":"2:2941:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2942:415","2:2943:2628","2:2944:2629","2:2945:2630"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:443:1966":{"id":"0:443:1966","crate_id":0,"name":"push_add_eq_spanned","span":{"filename":"src/runtime.rs","begin":[328,0],"end":[328,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13390:55774":{"id":"2:13390:55774","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12489:3946"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:502:1942":{"id":"0:502:1942","crate_id":0,"name":"push_rarrow","span":{"filename":"src/runtime.rs","begin":[358,0],"end":[358,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:517:1997":{"id":"0:517:1997","crate_id":0,"name":"push_shl_eq_spanned","span":{"filename":"src/runtime.rs","begin":[365,0],"end":[365,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2910:124":{"id":"2:2910:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:476:1930":{"id":"0:476:1930","crate_id":0,"name":"push_eq","span":{"filename":"src/runtime.rs","begin":[345,0],"end":[345,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8582:157":{"id":"2:8582:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8583:2123","2:8584:922","2:8585:2641","2:8588:2642","2:8589:495","2:8591:2348","2:8594:2643","2:8595:2644","2:8596:2645","2:8597:2646","2:8599:2647","2:8601:2648","2:8602:2649","2:8604:841","2:8607:2650","2:8614:2651","2:8616:2341","2:8619:2135","2:8620:2652","2:8621:2653","2:8623:2654","2:8625:2655","2:8628:1306","2:8629:2656","2:8630:2657","2:8634:2658","2:8637:2659","2:8638:2660","2:8639:2661","2:8641:2662","2:8642:2299","2:8644:2663","2:8647:2664","2:8649:2665","2:8659:2666","2:8674:2667","2:8676:2668","2:8680:2669","2:8689:2346","2:8692:2670","2:8694:2671","2:8697:276","2:8704:294","2:8711:2672","2:8718:2673","2:8727:2674","2:8737:1014","2:8744:2675","2:8751:2628","2:8752:2629","2:8753:2676","2:8765:2677","2:8772:2678","2:8784:2679","2:8791:2680","2:8792:2681","2:8797:2682","2:8800:2683","2:8803:2684","2:8804:2685","2:8806:2686","2:8808:415","2:8811:2687","2:8814:997","2:8817:2688","2:8820:604","2:8823:2689","2:8826:907","2:8828:826","2:8830:792","2:8832:713","2:8834:696","2:8836:2690","2:8837:2691","2:8845:2692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:469:1962":{"id":"0:469:1962","crate_id":0,"name":"push_dot_spanned","span":{"filename":"src/runtime.rs","begin":[341,0],"end":[341,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13417:2211":{"id":"2:13417:2211","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1066":{"id":"0:0:1066","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1434,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.20\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:47:2192","0:368:1066","0:369:1869","0:337","0:340","0:343"],"is_stripped":false}},"0:510:1946":{"id":"0:510:1946","crate_id":0,"name":"push_fat_arrow","span":{"filename":"src/runtime.rs","begin":[362,0],"end":[362,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8860:2581":{"id":"2:8860:2581","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13411:4301":{"id":"2:13411:4301","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49661:3113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6591:3075":{"id":"1:6591:3075","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6592:57663","1:6593:57664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:444:1918":{"id":"0:444:1918","crate_id":0,"name":"push_and","span":{"filename":"src/runtime.rs","begin":[329,0],"end":[329,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:460:1905":{"id":"0:460:1905","crate_id":0,"name":"push_colon2","span":{"filename":"src/runtime.rs","begin":[337,0],"end":[337,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13043:3528":{"id":"2:13043:3528","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13045:2632","2:13046:59425","2:13047:59426"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13037:3527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3713:224":{"id":"2:3713:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3714:181","2:3715:2571","2:3716:686","2:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:471:1976":{"id":"0:471:1976","crate_id":0,"name":"push_dot2_spanned","span":{"filename":"src/runtime.rs","begin":[342,0],"end":[342,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13490:60523":{"id":"2:13490:60523","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:485:1983":{"id":"0:485:1983","crate_id":0,"name":"push_le_spanned","span":{"filename":"src/runtime.rs","begin":[349,0],"end":[349,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:22839:3576":{"id":"2:22839:3576","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22840:3572","2:22841:1245","2:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4660:3036":{"id":"1:4660:3036","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4661:3351","1:4662:58170","1:4664:58171","1:4665:58172","1:4666:3105","1:4667:8221","1:4668:8220","1:4670:58173","1:4671:2662","1:4672:2906","1:4673:2646","1:4675:2656"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:446:1919":{"id":"0:446:1919","crate_id":0,"name":"push_and_and","span":{"filename":"src/runtime.rs","begin":[330,0],"end":[330,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6084:61150":{"id":"5:6084:61150","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2247","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2247","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:1906":{"id":"0:286:1906","crate_id":0,"name":"push_group","span":{"filename":"src/runtime.rs","begin":[167,0],"end":[169,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["delimiter",{"kind":"resolved_path","inner":{"name":"Delimiter","id":"21:1027:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["inner",{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:240:2290":{"id":"0:240:2290","crate_id":0,"name":"RepAsIteratorExt","span":{"filename":"src/runtime.rs","begin":[83,4],"end":[87,5]},"visibility":"public","docs":"Extension trait providing the `quote_into_iter` method for types that\ncan be referenced as an iterator.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:242:2292","0:243:1886"],"generics":{"params":[{"name":"'q","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:3846":{"id":"2:13406:3846","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49377:2903","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13037:3527":{"id":"2:13037:3527","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13039:3547","2:13040:922","2:13041:60306","2:13042:60307"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9371:3147":{"id":"1:9371:3147","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9372:57767","1:9373:57768","1:9374:57769","1:9375:57770","1:9376:57771","1:9377:39986","1:9378:57766"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:61152":{"id":"5:6091:61152","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3336:2545":{"id":"2:3336:2545","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10281:2333":{"id":"2:10281:2333","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2951:184":{"id":"2:2951:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:997","2:2954:826","2:2955:792","2:2956:713","2:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:464:1925":{"id":"0:464:1925","crate_id":0,"name":"push_div","span":{"filename":"src/runtime.rs","begin":[339,0],"end":[339,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13452:60511":{"id":"2:13452:60511","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3348:2547":{"id":"2:3348:2547","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:512:1914":{"id":"0:512:1914","crate_id":0,"name":"push_semi","span":{"filename":"src/runtime.rs","begin":[363,0],"end":[363,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13487:56349":{"id":"2:13487:56349","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15939:2381","self::pattern":"2:13018:2907"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9239:2527":{"id":"2:9239:2527","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7829:3207":{"id":"1:7829:3207","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7830:57788"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3476:116":{"id":"2:3476:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:221","2:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6719:3020":{"id":"1:6719:3020","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6720:57670","1:6721:7180","1:6722:7181","1:6723:7183","1:6724:7182","1:6725:7184","1:6726:7185","1:6727:7187","1:6728:5428","1:6729:7190","1:6730:7191","1:6731:7192","1:6732:7193","1:6733:7194","1:6734:7195","1:6735:7188","1:6736:7189"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3262:217":{"id":"2:3262:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:26:2130":{"id":"0:26:2130","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[54,4],"end":[58,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8384:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8384:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToTokens","id":"0:117:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13382:793":{"id":"2:13382:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3759:2524":{"id":"2:3759:2524","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6897:3066":{"id":"1:6897:3066","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6898:58326"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23736:3521":{"id":"2:23736:3521","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23737:3572"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23732:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14204:2533":{"id":"2:14204:2533","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14205:55783","2:14206:55784","2:14207:55785","2:14208:55786","2:14209:55787","2:14210:55788","2:14211:2662"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3415:2561":{"id":"2:3415:2561","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10272:109":{"id":"2:10272:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[6,0],"end":[6,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"proc_macro2","name":"proc_macro2","id":"21:0:2006","glob":true}},"2:13398:56311":{"id":"2:13398:56311","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3701:2569":{"id":"2:3701:2569","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3632:2495","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3390:2555":{"id":"2:3390:2555","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3392:181","2:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:478:1931":{"id":"0:478:1931","crate_id":0,"name":"push_eq_eq","span":{"filename":"src/runtime.rs","begin":[346,0],"end":[346,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61150","5:6085:3114","5:6088:61151","5:6091:61152","5:6103:61153","5:6104:61154","5:6105:2706","5:6106:55710","5:6107:55711"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315:1955":{"id":"0:315:1955","crate_id":0,"name":"push_underscore","span":{"filename":"src/runtime.rs","begin":[372,0],"end":[374,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:5837:2810":{"id":"5:5837:2810","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:2349"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:527:2002":{"id":"0:527:2002","crate_id":0,"name":"push_sub_eq_spanned","span":{"filename":"src/runtime.rs","begin":[370,0],"end":[370,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:513:1963":{"id":"0:513:1963","crate_id":0,"name":"push_semi_spanned","span":{"filename":"src/runtime.rs","begin":[363,0],"end":[363,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5761:3018":{"id":"1:5761:3018","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:5387","1:5763:55905","1:5764:55906"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:477:1979":{"id":"0:477:1979","crate_id":0,"name":"push_eq_spanned","span":{"filename":"src/runtime.rs","begin":[345,0],"end":[345,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:499:1960":{"id":"0:499:1960","crate_id":0,"name":"push_pound_spanned","span":{"filename":"src/runtime.rs","begin":[356,0],"end":[356,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3258:2209":{"id":"2:3258:2209","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:494:1939":{"id":"0:494:1939","crate_id":0,"name":"push_or_eq","span":{"filename":"src/runtime.rs","begin":[354,0],"end":[354,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2905:183":{"id":"2:2905:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2907:604","2:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3321:2502":{"id":"2:3321:2502","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:181","2:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13493:60524":{"id":"2:13493:60524","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:442:1917":{"id":"0:442:1917","crate_id":0,"name":"push_add_eq","span":{"filename":"src/runtime.rs","begin":[328,0],"end":[328,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:14130:141":{"id":"2:14130:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14131:277","2:14132:518","2:14133:280","2:14134:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:472:1928":{"id":"0:472:1928","crate_id":0,"name":"push_dot3","span":{"filename":"src/runtime.rs","begin":[343,0],"end":[343,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13440:60509":{"id":"2:13440:60509","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381","str::split":"1:15945:2386","`DoubleEndedIterator`":"2:8428:120","str::rsplit_terminator":"1:15945:2386"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49457:3815","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369:1869":{"id":"0:369:1869","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[612,0],"end":[616,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"},"2:3424:2563":{"id":"2:3424:2563","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13505:60526":{"id":"2:13505:60526","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49706:3828","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13502:55712":{"id":"2:13502:55712","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5753:3017":{"id":"1:5753:3017","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5754:58735","1:5755:58737","1:5756:58736","1:5757:58738"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:463:1961":{"id":"0:463:1961","crate_id":0,"name":"push_comma_spanned","span":{"filename":"src/runtime.rs","begin":[338,0],"end":[338,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:525:2001":{"id":"0:525:2001","crate_id":0,"name":"push_sub_spanned","span":{"filename":"src/runtime.rs","begin":[369,0],"end":[369,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:287:1959":{"id":"0:287:1959","crate_id":0,"name":"push_group_spanned","span":{"filename":"src/runtime.rs","begin":[171,0],"end":[180,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["delimiter",{"kind":"resolved_path","inner":{"name":"Delimiter","id":"21:1027:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["inner",{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13400:56312":{"id":"2:13400:56312","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13393:56313":{"id":"2:13393:56313","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15956:2395"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13048:3529":{"id":"2:13048:3529","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13458:2463":{"id":"2:13458:2463","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15945:2386","`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49611:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2200"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:293:1904":{"id":"0:293:1904","crate_id":0,"name":"push_ident","span":{"filename":"src/runtime.rs","begin":[209,0],"end":[212,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:18:1632","glob":false}},"0:508:1945":{"id":"0:508:1945","crate_id":0,"name":"push_rem_eq","span":{"filename":"src/runtime.rs","begin":[361,0],"end":[361,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8384:151":{"id":"2:8384:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:2123","2:8386:2580","2:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:516:1948":{"id":"0:516:1948","crate_id":0,"name":"push_shl_eq","span":{"filename":"src/runtime.rs","begin":[365,0],"end":[365,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3411:2560":{"id":"2:3411:2560","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:117:1634":{"id":"0:117:1634","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[12,0],"end":[77,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:118:1629","0:119:2244","0:120:2245"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23427:3573":{"id":"2:23427:3573","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23428:1268","2:23429:1267","2:23430:1265","2:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22839:3576","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6104:61154":{"id":"5:6104:61154","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:2247"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2247","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2534","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:358:2338":{"id":"0:358:2338","crate_id":0,"name":"__span","span":{"filename":"src/spanned.rs","begin":[5,4],"end":[5,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3503:130":{"id":"2:3503:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13484:8264":{"id":"2:13484:8264","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:520:1950":{"id":"0:520:1950","crate_id":0,"name":"push_shr_eq","span":{"filename":"src/runtime.rs","begin":[367,0],"end":[367,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:497:1989":{"id":"0:497:1989","crate_id":0,"name":"push_or_or_spanned","span":{"filename":"src/runtime.rs","begin":[355,0],"end":[355,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3294:2521":{"id":"2:3294:2521","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:474:1929":{"id":"0:474:1929","crate_id":0,"name":"push_dot_dot_eq","span":{"filename":"src/runtime.rs","begin":[344,0],"end":[344,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6824:3063":{"id":"1:6824:3063","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6825:57763"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3724:2571":{"id":"2:3724:2571","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3726:55002"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:504:1943":{"id":"0:504:1943","crate_id":0,"name":"push_larrow","span":{"filename":"src/runtime.rs","begin":[359,0],"end":[359,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:9240:2526":{"id":"2:9240:2526","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13410:8878":{"id":"2:13410:8878","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15945:2386"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49690:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13404:56332":{"id":"2:13404:56332","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15945:2386"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8347:2714":{"id":"2:8347:2714","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:2686"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5769:3019":{"id":"1:5769:3019","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5770:5387","1:5771:7723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:459:1964":{"id":"0:459:1964","crate_id":0,"name":"push_colon_spanned","span":{"filename":"src/runtime.rs","begin":[336,0],"end":[336,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13499:1956":{"id":"2:13499:1956","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12957:2496","FromStr::Err":"2:12957:2496"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:518:1949":{"id":"0:518:1949","crate_id":0,"name":"push_shr","span":{"filename":"src/runtime.rs","begin":[366,0],"end":[366,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:117:1634","glob":false}},"0:486:1935":{"id":"0:486:1935","crate_id":0,"name":"push_lt","span":{"filename":"src/runtime.rs","begin":[350,0],"end":[350,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23051:17005":{"id":"2:23051:17005","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:6336","2:23053:59368","2:23054:59369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23044:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3153:74":{"id":"2:3153:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:2631"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:4767:3491":{"id":"2:4767:3491","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4768:2123","2:4769:59556","2:4770:2642"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13503:55713":{"id":"2:13503:55713","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:60506":{"id":"2:13391:60506","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6493:3152":{"id":"1:6493:3152","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6494:57618","1:6495:7257","1:6496:57619","1:6497:57620","1:6498:57621","1:6499:57622"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3380:2554":{"id":"2:3380:2554","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:181","2:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4:1627":{"id":"0:4:1627","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[112,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:18:1632"],"is_stripped":true}},"2:3261:218":{"id":"2:3261:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3407:2559":{"id":"2:3407:2559","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8380:136":{"id":"2:8380:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:484:1934":{"id":"0:484:1934","crate_id":0,"name":"push_le","span":{"filename":"src/runtime.rs","begin":[349,0],"end":[349,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:357:2337":{"id":"0:357:2337","crate_id":0,"name":"Spanned","span":{"filename":"src/spanned.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:358:2338"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:235:2284":{"id":"0:235:2284","crate_id":0,"name":"RepToTokensExt","span":{"filename":"src/runtime.rs","begin":[66,4],"end":[77,5]},"visibility":"public","docs":"Extension trait providing the `quote_into_iter` method for\nnon-iterable types. These types interpolate the same value in each\niteration of the repetition.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:236:922","0:237:1886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3360:2551":{"id":"2:3360:2551","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:3114":{"id":"5:6085:3114","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:457:1973":{"id":"0:457:1973","crate_id":0,"name":"push_caret_eq_spanned","span":{"filename":"src/runtime.rs","begin":[335,0],"end":[335,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13381":{"id":"2:13381","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12478:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13382:793","2:13383:2638","2:13384:8670","2:13385:60504","2:13387:60505","2:13390:55774","2:13391:60506","2:13392:304","2:13393:56313","2:13394:56309","2:13396:56310","2:13398:56311","2:13400:56312","2:13402:3278","2:13403:60507","2:13404:56332","2:13405:56333","2:13406:3846","2:13407:3554","2:13408:2906","2:13409:8880","2:13410:8878","2:13411:4301","2:13412:60508","2:13413:8618","2:13414:56348","2:13417:2211","2:13420:2343","2:13423:2672","2:13427:2637","2:13431:55562","2:13434:8879","2:13437:56342","2:13440:60509","2:13443:60510","2:13446:56344","2:13449:56346","2:13452:60511","2:13455:60512","2:13458:2463","2:13461:60513","2:13464:60514","2:13467:60515","2:13470:60516","2:13472:60517","2:13474:60518","2:13476:60519","2:13477:60520","2:13478:60521","2:13481:60522","2:13484:8264","2:13487:56349","2:13490:60523","2:13493:60524","2:13496:60525","2:13499:1956","2:13501:3985","2:13502:55712","2:13503:55713","2:13504:55714","2:13505:60526","2:13507:3059","2:13508:60527"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:120:2245":{"id":"0:120:2245","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[71,4],"end":[76,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:61151":{"id":"5:6088:61151","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[111,0],"end":[111,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:63:1633","glob":false}},"0:466:1926":{"id":"0:466:1926","crate_id":0,"name":"push_div_eq","span":{"filename":"src/runtime.rs","begin":[340,0],"end":[340,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:447:1968":{"id":"0:447:1968","crate_id":0,"name":"push_and_and_spanned","span":{"filename":"src/runtime.rs","begin":[330,0],"end":[330,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13472:60517":{"id":"2:13472:60517","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13407:3554":{"id":"2:13407:3554","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49383:3811","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:237:1886":{"id":"0:237:1886","crate_id":0,"name":"quote_into_iter","span":{"filename":"src/runtime.rs","begin":[74,8],"end":[76,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},{"kind":"resolved_path","inner":{"name":"DoesNotHaveIter","id":"0:193:1900","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3352:2503":{"id":"2:3352:2503","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:18:1632":{"id":"0:18:1632","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[10,0],"end":[59,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:19:2111","0:21:2121","0:23:2126","0:26:2130"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"private::Sealed","id":"0:44:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13431:55562":{"id":"2:13431:55562","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15945:2386","prim@char":"1:15939:2381","self::pattern":"2:13018:2907","str::split_whitespace":"1:15945:2386","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49407:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5831:3016":{"id":"1:5831:3016","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5832:5387"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:61153":{"id":"5:6103:61153","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3419:2562":{"id":"2:3419:2562","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:481:1981":{"id":"0:481:1981","crate_id":0,"name":"push_ge_spanned","span":{"filename":"src/runtime.rs","begin":[347,0],"end":[347,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3500:2565":{"id":"2:3500:2565","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6471:3063":{"id":"1:6471:3063","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6472:3415","1:6473:3416","1:6474:57762","1:6475:58446","1:6477:58450","1:6479:58447","1:6480:58448","1:6482:58449"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:207:1627":{"id":"0:207:1627","crate_id":0,"name":"ext","span":{"filename":"src/runtime.rs","begin":[47,0],"end":[47,11]},"visibility":"public","docs":"Extension traits used by the implementation of `quote!`. These are defined\nin separate traits, rather than as a single trait due to ambiguity issues.\n\nThese traits expose a `quote_into_iter` method which should allow calling\nwhichever impl happens to be applicable. Calling that method repeatedly on\nthe returned value should be idempotent.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:231:2280","0:235:2284","0:240:2290"],"is_stripped":false}},"2:3509:132":{"id":"2:3509:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:181","2:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:501:1990":{"id":"0:501:1990","crate_id":0,"name":"push_question_spanned","span":{"filename":"src/runtime.rs","begin":[357,0],"end":[357,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23099:3635":{"id":"2:23099:3635","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23736:3521","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23090:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:467:1975":{"id":"0:467:1975","crate_id":0,"name":"push_div_eq_spanned","span":{"filename":"src/runtime.rs","begin":[340,0],"end":[340,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:64:660":{"id":"0:64:660","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[13,4],"end":[13,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10232:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10221:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[7,0],"end":[7,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::format","name":"format","id":"5:6:671","glob":false}},"0:236:922":{"id":"0:236:922","crate_id":0,"name":"next","span":{"filename":"src/runtime.rs","begin":[70,8],"end":[72,9]},"visibility":"default","docs":"Pretend to be an iterator for the purposes of `quote_into_iter`.\nThis allows repeated calls to `quote_into_iter` to continue\ncorrectly returning DoesNotHaveIter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13385:60504":{"id":"2:13385:60504","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10285:2334":{"id":"2:10285:2334","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:2637":{"id":"2:13427:2637","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47440:176","self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:2564":{"id":"2:3489:2564","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3373:2556":{"id":"2:3373:2556","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:181","2:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:2343":{"id":"2:13420:2343","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13402:3278":{"id":"2:13402:3278","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15945:2386","`str`":"1:15945:2386","crate::ops::Index":"2:3561:2566"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:22713:3575":{"id":"2:22713:3575","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22714:3572","2:22715:59447","2:22716:59882","2:22717:59883","2:22718:59884","2:22719:43348","2:22720:59885","2:22721:59886","2:22722:59887","2:22723:59888","2:22724:59889","2:22725:59890","2:22726:59891","2:22727:59892","2:22728:8672","2:22729:59893","2:22730:59487","2:22731:7994","2:22732:59198","2:22733:59197","2:22734:59199","2:22735:59448","2:22736:59449","2:22737:59450","2:22738:59451"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13474:60518":{"id":"2:13474:60518","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:55710":{"id":"5:6106:55710","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15945:2386"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3326:2549":{"id":"2:3326:2549","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3328:181","2:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:49:1628":{"id":"0:49:1628","crate_id":0,"name":"ident_fragment","span":{"filename":"src/ident_fragment.rs","begin":[1,0],"end":[86,56]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:63:1633"],"is_stripped":true}},"0:528:2198":{"id":"0:528:2198","crate_id":0,"name":"IdentFragmentAdapter","span":{"filename":"src/runtime.rs","begin":[402,0],"end":[402,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IdentFragment","id":"0:63:1633","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:531:1539"],"impls":[]}},"2:22902:3150":{"id":"2:22902:3150","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22892:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13467:60515":{"id":"2:13467:60515","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15939:2381","self::pattern":"2:13018:2907","str::match_indices":"1:15945:2386","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49575:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:506:1944":{"id":"0:506:1944","crate_id":0,"name":"push_rem","span":{"filename":"src/runtime.rs","begin":[360,0],"end":[360,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:44:2108":{"id":"0:44:2108","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[109,4],"end":[109,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3356:2553":{"id":"2:3356:2553","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3796:2525":{"id":"2:3796:2525","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3166:227":{"id":"2:3166:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:127","2:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5823:3023":{"id":"1:5823:3023","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5824:57655"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:431:1889":{"id":"0:431:1889","crate_id":0,"name":"RepInterp","span":{"filename":"src/runtime.rs","begin":[141,0],"end":[141,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:434:1539"],"impls":[]}},"2:13443:60510":{"id":"2:13443:60510","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381","str::split":"1:15945:2386","str::split_terminator":"1:15945:2386"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49475:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3395:2557":{"id":"2:3395:2557","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:473:1977":{"id":"0:473:1977","crate_id":0,"name":"push_dot3_spanned","span":{"filename":"src/runtime.rs","begin":[343,0],"end":[343,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:452:1922":{"id":"0:452:1922","crate_id":0,"name":"push_bang","span":{"filename":"src/runtime.rs","begin":[333,0],"end":[333,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:40:2107":{"id":"0:40:2107","crate_id":0,"name":"private","span":{"filename":"src/ext.rs","begin":[106,0],"end":[106,11]},"visibility":{"restricted":{"parent":"0:4:1627","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:44:2108"],"is_stripped":true}},"2:13470:60516":{"id":"2:13470:60516","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:55711":{"id":"5:6107:55711","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15945:2386"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:2003":{"id":"0:304:2003","crate_id":0,"name":"push_lifetime_spanned","span":{"filename":"src/runtime.rs","begin":[248,0],"end":[280,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["lifetime",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:482:1933":{"id":"0:482:1933","crate_id":0,"name":"push_gt","span":{"filename":"src/runtime.rs","begin":[348,0],"end":[348,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10289:189":{"id":"2:10289:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4035:3084":{"id":"2:4035:3084","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4036:57540"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6893:3032":{"id":"1:6893:3032","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6894:58786"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:524:1952":{"id":"0:524:1952","crate_id":0,"name":"push_sub","span":{"filename":"src/runtime.rs","begin":[369,0],"end":[369,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:47:2192":{"id":"0:47:2192","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"crate::IdentFragment":"0:63:1633","proc_macro2::Ident":"21:1069:2199","std::fmt::LowerHex":"2:10285:2334","std::fmt::Binary":"2:10283:2336","`format!`":"5:6:671","std::fmt::UpperHex":"2:10287:2335","proc_macro2::Span::call_site":"21:1002:1871","proc_macro2::Span":"21:1002:1871","`std::fmt`":"5:5093:660","std::fmt::Octal":"2:10281:2333"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"},"0:317:2195":{"id":"0:317:2195","crate_id":0,"name":"mk_ident","span":{"filename":"src/runtime.rs","begin":[382,0],"end":[385,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["id",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["span",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:1069:2199","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:453:1971":{"id":"0:453:1971","crate_id":0,"name":"push_bang_spanned","span":{"filename":"src/runtime.rs","begin":[333,0],"end":[333,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13746:150":{"id":"2:13746:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13747:181","2:13748:150","2:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:491:1986":{"id":"0:491:1986","crate_id":0,"name":"push_ne_spanned","span":{"filename":"src/runtime.rs","begin":[352,0],"end":[352,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6895:3065":{"id":"1:6895:3065","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6896:57568"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6993:3031":{"id":"1:6993:3031","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6994:57639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:191:1901":{"id":"0:191:1901","crate_id":0,"name":"HasIterator","span":{"filename":"src/runtime.rs","begin":[10,0],"end":[10,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:13408:2906":{"id":"2:13408:2906","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49393:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515:1996":{"id":"0:515:1996","crate_id":0,"name":"push_shl_spanned","span":{"filename":"src/runtime.rs","begin":[364,0],"end":[364,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10293:2799":{"id":"2:10293:2799","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:470:1927":{"id":"0:470:1927","crate_id":0,"name":"push_dot2","span":{"filename":"src/runtime.rs","begin":[342,0],"end":[342,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6821:3061":{"id":"1:6821:3061","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6822:55766","1:6823:55767"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8393:2606":{"id":"2:8393:2606","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8395:2132","2:8397:2639","2:8398:2640"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:489:1985":{"id":"0:489:1985","crate_id":0,"name":"push_mul_eq_spanned","span":{"filename":"src/runtime.rs","begin":[351,0],"end":[351,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3543:2574":{"id":"2:3543:2574","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:237","2:3546:206","2:3547:59125"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:288:1956":{"id":"0:288:1956","crate_id":0,"name":"parse","span":{"filename":"src/runtime.rs","begin":[182,0],"end":[185,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10510:142":{"id":"2:10510:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10511:715","2:10513:8649"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13414:56348":{"id":"2:13414:56348","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:493:1987":{"id":"0:493:1987","crate_id":0,"name":"push_or_spanned","span":{"filename":"src/runtime.rs","begin":[353,0],"end":[353,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:498:1911":{"id":"0:498:1911","crate_id":0,"name":"push_pound","span":{"filename":"src/runtime.rs","begin":[356,0],"end":[356,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13405:56333":{"id":"2:13405:56333","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15945:2386"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3265:220":{"id":"2:3265:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:511:1995":{"id":"0:511:1995","crate_id":0,"name":"push_fat_arrow_spanned","span":{"filename":"src/runtime.rs","begin":[362,0],"end":[362,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3632:2495":{"id":"2:3632:2495","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:60289","2:3635:60290","2:3636:56348"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:523:2000":{"id":"0:523:2000","crate_id":0,"name":"push_star_spanned","span":{"filename":"src/runtime.rs","begin":[368,0],"end":[368,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13508:60527":{"id":"2:13508:60527","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15939:2381"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49724:3829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:450:1921":{"id":"0:450:1921","crate_id":0,"name":"push_at","span":{"filename":"src/runtime.rs","begin":[332,0],"end":[332,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:440:1916":{"id":"0:440:1916","crate_id":0,"name":"push_add","span":{"filename":"src/runtime.rs","begin":[327,0],"end":[327,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:456:1924":{"id":"0:456:1924","crate_id":0,"name":"push_caret_eq","span":{"filename":"src/runtime.rs","begin":[335,0],"end":[335,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5020:3039":{"id":"1:5020:3039","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5021:2292","1:5022:58348"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:65:1870":{"id":"0:65:1870","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3156:149":{"id":"2:3156:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:2134"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10291:2798":{"id":"2:10291:2798","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:138":{"id":"2:13731:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13732:181","2:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2850:2504":{"id":"2:2850:2504","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:55554"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:490:1937":{"id":"0:490:1937","crate_id":0,"name":"push_ne","span":{"filename":"src/runtime.rs","begin":[352,0],"end":[352,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13464:60514":{"id":"2:13464:60514","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:2907","prim@char":"1:15939:2381","str::rmatch_indices":"1:15945:2386"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49557:3819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10279:119":{"id":"2:10279:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:19:2111":{"id":"0:19:2111","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[14,4],"end":[16,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:1008:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13496:60525":{"id":"2:13496:60525","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:2907","prim@char":"1:15939:2381"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:2902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294:1957":{"id":"0:294:1957","crate_id":0,"name":"push_ident_spanned","span":{"filename":"src/runtime.rs","begin":[214,0],"end":[216,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13028:2902":{"id":"2:13028:2902","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13030:3527","2:13031:59949","2:13032:59950","2:13033:59951","2:13034:59953","2:13035:59952","2:13036:59954"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:455:1972":{"id":"0:455:1972","crate_id":0,"name":"push_caret_spanned","span":{"filename":"src/runtime.rs","begin":[334,0],"end":[334,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:8428:120":{"id":"2:8428:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8429:2632","2:8430:2633","2:8431:2634","2:8432:2635","2:8436:2636","2:8439:2637"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13384:8670":{"id":"2:13384:8670","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:2004":{"id":"0:316:2004","crate_id":0,"name":"push_underscore_spanned","span":{"filename":"src/runtime.rs","begin":[376,0],"end":[378,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:487:1984":{"id":"0:487:1984","crate_id":0,"name":"push_lt_spanned","span":{"filename":"src/runtime.rs","begin":[350,0],"end":[350,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:449:1969":{"id":"0:449:1969","crate_id":0,"name":"push_and_eq_spanned","span":{"filename":"src/runtime.rs","begin":[331,0],"end":[331,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3263:106":{"id":"2:3263:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:243:1886":{"id":"0:243:1886","crate_id":0,"name":"quote_into_iter","span":{"filename":"src/runtime.rs","begin":[86,8],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'q","mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"qualified_path","inner":{"name":"Iter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:240:2290","args":null,"param_names":[]}}}},{"kind":"resolved_path","inner":{"name":"HasIter","id":"0:191:1901","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13477:60520":{"id":"2:13477:60520","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8867:2713":{"id":"2:8867:2713","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7908:2698","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23432:17024":{"id":"2:23432:17024","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23433:59197","2:23434:59198","2:23435:59199"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23427:3573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:193:1900":{"id":"0:193:1900","crate_id":0,"name":"ThereIsNoIteratorInRepetition","span":{"filename":"src/runtime.rs","begin":[11,0],"end":[11,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:10287:2335":{"id":"2:10287:2335","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:475:1978":{"id":"0:475:1978","crate_id":0,"name":"push_dot_dot_eq_spanned","span":{"filename":"src/runtime.rs","begin":[344,0],"end":[344,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:495:1988":{"id":"0:495:1988","crate_id":0,"name":"push_or_eq_spanned","span":{"filename":"src/runtime.rs","begin":[354,0],"end":[354,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:63:1633":{"id":"0:63:1633","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[11,0],"end":[21,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.","links":{"`Ident`":"21:1069:2199","`format_ident!`":"0:47:2192"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:64:660","0:65:1870"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22766:3568":{"id":"2:22766:3568","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22767:3572","2:22768:59447","2:22769:1225","2:22770:1226","2:22771:43348","2:22772:59484","2:22773:8837","2:22774:59485","2:22775:59486","2:22776:59487","2:22777:59448","2:22778:59449","2:22779:59450","2:22780:59451","2:22781:59452","2:22782:59453","2:22783:59454"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3162:228":{"id":"2:3162:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164:127","2:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5809:3021":{"id":"1:5809:3021","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5810:55748","1:5811:55749","1:5812:55750","1:5813:55751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:479:1980":{"id":"0:479:1980","crate_id":0,"name":"push_eq_eq_spanned","span":{"filename":"src/runtime.rs","begin":[346,0],"end":[346,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["span",{"kind":"resolved_path","inner":{"name":"Span","id":"21:1002:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:448:1920":{"id":"0:448:1920","crate_id":0,"name":"push_and_eq","span":{"filename":"src/runtime.rs","begin":[331,0],"end":[331,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:997:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}},"paths":{"2:13243:7834":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:49982:3541":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"14:0:2357":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13627:5936":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:49839:3536":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9971:61753":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:2310:4099":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:11118:2579":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11199:5380":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:14748:3074":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12671:5642":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:8197:2580":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:5472:4330":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:610:6482":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11767:5465":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11087:3134":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:8263:2592":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:24631:3341":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:11996:3204":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13898:6026":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:5753:3017":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"12:2392:2215":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:11140:2739":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:3048:60385":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6005:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12215:3252":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10510:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"9:234:4145":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:6219:4485":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:5875:5026":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:2512:4758":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:4852:6091":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:2072:2602":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:5346:4436":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4023:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:38753:3081":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2381:2528":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5274:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1644:3168":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:51540:3660":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:3543:2574":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"22:0:2485":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"17:9649:7762":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"12:1183:4251":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12145:3300":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3348:2547":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:858:4803":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12210:3251":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:24030:7323":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1597:2292":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:50147:3836":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:49931:3539":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10149:7766":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:1730:5209":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:15942:2383":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"12:856:3168":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:13365:3408":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:9371:3147":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10236:4695":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:12489:3946":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6085:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4371:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:53137:3674":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4410:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9659:61767":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4083:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:24091:7328":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13172:5820":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:8446:2603":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:15937:2379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:5681:3071":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:7257:5017":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4660:3036":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"20:3116:1907":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:10179:5329":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5998:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46548:2717":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:962:2216":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"5:1618:2580":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:2045:2603":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:15939:2381":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12343:5569":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11539:5419":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1533:6504":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13041:5770":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:13028:2902":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13054:5777":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:668:4812":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3390:2555":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11328:5655":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47997:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:10275:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"9:0:2353":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"12:353:7670":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9839:4702":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11323:3397":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"20:2448:53987":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:32121:3917":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12168:5337":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4478:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:52348:3656":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11255:1871":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"20:165:54000":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:4724:3565":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:3118:4623":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:2314:4762":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:47619:2579":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:6899:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:4417:6078":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3730:2573":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"9:692:4120":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:1563:6517":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4364:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12736:3817":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12442:5602":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10477:4698":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10721:7835":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2492:3492":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6682:4451":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:51666:3637":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:1843:5017":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7761:4514":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:294:61758":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:47871:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2276:3603":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:4157:4741":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:53463:7495":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:1121:3178":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:15964:2403":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:3333:3359":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:23736:3521":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:51814:7437":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:54:4241":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:9241:3321":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5347:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4255:3413":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11794:5474":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46398:3744":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:45890:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13942:6041":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:6893:3032":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:15950:2389":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3939:6073":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:14566:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:2036:2580":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10468:4699":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:45757:2575":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10864:5365":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:510:47494":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:12019:7716":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:6718:4644":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:15062:7725":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:6155:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:13977:3201":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:52534:3662":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4387:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:13511:7802":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:3331:2546":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13819:6005":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:3197:3351":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13780:5997":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3200:3105":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12073:5528":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:55912:3517":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"21:1074:2216":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"17:12234:5550":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:8453:2605":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46004:3616":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"12:952:3174":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7073:4501":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5563:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:8313:3887":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:637:5228":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13154:5815":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5945:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:8849:4746":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:13904:3202":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:2945:4632":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"15:248:4274":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:46918:2702":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4501:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:812:4799":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5548:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:107:3286":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"16:6605:4452":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:23904:3862":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:925:2943":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:3555:3119":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:2923:7616":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:3360:2551":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46056:3698":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:1075:4188":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:9088:47501":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:12185:3427":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:1253:2944":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:23626:3149":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:7650:2647":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:1939:2603":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:12810:2843":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10814:4737":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:2462:7804":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10128:4782":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:5892:3460":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:12693:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2843:4607":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:8942:2703":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10584:4740":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:7736:2724":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11360:3041":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11738:5456":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:51261:3647":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:52030:3669":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12208:5547":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:3549:6069":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3319:3355":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3335:3360":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3385:2268":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11665:5441":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:9759:7764":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:50016:39951":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:157:40337":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:5611:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46342:3965":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:15409:7579":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:2816:4626":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4013:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:1079:3057":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9094:3428":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5707:4340":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"18:152:7756":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13506:5904":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:3407:2559":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:3905:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:721:5230":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13446:5888":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:11372:3467":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:136:7755":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4494:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:869:2895":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11001:47745":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:7829:3207":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:838:3527":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3411:2560":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3294:2521":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:15296:3393":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:50384:3082":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:23997:3720":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:3062:1871":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"6:1547:6509":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12712:5647":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4127:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3159:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"20:1315:3007":{"crate_id":20,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"1:1161:11773":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10876:3372":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:1744:6632":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:11437:3064":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:22815:2108":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13685:5978":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:13248:7798":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:12240:3264":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:15070:3210":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:7541:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2850:2504":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1540:6507":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"21:799:2952":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"5:3396:2602":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3401:2558":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:10555:3160":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11094:2292":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:1676:6598":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:10560:3611":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:9729:61752":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6764:3097":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6185:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:933:3172":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5231:6097":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9849:61766":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:868:2215":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:48795:7705":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:24767:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:51092:3646":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6072:4421":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:56283:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1674:3171":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3321:2502":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:537:6437":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:7843:4515":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:14549:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12756:5654":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1511:3173":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5488:4331":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:47913:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:4386:6077":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:9240:2526":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4215:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5273:4364":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11312:3395":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2062:3097":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:8428:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13394:5875":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:15334:3394":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"20:2659:4835":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"16:2889:4627":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"15:269:4278":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7185:4505":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:5415:3097":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:14050:5072":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"12:1147:3179":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10331:4702":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:5687:3073":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:8250:2591":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:50139:3841":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:5833:2809":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5420:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:53286:3677":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3261:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:611:4808":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5292:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:15951:2390":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:4306:2579":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12741:5650":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6999:4500":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:47955:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2401:7801":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5672:4339":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12537:5615":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"20:2687:2215":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"21:953:2199":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:12373:5588":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9280:5316":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:49904:3538":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12327:5564":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10061:47564":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:14523:3029":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:10106:4780":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:1053:2303":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:11277:5381":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11993:5512":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:5392:2897":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:940:3173":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3317:3354":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:15962:2401":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:4699:5022":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:56296:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7928:3615":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:155:2953":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:46595:2729":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:15910:11775":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:10593:2108":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7467:4439":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:15953:2392":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:2238:5210":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:10912:47758":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:49297:2833":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:25205:3746":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6644:4496":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:2437:7802":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4504:3127":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12456:5604":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2773:4633":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11434:5389":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"0:0:1066":{"crate_id":0,"path":["quote"],"kind":"module"},"1:12034:58430":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:48203:2336":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:9743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5428:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6021:4606":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7216:4508":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7119:4367":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3262:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:9173:3250":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:12699:3814":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46506:13366":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4517:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:8160:2133":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:6881:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:3796:2525":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:3892:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5255:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7824:5031":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12568:5620":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:14513:7717":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3476:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:3218:4615":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:32362:59206":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:50352:3849":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:15956:2395":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"12:971:3175":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:5964:3463":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3263:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:12465:3981":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:3157:2199":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"1:11108:3108":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9528:3111":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11632:3231":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13547:5918":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6636:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8680:3421":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:48224:2335":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:48039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6208:4484":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10435:7774":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:963:4185":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6233:3411":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:767:5239":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:1236:7771":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13733:5979":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:46244:3739":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:169:7759":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"14:189:7828":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:13018:2907":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4101:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3336:2599":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4120:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6269:4487":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46319:3964":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:3329:2292":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:53200:3639":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:4443:2292":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:52995:3670":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5197:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:12957:2496":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:5831:3016":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12363:7803":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:10405:7839":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10458:5222":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:23432:17024":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:51846:7438":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12221:5548":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:3153:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"9:900:6391":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5371:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:32462:59208":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:23833:3860":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11981:3203":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:48506:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:48740:3184":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"12:843:3167":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:5609:1307":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"6:519:6429":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5282:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7711:3200":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:3172:4613":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:3326:2549":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:51437:3668":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:3380:2554":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2460:7803":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:14985:58609":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5522:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3984:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"9:41:4170":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"21:832:2944":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:6239:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:23099:3635":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:6821:3061":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:2412:6338":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1729:3407":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:3018:4611":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"19:117:5224":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:4654:3097":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"21:1047:2217":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"2:45997:3615":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10140:4702":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:11377:2841":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1472:3178":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13180:5821":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:783:5228":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3162:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13933:6039":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9574:4693":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6101:4433":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"13:120:45814":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4133:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:8115:2580":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13477:5896":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13590:5928":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13318:5854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13620:5934":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:2262:4082":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:13094:3532":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6949:4652":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8954:4692":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4060:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:52741:3682":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46618:2731":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4072:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:15946:2387":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11406:5385":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5528:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13272:5848":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:50119:3837":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:300:61811":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:12023:55704":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"20:2963:3007":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:3489:2564":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11225:2830":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"7:85:45176":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46358:3828":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11779:5468":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:10704:12749":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:9954:3796":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:6897:3066":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:6672:2513":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7477:4459":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10403:4701":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7453:4438":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11482:3216":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:3392:4624":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:11298:2837":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:50299:7424":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7697:3199":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:6688:4048":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3970:5017":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9761:3388":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5717:4342":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:10222:2797":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:15905:58558":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:3894:4073":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:2553:4085":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13865:6019":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:2066:2600":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:6731:7192":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:48580:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:858:1871":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"16:7420:4458":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:2267:3602":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4193:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:14130:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:603:45348":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:15175:3281":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:8144:7797":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:7620:4017":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47490:2579":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:15921:55709":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:48756:3612":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10353:4763":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12783:5658":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"20:2846:2104":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:5085:3763":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:624:6490":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:15949:2388":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:53353:7487":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9404:5319":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:830:4801":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22955:3572":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5407:4324":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10281:2333":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"0:368:1066":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"12:1256:3180":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:6418:2730":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10635:5330":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:46535:2725":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2733:4360":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"13:232:6335":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9655:58340":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:1442:2580":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"9:996:4186":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:3951:2603":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:7174:4504":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11045:47504":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:5889:5029":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:5130:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:7366:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:2793:3080":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"21:911:1810":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:46576:2727":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9799:7765":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:4614:6083":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10605:57786":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:7823:4449":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:15938:2380":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:1584:6532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:5023:3758":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:1703:4266":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:45867:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11968:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:46288:3969":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12982:5718":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4203:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:1002:1871":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"1:8959:3442":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:15156:3274":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5975:4478":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:24068:3716":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:5823:3023":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2912:4609":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9162:4749":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5561:4335":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4272:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"14:47:7828":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:4074:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:3718:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:5192:2928":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3265:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7786:4448":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:24131:39704":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:607:47495":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:1528:3175":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:48217:2334":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:2720:2217":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"16:4890:6092":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:8867:2713":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:4995:6095":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13520:5911":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:4905:3756":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:3141:2303":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"1:3194:3350":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8061:3338":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:1690:6609":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"12:162:4254":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11166:3041":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:11118:47505":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11714:5452":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"12:2052:2601":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:3951:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:49575:3820":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46011:2925":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9622:5062":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10829:3029":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"9:809:3226":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1486:2603":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:5330:5316":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1091:5017":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:8393:2606":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:10289:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:12116:3298":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:8343:2715":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:23638:60183":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:52317:3653":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:47703:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:14183:3129":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:46365:3966":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11193:3043":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:13729:3209":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:24495:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:1653:3169":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:50289:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12040:5518":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4262:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:22566:60215":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:14761:3205":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:49316:2834":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9210:47503":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:886:4805":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:13822:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:3978:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:53501:7497":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:9332:4682":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:3253:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3368:2552":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"8:0:2352":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:9208:58426":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:525:6432":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:50173:3267":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:2253:3600":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:48991:2818":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11962:5505":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:51179:3671":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:547:4344":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7738:4513":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1527:6501":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6124:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:3076:2945":{"crate_id":20,"path":["proc_macro","LineColumn"],"kind":"struct"},"9:749:4122":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:1646:3179":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:8863:2582":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:2330:4081":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:4304:6075":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5580:4336":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5241:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:53384:7490":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1194:11774":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:3264:4617":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:5014:2926":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:7642:4018":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11696:5451":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6870:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12095:5529":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9034:47499":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5029:6096":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10975:47746":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13282:5849":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10279:4674":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:850:4802":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:47611:2292":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:944:2215":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:5775:3020":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:3087:2108":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:3195:4614":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2175:2601":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5436:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:11419:2840":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5210:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9896:61756":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:49993:3542":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4506:3128":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:48787:7704":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13609:5933":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"7:38:45169":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10681:11771":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6136:4476":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12917:5667":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"20:200:5202":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:11847:5488":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"9:1020:4187":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6691:4497":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1717:6622":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:22896:3148":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:52191:3661":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:51342:7429":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:4535:6082":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:50975:7425":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:13746:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:994:4040":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:4762:6088":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:10520:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13963:6044":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11604:5431":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:0:2360":{"crate_id":17,"path":["object"],"kind":"module"},"18:695:4813":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5269:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:9933:7767":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:49706:3828":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:3759:2292":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11100:4752":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:3287:4618":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:32261:2957":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:49825:3533":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:5761:3018":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:49245:2817":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3800:6072":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:14264:3318":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11411:3062":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4470:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:14094:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:51284:3651":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:11196:3047":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:13037:3527":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:51390:3680":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:6591:3075":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:46311:3829":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:22892:2108":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13465:5895":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6636:4454":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:1008:2104":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:48564:2916":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4095:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7894:4473":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7683:3198":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"12:2404:61724":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:11888:2831":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:52108:3676":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:15355:3401":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:4671:6085":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:53364:7488":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:50151:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9186:4690":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4712:3564":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6152:4437":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:15954:2393":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:10283:2336":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10304:4677":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:47829:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:7111:5031":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:51870:7439":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11533:3226":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2159:2292":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:10615:3316":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:251:61845":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:48443:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:3918:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:3395:2557":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:22839:3576":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:22543:60217":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:4734:6087":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6935:7315":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3352:2503":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10266:4759":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:1191:5010":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:45821:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:9264:5315":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:10291:2798":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12129:3299":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10516:4704":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:5986:3465":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3565:2567":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11378:3406":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:599:6477":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10801:47671":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:12090:2580":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:50135:3840":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:569:6460":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"0:47:2192":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"2:3166:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11337:4686":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4726:55877":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"12:815:3171":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:605:6480":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4341:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6391:4489":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:6353:3412":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"12:1103:3177":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:432:2247":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6464:4450":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:13857:33892":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7406:4441":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6744:4646":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:5790:4348":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1623:3177":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:379:4257":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:24109:39712":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10620:3336":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:53399:7491":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:632:6495":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:49856:3537":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:13866:3200":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4073:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13098:5809":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7884:4445":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6014:4480":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:8380:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:3096:2104":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:49661:3113":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:10455:5067":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10697:3181":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12659:5641":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:48777:3226":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"0:369:1869":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"2:50003:3543":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5469:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13119:5814":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:183:4258":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:161:40338":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8515:3295":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:0:1478":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10200:7772":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12699:5646":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:2040:2895":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:6002:3468":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5815:4349":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:15274:3051":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6176:4483":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:14972:3204":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3044:60382":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6366:4271":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3356:2553":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10892:2952":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:10117:4781":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8422:3226":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"20:2972:4826":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:13564:5922":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:14993:3264":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46747:2741":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:52270:3649":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4040:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2968:4610":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"12:2398:6336":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9245:4681":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8414:3338":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:13530:7805":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:6719:3020":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:50996:7426":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:15125:3272":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11318:3396":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:1522:3174":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"9:157:4137":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:8444:4072":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"12:1162:4250":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:5421:4325":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8673:3419":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:14876:5073":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11573:3228":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:670:40667":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:51021:3678":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:661:4811":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10611:47694":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13772:5994":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:6954:3986":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9368:5318":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3642:3120":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"14:56:2199":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1457:3179":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:49529:2839":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:15952:2391":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:8146:61578":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4431:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"14:250:6290":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:47745:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:12702:5071":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:2484:47592":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:12220:3263":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6887:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7571:4434":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"20:3091:2944":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:5400:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5753:4346":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10850:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:11263:2844":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11588:5430":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22545:60220":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:9794:5064":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"18:740:61775":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13788:5998":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:9361:2902":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10489:4703":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4426:3129":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6964:3891":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:787:3170":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:3375:4035":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:50123:3839":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:13882:55782":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13062:5779":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8772:3431":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:3419:2562":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4033:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:11186:2843":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:10285:2334":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"12:1784:5015":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:0:2359":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3759:2524":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10656:5332":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:13602:3195":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5191:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12247:5552":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10950:7784":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:1658:6586":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5228:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46665:2734":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"6:6910:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11367:3464":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2192:2602":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:750:2292":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:1238:4253":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:15418:57787":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8724:3422":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7514:4457":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:6257:4017":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:23051:17005":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:3506:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1635:3167":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11628:5435":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:15959:2398":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:3945:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:472:7792":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2200:5019":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"21:1027:1907":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:12195:5545":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46696:2737":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4331:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1235:4080":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:10427:59609":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:5159:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:15958:2397":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:14189:3127":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:5386:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:15940:2382":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:5095:2925":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9943:61769":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:32296:3191":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:49425:2837":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:50115:3834":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4449:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1736:6628":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:12074:2292":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"12:1203:4252":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46431:3887":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10673:47695":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10407:4757":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:934:1871":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:15012:7578":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:745:61772":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:49377:2903":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7264:4453":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11653:5440":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4066:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3271:2520":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3370:2601":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6051:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5456:4327":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3500:2565":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47787:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1554:6512":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:28016:3525":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11556:3227":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6413:4270":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:399:4256":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:7320:58427":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1700:6615":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5819:3022":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:1663:3170":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:0:1037":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"2:22902:3150":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13296:5850":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:15943:2384":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"20:808:3009":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"21:997:1810":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:13532:5914":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11386:3395":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:3972:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:478:53990":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:51198:7427":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:6895:3065":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1760:6637":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46963:2711":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:775:5228":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:15169:3280":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"21:880:2216":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:9719:7763":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22564:60219":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12262:5555":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13842:6018":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11254:4748":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:2399:7800":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5407:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:3957:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6252:4486":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:48528:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:4230:6074":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:6993:3031":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:23101:3572":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13258:5843":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13598:5929":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:3362:2600":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6357:4488":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7966:55777":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"18:0:2361":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11626:2292":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5595:4337":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10868:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11932:5496":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12494:5609":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:49511:2841":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4922:6093":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10623:7779":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12028:5516":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:11392:3414":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"14:231:2894":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:48081:3897":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13554:5919":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:10725:4088":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:50307:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:8384:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10972:3123":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13582:5926":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:344:61778":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:48494:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:3772:6071":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13760:5991":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:49365:3695":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:12011:3205":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10938:47767":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:1655:3180":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5408:3394":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5314:5315":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:49690:3826":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:49699:3827":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:5405:3393":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:52077:3673":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:818:2955":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:1602:6542":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:4633:3097":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"12:466:7791":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:50127:3838":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:3156:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:57644:7506":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:10819:3157":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:49810:3530":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:8087:2700":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3320:4671":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4641:6084":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9961:7768":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:1156:11772":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1908:41638":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6491:4491":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13377:5872":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:3241:4616":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4395:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:1450:3167":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4281:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:24014:7681":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5459:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10836:3030":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:10394:5209":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:45969:2570":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:6971:3067":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4052:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:10232:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6858:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:24563:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:3701:2569":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12260:3265":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:542:4370":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:49457:3815":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:1622:6556":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7392:4443":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1505:3172":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12467:5605":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12010:5515":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:47541:3893":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13429:5881":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:23427:3573":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10887:5366":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6126:4481":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:46566:2726":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5953:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5532:3401":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10788:7780":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6923:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6893:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4112:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:5149:2927":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4241:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:5564:11776":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:47473:2123":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11153:2829":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:53247:3657":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:802:4798":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:9959:3797":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:49557:3819":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46273:3742":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:51641:3655":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:4394:3380":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6068:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11298:7715":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:4823:6090":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:53074:3654":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1572:6523":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11915:5490":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:24733:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3259:2522":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10095:4779":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:7838:3685":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:3632:2495":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11640:5438":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4183:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4767:3491":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9799:5065":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:12552:5619":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:15961:2400":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:49681:3825":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:49407:2829":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:49326:2835":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:1023:2215":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"2:4035:3084":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:15141:3273":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"21:1069:2199":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"1:1432:2579":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:1596:6540":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:4865:2278":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"2:51230:3659":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:15689:5076":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1637:3178":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12645:5640":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4046:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2941:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:10926:7783":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:10824:3349":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12041:7574":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:46656:2720":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10827:4738":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11970:5507":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:2797:2216":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:11962:3201":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13192:5826":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"12:979:3176":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9097:3255":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:53448:7494":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4347:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:48461:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:7908:2698":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:24055:3715":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7961:3337":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"6:4293:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1195:7796":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:578:6466":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46418:3886":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7279:4657":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"9:686:4118":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:51303:7428":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12507:5610":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22713:3575":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:10905:2108":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:15444:4282":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:5169:2626":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:24147:39713":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:38816:2624":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"20:1509:191":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"15:230:4273":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:8582:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11147:7626":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:50396:2532":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:3604:5245":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4358:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:4506:6081":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6644:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:47550:39914":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10844:4702":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1497:3170":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5996:4479":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:15944:2385":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:2751:3079":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:49968:3540":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5522:4333":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12795:5665":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:3002:1810":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:46934:2705":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:8176:3991":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4477:6080":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:755:61773":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3561:2566":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:57623:7505":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:12205:3434":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:563:6457":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:9239:2527":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:49271:2815":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6852:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:3338:4357":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:764:2579":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5960:4355":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7024:4655":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11809:5480":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46526:2716":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:10914:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46372:3967":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11947:5500":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11981:5510":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:681:5209":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10529:7625":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:920:7613":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:50131:3842":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1215:4079":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:5585:3692":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9551:4747":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9769:61757":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:13927:59219":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:15960:2399":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:49383:3811":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:1284:3009":{"crate_id":20,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"17:11678:5442":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:867:4804":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:3522:5241":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"12:2032:2292":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6812:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:49629:3823":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9889:5066":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:2794:4361":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:7649:3196":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:47661:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9662:5063":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:2187:2600":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4459:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:51618:3652":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:5140:3764":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"21:0:2006":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"1:9495:7838":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:49224:2826":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3341:4034":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10502:7624":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12598:5626":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:53344:7486":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3509:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:8106:2534":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13986:6048":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:53540:7498":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12946:5687":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13370:5870":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7042:4656":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:46604:7699":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"20:1358:1871":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:3088:3578":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11026:7788":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:3429:4362":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:4215:2895":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2951:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:49214:2828":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:713:3489":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11519:5418":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:49715:3060":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11190:3042":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"21:448:2490":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:12408:5599":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11616:3229":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:23975:7321":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:46229:3060":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10638:3318":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3150:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46943:2707":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13574:5925":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4362:2580":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12610:5628":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:14583:58605":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:15433:4282":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8227:5048":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:14498:3069":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:10666:11768":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6554:4493":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12287:5557":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:5994:3466":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:5020:3039":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:897:3311":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:2543:4696":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6569:4641":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:24177:7685":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:1222:1810":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"5:7379:2580":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:56309:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1723:6625":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:14204:2533":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:56270:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46925:2703":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10160:5327":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:49196:2825":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:8860:2581":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47627:2580":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46586:2728":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3345:3365":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:8347:2714":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11726:5455":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:4599:5020":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:3342:2548":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5221:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10253:4760":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22498:3489":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6591:4495":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10420:4756":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:786:5066":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:4377:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11458:5403":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1045:3078":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:47567:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:14033:3493":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11378:4684":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3730:3122":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8508:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:0:2351":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10594:3308":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13924:6035":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:6824:3063":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8522:3296":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9133:47502":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:6475:2895":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13912:6033":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:9748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9600:61765":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10028:47551":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4005:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4026:3248":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:12082:3294":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:24199:3879":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9746:3387":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"15:0:2358":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:874:2199":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:12275:5556":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4448:6079":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:51125:3679":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:12096:3297":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7295:4455":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:1021:3338":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6176:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:6493:3152":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:4465:3131":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:4678:3106":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:8463:4013":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:50366:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:49393:3111":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:3997:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:651:4807":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3258:2209":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:45913:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:3488:2603":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:8330:4068":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7856:4516":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:48987:3983":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:46737:2740":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:15957:2396":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7342:4470":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:8160:2580":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10041:7769":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6214:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:24801:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:3882:2952":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:3040:7317":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5379:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13746:5985":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11231:4750":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:6:671":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"5:8298:4067":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10317:4680":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:6491:2719":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11822:5484":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:51689:3640":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:32310:59209":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:4008:7782":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:3990:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:1311:4786":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:4717:2797":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2181:2599":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:51323:3636":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48765:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13331:5860":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13306:5851":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:1011:2292":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4601:2707":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4325:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:51156:3667":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7226:4509":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5632:4338":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:3007:2490":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"2:24083:7327":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:3064:4669":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:52884:3650":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8323:3338":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:13637:5941":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4790:6089":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5185:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9476:5321":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:51714:3641":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10377:4761":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"10:0:2354":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12685:5643":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:5312:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:24699:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6100:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46636:2742":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:49284:2816":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12771:5655":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7195:4506":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:51491:3675":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:791:4797":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3713:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10884:3121":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:3868:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:14186:3131":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:1666:4264":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:4350:6076":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10001:47550":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"12:2269:3178":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6424:4490":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3488:4620":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7333:4456":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10967:3246":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4955:6094":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"12:895:4249":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"20:553:5009":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"12:2419:2591":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:6733:7194":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:3743:4734":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4300:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:1441:3177":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:823:5066":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"13:0:2350":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46496:5038":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:47636:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:11405:2842":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:7849:5036":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13240:5835":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:374:4033":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10988:7786":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7549:4446":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"9:27:4169":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:3839:5017":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3714:6070":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:53373:7489":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10687:3162":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5969:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:22526:60179":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:14000:6051":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5414:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:13781:60266":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13163:5819":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:3011:3000":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:45846:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5766:4347":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3373:2556":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11616:5434":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7870:4444":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:3415:2561":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:6873:2743":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11464:15148":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:7289:58427":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:591:6472":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"12:0:2356":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:8344:4069":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:49350:2904":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9007:3190":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5295:45919":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4949:2519":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46557:2718":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:4050:3083":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:32302:3907":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:11835:5485":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2598:7836":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:5359:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:46336:3060":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11482:2199":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11186:7627":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:3424:2563":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:6768:4648":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:777:2580":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10730:2725":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:3503:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6577:4494":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7151:15147":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:24529:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:1708:6616":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"9:927:45273":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46627:2732":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"11:0:2355":{"crate_id":11,"path":["adler"],"kind":"module"},"1:4388:3378":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4869:3755":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:51766:7436":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:37596:3489":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"9:469:45279":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:7453:5017":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:3336:2545":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"14:244:7668":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:2777:4084":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6518:4492":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:50186:3904":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:22766:3568":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:8379:2891":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:47440:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10571:47693":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6731:4645":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:47559:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5769:3019":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:1534:3176":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:903:3312":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2178:7320":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:3365:4358":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:4736:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:50143:3835":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:1522:6499":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7158:4503":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7766:3202":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:2754:4359":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10224:7773":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13348:5865":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13453:5889":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12725:5648":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4428:3130":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:49724:3829":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:51468:3672":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9296:5317":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10448:4700":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6091:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47507:3891":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:46706:2738":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:51951:3681":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46298:3970":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3742:3488":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:49205:2824":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8009:5048":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:5018:3757":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7378:4442":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8902:47496":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46647:2733":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:5788:5017":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1136:3086":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:49306:2836":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:51587:3648":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:14892:5074":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:621:7619":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:10293:2799":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10962:7785":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"9:776:4167":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:584:6469":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"20:523:61777":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"16:3041:4612":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:730:61774":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10211:47563":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:4515:4059":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"5:8362:7318":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:2163:2580":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:14043:3850":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:49234:2827":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6238:4440":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13221:5834":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13488:5900":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:4704:6086":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:53410:7492":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12632:5639":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:3862:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1694:4077":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:1419:2292":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1153:11770":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5384:4323":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:24461:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:645:4810":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48476:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:3091:4670":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"12:114:7790":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6729:7190":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13978:6045":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5433:4326":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:11336:2838":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:49145:3810":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:12021:5044":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:46379:3968":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:7826:3206":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5855:4350":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:880:2603":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:3652:5046":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"12:1682:4265":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1617:6554":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10962:3245":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:45976:3085":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13540:5917":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:8138:4042":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9440:5320":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46235:7691":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:11143:2829":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46952:2709":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:511:6424":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7146:4502":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:3966:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:46257:3740":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9886:7766":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"20:3111:2215":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"21:843:2945":{"crate_id":21,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"9:1056:4180":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:4467:3132":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9809:61768":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:24184:3922":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1463:3168":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8873:58426":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:45729:2576":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11220:3048":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:12155:5540":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4425:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5167:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:12775:3821":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:13048:3529":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:49475:3816":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:4735:3090":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:15955:2394":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6110:4475":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4523:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8837:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:46:6340":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5987:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11750:5457":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10558:7775":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:48467:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:14573:3107":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:531:6435":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13205:5831":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:24665:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:69:4012":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1492:3169":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:1501:3171":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:51044:3666":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4227:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3281:2623":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:9689:61770":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"12:2059:2599":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4164:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7303:4512":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10081:4674":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12700:3349":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:6221:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:824:1810":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:12142:5537":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11080:2700":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:53478:7496":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11147:3111":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:5360:4322":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:53325:3642":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"20:3015:2580":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:2905:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:14:2466":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:828:2490":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:10071:4785":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:52383:3638":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:616:6485":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:1476:2895":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:2253:3177":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11555:5423":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7804:4447":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:194:45842":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5505:4332":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:53425:7493":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2910:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:24835:3865":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:22802:3686":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:46675:2735":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:51069:3658":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6807:4499":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12161:3301":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:3145:4622":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3039:60383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13402:5877":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46684:2736":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:15032:3263":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"14:216:45848":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12385:5590":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:10480:5069":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:47498:2580":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4511:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:50343:3848":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10543:5369":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11499:5408":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11358:4685":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:48210:2333":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6028:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:3364:2550":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4391:3379":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:49787:3526":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12051:5519":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11015:7787":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6614:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:3506:4619":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10599:7778":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12118:5535":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:6471:3063":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:705:5228":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6166:4482":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6620:4639":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5927:4353":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:5837:2810":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:5736:4343":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46413:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6864:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6106:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5978:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:6614:59585":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:37572:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:24597:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1486:3180":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:15945:2386":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:46716:2722":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6116:3403":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10052:47552":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9005:47498":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:432:4255":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:24:4839":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:4439:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:3136:2217":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"17:13810:6003":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11082:4691":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"9:722:4121":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:13356:5868":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:23090:2108":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12182:5544":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:8203:2580":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:8929:47497":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22511:60179":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:1103:2580":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:11391:2839":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:45805:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:14518:7719":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:11921:2832":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11572:5425":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:13731:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:15963:2402":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:8121:4041":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12521:5613":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:88:40271":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7205:4507":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:623:2490":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"16:6780:4498":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11304:47506":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13799:6002":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12307:5563":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:23044:2108":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"12:2280:3179":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:14536:7724":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3676:3115":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:2218:4037":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:12759:3818":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:158:2954":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"5:1607:2579":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:3881:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:2991:4621":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4294:3135":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:4317:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:699:3307":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10287:2335":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:3772:2579":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:543:6440":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:5809:3021":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4401:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:7475:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"14:11:7828":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13386:5873":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4145:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:49611:3822":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:8130:2895":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13497:5903":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6200:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12480:5607":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:3038:2506":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:821:4800":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:23732:2108":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:8391:2892":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:923:4039":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11643:3232":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8166:3338":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:47482:2292":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:49671:3824":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45936:2568":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11226:3165":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"16:6087:4435":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4419:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:2166:2895":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6032:4366":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11223:3049":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:7212:2895":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:3724:2571":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12431:5600":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:24212:3878":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11415:7179":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12200:3260":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11096:3107":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7250:4511":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4643:5022":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46448:3888":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:2746:2199":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"17:12582:5622":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1665:6590":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4306:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:14744:7835":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:14959:3203":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2170:2603":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"20:2949:3008":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:1630:6561":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9667:58338":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:14898:5075":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:897:4806":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7663:3197":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13884:6024":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:48748:7703":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"12:928:3169":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4742:3110":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:10221:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:11160:3113":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:4242:5017":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11275:55705":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:5536:2513":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:46727:2739":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11130:2725":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:6015:3469":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:3162:2216":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"2:13043:3528":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:2866:4608":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11159:5379":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9065:47500":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7236:4510":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:299:61755":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"}},"external_crates":{"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.42/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}