{"root":"0:0:1199","crate_version":"1.0.33","includes_private":false,"index":{"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenTree","id":"21:885:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:402:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12558:24652":{"id":"2:12558:24652","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1824":{"id":"0:123:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12583:31519":{"id":"2:12583:31519","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:1824":{"id":"0:392:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[60,0],"end":[71,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:678:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:687:115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:62:2064","0:63:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:396:1824":{"id":"0:396:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:721":{"id":"0:368:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:109:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12567:31512":{"id":"2:12567:31512","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12189:13049","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::matches":"2:12564:2673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43839:7120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:32185":{"id":"5:5535:32185","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2323":{"id":"0:23:2323","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:885:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:24413":{"id":"5:5538:24413","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12610:24411"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:721":{"id":"0:372:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:721":{"id":"0:376:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:104:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i16"},"items":["0:382:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12564:2673":{"id":"2:12564:2673","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12189:13049","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatches":"2:12567:31512"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43821:7119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:11:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:23:2323","0:25:2333","0:27:2337","0:30:2341"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:366:721":{"id":"0:366:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[35,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"items":["0:55:2064","0:56:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:1824":{"id":"0:102:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:31506":{"id":"2:12497:31506","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:2928":{"id":"2:12529:2928","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1824":{"id":"0:99:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:24646":{"id":"2:12543:24646","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12189:13049","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split":"2:12537:24642"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43635:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2064":{"id":"0:58:2064","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:879:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f64"},"items":["0:406:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:721":{"id":"0:374:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Box","id":"5:276:2458","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38:2403":{"id":"0:38:2403","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::UpperHex":"2:9627:2552","`format!`":"5:6:732","std::fmt::LowerHex":"2:9625:2551","proc_macro2::Span":"21:879:2065","proc_macro2::Span::call_site":"21:558:2477","crate::IdentFragment":"0:46:1828","proc_macro2::Ident":"21:946:2411","std::fmt::Octal":"2:9621:2550","std::fmt::Binary":"2:9623:2553","`std::fmt`":"5:4761:721"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"}},"0:14:2333":{"id":"0:14:2333","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7533:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7533:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:0:1199":{"id":"0:0:1199","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1444,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```\n\n<br>\n\n# Non-macro code generators\n\nWhen using `quote` in a build.rs or main.rs and writing the output out to a\nfile, consider having the code generator pass the tokens through\n[prettyplease] before writing. This way if an error occurs in the generated\ncode it is convenient for a human to read and debug.\n\n[prettyplease]: https://github.com/dtolnay/prettyplease","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.33\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:313-0:11:1827","0:314-0:46:1828","0:315-0:78:1829","0:38:2403","0:344:1199","0:345:2063"],"is_stripped":false}}},"2:12499:344":{"id":"2:12499:344","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Literal","id":"21:951:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Group","id":"21:900:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:113:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114":{"id":"0:114","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:946:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:115:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:386:1824":{"id":"0:386:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:2341":{"id":"0:30:2341","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7533:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7533:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:1824":{"id":"0:382:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2337":{"id":"0:27:2337","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7533:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7533:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:7135":{"id":"2:12513:7135","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43593:7107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:24655":{"id":"2:12523:24655","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:31510":{"id":"2:12546:31510","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12189:13049","str::split":"2:12537:24642","prim@char":"1:12009:453","`DoubleEndedIterator`":"2:7571:126","str::rsplit_terminator":"2:12549:31511"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43667:7112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:31524":{"id":"2:12602:31524","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2333":{"id":"0:25:2333","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7533:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7533:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:2341":{"id":"0:19:2341","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["term",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7533:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7533:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[25,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:51:2064","0:52:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:721":{"id":"0:63:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:1824":{"id":"0:390:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:25802":{"id":"2:12608:25802","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39604:24564","Self::is_ascii":"2:12607:24414"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39604:24564","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:345":{"id":"2:12498:345","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12499:344","`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12611:24410":{"id":"2:12611:24410","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487":{"id":"2:12487","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12488:875","2:12489:2892","2:12490:31503","2:12491:31504","2:12493:31505","2:12496:24388","2:12497:31506","2:12498:345","2:12499:344","2:12500:24608","2:12502:24609","2:12504:24610","2:12506:24611","2:12508:31507","2:12509:31508","2:12510:24634","2:12511:24635","2:12512:7126","2:12513:7135","2:12514:7030","2:12515:29713","2:12516:29740","2:12517:7285","2:12518:31509","2:12519:29729","2:12520:24654","2:12523:24655","2:12526:24656","2:12529:2928","2:12533:2891","2:12537:24642","2:12540:24644","2:12543:24646","2:12546:31510","2:12549:31511","2:12552:24648","2:12555:24650","2:12558:24652","2:12561:24653","2:12564:2673","2:12567:31512","2:12570:31513","2:12573:31514","2:12576:31515","2:12578:31516","2:12580:31517","2:12582:31518","2:12583:31519","2:12584:31520","2:12587:31521","2:12590:2422","2:12593:24657","2:12596:31522","2:12599:31523","2:12602:31524","2:12605:2152","2:12607:24414","2:12608:25802","2:12609:24415","2:12610:24411","2:12611:24410","2:12612:31525","2:12614:7616","2:12615:31526"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:2963":{"id":"5:5537:2963","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:2892":{"id":"2:12489:2892","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1824":{"id":"0:117:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:1824":{"id":"0:404:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:1824":{"id":"0:111:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:2323":{"id":"0:12:2323","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["token",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TokenTree","id":"21:885:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:51:2064":{"id":"0:51:2064","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[26,4],"end":[28,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:879:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"f32"},"items":["0:404:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536:32186":{"id":"5:5536:32186","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2458","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2458","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:1824":{"id":"0:85:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:29729":{"id":"2:12519:29729","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43909:7125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:24414":{"id":"2:12607:24414","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"char"},"items":["0:366:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:360:721":{"id":"0:360:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:370:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124:2456":{"id":"0:124:2456","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2455":{"id":"0:80:2455","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314-0:46:1828":{"id":"0:314-0:46:1828","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,0],"end":[121,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:46:1828","glob":false}}},"0:380:1824":{"id":"0:380:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12491:31504":{"id":"2:12491:31504","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:29740":{"id":"2:12516:29740","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12515:29713"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43900:7124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:1824":{"id":"0:394:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:31509":{"id":"2:12518:31509","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43881:7122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:31513":{"id":"2:12570:31513","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12189:13049","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatch_indices":"2:12573:31514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43767:7116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:7616":{"id":"2:12614:7616","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:7616"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43925:7062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402:1824":{"id":"0:402:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:24634":{"id":"2:12510:24634","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12511:24635"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:1824":{"id":"0:406:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[45,0],"end":[58,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Ident","id":"21:946:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2064","0:59:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:2456":{"id":"0:81:2456","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:29713":{"id":"2:12515:29713","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12516:29740"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43891:7123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"str"},"items":["0:362:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:721":{"id":"0:47:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[15,4],"end":[15,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:376:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::rc::Rc","id":"5:4849:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:99:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:388:1824":{"id":"0:388:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:678:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"alloc::borrow::Cow","id":"5:687:115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:93:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:1824":{"id":"0:109:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:721":{"id":"0:370:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315-0:78:1829":{"id":"0:315-0:78:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,0],"end":[122,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:78:1829","glob":false}}},"0:344:1199":{"id":"0:344:1199","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[483,0],"end":[487,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro2::TokenStream`":"21:874:260","`proc_macro::TokenStream`":"20:2631:260","`format_ident!`":"0:38:2403"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"}},"2:12490:31503":{"id":"2:12490:31503","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504:24610":{"id":"2:12504:24610","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1824":{"id":"0:79:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:119:1824":{"id":"0:119:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:1824":{"id":"0:384:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:7030":{"id":"2:12514:7030","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43603:3903","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:2063":{"id":"0:345:2063","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[622,0],"end":[626,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"}},"2:12552:24648":{"id":"2:12552:24648","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049","str::rsplitn":"2:12555:24650"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43721:3096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:31516":{"id":"2:12578:31516","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:24653":{"id":"2:12561:24653","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:31518":{"id":"2:12582:31518","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313-0:11:1827":{"id":"0:313-0:11:1827","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[120,0],"end":[120,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:11:1827","glob":false}}},"2:12605:2152":{"id":"2:12605:2152","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12150:132","`FromStr`":"2:12149:2708"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12149:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12149:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:24411":{"id":"2:12610:24411","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:721":{"id":"0:52:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:32184":{"id":"5:5527:32184","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:721":{"id":"0:364:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"items":["0:89:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12512:7126":{"id":"2:12512:7126","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43587:7106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:123:1824","0:124:2456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:2320":{"id":"0:35:2320","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:360:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12520:24654":{"id":"2:12520:24654","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:1824":{"id":"0:398:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i32"},"items":["0:384:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:2064":{"id":"0:62:2064","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[64,4],"end":[66,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:879:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:24657":{"id":"2:12593:24657","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:364:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12596:31522":{"id":"2:12596:31522","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1824":{"id":"0:96:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:32182","5:5521:13264","5:5524:32183","5:5527:32184","5:5535:32185","5:5536:32186","5:5537:2963","5:5538:24413","5:5539:24412"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12580:31517":{"id":"2:12580:31517","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:85:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:400:1824":{"id":"0:400:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"bool"},"items":["0:111:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12573:31514":{"id":"2:12573:31514","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12189:13049","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::match_indices":"2:12570:31513"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43785:7117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1829":{"id":"0:78:1829","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:79:1824","0:80:2455","0:81:2456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:403","0:97","0:118","0:105","0:110","0:391","0:379","0:387","0:100","0:383","0:82","0:393","0:120","0:112","0:385","0:90","0:395","0:397","0:114","0:86","0:116","0:399","0:389","0:103","0:405","0:381","0:94","0:122","0:401","0:108"]}}},"2:12599:31523":{"id":"2:12599:31523","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:721":{"id":"0:378:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12612:31525":{"id":"2:12612:31525","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:31525"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43916:7068","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:372:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"usize"},"items":["0:378:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:398:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:1824":{"id":"0:121:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u128"},"items":["0:400:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12590:2422":{"id":"2:12590:2422","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1828":{"id":"0:46:1828","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[13,0],"end":[23,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.\n\n[`format_ident!`]: crate::format_ident","links":{"crate::format_ident":"0:38:2403","`Ident`":"21:946:2411"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:47:721","0:48:2064"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:373","0:361","0:367","0:49","0:369","0:57","0:365","0:359","0:375","0:53","0:60","0:363","0:377","0:371"]}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i128"},"items":["0:388:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:2064":{"id":"0:55:2064","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:879:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:31505":{"id":"2:12493:31505","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12491:31504"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12615:31526":{"id":"2:12615:31526","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:31526"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43934:7067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:32182":{"id":"5:5520:32182","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2458","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2458","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1824":{"id":"0:113:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:1824":{"id":"0:89:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:24642":{"id":"2:12537:24642","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12189:13049","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split_whitespace":"2:12515:29713","str::rsplit":"2:12543:24646"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43617:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:721":{"id":"0:362:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[87,0],"end":[87,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12540:24644":{"id":"2:12540:24644","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12005:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:31521":{"id":"2:12587:31521","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:102:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12511:24635":{"id":"2:12511:24635","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12510:24634"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:31508":{"id":"2:12509:31508","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12015:1510","crate::ops::IndexMut":"2:3077:2775","str::slice_unchecked":"2:12508:31507"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:7285":{"id":"2:12517:7285","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43871:7121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12488:875":{"id":"2:12488:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12009:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:24611":{"id":"2:12506:24611","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"isize"},"items":["0:390:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i64"},"items":["0:386:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:368:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115:1824":{"id":"0:115:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:721":{"id":"0:56:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[40,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:24656":{"id":"2:12526:24656","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u8"},"items":["0:392:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12549:31511":{"id":"2:12549:31511","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12189:13049","str::split":"2:12537:24642","prim@char":"1:12009:453","str::split_terminator":"2:12546:31510"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43685:7113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11:1827":{"id":"0:11:1827","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:12:2323","0:14:2333","0:16:2337","0:19:2341"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:35:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22"]}}},"2:12609:24415":{"id":"2:12609:24415","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:2337":{"id":"0:16:2337","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}],["op",{"generic":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7533:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"2:7533:163","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12496:24388":{"id":"2:12496:24388","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11749:13050"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1824":{"id":"0:106:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"proc_macro2::Punct","id":"21:924:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12502:24609":{"id":"2:12502:24609","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:32183":{"id":"5:5524:32183","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12584:31520":{"id":"2:12584:31520","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12214:13045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:721":{"id":"0:59:721","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[50,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9589:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9570:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1824":{"id":"0:93:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:2891":{"id":"2:12533:2891","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12555:24650":{"id":"2:12555:24650","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12009:453","str::splitn":"2:12552:24648","self::pattern":"2:12189:13049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43739:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:13047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2064":{"id":"0:48:2064","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Span","id":"21:879:2065","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[88,0],"end":[88,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:46:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u64"},"items":["0:374:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"i8"},"items":["0:380:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u16"},"items":["0:394:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"primitive":"u32"},"items":["0:396:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12500:24608":{"id":"2:12500:24608","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105":{"id":"0:105","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:78:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:106:1824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12508:31507":{"id":"2:12508:31507","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12015:1510","str::slice_mut_unchecked":"2:12509:31508","crate::ops::Index":"2:3073:2774"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:13264":{"id":"5:5521:13264","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:13046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12576:31515":{"id":"2:12576:31515","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:1824":{"id":"0:104:1824","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tokens",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"TokenStream","id":"21:874:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:24412":{"id":"5:5539:24412","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12611:24410"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43934:7067":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9455:33172":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:41868:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13802:4517":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:40381:7080":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40372:2990":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6721:20064":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12074:4091":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:8154:20076":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"8:0:2563":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12970:4278":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:47836:6616":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:21381:2320":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:817:7300":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:44023:7127":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:9242:3901":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:22302:30011":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:489:5239":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6071:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8136:6681":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:6334:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:727:152":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42949:6500":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12154:4107":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6401:4772":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46056:6540":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42414:2550":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8845:2789":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:8029:30507":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:7223:2747":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:44144:7140":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:2670:4759":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11030:3607":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:41443:7755":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:11958:27100":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:3232:7270":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:1541:19119":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:42049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:7240:7024":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:39356:224":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:42967:7103":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:2165:7010":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:40901:2970":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13676:4492":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2925:2767":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:12194:13046":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5322:4827":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:6259:2981":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11761:4028":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10420:3767":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:41579:7096":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7504:7032":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:12209:13047":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4841:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5117:5812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:30327:6271":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6587:3593":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:44590:7996":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1546:5330":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12196:4112":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10949:20224":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46453:6552":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4015:7769":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:423:7292":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:46254:6546":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:918:7298":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:39378:2777":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4446:7792":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46556:6554":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:12834:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:609:33194":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:505:3509":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:43561:6506":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:839:2427":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:10060:3560":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:622:7372":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:14401:4691":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:6666:3495":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12911:4272":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:4949:4821":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:21888:3087":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:772:7009":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3463:3047":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6159:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:766:24123":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:599:33190":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:4021:30350":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:41773:2850":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2919:2766":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13113:4300":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:14499:4716":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4455:5521":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:8181:4791":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4610:5597":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:3185:7742":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11359:7197":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:4721:7781":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10714:7267":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:3565:7272":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:44181:7141":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:3519:3512":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:47939:6620":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:2242:2508":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:10430:20216":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"20:244:33261":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:12172:4108":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2644:4758":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:43881:7122":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:824:3501":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4710:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11719:20142":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11687:20141":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12983:4280":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2830:2861":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:21573:7916":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:10811:27084":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"9:486:19033":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:4717:7778":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"13:0:2561":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:9084:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5974:5907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7660:4955":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:39268:218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:4761:721":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:7504:3753":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"20:1196:216":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:40126:7070":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:32122:30610":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:10023:7242":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:821:2426":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:14163:4607":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"22:0:2700":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:1682:5423":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:44229:7150":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:1826:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:9867:3914":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:3244:262":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11174:6718":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:7741:7373":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:14269:4650":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:614:33191":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:693:2789":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2897:2765":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2644:7736":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:2872:2756":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12945:4275":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9886:7245":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"9:393:19035":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:7232:2789":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6120:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:2368:7692":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:707:6804":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:12034:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:400:20125":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9912:20151":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:5392:7850":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:7639:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9711:33181":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2366:6243":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4603:5595":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1558:5339":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14134:4600":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:22921:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3583:2507":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:4774:4815":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:704:2705":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"18:531:6795":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:7668:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:4801:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:7618:2320":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:46680:6571":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:4591:2493":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"6:4449:5519":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9277:3902":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:39431:6344":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13202:4318":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:8978:20136":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:7624:2808":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:43821:7119":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:1840:7309":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1710:5436":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:10782:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11226:6840":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:6274:228":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6079:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10265:7254":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40303:2976":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1579:2801":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7792:20074":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11951:4065":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8821:6708":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:14013:4567":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:15:2676":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6600:20063":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6114:5983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:1817:7308":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:9940:1478":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:2884:2760":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41634:6486":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:9933:20159":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:4362:3065":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11570:6732":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:879:2065":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"2:4137:7550":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:40283:2975":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10738:3097":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12184:4111":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:590:3778":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11074:20282":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11098:7275":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:5997:13558":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:41386:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:7378:2798":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:47912:6618":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:30919:3777":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11237:3108":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:43470:2975":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12043:4087":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2171:13275":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:2964:6236":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4847:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:11024:3606":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:40062:7065":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13040:4287":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:46375:6550":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4893:5691":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:42010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:501:5244":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:734:2411":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:12437:4177":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3147:26620":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:515:3772":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5146:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7643:6639":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:12030:1612":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14469:4711":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2860:2754":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11365:7198":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10397:7263":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9137:3898":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7768:4777":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13298:4336":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:1738:13285":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:14536:4723":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:2692:6237":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:45631:6518":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:22690:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:39237:2776":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:9589:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5673:4775":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13981:4559":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6741:6094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:3274:30347":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6742:6948":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46324:6549":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:41740:2849":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:629:7364":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:654:13995":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:13071:4292":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"14:202:13063":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:534:3573":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:14282:4656":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:21190:30072":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"20:2750:2428":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"11:344:7289":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:12027:1613":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12010:1632":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"20:2601:6792":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:949:7632":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40505:2983":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2892:2761":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:21542:2320":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6583:6943":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13989:4560":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:5217:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:8115:6995":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:187:19133":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:10718:7821":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10036:3919":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:43767:7116":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4351:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11493:7757":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10750:3939":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:12990:3570":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4854:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5123:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:10760:7190":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:483:5236":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:3913:7762":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"10:0:2565":{"crate_id":10,"path":["adler"],"kind":"module"},"20:404:7549":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"16:3032:4792":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:1036:7635":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:884:7009":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:1664:5416":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3722:3745":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13778:4512":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11192:6730":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:11749:13050":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10520:6820":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:863:2789":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:951:2427":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"6:475:5231":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10929:3973":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4677:7819":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9619:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11211:159":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:41843:2507":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46086:6541":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:6862:2901":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3049:19193":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11261:6842":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11111:20261":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:9625:2551":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"20:140:3746":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:43344:7305":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:22234:6248":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:30287:2736":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11815:4035":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5982:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:47930:6619":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:8851:6709":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4719:7780":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10534:6821":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11281:3988":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9254:7309":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:897:3512":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:6517:7379":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12020:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:21364:7911":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2833:2807":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:4641:4812":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:121:33284":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"6:6169:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43575:7105":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:4352:3547":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:6798:3526":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:980:2789":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:14001:4566":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9878:7041":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11327:6846":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6086:5970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4506:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5867:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:42959:7102":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44340:7155":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12136:4099":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12888:4263":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1764:660":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:9570:234":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4535:5559":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:1561:2789":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12098:4095":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6944:33096":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:8769:13046":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7829:3842":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:5068:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:955:7633":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4798:7777":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:699:6802":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:43891:7123":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8524:2507":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6961:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:1072:33088":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:4806:4816":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43900:7124":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7990:7737":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:1752:6241":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:4407:3548":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4144:7788":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5085:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:666:2507":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:40032:29989":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11137:20260":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5939:6889":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:4889:4819":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10792:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:2382:7696":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"0:38:2403":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"1:6123:3570":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:7556:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12422:4173":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7568:4787":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"20:183:33266":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:4546:7810":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2325:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11547:4016":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:43785:7117":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:10318:24233":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"15:288:7279":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10603:6826":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10012:3928":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:703:7298":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:1761:6244":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:42928:7101":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12778:4232":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6128:5988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:10710:3096":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6100:5981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:7308:2344":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:10451:2788":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13554:4444":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:9005:27659":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:2961:2717":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5897:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:1549:3518":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:42937:155":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4955:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:5861:3512":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:3888:4801":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:22342:30001":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7262:3506":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:46108:6542":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:39410:2779":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6818:6962":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6083:19163":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5152:5824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43909:7125":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:20989:30354":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7015:4896":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:20946:3777":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2880:2762":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:7834:7311":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22822:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:43404:3089":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46422:6551":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:796:2805":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:12750:4228":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11317:6731":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:8793:6706":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:23020:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:40312:2986":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13188:4315":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:580:5292":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44348:7157":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:3830:4800":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:4680:7792":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:9564:7240":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:12214:13045":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:6270:3472":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:8713:20128":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14173:4612":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:12807:31078":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:2150:20205":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2788:4764":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9521:7239":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:22363:30008":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:41851:2788":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:40456:2996":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9488:33186":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:7610:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3041:137":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:2317:2507":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:2219:3543":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:10724:3092":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4968:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9126:7182":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13739:4503":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44352:7158":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:2744:4762":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3044:138":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3596:2788":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5955:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:718:2065":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:6248:6025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9752:7243":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2499:13122":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:22010:2320":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:7645:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:40011:7063":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1475:7009":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:2394:2805":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:1639:5397":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:40413:3003":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12810:4236":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13914:4544":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14296:4662":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6156:6919":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2783:2420":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:45945:6531":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10227:7855":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:11719:3080":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:6139:3587":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6268:33142":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13897:4541":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:736:24122":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:9276:31110":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:10742:7185":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10410:20189":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"20:0:1146":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"1:5059:29594":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13667:4488":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14378:4690":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7323:2789":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7128:6714":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6560:3482":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:1505:7299":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"20:958:3479":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:3150:26631":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:3957:7765":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9175:6722":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:45926:6530":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3764:4798":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5140:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12007:4080":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5548:7853":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:6587:2789":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11788:4029":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6318:4842":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7985:27670":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2992:2783":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:1557:2507":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14308:4665":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9172:3899":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12724:4224":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2284:19164":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6960:20065":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3264:7740":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:7846:6640":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:44611:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:1413:2507":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4602:7767":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13162:4313":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:9207:3900":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:367:33264":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:2939:2770":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13973:4558":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9372:3906":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:8794:20130":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:42703:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:1869:2801":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:11894:7109":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10301:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6893:4888":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:7574:3600":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:1092:19116":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2841:2865":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:2351:2789":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:11980:7625":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6107:5982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9416:3042":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:23500:244":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1913:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:784:3498":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:1429:154":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40424:2994":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2339:4740":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6204:20057":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:21449:7910":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10561:6823":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"21:830:2411":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:10924:5209":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:510:2705":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"1:638:7618":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:44360:7160":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7041:6972":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9531:33173":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5130:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6263:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5696:20052":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:694:6783":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:7713:7168":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9445:7238":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:588:5297":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12554:4198":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6189:6922":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11155:6511":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13792:4516":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:2238:6980":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:11589:7200":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13949:4550":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12543:4197":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11013:3605":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:2143:7013":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:8848:20132":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:39190:2784":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:21791:7913":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"20:2636:2705":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"16:6261:20060":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"14:165:19126":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1882:2804":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10588:6825":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13101:4298":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:21441:2320":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:41932:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13966:4557":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6332:4770":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:25902:275":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:42421:2551":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7718:7169":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:7515:7365":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4106:7316":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:45701:6521":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:2574:4755":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:160:7356":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7613:20071":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:6984:3542":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2223:7689":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:10519:3110":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:2864:4767":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:389:3487":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:822:7629":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4764:5630":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:6403:2960":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43423:3100":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:12005:3110":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5743:6869":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:641:7619":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:9633:3049":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14145:4604":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6569:4778":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13274:3989":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9078:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:8661:2851":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:20959:30246":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:118:6782":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"6:6889:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13422:4338":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:755:6811":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5104:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7544:6986":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:48064:6629":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:3223:7743":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11147:27089":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4595:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:2578:3139":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"5:2172:7015":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7371:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8364:7830":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:22012:7909":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9003:20137":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:9614:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40276:7705":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:7067:6978":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41723:2788":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11617:4018":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:9994:3557":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:5419:3896":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2541:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:3441:7271":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:7533:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:45825:6526":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:5680:2979":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:30072:7760":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:2450:4750":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8205:7313":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46300:6548":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40635:3000":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:43721:3096":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:21278:7920":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:7523:6985":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7619:6638":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11639:3986":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14118:4597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:10279:247":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4939:1069":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:7388:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:2776:2427":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"6:6927:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:14024:4571":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:46916:6575":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:542:5273":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12737:4226":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10962:3976":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1275:7635":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13611:4482":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:589:7615":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:9852:20149":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4870:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6346:20061":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:548:5276":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:12024:800":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:5138:2725":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13010:4282":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:7492:2974":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47970:6623":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:495:5242":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:49950:7923":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"18:80:7227":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:4168:7033":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:569:5287":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8883:7878":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:3065:3797":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11121:6706":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1734:5445":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:481:6793":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5730:7867":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:504:20126":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:96:7228":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:261:33179":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2907:4769":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7722:4779":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2409:2578":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13632:4487":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2928:234":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:4557:4809":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6467:6932":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:434:3849":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:5712:6864":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:652:3769":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6934:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:32129:3065":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:9959:7246":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:44038:7133":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:727:3793":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5044:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:40495:2999":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:47588:6612":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:9250:721":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"16:6485:4773":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40893:2968":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5982:6892":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:41706:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2544:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:9631:3048":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40166:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:21463:3648":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:48011:6626":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2969:19192":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:558:7603":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:527:5264":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3073:2774":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11596:7200":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10628:6830":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:2568:3576":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6531:6941":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14221:4649":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:43635:3098":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:2380:4747":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:1842:2507":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5363:4828":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:1585:2802":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:357:3485":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11295:6844":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1691:5429":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1697:5432":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:2178:7258":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14068:4585":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6047:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1604:5368":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13215:4319":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:32136:7060":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4676:5611":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:2329:2411":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"5:207:3494":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:3915:4802":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7869:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:1850:3512":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1596:5363":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10948:27104":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:1562:19120":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4566:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11742:4025":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:40395:2992":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:22855:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:22128:7045":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:2051:7638":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10507:6819":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:7894:26618":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12790:4233":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3488:7724":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11162:3981":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"9:450:19034":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14042:4575":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:785:3512":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:41783:3126":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2810:4765":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:7027:7304":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4989:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5885:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5760:20053":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5941:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:12203:6804":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9823:20148":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9051:20113":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5545:5997":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:2494:2798":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"13:226:5143":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"20:433:3476":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"11:1876:2802":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4019:7770":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13259:4326":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10447:7010":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12531:4195":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1120:31466":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14420:4696":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:9985:7247":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:41971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:10476:3094":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10738:7268":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:2972:32490":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10456:20194":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13685:4493":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:47950:6621":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40325:2977":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44537:227":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:39312:223":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:42285:7865":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4977:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10059:3921":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:0:2566":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:7302:3337":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12305:4144":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"20:1394:3753":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:14083:4589":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:8659:2741":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:6691:6066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12576:4205":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:48034:6627":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6764:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3332:2805":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:20987:30356":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5574:4771":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8781:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:7616:6211":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7884:20075":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:4033:30341":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:582:3777":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5088:4825":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5435:4829":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:4236:2507":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:1075:7249":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3481:7706":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4724:5615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10340:3935":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7782:6987":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:4613:4811":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:42657:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:5609:3588":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6456:6931":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14090:4590":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5829:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:324:7006":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9998:3886":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13723:4500":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11191:3986":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2526:4753":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:4774":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:53:3472":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"16:5648:20051":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:8205:20078":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6813:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4364:5460":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3647:7756":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3654:2789":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7492:6981":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7664:3604":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:9790:33182":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:4288:7790":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3943:7764":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:416:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"5:1444:2789":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:8097:6992":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5423:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:2367:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9607:7241":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5004:5757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5023:5765":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4922:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:853:2788":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8186:3903":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:1145:7363":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40152:6475":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3234:2778":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:5622:2991":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:256:33183":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:4166:3518":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13148:4312":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:1428:2788":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:4076:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3183:7741":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:7515:7385":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8265:7791":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9701:7242":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6352:6924":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13228:4320":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:42127:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:1521:5316":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:8195:6999":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1703:5433":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39252:221":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9000:27672":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:40659:3002":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11306:3989":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:676:3745":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"11:1855:2805":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13055:4291":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:30357:29992":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2384:7697":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:2771:2411":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"1:8179:3000":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6376:20062":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:3350:2964":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:43685:7113":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:2914:2764":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4666:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7090:6979":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:4901:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2161:637":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4614:6089":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:8825:20131":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:8953:20135":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:7992:2972":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:10820:27092":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:6960:7382":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:12033:1219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6915:4781":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9350:3905":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2670:7673":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:44052:7136":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"0:344:1199":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40465:2997":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7534:4785":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6136:5990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:40353:2988":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3971:7767":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:39604:24564":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6545:4847":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8915:7879":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:4527:4808":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14110:4596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:7529:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"0:345:2063":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"6:4947:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9454:7311":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6425:6929":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4616:5599":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10316:3933":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13890:4539":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12598:4206":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12645:4212":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:2931:2768":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9762:33180":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9165:27953":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:8660:2740":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:483:3572":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:2012:7255":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7597:33097":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:122:3483":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:660:7233":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7436:4948":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:6468:3512":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12032:1672":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:1067:7635":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:43839:7120":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:1104:7301":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:43667:7112":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:943:7631":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12658:4215":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3907:7763":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7360:33135":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7692:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1528:5319":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8116:2958":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:5474:3518":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:2225:33013":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2948:2772":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:5328:3495":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8938:6713":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:12007:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40645:3001":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:40859:2960":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:276:2458":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:7651:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22441:7761":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:40213:7675":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:1013:3495":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:2793:255":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9650:3928":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:4005:7768":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:5634:3526":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12465:4184":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:46946:6576":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8287:6686":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13286:4329":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4789:5641":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8837:7322":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:3261:2782":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:7980:29597":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:40084:7067":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4612:6087":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"20:2379:2427":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"11:680:2788":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:1778:2805":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:708:3137":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:11316:3992":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4462:4806":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5049:4824":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:3307:7732":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:30343:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:1020:3137":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:46710:6572":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:22723:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:14460:4707":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:9627:2552":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:22317:6253":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11991:4076":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5105:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:636:3789":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:11970:7118":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:4196:3518":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44195:13062":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:1672:1159":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1931:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"0:0:1199":{"crate_id":0,"path":["quote"],"kind":"module"},"1:5616:7167":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1924:7670":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:2968:32491":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5075:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4808:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:113:7231":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4497:4807":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11000:3978":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8192:3094":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11235:6841":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:14355:4677":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1484:7300":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6913:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2943:2771":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:7474:20070":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11971:4075":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11048:20273":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:35:3492":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22987:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:491:6794":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13567:4451":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:3034:2773":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:5017:4823":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9945:3917":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:5928:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:22250:7047":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12959:4277":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12062:4088":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4776:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9660:33169":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13826:4519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6573:7874":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:42920:7100":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12086:4092":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4461:5524":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7839:7172":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4468:7793":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:582:3753":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:40845:7088":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:2548:4754":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3023:2738":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10427:2507":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11062:7273":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13487:4389":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"10:44:5151":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14514:4717":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8807:6707":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10916:20225":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:7002:3596":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12473:4186":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:2710:2316":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:22429:7056":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:9571:3047":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:7496:2973":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5612:4776":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12014:1478":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42428:2552":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"14:221:5096":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10737:7183":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12621:4211":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:12415:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2504:4752":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4556:5570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:6101:3518":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:2015:33208":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"6:5111:5809":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:40852:2959":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43483:3106":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"20:2640:3136":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"11:1525:19118":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5358:7848":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3289:2737":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1076:7363":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:3315:4795":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:42407:2553":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:4283:7366":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:2881:4768":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11337:20284":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:6226:3588":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:4428:3520":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2855:2755":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10112:7252":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6959:3538":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11582:29623":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:6827:3537":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4585:4810":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:1044:6980":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:21397:7906":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:2596:4756":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6943:6183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6222:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2876:2715":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13575:4452":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6499:4790":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:47666:6613":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:149:3480":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:7702:6231":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22954:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4824:5660":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1525:7303":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2845:2714":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21142:7912":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:2303:2428":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:21192:13275":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:1466:3336":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14335:4674":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10292:3928":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7651:20073":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:574:5289":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2909:2482":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:7622:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5859:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:564:3776":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"20:2504:3138":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:3814:7759":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:44598:6514":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1674:5422":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6279:4839":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6804:6103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10966:6708":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10135:7384":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:897:2507":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:5285:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:3737:7638":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:43916:7068":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:40343:2987":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11473:3863":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:22888:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"11:2473:5145":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11490:4014":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:41859:2789":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:2321:4738":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22290:7051":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:6081:3004":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:44364:7161":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4027:7772":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:9629:214":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:7248:2958":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:4745:4814":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4488:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4921:4820":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:1591:5361":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:7423:7025":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:21311:7915":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:3232:4737":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40868:2962":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:868:7633":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:12021:801":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:7006:20067":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8970:26853":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:12015:1510":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:44547:235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:8072:5006":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2933:19191":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11367:3994":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:9951:7093":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:4463:3067":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10698:20236":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:43413:3090":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:119:13638":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:885:2316":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:11272:6843":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:43617:3094":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11201:6832":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:44344:7156":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:6788:7904":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:4068:13036":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:4211:2732":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12765:4231":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"12:0:2567":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:671:7237":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4523:5554":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"9:237:6500":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:9027:27083":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:41556:29988":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:40092:7062":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4830:5663":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:4053:4803":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8211:7315":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6361:6925":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:700:260":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:1184:7250":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:41792:213":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:2209:7261":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:2962:32712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"9:330:5189":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"21:0:2202":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"2:44372:6511":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:7638:7606":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:8659:20112":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2501:7735":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:44555:215":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11535:6848":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:4417:4805":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7582:4951":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7462:4949":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12280:4140":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40183:30010":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:12260:13055":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8331:6687":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:8455:6700":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:0:2562":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:7633:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10726:20254":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2850:2758":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:0:2570":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4860:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11845:4039":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:9088:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:12022:798":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8993:29591":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:1846:2789":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:40363:2989":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5921:5881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:9838:155":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6792:6961":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:4360:7787":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12698:4221":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9328:3903":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6243:20059":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2406:4748":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9972:20155":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11991:27096":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"20:648:3140":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:6837:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6047:3583":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:42912:7098":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44069:7137":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11661:4020":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13868:4533":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:21006:30353":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:2798:2733":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12373:4148":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:32115:4947":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:3038:136":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44249:7152":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:11931:7114":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8432:6500":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:261:3495":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:14448:4705":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10240:3917":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:5028:29594":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4775:3580":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11173:20283":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10478:3937":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:521:24124":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11351:3993":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44391:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:6335:7998":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7466:7031":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:12189:13049":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:3206:2802":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10980:3928":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6711:6072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4440:5514":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12267:4136":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:45963:6532":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4388:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43593:7107":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14316:4668":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:41655:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14033:4574":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:41800:234":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43515:3103":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1986:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:40020:7064":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:216:33209":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"11:2303:19121":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13693:4494":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:123:13639":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:6171:27648":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:2286:7635":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:4755:5625":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10383:20177":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2604:7377":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:22:734":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:40133:13113":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11793:3614":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:41893:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:11267:3608":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:30521:29978":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:8963:7601":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:4128:7317":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9623:2553":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:13028:150":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:9873:13127":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5992:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13838:4522":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:1718:5440":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8382:6697":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9617:33170":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13758:4504":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7286:2789":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5384:20050":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11934:2411":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:14056:4582":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8279:7313":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:2888:2759":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:21900:30250":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:7985:2790":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10669:3099":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5052:5779":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4473:5533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22325:6254":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:1590:2804":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5723:7866":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12452:4182":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:574:3769":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7708:4789":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8271:7786":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10214:7253":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6041:20056":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1507:5311":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:2037:3745":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8148:7707":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:8926:20134":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"20:2755:2483":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"2:40171:7074":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:10092:3565":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:3262:7739":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"15:0:2569":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:43496:3102":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13922:4546":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7862:6988":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:46010:6533":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"14:31:7356":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:5372:7849":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40048:6474":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:22266:6249":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:45908:6529":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6017:20055":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:10075:7327":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9070:3895":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:690:6801":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:1635:636":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:7453:7028":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8870:6710":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:48126:6631":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46980:6577":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:924:2428":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:6514:3495":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:880:3503":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8541:7179":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13174:4314":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4529:5556":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:2245:7020":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4998:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2359:4746":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:42166:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:7318:4929":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7054:6975":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5866:6881":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:7555:3598":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:39334:222":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:507:3769":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40199:7075":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:771:2508":{"crate_id":21,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:9107:6718":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1674:3495":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:45755:6523":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:6520:7872":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4783:5638":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:860:7632":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8169:2986":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11710:3989":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13546:4441":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:40433:2980":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:32075:5147":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2498:2320":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:44356:7159":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:989:260":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"11:1127:19117":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4136:7318":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:2361:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:32223:2866":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2832:4766":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11023:3979":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:20974:30246":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:10558:3604":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:3326:2739":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40481:2998":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:2058:6980":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:563:5284":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:1537:5324":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:10410:7320":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:5948:3588":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10227:20179":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:32111:26807":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12484:4189":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:45611:6517":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47728:6614":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:41426:3652":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10547:6822":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6781:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:6621:241":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:7078:2955":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:21566:2320":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2904:2763":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:39292:220":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:46870:6574":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4584:5586":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:681:6798":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:40072:7066":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:358:7613":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8957:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:5816:6874":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:47790:6615":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12671:3946":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:2836:2863":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:7910:3745":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:12029:1615":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:759:3336":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:21004:30351":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:21547:7907":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"11:2479:33086":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5905:6883":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3655:3802":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10056:7308":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:39417:6343":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:45677:6520":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:7657:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3802:2805":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:6898:6161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2696:4760":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12997:4281":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10197:20188":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:0:2572":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5661:6862":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2133:3509":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3249:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2935:2769":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7621:20072":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10772:6640":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:42088:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:2592:3138":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:41715:2507":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:12859:13125":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"9:357:19049":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43525:3104":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:4288:7367":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4908:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1058:7634":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13906:4542":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:11954:7115":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12293:4141":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12208:4113":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6753:6949":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:48049:6628":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:719:3790":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2551:265":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:1501:5308":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:5976:2725":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4698:5613":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:4862:4818":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:5963:20054":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13024:4285":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2173:13276":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:3225:7744":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:4279:229":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:43505:3105":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6059:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8530:6705":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5033:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:9459:3602":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:11453:7758":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11332:7195":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7391:20069":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:555:5279":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"3:234:234":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5009:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12012:1120":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:7554:4786":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5015:5760":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4686:5612":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:30891:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7111:7324":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6844:4882":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8125:6680":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:3144:28215":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10747:7172":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:42712:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:797:6784":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:4436:2867":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10672:7264":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11573:6849":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:8239:4947":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:9830:151":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4157:7319":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4496:5542":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:992:6980":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4:1083":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:101:7002":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"10:36:5150":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:44216:7146":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:45723:6522":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5891:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:8686:20127":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4628:5608":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:12016:1597":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5121:4826":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:12025:796":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:2705:3137":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:14126:4599":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4578:5583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:5562:3518":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"15:394:19154":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2394:7702":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8309:6076":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:45655:6519":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46156:6543":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:4004:3512":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7102:20068":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43152:6504":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:3671:3495":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:31:19020":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:12028:1614":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:9621:2550":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:2305:19190":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42675:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:8594:20114":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:10512:7741":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9921:20164":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:596:5302":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10186:6815":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:22379:29985":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10920:7373":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40404:2993":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3406:6684":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:40883:2966":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:42752:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:21325:13275":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:7590:3531":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5969:5906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:728:2426":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"16:5634:6858":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:4719:4813":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6682:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4401:5488":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3709:7758":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:1642:6240":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43171:3118":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7272:33006":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:2463:6233":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11910:4062":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:6:732":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:7988:2791":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:1819:3754":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"11:1051:19115":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:11735:3082":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5602:228":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4892:7818":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44416:7163":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12111:4097":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11290:7323":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41409:3650":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8199:7121":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11347:7383":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43871:7121":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2895:3579":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:9048:6717":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10771:3941":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12123:4098":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:21443:7908":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:2534:6789":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:3712:7757":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5727:6867":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22408:7053":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:12019:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40446:2995":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10685:20223":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:298:7003":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:40100:7068":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12876:4261":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43925:7062":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:1635:3489":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8472:7843":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:624:33193":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:40119:7069":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:2487:5148":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:10558:3095":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:15:3209":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:6963:2985":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10077:3561":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:10752:3093":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:1862:2803":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6012:5935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8216:7754":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:11311:3112":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2766:4763":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:12785:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3180:2801":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"15:327:19148":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11389:7278":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5798:4832":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:42246:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:871:3336":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:7571:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4549:5567":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:12008:1002":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"9:0:2564":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:913:7300":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14434:4698":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12685:4220":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:2472:4751":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:4034:3495":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:44640:2745":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11507:20140":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7736:4958":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:3461:4796":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:7342:33154":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"7:78:19027":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11872:4047":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11514:7759":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:21178:7914":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"11:829:7630":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6228:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:9089:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:43433:3101":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2776:245":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3077:2775":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:4822:31446":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:22756:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"11:731:7299":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6700:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:507:5247":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7252:3512":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:40246:3549":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:3214:2803":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14100:4593":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:47959:6622":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9447:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6386:4844":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:904:2103":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"6:1496:5306":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5830:6875":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10646:4002":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:1514:5314":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:42647:6491":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13710:4495":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:47336:6610":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11886:4048":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10494:6817":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:1570:5347":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:7390:2799":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:5802:3582":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:8765:20129":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14324:4669":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10440:20217":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44653:7166":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14522:4720":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6929:4891":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11135:6707":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6819:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:2730:2103":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:44368:7162":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1983:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:1779:7306":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:46634:6570":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47874:6617":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:3600:4797":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:2786:253":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10575:6824":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6687:6947":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:6265:7037":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:46792:6573":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:6407:7869":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4375:5468":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10933:7852":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:12009:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:922:7299":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"21:811:2065":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:6443:3592":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1140:7302":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:42730:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43167:7104":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:44206:7142":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4480:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"13:110:33089":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"9:507:5212":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:427:7293":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:9086:3896":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4800:5648":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1573:2803":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:10631:3098":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:21575:3648":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:7745:26807":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"14:40:2411":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1494:7298":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13816:4518":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:9271:30509":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10515:7743":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4884:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:4416:3066":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:7856:7173":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:2074:7634":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4516:5551":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6968:20066":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9574:33189":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:21140:2320":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:4640:13106":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12513:4194":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8829:2507":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10366:20182":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:2085:7635":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:536:6851":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40256:7551":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:45886:6528":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12496:4191":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6901:4780":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7343:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"9:177:19101":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4878:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:644:3769":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"20:107:33204":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"20:478:3478":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:10903:7269":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7269:33144":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:48087:6630":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:3185:33012":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:2467:5144":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11407:20138":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8305:7820":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:12149:2708":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:62:13584":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:10269:2320":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12934:4273":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7355:27671":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40874:2964":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:40005:7062":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10788:20255":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:533:5267":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10126:6812":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:2428:4749":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10468:3936":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:22415:6266":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:9073:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12237:4124":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14156:4605":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2547:266":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"20:2691:2065":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"1:2216:7688":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12830:4237":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4745:5618":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:1304:7363":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12024:4082":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:7542:2809":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11381:3997":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41731:2789":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:2631:260":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:7725:7660":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1632:5393":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:0:1502":{"crate_id":1,"path":["std"],"kind":"module"},"1:12026:1616":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:3219:33005":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:8050:5005":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7479:2731":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:4428:5511":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:7679:6225":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8899:7877":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6879:4886":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46232:6545":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11975:27661":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:1568:2805":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:13083:2746":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:44336:7154":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:7365:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9896:20150":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:926:7629":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:646:7620":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43603:3903":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11244:4018":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"9:426:19036":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41592:7174":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5995:6853":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7503:4784":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:43739:3092":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1842:7310":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"20:2725:2426":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"2:40334:2978":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:907:2805":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:841:7631":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4208:7789":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7284:2849":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:4883:7817":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:44428:13365":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11086:7274":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14478:4713":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2618:4757":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:21234:7919":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:7331:2789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12225:4121":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6415:6928":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:44117:7139":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12252:4130":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11430:3610":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:5372:13039":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:5964:228":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8952:27666":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10139:20172":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:42687:4982":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:364:7614":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:2930:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10370:7262":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10616:6827":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"20:1063:2065":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"11:1010:7634":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:10077:29620":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:5477:7852":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47985:6624":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:802:33281":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"5:4988:3518":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9013:6714":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:3949:3518":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:7707:7624":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:41615:6485":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7604:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13851:4528":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10637:6831":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12846:4242":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:46476:6553":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:7692:7623":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:6718:6076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:45807:6525":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2582:3561":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43587:7106":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:7680:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:22789:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:14346:4675":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:14076:4588":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:47996:6625":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42207:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7902:7378":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"20:2270:2426":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"14:7:7356":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:2334:2788":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:3424:7552":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:5376:13040":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7437:30010":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10518:7739":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:11358:20285":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:46202:6544":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8134:6998":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:3171:219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1564:3512":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11124:7276":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4344:4804":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3173:2507":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:39151:2785":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12023:799":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:2368:3512":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4738:5616":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:3797:4799":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5757:7868":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:10596:3111":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8775:7320":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"14:215:7000":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6798:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9780:7244":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:8281:5018":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:10097:20154":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4902:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4986:4822":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"14:0:2568":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9083:243":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:4616:6091":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3472:29699":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7694:4788":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11284:7191":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:12031:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10802:6681":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:4860:7746":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"21:930:2483":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"21:900:2426":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"11:2461:2426":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13135:4311":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:46278:6547":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:47478:6611":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:7598:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"9:52:19052":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:1923:6247":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:1895:7374":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:946:2411":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"1:3378:3518":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:44628:2800":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13876:4536":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13244:4322":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:45785:6524":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6696:4870":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:30415:29993":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:9143:29606":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:10661:20253":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:22181:7046":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:788:260":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:2784:2734":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:2260:7634":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:12013:342":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5408:7851":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:23053:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:3240:2804":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4814:5654":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:1650:5405":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:0:2571":{"crate_id":17,"path":["object"],"kind":"module"},"1:8253:7174":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:4395:3518":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12711:4223":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4835:4817":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9102:3897":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:12772:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:8260:7175":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7828:4967":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"15:306:7284":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7513:6984":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:874:260":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:840:2507":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:41472:2065":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11586:4017":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6226:20058":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3965:7766":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21796:7921":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:1290:7634":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:1259:6980":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:47130:6578":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:538:3774":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6817:3536":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11448:20139":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:43395:3091":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6666:6048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2787:252":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6868:6144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:8167:20077":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:30321:6269":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:357:2705":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:6513:6933":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"20:2427:2316":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"21:740:2427":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:4932:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:12979:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4647:5609":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:2644:2789":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:11270:3109":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2866:2757":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4914:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:7886:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8514:7176":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10084:7251":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43444:3107":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11151:7277":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4543:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10278:20178":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10453:3603":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:44001:13061":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:777:2806":{"crate_id":21,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:13451:4358":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:8895:20133":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40107:13112":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6658:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2722:4761":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:4365:3520":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:6873:3595":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4941:7826":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11215:6836":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:3255:2780":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10165:20173":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:1781:7307":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13085:4294":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7574:2805":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:5403:3895":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:932:7630":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:1576:5349":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:45856:6527":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4434:5512":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5910:5873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.69/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}