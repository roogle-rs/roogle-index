{"root":"0:0:1084","crate_version":"1.0.26","includes_private":false,"index":{"2:11865:2714":{"id":"2:11865:2714","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:2501":{"id":"2:11896:2501","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11521:12537","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:2501"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:6644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:402:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11899:33425":{"id":"2:11899:33425","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11521:12537","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:2501"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:6645","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:33428":{"id":"2:11908:33428","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34:2140":{"id":"0:34:2140","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[107,4],"end":[107,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[115,0],"end":[119,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:103:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5287:34086":{"id":"5:5287:34086","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:24837":{"id":"2:11869:24837","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11521:12537","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split_whitespace":"2:11847:30989","str::rsplit":"2:11875:26712"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:2918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:33437":{"id":"2:11934:33437","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:2276":{"id":"0:123:2276","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[206,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:384:1658":{"id":"0:384:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:1658":{"id":"0:108:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i16"},"items":["0:382:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[164,0],"end":[169,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:110:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11840:33418":{"id":"2:11840:33418","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11849:1368","str::slice_mut_unchecked":"2:11841:33419","crate::ops::Index":"2:2991:2603"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:26701":{"id":"2:11842:26701","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11843:26702"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[195,0],"end":[199,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:870:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:120:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11905:33427":{"id":"2:11905:33427","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11521:12537","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::match_indices":"2:11902:33426"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:6642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:33423":{"id":"2:11890:33423","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392:1658":{"id":"0:392:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:374:657":{"id":"0:374:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400:1658":{"id":"0:400:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:1658":{"id":"0:228:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/runtime.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"f64"},"items":["0:406:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77:1663":{"id":"0:77:1663","crate_id":0,"name":"ToTokens","span":{"filename":"src/to_tokens.rs","begin":[10,0],"end":[75,1]},"visibility":"public","docs":"Types that can be interpolated inside a `quote!` invocation.\n\n[`quote!`]: macro.quote.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:78:1658","0:79:2275","0:80:2276"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:379","0:96","0:102","0:226","0:85","0:381","0:117","0:99","0:113","0:104","0:385","0:107","0:403","0:387","0:391","0:119","0:115","0:393","0:401","0:89","0:111","0:383","0:399","0:405","0:395","0:93","0:109","0:397","0:389","0:81","0:121"]}},"2:11820:797":{"id":"2:11820:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:33417":{"id":"2:11829:33417","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:26702":{"id":"2:11843:26702","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11842:26701"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1658":{"id":"0:92:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:24375":{"id":"2:11922:24375","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:398:1658":{"id":"0:398:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:26565":{"id":"2:11940:26565","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:657":{"id":"0:376:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[43,0],"end":[56,1]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:931:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:1898","0:58:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[101,0],"end":[105,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"5:4722:201","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:98:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11823:33415":{"id":"2:11823:33415","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1658":{"id":"0:110:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[165,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:315-0:77:1663":{"id":"0:315-0:77:1663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,0],"end":[112,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::to_tokens::ToTokens","name":"ToTokens","id":"0:77:1663","glob":false}},"0:394:1658":{"id":"0:394:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1898":{"id":"0:54:1898","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:864:1899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10:1661":{"id":"0:10:1661","crate_id":0,"name":"TokenStreamExt","span":{"filename":"src/ext.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":"TokenStream extension trait with methods for appending tokens.\n\nThis trait is sealed and cannot be implemented outside of the `quote` crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:11:2143","0:13:2153","0:15:2158","0:18:2162"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:34:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:21"]}},"0:314-0:45:1662":{"id":"0:314-0:45:1662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[111,0],"end":[111,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ident_fragment::IdentFragment","name":"IdentFragment","id":"0:45:1662","glob":false}},"2:11855:2242":{"id":"2:11855:2242","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:26560":{"id":"2:11942:26560","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:33438":{"id":"2:11943:33438","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:33438"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:6593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:2153":{"id":"0:24:2153","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[67,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7088:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11834:26677":{"id":"2:11834:26677","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[107,0],"end":[113,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:101:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11850:33420":{"id":"2:11850:33420","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:6647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"f32"},"items":["0:404:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:55:657":{"id":"0:55:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[83,0],"end":[87,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:88:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:84:1658":{"id":"0:84:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:2224":{"id":"0:37:2224","crate_id":0,"name":"format_ident","span":{"filename":"src/format.rs","begin":[111,0],"end":[125,1]},"visibility":"public","docs":"Formatting macro for constructing `Ident`s.\n\n<br>\n\n# Syntax\n\nSyntax is copied from the [`format!`] macro, supporting both positional and\nnamed arguments.\n\nOnly a limited set of formatting traits are supported. The current mapping\nof format types to traits is:\n\n* `{}` ⇒ [`IdentFragment`]\n* `{:o}` ⇒ [`Octal`](std::fmt::Octal)\n* `{:x}` ⇒ [`LowerHex`](std::fmt::LowerHex)\n* `{:X}` ⇒ [`UpperHex`](std::fmt::UpperHex)\n* `{:b}` ⇒ [`Binary`](std::fmt::Binary)\n\nSee [`std::fmt`] for more information.\n\n<br>\n\n# IdentFragment\n\nUnlike `format!`, this macro uses the [`IdentFragment`] formatting trait by\ndefault. This trait is like `Display`, with a few differences:\n\n* `IdentFragment` is only implemented for a limited set of types, such as\n   unsigned integers and strings.\n* [`Ident`] arguments will have their `r#` prefixes stripped, if present.\n\n[`IdentFragment`]: crate::IdentFragment\n[`Ident`]: proc_macro2::Ident\n\n<br>\n\n# Hygiene\n\nThe [`Span`] of the first `Ident` argument is used as the span of the final\nidentifier, falling back to [`Span::call_site`] when no identifiers are\nprovided.\n\n```\n# use quote::format_ident;\n# let ident = format_ident!(\"Ident\");\n// If `ident` is an Ident, the span of `my_ident` will be inherited from it.\nlet my_ident = format_ident!(\"My{}{}\", ident, \"IsCool\");\nassert_eq!(my_ident, \"MyIdentIsCool\");\n```\n\nAlternatively, the span can be overridden by passing the `span` named\nargument.\n\n```\n# use quote::format_ident;\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet my_span = /* ... */;\n# };\n# let my_span = proc_macro2::Span::call_site();\nformat_ident!(\"MyIdent\", span = my_span);\n```\n\n[`Span`]: proc_macro2::Span\n[`Span::call_site`]: proc_macro2::Span::call_site\n\n<p><br></p>\n\n# Panics\n\nThis method will panic if the resulting formatted string is not a valid\nidentifier.\n\n<br>\n\n# Examples\n\nComposing raw and non-raw identifiers:\n```\n# use quote::format_ident;\nlet my_ident = format_ident!(\"My{}\", \"Ident\");\nassert_eq!(my_ident, \"MyIdent\");\n\nlet raw = format_ident!(\"r#Raw\");\nassert_eq!(raw, \"r#Raw\");\n\nlet my_ident_raw = format_ident!(\"{}Is{}\", my_ident, raw);\nassert_eq!(my_ident_raw, \"MyIdentIsRaw\");\n```\n\nInteger formatting options:\n```\n# use quote::format_ident;\nlet num: u32 = 10;\n\nlet decimal = format_ident!(\"Id_{}\", num);\nassert_eq!(decimal, \"Id_10\");\n\nlet octal = format_ident!(\"Id_{:o}\", num);\nassert_eq!(octal, \"Id_12\");\n\nlet binary = format_ident!(\"Id_{:b}\", num);\nassert_eq!(binary, \"Id_1010\");\n\nlet lower_hex = format_ident!(\"Id_{:x}\", num);\nassert_eq!(lower_hex, \"Id_a\");\n\nlet upper_hex = format_ident!(\"Id_{:X}\", num);\nassert_eq!(upper_hex, \"Id_A\");\n```","links":{"std::fmt::UpperHex":"2:9020:2372","`format!`":"5:6:666","std::fmt::LowerHex":"2:9018:2371","proc_macro2::Span":"21:864:1899","proc_macro2::Span::call_site":"21:544:2297","crate::IdentFragment":"0:45:1662","proc_macro2::Ident":"21:931:2231","std::fmt::Octal":"2:9014:2370","std::fmt::Binary":"2:9016:2373","`std::fmt`":"5:4630:657"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format_ident {\n    ($fmt:expr) => { ... };\n    ($fmt:expr, $($rest:tt)*) => { ... };\n}"},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:366:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1084":{"id":"0:0:1084","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1434,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/quote)&ensp;[![crates-io]](https://crates.io/crates/quote)&ensp;[![docs-rs]](https://docs.rs/quote)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis crate provides the [`quote!`] macro for turning Rust syntax tree data\nstructures into tokens of source code.\n\n[`quote!`]: macro.quote.html\n\nProcedural macros in Rust receive a stream of tokens as input, execute\narbitrary Rust code to determine how to manipulate those tokens, and produce\na stream of tokens to hand back to the compiler to compile into the caller's\ncrate. Quasi-quoting is a solution to one piece of that &mdash; producing\ntokens to return to the compiler.\n\nThe idea of quasi-quoting is that we write *code* that we treat as *data*.\nWithin the `quote!` macro, we can write what looks like code to our text\neditor or IDE. We get all the benefits of the editor's brace matching,\nsyntax highlighting, indentation, and maybe autocompletion. But rather than\ncompiling that as code into the current crate, we can treat it as data, pass\nit around, mutate it, and eventually hand it back to the compiler as tokens\nto compile into the macro caller's crate.\n\nThis crate is motivated by the procedural macro use case, but is a\ngeneral-purpose Rust quasi-quoting library and is not specific to procedural\nmacros.\n\n```toml\n[dependencies]\nquote = \"1.0\"\n```\n\n<br>\n\n# Example\n\nThe following quasi-quoted block of code is something you might find in [a]\nprocedural macro having to do with data structure serialization. The `#var`\nsyntax performs interpolation of runtime variables into the quoted tokens.\nCheck out the documentation of the [`quote!`] macro for more detail about\nthe syntax. See also the [`quote_spanned!`] macro which is important for\nimplementing hygienic procedural macros.\n\n[a]: https://serde.rs/\n[`quote_spanned!`]: macro.quote_spanned.html\n\n```\n# use quote::quote;\n#\n# let generics = \"\";\n# let where_clause = \"\";\n# let field_ty = \"\";\n# let item_ty = \"\";\n# let path = \"\";\n# let value = \"\";\n#\nlet tokens = quote! {\n    struct SerializeWith #generics #where_clause {\n        value: &'a #field_ty,\n        phantom: core::marker::PhantomData<#item_ty>,\n    }\n\n    impl #generics serde::Serialize for SerializeWith #generics #where_clause {\n        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n        where\n            S: serde::Serializer,\n        {\n            #path(self.value, serializer)\n        }\n    }\n\n    SerializeWith {\n        value: #value,\n        phantom: core::marker::PhantomData::<#item_ty>,\n    }\n};\n```","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/quote/1.0.26\")]","#![allow(clippy :: doc_markdown, clippy :: missing_errors_doc, clippy ::\nmissing_panics_doc, clippy :: module_name_repetitions, clippy ::\nwrong_self_convention,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:313-0:10:1661","0:314-0:45:1662","0:315-0:77:1663","0:37:2224","0:344:1084","0:345:1897"],"is_stripped":false}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:370:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:345:1897":{"id":"0:345:1897","crate_id":0,"name":"quote_spanned","span":{"filename":"src/lib.rs","begin":[612,0],"end":[616,1]},"visibility":"public","docs":"Same as `quote!`, but applies a given span to all tokens originating within\nthe macro invocation.\n\n<br>\n\n# Syntax\n\nA span expression of type [`Span`], followed by `=>`, followed by the tokens\nto quote. The span expression should be brief &mdash; use a variable for\nanything more than a few characters. There should be no space before the\n`=>` token.\n\n[`Span`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html\n\n```\n# use proc_macro2::Span;\n# use quote::quote_spanned;\n#\n# const IGNORE_TOKENS: &'static str = stringify! {\nlet span = /* ... */;\n# };\n# let span = Span::call_site();\n# let init = 0;\n\n// On one line, use parentheses.\nlet tokens = quote_spanned!(span=> Box::into_raw(Box::new(#init)));\n\n// On multiple lines, place the span at the top and use braces.\nlet tokens = quote_spanned! {span=>\n    Box::into_raw(Box::new(#init))\n};\n```\n\nThe lack of space before the `=>` should look jarring to Rust programmers\nand this is intentional. The formatting is designed to be visibly\noff-balance and draw the eye a particular way, due to the span expression\nbeing evaluated in the context of the procedural macro and the remaining\ntokens being evaluated in the generated code.\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote_spanned!`\ninvocation are spanned with the given span argument.\n\n<br>\n\n# Example\n\nThe following procedural macro code uses `quote_spanned!` to assert that a\nparticular Rust type implements the [`Sync`] trait so that references can be\nsafely shared between threads.\n\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n```\n# use quote::{quote_spanned, TokenStreamExt, ToTokens};\n# use proc_macro2::{Span, TokenStream};\n#\n# struct Type;\n#\n# impl Type {\n#     fn span(&self) -> Span {\n#         Span::call_site()\n#     }\n# }\n#\n# impl ToTokens for Type {\n#     fn to_tokens(&self, _tokens: &mut TokenStream) {}\n# }\n#\n# let ty = Type;\n# let call_site = Span::call_site();\n#\nlet ty_span = ty.span();\nlet assert_sync = quote_spanned! {ty_span=>\n    struct _AssertSync where #ty: Sync;\n};\n```\n\nIf the assertion fails, the user will see an error like the following. The\ninput span of their type is highlighted in the error.\n\n```text\nerror[E0277]: the trait bound `*const (): std::marker::Sync` is not satisfied\n  --> src/main.rs:10:21\n   |\n10 |     static ref PTR: *const () = &();\n   |                     ^^^^^^^^^ `*const ()` cannot be shared between threads safely\n```\n\nIn this example it is important for the where-clause to be spanned with the\nline/column information of the user's input type so that error messages are\nplaced appropriately by the compiler.","links":{},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote_spanned {\n    ($span:expr=> $($tt:tt)*) => { ... };\n}"},"2:11872:26710":{"id":"2:11872:26710","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11345:2934","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:26714":{"id":"2:11884:26714","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537","str::rsplitn":"2:11887:26716"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:2920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:33435":{"id":"2:11928:33435","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:1986":{"id":"2:11937:1986","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11483:126","`FromStr`":"2:11482:2537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11482:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11482:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:657":{"id":"0:378:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:7146":{"id":"2:11945:7146","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:7146"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:6581","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11819":{"id":"2:11819","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11084:1368","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11820:797","2:11821:2715","2:11822:33414","2:11823:33415","2:11825:33416","2:11828:30072","2:11829:33417","2:11830:310","2:11831:6993","2:11832:7037","2:11834:26677","2:11836:26678","2:11838:26679","2:11840:33418","2:11841:33419","2:11842:26701","2:11843:26702","2:11844:6651","2:11845:6660","2:11846:6550","2:11847:30989","2:11848:30998","2:11849:6809","2:11850:33420","2:11851:30988","2:11852:7036","2:11855:2242","2:11858:2380","2:11861:2749","2:11865:2714","2:11869:24837","2:11872:26710","2:11875:26712","2:11878:33421","2:11881:33422","2:11884:26714","2:11887:26716","2:11890:33423","2:11893:33424","2:11896:2501","2:11899:33425","2:11902:33426","2:11905:33427","2:11908:33428","2:11910:33429","2:11912:33430","2:11914:33431","2:11915:33432","2:11916:33433","2:11919:33434","2:11922:24375","2:11925:26718","2:11928:33435","2:11931:33436","2:11934:33437","2:11937:1986","2:11939:26564","2:11940:26565","2:11941:26561","2:11942:26560","2:11943:33438","2:11945:7146","2:11946:33439"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:118:1658":{"id":"0:118:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:34088":{"id":"5:5294:34088","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:2275":{"id":"0:79:2275","crate_id":0,"name":"to_token_stream","span":{"filename":"src/to_tokens.rs","begin":[59,4],"end":[63,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:33419":{"id":"2:11841:33419","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11849:1368","crate::ops::IndexMut":"2:2995:2604","str::slice_unchecked":"2:11840:33418"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1658":{"id":"0:103:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:34087":{"id":"5:5291:34087","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:26678":{"id":"2:11836:26678","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:404:1658":{"id":"0:404:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[77,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:84:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:18:2162":{"id":"0:18:2162","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[52,4],"end":[56,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all tokens in the iterator `I`, appending `U` after each\nelement, including after the last element of the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7088:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:406:1658":{"id":"0:406:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:30998":{"id":"2:11848:30998","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11847:30989"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:6649","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:33433":{"id":"2:11916:33433","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11546:12533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:362:657":{"id":"0:362:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:362:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":["0:376:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:402:1658":{"id":"0:402:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:6550":{"id":"2:11846:6550","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:3642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:6651":{"id":"2:11844:6651","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:6631","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372:657":{"id":"0:372:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:7036":{"id":"2:11852:7036","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:2749":{"id":"2:11861:2749","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:657":{"id":"0:46:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[13,4],"end":[13,57]},"visibility":"default","docs":"Format this value as an identifier fragment.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/runtime.rs","begin":[163,0],"end":[167,1]},"visibility":{"restricted":{"parent":"0:124:1660","path":"::__private"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RepInterp","id":"0:407:1919","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:228:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11832:7037":{"id":"2:11832:7037","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:26712":{"id":"2:11875:26712","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11521:12537","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split":"2:11869:24837"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:2922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:26718":{"id":"2:11925:26718","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:1658":{"id":"0:95:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[201,0],"end":[209,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:122:1658","0:123:2276"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:382:1658":{"id":"0:382:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1658":{"id":"0:116:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[95,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:95:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11919:33434":{"id":"2:11919:33434","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26:2158":{"id":"0:26:2158","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[77,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7088:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:2162":{"id":"0:29:2162","crate_id":0,"name":"append_terminated","span":{"filename":"src/ext.rs","begin":[91,4],"end":[101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["term",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7088:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1658":{"id":"0:78:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[53,4],"end":[53,50]},"visibility":"default","docs":"Write `self` to the given `TokenStream`.\n\nThe token append methods provided by the [`TokenStreamExt`] extension\ntrait may be useful for implementing `ToTokens`.\n\n[`TokenStreamExt`]: trait.TokenStreamExt.html\n\n# Example\n\nExample implementation for a struct representing Rust paths like\n`std::cmp::PartialEq`:\n\n```\nuse proc_macro2::{TokenTree, Spacing, Span, Punct, TokenStream};\nuse quote::{TokenStreamExt, ToTokens};\n\npub struct Path {\n    pub global: bool,\n    pub segments: Vec<PathSegment>,\n}\n\nimpl ToTokens for Path {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        for (i, segment) in self.segments.iter().enumerate() {\n            if i > 0 || self.global {\n                // Double colon `::`\n                tokens.append(Punct::new(':', Spacing::Joint));\n                tokens.append(Punct::new(':', Spacing::Alone));\n            }\n            segment.to_tokens(tokens);\n        }\n    }\n}\n#\n# pub struct PathSegment;\n#\n# impl ToTokens for PathSegment {\n#     fn to_tokens(&self, tokens: &mut TokenStream) {\n#         unimplemented!()\n#     }\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:61:1898":{"id":"0:61:1898","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[62,4],"end":[64,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:864:1899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13:2153":{"id":"0:13:2153","crate_id":0,"name":"append_all","span":{"filename":"src/ext.rs","begin":[33,4],"end":[36,26]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\n```\n# use quote::{quote, TokenStreamExt, ToTokens};\n# use proc_macro2::TokenStream;\n#\nstruct X;\n\nimpl ToTokens for X {\n    fn to_tokens(&self, tokens: &mut TokenStream) {\n        tokens.append_all(&[true, false]);\n    }\n}\n\nlet tokens = quote!(#X);\nassert_eq!(tokens.to_string(), \"true false\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7088:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:101:1658":{"id":"0:101:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[108,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"bool"},"items":["0:360:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11825:33416":{"id":"2:11825:33416","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11823:33415"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1662":{"id":"0:45:1662","crate_id":0,"name":"IdentFragment","span":{"filename":"src/ident_fragment.rs","begin":[11,0],"end":[21,1]},"visibility":"public","docs":"Specialized formatting trait used by `format_ident!`.\n\n[`Ident`] arguments formatted using this trait will have their `r#` prefix\nstripped, if present.\n\nSee [`format_ident!`] for more information.","links":{"`Ident`":"21:931:2231","`format_ident!`":"0:37:2224"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:46:657","0:47:1898"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:59","0:375","0:365","0:359","0:56","0:361","0:369","0:367","0:377","0:373","0:371","0:52","0:48","0:363"]}},"2:11830:310":{"id":"2:11830:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11831:6993","`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i32"},"items":["0:384:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11838:26679":{"id":"2:11838:26679","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:33422":{"id":"2:11881:33422","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11521:12537","str::split":"2:11869:24837","prim@char":"1:11843:410","str::split_terminator":"2:11878:33421"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:364:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:366:657":{"id":"0:366:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1658":{"id":"0:98:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[102,4],"end":[104,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5288:7043":{"id":"5:5288:7043","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[89,0],"end":[93,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:688:110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:92:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11910:33429":{"id":"2:11910:33429","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5306:26562":{"id":"5:5306:26562","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11942:26560"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:30072":{"id":"2:11828:30072","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11089:12538"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:1658":{"id":"0:390:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:30988":{"id":"2:11851:30988","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:6650","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:372:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"usize"},"items":["0:378:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[177,0],"end":[181,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Ident","id":"21:931:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:114:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[183,0],"end":[187,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Punct","id":"21:909:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u128"},"items":["0:400:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:398:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i128"},"items":["0:388:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11845:6660":{"id":"2:11845:6660","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:33436":{"id":"2:11931:33436","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:360:657":{"id":"0:360:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:34090":{"id":"5:5303:34090","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2278","`String`":"5:7158:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:1658":{"id":"0:122:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:2158":{"id":"0:15:2158","crate_id":0,"name":"append_separated","span":{"filename":"src/ext.rs","begin":[42,4],"end":[46,20]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends all of the items in the iterator `I`, separated by the tokens\n`U`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}],["op",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7088:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"2:7088:149","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:11:2143":{"id":"0:11:2143","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[12,4],"end":[14,27]},"visibility":"default","docs":"For use by `ToTokens` implementations.\n\nAppends the token specified to this list of tokens.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2501:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:870:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:370:657":{"id":"0:370:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:388:1658":{"id":"0:388:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1658":{"id":"0:112:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:2785":{"id":"5:5304:2785","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:30989":{"id":"2:11847:30989","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11848:30998"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:6648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:33424":{"id":"2:11893:33424","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:33432":{"id":"2:11915:33432","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33439":{"id":"2:11946:33439","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:33439"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:6586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313-0:10:1661":{"id":"0:313-0:10:1661","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[110,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ext::TokenStreamExt","name":"TokenStreamExt","id":"0:10:1661","glob":false}},"0:120:1658":{"id":"0:120:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[196,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:2715":{"id":"2:11821:2715","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:2380":{"id":"2:11858:2380","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"isize"},"items":["0:390:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[158,0],"end":[162,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:108:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:57:1898":{"id":"0:57:1898","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:864:1899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:380:1658":{"id":"0:380:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:368:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i64"},"items":["0:386:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:396:1658":{"id":"0:396:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[189,0],"end":[193,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Literal","id":"21:936:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:118:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:392:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11849:6809":{"id":"2:11849:6809","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:6646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[59,0],"end":[102,1]},"visibility":{"restricted":{"parent":"0:4:1656","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TokenStreamExt","id":"0:10:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:2143","0:24:2153","0:26:2158","0:29:2162"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:62:657":{"id":"0:62:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[66,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[58,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:688:110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:61:1898","0:62:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[33,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:54:1898","0:55:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:344:1084":{"id":"0:344:1084","crate_id":0,"name":"quote","span":{"filename":"src/lib.rs","begin":[473,0],"end":[477,1]},"visibility":"public","docs":"The whole point.\n\nPerforms variable interpolation against the input and produces it as\n[`proc_macro2::TokenStream`].\n\nNote: for returning tokens to the compiler in a procedural macro, use\n`.into()` on the result to convert to [`proc_macro::TokenStream`].\n\n[`TokenStream`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.TokenStream.html\n\n<br>\n\n# Interpolation\n\nVariable interpolation is done with `#var` (similar to `$var` in\n`macro_rules!` macros). This grabs the `var` variable that is currently in\nscope and inserts it in that location in the output tokens. Any type\nimplementing the [`ToTokens`] trait can be interpolated. This includes most\nRust primitive types as well as most of the syntax tree types from the [Syn]\ncrate.\n\n[`ToTokens`]: trait.ToTokens.html\n[Syn]: https://github.com/dtolnay/syn\n\nRepetition is done using `#(...)*` or `#(...),*` again similar to\n`macro_rules!`. This iterates through the elements of any variable\ninterpolated within the repetition and inserts a copy of the repetition body\nfor each one. The variables in an interpolation may be a `Vec`, slice,\n`BTreeSet`, or any `Iterator`.\n\n- `#(#var)*` — no separators\n- `#(#var),*` — the character before the asterisk is used as a separator\n- `#( struct #var; )*` — the repetition can contain other tokens\n- `#( #k => println!(\"{}\", #v), )*` — even multiple interpolations\n\n<br>\n\n# Hygiene\n\nAny interpolated tokens preserve the `Span` information provided by their\n`ToTokens` implementation. Tokens that originate within the `quote!`\ninvocation are spanned with [`Span::call_site()`].\n\n[`Span::call_site()`]: https://docs.rs/proc-macro2/1.0/proc_macro2/struct.Span.html#method.call_site\n\nA different span can be provided through the [`quote_spanned!`] macro.\n\n[`quote_spanned!`]: macro.quote_spanned.html\n\n<br>\n\n# Return type\n\nThe macro evaluates to an expression of type `proc_macro2::TokenStream`.\nMeanwhile Rust procedural macros are expected to return the type\n`proc_macro::TokenStream`.\n\nThe difference between the two types is that `proc_macro` types are entirely\nspecific to procedural macros and cannot ever exist in code outside of a\nprocedural macro, while `proc_macro2` types may exist anywhere including\ntests and non-macro code like main.rs and build.rs. This is why even the\nprocedural macro ecosystem is largely built around `proc_macro2`, because\nthat ensures the libraries are unit testable and accessible in non-macro\ncontexts.\n\nThere is a [`From`]-conversion in both directions so returning the output of\n`quote!` from a procedural macro usually looks like `tokens.into()` or\n`proc_macro::TokenStream::from(tokens)`.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n<br>\n\n# Examples\n\n### Procedural macro\n\nThe structure of a basic procedural macro is as follows. Refer to the [Syn]\ncrate for further useful guidance on using `quote!` as part of a procedural\nmacro.\n\n[Syn]: https://github.com/dtolnay/syn\n\n```\n# #[cfg(any())]\nextern crate proc_macro;\n# extern crate proc_macro2;\n\n# #[cfg(any())]\nuse proc_macro::TokenStream;\n# use proc_macro2::TokenStream;\nuse quote::quote;\n\n# const IGNORE_TOKENS: &'static str = stringify! {\n#[proc_macro_derive(HeapSize)]\n# };\npub fn derive_heap_size(input: TokenStream) -> TokenStream {\n    // Parse the input and figure out what implementation to generate...\n    # const IGNORE_TOKENS: &'static str = stringify! {\n    let name = /* ... */;\n    let expr = /* ... */;\n    # };\n    #\n    # let name = 0;\n    # let expr = 0;\n\n    let expanded = quote! {\n        // The generated impl.\n        impl heapsize::HeapSize for #name {\n            fn heap_size_of_children(&self) -> usize {\n                #expr\n            }\n        }\n    };\n\n    // Hand the output tokens back to the compiler.\n    TokenStream::from(expanded)\n}\n```\n\n<p><br></p>\n\n### Combining quoted fragments\n\nUsually you don't end up constructing an entire final `TokenStream` in one\npiece. Different parts may come from different helper functions. The tokens\nproduced by `quote!` themselves implement `ToTokens` and so can be\ninterpolated into later `quote!` invocations to build up a final result.\n\n```\n# use quote::quote;\n#\nlet type_definition = quote! {...};\nlet methods = quote! {...};\n\nlet tokens = quote! {\n    #type_definition\n    #methods\n};\n```\n\n<p><br></p>\n\n### Constructing identifiers\n\nSuppose we have an identifier `ident` which came from somewhere in a macro\ninput and we need to modify it in some way for the macro output. Let's\nconsider prepending the identifier with an underscore.\n\nSimply interpolating the identifier next to an underscore will not have the\nbehavior of concatenating them. The underscore and the identifier will\ncontinue to be two separate tokens as if you had written `_ x`.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\n// incorrect\nquote! {\n    let mut _#ident = 0;\n}\n# ;\n```\n\nThe solution is to build a new identifier token with the correct value. As\nthis is such a common case, the [`format_ident!`] macro provides a\nconvenient utility for doing so correctly.\n\n```\n# use proc_macro2::{Ident, Span};\n# use quote::{format_ident, quote};\n#\n# let ident = Ident::new(\"i\", Span::call_site());\n#\nlet varname = format_ident!(\"_{}\", ident);\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\nAlternatively, the APIs provided by Syn and proc-macro2 can be used to\ndirectly build the identifier. This is roughly equivalent to the above, but\nwill not handle `ident` being a raw identifier.\n\n```\n# use proc_macro2::{self as syn, Span};\n# use quote::quote;\n#\n# let ident = syn::Ident::new(\"i\", Span::call_site());\n#\nlet concatenated = format!(\"_{}\", ident);\nlet varname = syn::Ident::new(&concatenated, ident.span());\nquote! {\n    let mut #varname = 0;\n}\n# ;\n```\n\n<p><br></p>\n\n### Making method calls\n\nLet's say our macro requires some type specified in the macro input to have\na constructor called `new`. We have the type in a variable called\n`field_type` of type `syn::Type` and want to invoke the constructor.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\n// incorrect\nquote! {\n    let value = #field_type::new();\n}\n# ;\n```\n\nThis works only sometimes. If `field_type` is `String`, the expanded code\ncontains `String::new()` which is fine. But if `field_type` is something\nlike `Vec<i32>` then the expanded code is `Vec<i32>::new()` which is invalid\nsyntax. Ordinarily in handwritten Rust we would write `Vec::<i32>::new()`\nbut for macros often the following is more convenient.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type>::new();\n}\n# ;\n```\n\nThis expands to `<Vec<i32>>::new()` which behaves correctly.\n\nA similar pattern is appropriate for trait methods.\n\n```\n# use quote::quote;\n#\n# let field_type = quote!(...);\n#\nquote! {\n    let value = <#field_type as core::default::Default>::default();\n}\n# ;\n```\n\n<p><br></p>\n\n### Interpolating text inside of doc comments\n\nNeither doc comments nor string literals get interpolation behavior in\nquote:\n\n```compile_fail\nquote! {\n    /// try to interpolate: #ident\n    ///\n    /// ...\n}\n```\n\n```compile_fail\nquote! {\n    #[doc = \"try to interpolate: #ident\"]\n}\n```\n\nInstead the best way to build doc comments that involve variables is by\nformatting the doc string literal outside of quote.\n\n```rust\n# use proc_macro2::{Ident, Span};\n# use quote::quote;\n#\n# const IGNORE: &str = stringify! {\nlet msg = format!(...);\n# };\n#\n# let ident = Ident::new(\"var\", Span::call_site());\n# let msg = format!(\"try to interpolate: {}\", ident);\nquote! {\n    #[doc = #msg]\n    ///\n    /// ...\n}\n# ;\n```\n\n<p><br></p>\n\n### Indexing into a tuple struct\n\nWhen interpolating indices of a tuple or tuple struct, we need them not to\nappears suffixed as integer literals by interpolating them as [`syn::Index`]\ninstead.\n\n[`syn::Index`]: https://docs.rs/syn/1.0/syn/struct.Index.html\n\n```compile_fail\nlet i = 0usize..self.fields.len();\n\n// expands to 0 + self.0usize.heap_size() + self.1usize.heap_size() + ...\n// which is not valid syntax\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n```\n\n```\n# use proc_macro2::{Ident, TokenStream};\n# use quote::quote;\n#\n# mod syn {\n#     use proc_macro2::{Literal, TokenStream};\n#     use quote::{ToTokens, TokenStreamExt};\n#\n#     pub struct Index(usize);\n#\n#     impl From<usize> for Index {\n#         fn from(i: usize) -> Self {\n#             Index(i)\n#         }\n#     }\n#\n#     impl ToTokens for Index {\n#         fn to_tokens(&self, tokens: &mut TokenStream) {\n#             tokens.append(Literal::usize_unsuffixed(self.0));\n#         }\n#     }\n# }\n#\n# struct Struct {\n#     fields: Vec<Ident>,\n# }\n#\n# impl Struct {\n#     fn example(&self) -> TokenStream {\nlet i = (0..self.fields.len()).map(syn::Index::from);\n\n// expands to 0 + self.0.heap_size() + self.1.heap_size() + ...\nquote! {\n    0 #( + self.#i.heap_size() )*\n}\n#     }\n# }\n```","links":{"`proc_macro2::TokenStream`":"21:859:230","`proc_macro::TokenStream`":"20:2603:230","`format_ident!`":"0:37:2224"},"attrs":["#[cfg(doc)]","#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! quote {\n    ($($tt:tt)*) => { ... };\n}"},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[121,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:105:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11822:33414":{"id":"2:11822:33414","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11831:6993":{"id":"2:11831:6993","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:2276":{"id":"0:80:2276","crate_id":0,"name":"into_token_stream","span":{"filename":"src/to_tokens.rs","begin":[69,4],"end":[74,5]},"visibility":"default","docs":"Convert `self` directly into a `TokenStream` object.\n\nThis method is implicitly implemented using `to_tokens`, and acts as a\nconvenience method for consumers of the `ToTokens` trait.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:364:657":{"id":"0:364:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[85,0],"end":[85,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:33426":{"id":"2:11902:33426","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11521:12537","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::rmatch_indices":"2:11905:33427"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:6641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1898":{"id":"0:47:1898","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[18,4],"end":[20,5]},"visibility":"default","docs":"Span associated with this `IdentFragment`.\n\nIf non-`None`, may be inherited by formatted identifiers.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:864:1899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:33431":{"id":"2:11914:33431","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:33430":{"id":"2:11912:33430","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:26561":{"id":"2:11941:26561","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:34089":{"id":"5:5302:34089","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:2143":{"id":"0:22:2143","crate_id":0,"name":"append","span":{"filename":"src/ext.rs","begin":[60,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["token",{"kind":"generic","inner":"U"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2501:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TokenTree","id":"21:870:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:26716":{"id":"2:11887:26716","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11843:410","str::splitn":"2:11884:26714","self::pattern":"2:11521:12537"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:2916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:12535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:1658":{"id":"0:386:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:33421":{"id":"2:11878:33421","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11521:12537","str::split":"2:11869:24837","prim@char":"1:11843:410","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11881:33422"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:12534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:1658":{"id":"0:105:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:368:657":{"id":"0:368:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1658":{"id":"0:114:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:26564":{"id":"2:11939:26564","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1368","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:34086","5:5288:7043","5:5291:34087","5:5294:34088","5:5302:34089","5:5303:34090","5:5304:2785","5:5305:26563","5:5306:26562"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[86,0],"end":[86,55]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u64"},"items":["0:374:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":["0:380:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u32"},"items":["0:396:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:58:657":{"id":"0:58:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[48,4],"end":[55,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:657":{"id":"0:51:657","crate_id":0,"name":"fmt","span":{"filename":"src/ident_fragment.rs","begin":[28,4],"end":[30,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/ident_fragment.rs","begin":[23,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:39:1657","path":"::ident_fragment"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2679:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["span"],"trait":{"name":"IdentFragment","id":"0:45:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:50:1898","0:51:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:50:1898":{"id":"0:50:1898","crate_id":0,"name":"span","span":{"filename":"src/ident_fragment.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Span","id":"21:864:1899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1658":{"id":"0:88:1658","crate_id":0,"name":"to_tokens","span":{"filename":"src/to_tokens.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tokens",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"TokenStream","id":"21:859:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[139,0],"end":[156,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u16"},"items":["0:394:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/to_tokens.rs","begin":[171,0],"end":[175,1]},"visibility":{"restricted":{"parent":"0:64:1658","path":"::to_tokens"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["into_token_stream","to_token_stream"],"trait":{"name":"ToTokens","id":"0:77:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Group","id":"21:885:2245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:1658"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5305:26563":{"id":"5:5305:26563","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11941:26561"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:2815:2590":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:47291:6583":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4459:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:47536:3298":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11137:3809":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10894:3758":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12850:4238":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10283:6800":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:53497:6122":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:22102:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"20:2573:6328":{"crate_id":20,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:2229:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:8843:7405":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8392:6049":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6425:5780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10612:7347":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2768:2583":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:49854:2881":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:8965:24738":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6829:6495":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7329:4507":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:1707:5157":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13436:4412":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:50848:2916":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:636:3542":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"21:703:1899":{"crate_id":21,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:482:4961":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:10819:7382":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"12:1534:18425":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4195:5238":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:48583:6028":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7956:4512":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2389:4470":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11174:3815":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:52460:6072":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11070:3798":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:46913:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:5417:2812":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:588:7144":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6670:3291":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:11848:1338":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11853:3951":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5730:5658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7309:4506":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13279:4371":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:4749:4542":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:29940:5942":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:506:4972":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:8087:6231":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:54831:6180":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:1575:2635":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8108:7234":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:47687:2814":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10310:6801":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21787:6572":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:6082:3341":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:4689:4540":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:962:7161":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11863:1463":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:5546:3331":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:870:2619":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13572:4439":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:50067:6049":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"9:649:18283":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:2367:4469":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:48720:6036":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:2608:2531":{"crate_id":20,"path":["proc_macro","LexError"],"kind":"struct"},"6:7008:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:689:2531":{"crate_id":21,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:386:19419":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:614:34472":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:153:3222":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:30016:30351":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:48819:2680":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:641:7151":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7592:6190":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7475:6905":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:22432:3404":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:8991:34465":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:48802:2618":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:5741:13081":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:7236:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:1091:6823":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13007:4272":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13478:4418":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:2719:1937":{"crate_id":20,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:48066:2792":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:2616:2619":{"crate_id":20,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:11721:3933":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1684:5147":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4591:5390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11226:6720":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:1751:5912":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10182:3710":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:2142:34238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9644:19456":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:4939:2551":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:4353:2891":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:54701:6174":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"15:175:6803":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3178:2611":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11235:3826":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10641:6695":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"18:574:3522":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:756:2328":{"crate_id":21,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:5669:7396":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7511:4676":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13366:4387":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11842:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:5702:7398":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11214:6903":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:52959:6095":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:7475:2621":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:11184:6279":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:4441:4533":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2861:2596":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47473:30333":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:344:1084":{"crate_id":0,"path":["quote","quote"],"kind":"macro"},"2:1825:2566":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:7276:5899":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:891:6530":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10642:19434":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:6903:6265":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:50513:2913":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:50702:6632":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:20721:7447":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5845:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3444:7233":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:47416:6595":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3279:7257":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13141:4311":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:4222:6887":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:827:18357":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"21:889:1937":{"crate_id":21,"path":["proc_macro2","Delimiter"],"kind":"enum"},"16:5558:19347":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:36:3236":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6489:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11800:3944":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11343:3858":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1586:2631":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:62:13107":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:12638:4170":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4662:7304":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4602:5398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:4373:2697":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7890:6515":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:2557:4477":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:52360:6068":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:5628:6396":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10666:6191":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:11234:6634":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1524:5039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:9820:19531":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"12:834:7159":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10520:3730":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:9894:2918":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1212:6500":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:725:2246":{"crate_id":21,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:4095:7314":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10444:3356":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:50522:2914":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12118:4009":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:2822:2588":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:53127:6100":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12087:4003":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12909:4250":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:2375:5904":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3051:7271":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:1021:6774":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11787:3942":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9018:2371":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:9897:6792":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6816:6492":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9061:3658":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:58912:6187":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:7695:6893":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:7656:7150":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12730:4206":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:50670:6055":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10706:24384":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5723:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13518:4429":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:12355:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:9692:2140":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:1432:6819":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12225:4031":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:5990:3334":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:20471:31981":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:48937:2619":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:21393:2140":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:21539:6565":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:2873:2543":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11841:3950":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:624:34473":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:6089:3279":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:12033:3996":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:219:3238":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:8110:19406":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:1376:2618":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:51457:6681":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1612:3239":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:4460:2313":{"crate_id":5,"path":["alloc","collections","btree_set"],"kind":"module"},"2:3088:2536":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2465:4473":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:568:5012":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13404:4397":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7426:19366":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"9:956:18264":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5597:5582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:49371:7395":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:54041:6159":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:53621:6124":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4574:4536":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:4217:4526":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:6277:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:1720:5161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:1083:6884":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:713:2245":{"crate_id":21,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:8811:6260":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10159:3709":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:939:7158":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"15:214:18446":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:2880:34273":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:9937:2934":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:4081:7084":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4377:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:6313:29557":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:10849:6259":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6200:6448":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4389:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:3195:7268":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8992:23818":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"9:188:18311":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:11761:3939":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8484:2327":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:53339:6119":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:48708:6035":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2942:2602":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:7081:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21808:6575":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12948:4261":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:53385:6120":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10926:3358":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:8752:3642":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5605:5587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:54690:6173":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:48010:2781":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5388:4495":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"13:0:2386":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12896:4244":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7298:6505":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:9071:34452":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7000:2619":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:6463:6899":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:21794:5939":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1547:5049":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:50504:2915":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2217:7216":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3377:12572":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:51110:12542":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8501:6702":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13594:4445":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4364:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3191:30717":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47089:30829":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:7166:19362":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11436:3866":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6510:5835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:1866:2632":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11853:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5508:5543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47082:4665":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:25641:3406":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:9328:19450":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:10128:2920":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:787:34581":{"crate_id":21,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:3978:7298":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:48785:2155":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:487:19420":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"20:2494:2961":{"crate_id":20,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:48852:2681":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:8295:19426":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:1555:18426":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:8418:19430":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:29980:5945":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:52530:6075":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:1552:3267":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:6918:2619":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:847:2327":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11161:3813":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4149:5204":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7319:6506":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:10298:6841":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6534:5845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4886:7352":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:11747:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11490:6723":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6528:6469":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3716:4523":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:5882:2825":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8272:19425":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13459:4413":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11873:3954":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:10696:6232":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12337:3722":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"9:977:4937":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13557:4438":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:2827:2302":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9501:3651":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9805:3733":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:8881:34468":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:48048:2788":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"12:274:6523":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3662:7283":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4820:5497":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:920:18263":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1642:5118":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4736:5457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5533:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11034:3793":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12860:4239":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:1597:2634":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:2198:4861":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1422:6821":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:800:4918":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"20:1813:3508":{"crate_id":20,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:3026:3549":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:4344:3297":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"12:810:6821":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:2916:6794":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:2094:6535":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:21696:5926":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:7141:6551":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:2345:7219":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:9627:19461":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8490:6256":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:6602:29557":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4249:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9671:19468":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4537:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2763:2540":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"7:0:1507":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6109:4561":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10987:6257":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:7679:7180":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:51465:6683":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:609:34471":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:1028:2958":{"crate_id":20,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:1580:5072":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:9013:6268":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:51304:12547":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:4563:12604":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:1832:2327":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9303:3651":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:904:3262":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8898:6264":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2843:2592":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9751:6350":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:22201:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"20:997:230":{"crate_id":20,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:52650:6080":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:51687:7483":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6463:6467":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4317:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11939:3979":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:8141:2682":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"15:193:6808":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12265:4036":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5793:6374":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8146:3642":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:496:2531":{"crate_id":21,"path":["proc_macro2","LexError"],"kind":"struct"},"17:13203:4326":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11315:3848":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2825:4488":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:4034:3267":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:9401:3655":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:595:5027":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:632:6885":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:3568:3239":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22399:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5163:4549":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"16:7980:19371":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11859:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11856:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11861:1461":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2691:2558":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:5391:3275":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2723:2692":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:8956:2867":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:10831:24386":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:51132:6652":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:47343:6585":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:6941:3250":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:6924:6543":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:1927:7200":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"9:19:18331":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:699:6338":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10360:6354":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9031:34460":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:2458:2140":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13214:4327":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:3010:18490":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:54664:6171":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4267:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2736:2559":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:21758:30375":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:50830:2920":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:7516:31988":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4837:7344":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:9024:2868":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4499:5343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:8080:2780":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"12:2069:7162":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:0:2391":{"crate_id":11,"path":["adler"],"kind":"module"},"2:21130:7450":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12630:4169":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:47626:2808":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"12:1065:34371":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:51481:6060":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:11345:2934":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10752:3749":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:6610:6825":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2680:2560":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12964:4264":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4485:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5453:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4645:5415":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:47276:6581":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11997:3991":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:50634:2928":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:4491:7336":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:2677:2957":{"crate_id":20,"path":["proc_macro","LineColumn"],"kind":"struct"},"6:4608:5401":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12324:3318":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:53080:6099":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:22069:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:558:7133":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"9:622:18282":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:534:6372":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:9020:2372":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9831:6788":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:47001:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:420:3595":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:11535:6340":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7613:3356":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6298:6453":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9193:34463":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:46796:2614":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"20:650:2963":{"crate_id":20,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:7699:29055":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:21486:6564":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3389:12576":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:5743:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:3206:2562":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:9515:3313":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11685:3368":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12176:4018":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12291:4038":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6519:5838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:51290:6665":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:54183:6160":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:579:5017":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"9:505:18406":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12934:4258":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"12:0:2392":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:1771:6779":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:8441:19431":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11734:3677":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:494:4967":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:679:7153":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:6513:3287":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:7939:24713":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:21681:30369":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:8737:31461":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:51445:6678":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:6533:3346":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9176:6830":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11893:3955":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:1601:5086":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:6350:2782":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:9702:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6690:4502":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5737:6410":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3501:2618":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50794:6638":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:9279:12626":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13527:4433":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"15:0:2394":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:39874:6579":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:47333:6584":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"9:676:18269":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:12103:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11300:3842":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1674:5141":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:11541:12535":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8231:7312":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:51469:6684":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12781:4222":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:590:3531":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:29757:7285":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:7266:24714":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6704:4609":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:3566:4519":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:796:1899":{"crate_id":21,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:6354:7399":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6440:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7783:3588":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7847:4724":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6137:6443":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:11865:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1708:2635":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:52591:6077":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10810:4934":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:52512:6074":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:2663:1899":{"crate_id":20,"path":["proc_macro","Span"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:11248:3362":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:9968:6829":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2831:3328":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"12:60:6813":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:2874:34272":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:51453:6680":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:393:6815":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13158:4315":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13374:4390":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:355:7141":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4666:7307":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:54541:6165":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"12:751:3262":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:22300:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"18:531:6331":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13354:4384":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12046:3998":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7497:4500":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3125:24208":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10796:3751":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7288:6504":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3342:3267":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6321:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:7112:30333":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9553:3658":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10875:3755":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:9483:3308":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"20:369:34512":{"crate_id":20,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"5:6484:3275":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:10806:6893":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1692:5148":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11125:3806":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46937:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:1065:7162":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:562:3507":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:690:6337":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9350:3629":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"12:2184:4858":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:3765:7284":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:47503:7202":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:20880:3402":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4356:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2784:2582":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"14:31:6877":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:10087:2923":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:5447:19345":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1051:6500":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:8941:6763":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:6279:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4299:2890":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10774:3717":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:6963:2619":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:20719:2140":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:12313:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9160:31003":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:1931:6782":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11864:1460":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:54579:6166":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:54675:6172":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:5551:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:782:6320":{"crate_id":21,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:50030:6623":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3970:7296":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10949:3765":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:8056:4736":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:50542:2925":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:3943:2618":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5886:5712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5233:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:7253:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:9110:24497":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:13100:4297":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7435:4673":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10193:7381":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:53415:6121":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:2293:2247":{"crate_id":20,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:9012:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:47646:2810":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:481:6329":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3908:7291":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12485:4056":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:4150:2557":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9885:19532":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11857:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6359:6463":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10921:3759":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:7051:2795":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12617:4162":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2857:2595":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8875:7407":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:11145:6714":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11844:1480":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"21:909:2247":{"crate_id":21,"path":["proc_macro2","Punct"],"kind":"struct"},"6:6339:5752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:20405:3530":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47617:2800":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13393:4396":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:864:3247":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:51253:6664":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:4622:7346":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3172:2609":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4547:7293":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:7148:2637":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:54754:6177":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"14:215:6520":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:7788:6832":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:3263:4517":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6676:4501":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47319:6021":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2849:2593":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:3098:34293":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11014:3783":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:48600:7280":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12695:4205":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:48058:2790":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1071:34270":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:1228:7163":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:3640:2619":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8935:23871":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:21592:5919":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:21645:5922":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:48794:2327":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:51034:6581":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:8055:19408":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:12189:12624":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2498:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:48566:6026":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:2613:7261":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:8014:4665":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47595:2807":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:2022:34484":{"crate_id":20,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:8415:6251":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3197:7269":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:2765:2246":{"crate_id":20,"path":["proc_macro","Literal"],"kind":"struct"},"2:52490:6073":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4525:5357":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50930:6644":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8269:5752":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:47827:2823":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:11546:12533":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:54769:6178":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9446:6776":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:8951:34467":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:1636:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:50289:2942":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8291:6238":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:2564:2961":{"crate_id":20,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:4284:5281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:20473:31985":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4222:5250":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7672:6692":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:3249:6796":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11748:3938":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:54716:6175":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:300:6526":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:47566:2797":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5702:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7357:4669":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4257:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11106:3805":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9382:3653":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:50453:6826":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:6066:3318":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:47636:2809":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10932:3359":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:6503:3286":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9857:19514":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:50077:6627":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:52428:6071":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:48810:2619":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2921:2598":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4585:5387":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46979:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:4519:4534":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11128:3360":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:5578:5580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:353:3228":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5949:6438":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:54371:6162":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:8212:19423":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:1962:6785":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47655:2811":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:9362:3658":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4663:5424":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4304:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:564:3529":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4296:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:20852:7446":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9364:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:5203:3634":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:4234:3269":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7603:4685":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:4262:4527":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:123:13162":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:7848:24206":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5525:6388":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:10037:6904":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7372:34389":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:22234:2911":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:4826:5500":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:48921:2327":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7970:6519":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:5891:3331":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9458:19467":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:52983:6096":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:7097:2638":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:4559:5765":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"21:824:2246":{"crate_id":21,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"5:784:3242":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4210:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:242:34464":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10973:3779":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:202:12554":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9681:3520":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4087:6839":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:5368:7381":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10434:6364":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"14:7:6877":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:47748:2818":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2749:4485":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:50592:2930":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:1518:18424":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:2213:3292":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:931:2231":{"crate_id":21,"path":["proc_macro2","Ident"],"kind":"struct"},"6:4136:5194":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11368:3862":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:47764:2819":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:4707:7155":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12060:3999":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"14:165:18431":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6564:5860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:3119:2632":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4339:5310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4635:4538":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:6601:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4385:4531":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6865:6499":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:5751:5664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:50605:2926":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2411:4471":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:2993:4513":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:6169:3331":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11594:3913":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:50579:2797":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3665:7282":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11330:3854":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:20418:31944":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:2605:4479":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:1396:3507":{"crate_id":20,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:12756:4212":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:48033:2784":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10405:7264":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:3977:31001":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5792:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6517:6468":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8767:6258":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4708:5445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6217:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:9500:3309":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2371:7229":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:47788:2804":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:140:3500":{"crate_id":20,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"14:221:4812":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11259:3830":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:822:7158":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:8137:19421":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5694:5643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:0:2396":{"crate_id":17,"path":["object"],"kind":"module"},"1:4976:29535":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4747:5463":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:9230:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:7006:2619":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12361:4054":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10506:3727":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:6909:2572":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5615:5594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10854:19436":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:8165:6834":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12134:4010":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"7:79:18255":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2459:12618":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11813:3946":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11307:3364":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4125:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1728:5165":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"12:1859:2631":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:480:3220":{"crate_id":20,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:9293:19451":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:6519:7404":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2832:2589":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:44:4864":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:7158:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4807:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:5219:3635":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:51147:6658":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:646:7152":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"20:2524:6325":{"crate_id":20,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:532:4992":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6877:19361":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:6:666":{"crate_id":5,"path":["alloc","format"],"kind":"macro"},"2:2773:2580":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7929:19369":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2842:4489":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2790:2581":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1366:2327":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:9401:3305":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11054:3794":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4631:5410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9577:3664":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"20:966:3221":{"crate_id":20,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3922:7293":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:47608:2799":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:1257:6884":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11866:1517":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2631:4480":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:3601:7281":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:671:6761":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5878:18461":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9223:19441":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:47461:6599":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:8955:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"20:2714:2245":{"crate_id":20,"path":["proc_macro","Group"],"kind":"struct"},"6:4277:5278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:52382:6069":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:878:6529":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10332:19562":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:30002:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10121:3707":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1849:6831":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:11482:2537":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:562:5009":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:7472:2620":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:4144:4525":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13148:4312":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"12:1044:18421":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11547:3907":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11862:1462":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10670:6369":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13327:4372":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:2603:230":{"crate_id":20,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:8432:7368":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:3854:4524":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51725:6690":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11038:6270":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:3699:3239":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:20871:2140":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8152:2918":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:22831:3405":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:47678:2813":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:51477:6686":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:119:13161":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:9022:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7388:19364":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9317:6770":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:3157:7266":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:534:3321":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10625:3745":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10399:7266":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:21669:6570":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2210:7215":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5871:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3858:7289":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:766:23201":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6161:19355":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:113:6755":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:50744:2922":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1649:5122":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:870:2136":{"crate_id":21,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:2065:6533":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"20:2612:2952":{"crate_id":20,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:11288:3839":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1713:5158":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:247:34466":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2535:4476":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6949:34247":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:52761:6089":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9183:6768":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11855:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"14:187:18438":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:6203:3239":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:621:6892":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:6818:3362":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"5:1055:6822":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"9:382:18366":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:8393:19429":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:8774:3644":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"9:586:4866":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:505:3255":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4621:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:20452:31983":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:12164:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:2282:4459":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:4721:4541":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:50684:6630":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:1614:5093":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11515:3900":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:48649:30368":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7252:3282":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:21287:2912":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:762:2636":{"crate_id":21,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"1:1568:2619":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12972:4266":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:7662:6691":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:0:2397":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:52613:6078":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10321:3712":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:53158:6101":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:12137:30925":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:4289:3296":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4544:5365":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6210:6449":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:51461:6682":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:105:6318":{"crate_id":21,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:9601:3666":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:7098:6545":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12164:4016":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9021:6765":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:7810:6696":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6842:6498":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:49500:2370":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:47355:6586":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:1788:6828":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4:995":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2300:4461":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:5319:7378":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4786:4543":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9873:6791":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:1643:5911":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:9064:6269":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:967:6773":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:5815:19349":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:6567:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9155:6767":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:679:6319":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:1672:1067":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"12:1836:2619":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"12:861:7161":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:5996:19351":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9658:6787":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7469:4509":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7265:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:50614:2929":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7872:6512":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:54739:6176":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11841:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4327:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9778:6352":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12514:4076":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11867:1104":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10682:3747":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:5422:7382":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9738:6348":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:4297:4528":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:6434:5783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9791:6353":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:21742:30377":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11370:7282":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3236:7265":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10088:3704":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:7800:6191":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5851:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11356:3859":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:4064:3267":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:11294:6640":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11391:7284":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:22168:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7237:4667":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:956:7160":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11828:3949":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12674:4200":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1511:5033":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:1744:5170":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11774:3941":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:2939:2601":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4778:5473":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:8368:19428":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12322:4044":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:6351:3239":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7793:6695":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:8241:19424":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:5165:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1847:6830":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10420:3721":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9433:19449":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:2802:2585":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:38661:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:4327:4529":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:9845:2327":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:8561:3637":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1592:2632":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11199:6718":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3989:31000":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3872:3262":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:4728:31901":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7934:29538":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:9108:6766":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11447:6280":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:11854:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13047:4282":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:1580:2633":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2793:4487":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"12:98:6522":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3956:7294":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2261:18462":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4310:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7587:7123":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7557:6507":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:51018:6650":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:5433:6379":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:500:4969":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8096:6232":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:1531:5041":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:2319:2231":{"crate_id":20,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"7:32:18248":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:7464:3507":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8213:6697":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8047:7232":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:12550:4107":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8735:6841":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:50980:6646":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8265:7345":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39834:4860":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11500:3895":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2794:2541":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:7575:2140":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:51338:6674":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7567:19367":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:48929:2618":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11087:3800":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11199:3817":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7211:4666":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4057:6837":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7267:6501":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"9:111:18276":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:20665:7455":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9118:34451":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:8494:3634":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6735:19358":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:4818:3267":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:3457:3553":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4189:5237":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3680:2635":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:47442:6022":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:52668:6081":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4447:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:49493:2373":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:4662:4539":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:685:230":{"crate_id":21,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"16:2683:4482":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9539:19457":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:1872:2634":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:21613:5921":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:6865:2165":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:11592:12544":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7856:6898":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13492:4420":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11528:3902":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"20:0:1055":{"crate_id":20,"path":["proc_macro"],"kind":"module"},"17:11559:3909":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13082:4293":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:52813:6091":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"9:896:18262":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:38678:3530":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"4:0:2387":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:3599:4520":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13168:4318":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4471:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:54617:6167":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12211:4030":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6284:4511":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:4264:3267":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1571:3262":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:2694:2958":{"crate_id":20,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:8475:19407":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1556:5055":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9987:6848":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:11151:6844":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"13:108:34372":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12874:4240":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8753:6257":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:652:3522":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2853:2594":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10394:6363":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3966:7295":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3151:2607":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:6114:24667":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:864:1899":{"crate_id":21,"path":["proc_macro2","Span"],"kind":"struct"},"5:3127:2633":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:5661:32020":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:6252:6452":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11617:3916":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:50712:3642":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1701:5154":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12816:4226":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:47380:6581":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7044:34419":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:10688:2933":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:1606:5088":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11497:6723":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:587:5022":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2778:2579":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:7641:7147":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:20433:31944":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"20:183:34514":{"crate_id":20,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:6303:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:10210:29364":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:755:6347":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:7047:2796":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8139:2821":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:727:3546":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:47778:2820":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2866:2597":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7053:2629":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:50990:6647":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4427:5337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:7176:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:50696:6631":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:51473:6685":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4771:5470":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4239:7316":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:50532:2924":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"12:632:2327":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4639:5414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:50270:6053":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:46835:2613":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:5235:4550":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5485:7383":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5725:2551":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9631:6786":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:4888:4546":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10654:6713":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:21395:7448":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11271:3831":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:51000:6648":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47282:6582":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:51161:6661":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13134:4310":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11858:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10455:3725":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2930:18489":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:925:6819":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2908:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"10:0:2390":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:582:3530":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2837:2591":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1443:6820":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4788:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:8981:6764":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6567:6481":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:50285:6629":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13071:4289":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:11814:7154":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:51521:6687":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"9:33:18332":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:1737:12786":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6345:4499":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1586:5074":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:9026:2869":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7576:6189":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:8596:3638":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5703:6404":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5614:6395":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:547:5001":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6971:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2539:3325":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:14:3017":{"crate_id":21,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:47586:2798":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12797:4225":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:961:3239":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:950:7159":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3932:3267":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10466:6366":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:5780:6413":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21135:7473":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3864:7288":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:22333:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:1404:6529":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4716:5450":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:1085:18422":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:2205:2629":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7864:3499":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:9371:6766":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5514:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4550:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:9976:2919":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7235:2635":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:8162:19422":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"21:719:2231":{"crate_id":21,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:1894:14494":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:9376:3354":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:719:3543":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:22135:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6743:19359":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7249:19363":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5811:3334":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:11232:6721":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:108:34582":{"crate_id":21,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:8176:7278":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"12:725:6529":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"12:1120:18423":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1538:5044":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11247:3829":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:2604:5908":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3166:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:6645:3279":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"12:1840:3262":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:54635:6168":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10385:6362":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:53181:6102":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12955:4263":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51315:6666":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4290:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:12116:12623":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:762:2635":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"18:660:6757":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:54644:6169":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:3093:2631":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:1786:6827":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4506:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11847:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:20768:3402":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:8978:6265":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6385:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5664:6402":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5510:6385":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"14:40:2231":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:4357:4530":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:12436:2571":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:6003:7485":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10546:19432":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3623:7167":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4561:5375":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8225:7317":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3086:2327":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:52631:6079":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12278:4037":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:736:23200":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8239:6834":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:29974:5943":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:7230:5887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10233:19561":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"22:0:2526":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:50776:6637":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4726:5456":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:9371:6832":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8247:6237":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:7944:7262":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:49514:2372":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1568:5064":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2549:3309":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"13:220:4857":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9102:6705":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6376:19356":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:8510:3635":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2749:2694":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"21:661:3499":{"crate_id":21,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:47799:2821":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:53651:6125":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:8139:2565":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:48685:6697":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:915:2303":{"crate_id":21,"path":["proc_macro2","Spacing"],"kind":"enum"},"6:4162:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12980:4268":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4669:5425":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8171:6836":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11330:7283":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10631:6706":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13031:4280":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:47402:6593":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"14:160:6877":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13024:4279":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"12:738:6530":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6738:7443":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:1029:7163":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10676:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13506:4427":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8912:24715":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6034:19353":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13192:4322":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13221:4329":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9526:6778":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:3369:6235":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:54495:6164":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6070:4558":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2361:7224":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:47707:2815":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:881:2327":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11825:24382":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4615:5403":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2509:4475":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:836:3245":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"1:11075:6269":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2991:2603":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:920:6821":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"12:1845:2635":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:53261:6103":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10476:19563":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:652:13517":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4654:5418":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2679:2240":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5737:5659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9700:19473":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:707:6340":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:4817:4544":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:5907:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:5553:3332":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:7224:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12884:4241":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"21:936:2246":{"crate_id":21,"path":["proc_macro2","Literal"],"kind":"struct"},"12:1628:3234":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:48861:2944":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13231:4334":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:6917:3348":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:51178:6662":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:0:2395":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11056:6278":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8970:24723":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:6276:2619":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11576:3912":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:7299:5902":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13413:4399":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:929:6820":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:6979:6544":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7289:5900":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10915:3357":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7543:4498":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11217:3825":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"12:1003:7162":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:47073:6017":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6171:4563":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:10156:2921":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:5539:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:7218:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:52715:6082":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2320:4467":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6052:19354":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6146:6444":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3119:29339":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12148:4012":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2684:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:474:4956":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47664:6604":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:5354:7380":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"12:985:6500":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3435:24294":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:3132:34288":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:644:3522":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9475:6777":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:53835:6127":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:10142:2916":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:49507:2371":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6419:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:14:2504":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:52907:6093":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12198:4029":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:4849:4545":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5596:4552":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3159:7267":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8324:7353":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:8129:2807":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"12:1852:2633":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:30180:30357":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6593:6482":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12237:4032":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:4606:4537":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:48629:1899":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5745:3333":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11974:3990":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:6582:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:47103:6018":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5482:5528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:1824:6829":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4371:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10123:7385":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"21:885:2245":{"crate_id":21,"path":["proc_macro2","Group"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"12:815:7157":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:2232:2328":{"crate_id":20,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"6:4106:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11860:1464":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:3387:7087":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11849:1368":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13176:4319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11951:3981":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:914:2635":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:9869:2618":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4108:6840":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10245:6798":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:521:23202":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:52406:6070":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:47489:6600":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:2739:2247":{"crate_id":20,"path":["proc_macro","Punct"],"kind":"struct"},"1:4079:6838":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:7479:2794":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1506:5031":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:53:3214":{"crate_id":20,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"6:526:4989":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:7259:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:933:7157":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11661:3924":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:12381:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:0:2389":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8958:29561":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10721:3748":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:965:2619":{"crate_id":21,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:51226:6663":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2806:2584":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:8666:3640":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:2705:4483":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:7532:3352":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:54433:6163":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:21629:6566":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"20:1201:193":{"crate_id":20,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:47739:2817":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:2884:34271":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:288:2278":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7659:19368":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:6474:2724":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:491:6330":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"20:107:34558":{"crate_id":20,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:48024:2782":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:51695:6063":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1517:5036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:5143:12526":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:5494:19346":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5635:5610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:554:5004":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4201:5240":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10708:6370":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"12:1138:6884":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9691:19474":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:9014:2370":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10997:2231":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:4419:7321":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6619:4600":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:6548:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8805:2619":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11149:3810":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"0:345:1897":{"crate_id":0,"path":["quote","quote_spanned"],"kind":"macro"},"16:5981:6441":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4693:5439":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7065:2630":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4720:3329":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:2936:2600":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:2162:6540":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8830:6261":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:573:5014":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"12:697:6820":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:4743:7303":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4397:7320":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2657:4481":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"20:218:34556":{"crate_id":20,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:11843:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7637:6508":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13580:4442":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6330:4566":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5139:12525":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:8711:657":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"6:6402:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:9346:1338":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:6875:6902":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:4413:4532":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"20:2744:2303":{"crate_id":20,"path":["proc_macro","Spacing"],"kind":"enum"},"2:11059:2904":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"12:659:2619":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:4108:6553":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2868:4490":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12768:4217":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5472:4496":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:5184:18460":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7093:4647":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:47546:7086":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:11310:6643":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:39870:29055":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6287:5724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:4625:7320":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"21:859:230":{"crate_id":21,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:10999:6258":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5682:5636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6316:6461":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"21:342:2531":{"crate_id":21,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:6472:4589":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:36:4863":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2592:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:11271:6639":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"12:2053:6500":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9947:19533":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"9:709:6049":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7059:2680":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:11809:24718":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:3611:3499":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"20:2699:2136":{"crate_id":20,"path":["proc_macro","TokenTree"],"kind":"enum"},"5:2876:5907":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13039:4281":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10257:6799":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12008:3993":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:47096:2890":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:47716:2802":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:9284:6560":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12349:4047":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5782:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8797:6843":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:53575:6123":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12307:4040":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:4103:2327":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7942:19370":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7117:34434":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6654:4604":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13184:4321":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:8245:12534":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:6563:2806":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:2343:5914":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13536:4435":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:488:4964":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"12:2190:34370":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6496:19357":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:5676:7397":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13114:4304":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7343:4508":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:21820:7286":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6059:34422":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:8631:3639":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:1903:19485":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:10049:2922":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7396:19365":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:11075:2906":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:9274:19443":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4437:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:860:2618":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12748:4211":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10207:19552":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:863:18261":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"12:777:3233":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:6458:5795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10108:19502":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:2476:7260":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4112:5177":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9909:3670":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:10528:6802":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"20:246:34520":{"crate_id":20,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:5670:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:21299:31948":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:7247:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"0:0:1084":{"crate_id":0,"path":["quote"],"kind":"module"},"5:273:3239":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"0:37:2224":{"crate_id":0,"path":["quote","format_ident"],"kind":"macro"},"17:12251:4033":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8474:6699":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10139:3658":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2306:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:58933:6188":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:8781:6259":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2359:7223":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:3125:6795":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3916:7292":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10822:19435":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"12:669:6819":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9712:3667":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:20878:7451":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2798:2587":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6270:4494":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1660:5130":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6186:4493":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7128:6548":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8923:7131":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:52561:6076":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:2260:2245":{"crate_id":20,"path":["proc_macro","bridge","Group"],"kind":"struct"},"16:5839:19350":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:51043:6586":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4828:7343":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:5494:2801":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12073:4000":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5709:5645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:0:1360":{"crate_id":1,"path":["std"],"kind":"module"},"5:5615:3262":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3245:2635":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:48672:6621":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2810:2586":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5305:7377":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5374:4492":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:8871:6762":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6668:4606":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:52791:6090":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13340:4378":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:5541:6390":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10845:3722":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:9244:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6332:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5761:19348":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:9016:2373":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7025:6845":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11639:3923":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:2727:4484":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:7513:3350":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12926:4255":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8911:34462":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9764:6351":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13126:4307":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3426:2867":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10350:3717":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:21704:5927":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:6555:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"12:2080:7163":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2973:2612":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"20:2550:2962":{"crate_id":20,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:6017:19352":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10296:19539":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4345:5313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5411:4497":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:51737:2570":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:11526:12534":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"14:0:2393":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4683:5433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6985:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6466:7402":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:4399:2892":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:51025:6593":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12836:4234":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3243:2563":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:8140:2564":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12609:4159":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"18:538:3527":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:50894:6642":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7180:6886":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:5053:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10374:6358":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:20690:7445":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10221:6797":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:57202:7482":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4575:5381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9083:6270":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:47386:12611":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"20:435:3218":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:2341:4468":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:50038:6625":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3894:7290":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:1898:6894":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10402:7268":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:96:6752":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:11089:12538":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4755:5465":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:3632:4521":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:484:3320":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2578:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:11868:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:5482:5673":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:11521:12537":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:1973:7167":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5460:6383":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:53005:6097":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10014:2935":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:815:2231":{"crate_id":21,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"5:5814:3267":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6781:19360":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11909:3960":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:20450:31986":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8220:6698":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:10655:2932":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11606:3915":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:8732:31987":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8159:6646":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11536:3904":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:599:34469":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:9250:19442":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:30074:30350":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:39883:2693":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7483:4510":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:1760:5915":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9422:6775":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"12:2178:2245":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:47423:12612":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:2252:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2995:2604":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:51009:6649":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:2369:2246":{"crate_id":20,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:20639:7454":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:5759:5666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:10636:6708":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5122:4548":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:2055:3255":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:681:6334":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12022:3995":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11186:3816":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:20727:7449":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:4024:12522":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:20602:7453":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:20847:2140":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:51449:6679":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:2504:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:541:4998":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:2894:18488":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:2232:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:54655:6170":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10490:3726":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4675:5428":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9722:3668":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:22366:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:3902:3239":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"21:773:230":{"crate_id":21,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"20:1071:1899":{"crate_id":20,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:4311:7313":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10583:19433":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:638:7149":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:4921:4547":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:8526:3636":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:51358:6676":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9165:34453":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:50726:2918":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10270:19540":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:515:3525":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:646:2618":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3506:3262":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:1919:5918":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4814:5495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:50553:2931":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6719:34390":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2495:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:48017:6612":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9283:19452":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:3402:4518":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:47303:30382":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:47409:6594":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:6933:3262":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:1564:2327":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:592:18281":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:1074:7163":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:2417:2136":{"crate_id":20,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"17:10062:6793":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13059:4288":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10608:3609":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:53685:6126":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:8339:19427":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:22267:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:4297:3269":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:80:6751":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:4159:7315":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6312:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:9007:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13091:4296":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:47363:12610":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:4561:5767":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:9488:19458":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7135:34411":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2579:4478":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:20678:2140":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:1463:6824":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9930:3672":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:50624:2927":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6123:4491":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:6390:3345":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3122:24202":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:51325:6670":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:51533:12873":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:8796:3645":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:2760:2231":{"crate_id":20,"path":["proc_macro","Ident"],"kind":"struct"},"5:5095:3239":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12739:4210":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:54293:6161":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:119:3224":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2433:4472":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4216:5247":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10445:3722":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:6656:2777":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:11465:6281":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:8822:34454":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:10686:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:50046:6626":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4664:7306":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46882:2605":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:11485:3891":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8859:7406":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13382:4391":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"8:0:2388":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11850:1446":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46957:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:4630:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:361:7142":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:1243:7162":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7825:4723":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10341:3355":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7909:6518":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:48039:2786":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6157:3262":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11708:3930":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:9339:6771":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:8701:3641":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:6362:5770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3451:7252":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:6805:2780":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:387:6814":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:4227:6888":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11846:1029":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:1959:3499":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"21:693:2958":{"crate_id":21,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:8789:2327":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5520:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4569:5379":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:507:3522":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9864:6618":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9844:19501":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4234:5259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:53029:6098":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3488:2327":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10497:19564":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:7169:6552":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11684:3929":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10403:3749":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:3161:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2771:4486":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21721:30335":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:47023:2606":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:3188:4516":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:54792:6179":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2932:2599":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47813:2822":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:52861:6092":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:52937:6094":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3312:2786":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:47729:2816":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6991:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1387:2619":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12103:4005":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:320:3226":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2573:6897":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:2487:4474":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:10170:2917":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11019:6060":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:5490:5530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:3153:2634":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5592:5581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:50085:6628":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:52316:6066":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:2154:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5339:7379":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4516:5352":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:5007:29535":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:50876:6641":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:3689:4522":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8342:6248":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:52336:6067":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:50948:6645":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46897:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:0:2036":{"crate_id":21,"path":["proc_macro2"],"kind":"module"},"21:806:2245":{"crate_id":21,"path":["proc_macro2","imp","Group"],"kind":"enum"},"12:853:7160":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3234:7264":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1413:6530":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4408:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4557:5763":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5564:5569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:4545:4535":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:47055:2608":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9263:6769":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6241:6451":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:47696:2824":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5544:5556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4241:5263":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"20:406:7083":{"crate_id":20,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:6963:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10075:19503":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7278:4505":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6790:4614":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11011:24380":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"}},"external_crates":{"20":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.52/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}