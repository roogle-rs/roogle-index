{"root":"0:0:1769","crate_version":"0.3.27","includes_private":false,"index":{"2:11827:27334":{"id":"2:11827:27334","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11088:8119"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:24282":{"id":"2:11830:24282","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11860:1463"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:28292":{"id":"2:11844:28292","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:31029":{"id":"2:11904:31029","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11520:8115","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::match_indices":"2:11901:31028"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76-29:27:1686":{"id":"0:76-29:27:1686","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1686","glob":false}},"2:11847:28846":{"id":"2:11847:28846","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11846:28747"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:8117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81-21:6076:1690":{"id":"0:81-21:6076:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6076:1690","glob":false}},"0:51-31:136:1738":{"id":"0:51-31:136:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1738","glob":false}},"0:38-21:5130:922":{"id":"0:38-21:5130:922","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5130:922","glob":false}},"2:11933:31039":{"id":"2:11933:31039","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5301:31695":{"id":"5:5301:31695","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67-20:97:1678":{"id":"0:67-20:97:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1678","glob":false}},"2:11915:31035":{"id":"2:11915:31035","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11545:8110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39-21:4573:1683":{"id":"0:39-21:4573:1683","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4573:1683","glob":false}},"0:5-20:32:1672":{"id":"0:5-20:32:1672","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1672","glob":false}},"2:11824:31018":{"id":"2:11824:31018","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11822:31017"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45-21:5132:1706":{"id":"0:45-21:5132:1706","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5132:1706","glob":false}},"2:11833:24279":{"id":"2:11833:24279","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:31021":{"id":"2:11840:31021","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11849:1367","crate::ops::IndexMut":"2:2996:2530","str::slice_unchecked":"2:11839:31020"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:24304":{"id":"2:11841:24304","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11842:24305"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:31027":{"id":"2:11898:31027","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11520:8115","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11895:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:8133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55-31:125:1742":{"id":"0:55-31:125:1742","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1742","glob":false}},"2:11857:24323":{"id":"2:11857:24323","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:31025":{"id":"2:11889:31025","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1367","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:31692","5:5287:2635","5:5290:31693","5:5293:31694","5:5301:31695","5:5302:31696","5:5303:2147","5:5304:24008","5:5305:24009"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59-2:12102:135":{"id":"0:59-2:12102:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:12102:135","glob":false}},"0:69-21:424:1674":{"id":"0:69-21:424:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1674","glob":false}},"2:11850:28855":{"id":"2:11850:28855","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:8116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:31017":{"id":"2:11822:31017","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11839:31020":{"id":"2:11839:31020","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11849:1367","str::slice_mut_unchecked":"2:11840:31021","crate::ops::Index":"2:2992:2529"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:15-25:9:1682":{"id":"0:15-25:9:1682","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1682","glob":false}},"2:11913:31033":{"id":"2:11913:31033","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:31034":{"id":"2:11914:31034","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:24007":{"id":"2:11938:24007","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:19644":{"id":"2:11860:19644","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:24012":{"id":"2:11941:24012","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:2635":{"id":"5:5287:2635","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:31042":{"id":"2:11945:31042","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:31042"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:8127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:31694":{"id":"5:5293:31694","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43-27:0:1703":{"id":"0:43-27:0:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1703","glob":false}},"0:28-22:7:1695":{"id":"0:28-22:7:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1695","glob":false}},"0:74-21:3663:1680":{"id":"0:74-21:3663:1680","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3663:1680","glob":false}},"5:5303:2147":{"id":"5:5303:2147","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65-21:1293:1676":{"id":"0:65-21:1293:1676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1293:1676","glob":false}},"0:78-29:25:1688":{"id":"0:78-29:25:1688","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1688","glob":false}},"0:83-21:6071:1692":{"id":"0:83-21:6071:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6071:1692","glob":false}},"5:5305:24009":{"id":"5:5305:24009","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11941:24012"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:31019":{"id":"2:11828:31019","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:2460":{"id":"2:11944:2460","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:2460"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:2461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33-21:20:1031":{"id":"0:33-21:20:1031","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1031","glob":false}},"2:11831:24278":{"id":"2:11831:24278","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:31041":{"id":"2:11942:31041","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:31041"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10-20:68:1677":{"id":"0:10-20:68:1677","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1677","glob":false}},"0:53-31:102:1740":{"id":"0:53-31:102:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1740","glob":false}},"2:11921:20570":{"id":"2:11921:20570","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:28854":{"id":"2:11843:28854","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:8122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25-21:6071:1692":{"id":"0:25-21:6071:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6071:1692","glob":false}},"5:5304:24008":{"id":"5:5304:24008","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11940:24011"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:24010":{"id":"2:11939:24010","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35-21:6626:1700":{"id":"0:35-21:6626:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6626:1700","glob":false}},"2:11880:31024":{"id":"2:11880:31024","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11520:8115","str::split":"2:11868:2334","prim@char":"1:11843:410","str::split_terminator":"2:11877:31023"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:8134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58-21:104:693":{"id":"0:58-21:104:693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:693","glob":false}},"0:34-21:6627:1699":{"id":"0:34-21:6627:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6627:1699","glob":false}},"2:11883:24317":{"id":"2:11883:24317","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115","str::rsplitn":"2:11886:24319"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:8102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:31696":{"id":"5:5302:31696","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2303","`String`":"5:7157:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2303","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11819:798":{"id":"2:11819:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:24313":{"id":"2:11871:24313","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11344:8104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40-21:1293:1676":{"id":"0:40-21:1293:1676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1293:1676","glob":false}},"2:11940:24011":{"id":"2:11940:24011","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77-29:17:1687":{"id":"0:77-29:17:1687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1687","glob":false}},"0:71-21:5037:1684":{"id":"0:71-21:5037:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:5037:1684","glob":false}},"2:11854:24322":{"id":"2:11854:24322","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16-21:5037:1684":{"id":"0:16-21:5037:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5037:1684","glob":false}},"2:11918:31036":{"id":"2:11918:31036","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13-21:2759:1679":{"id":"0:13-21:2759:1679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2759:1679","glob":false}},"5:5286:31692":{"id":"5:5286:31692","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2303","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2303","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:2533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:31028":{"id":"2:11901:31028","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11520:8115","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::rmatch_indices":"2:11904:31029"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:8130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70-21:589:1675":{"id":"0:70-21:589:1675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1675","glob":false}},"0:79-29:20:1689":{"id":"0:79-29:20:1689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1689","glob":false}},"0:4-2:12102:135":{"id":"0:4-2:12102:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:12102:135","glob":false}},"2:11892:31026":{"id":"2:11892:31026","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21-29:20:1689":{"id":"0:21-29:20:1689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1689","glob":false}},"2:11842:24305":{"id":"2:11842:24305","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11841:24304"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8-21:589:1675":{"id":"0:8-21:589:1675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1675","glob":false}},"0:62-21:4573:1683":{"id":"0:62-21:4573:1683","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4573:1683","glob":false}},"2:11907:31030":{"id":"2:11907:31030","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:31031":{"id":"2:11909:31031","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:31016":{"id":"2:11821:31016","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50-31:109:1737":{"id":"0:50-31:109:1737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1737","glob":false}},"0:49-31:68:1736":{"id":"0:49-31:68:1736","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1736","glob":false}},"2:11837:24281":{"id":"2:11837:24281","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:44-21:6099:1705":{"id":"0:44-21:6099:1705","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6099:1705","glob":false}},"0:20-29:25:1688":{"id":"0:20-29:25:1688","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1688","glob":false}},"0:23-21:6076:1690":{"id":"0:23-21:6076:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6076:1690","glob":false}},"2:11835:24280":{"id":"2:11835:24280","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:48-31:65:1735":{"id":"0:48-31:65:1735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1735","glob":false}},"2:11829:310":{"id":"2:11829:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11830:24282","`u8`":"1:11860:1463"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:31023":{"id":"2:11877:31023","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11520:8115","str::split":"2:11868:2334","prim@char":"1:11843:410","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11880:31024"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27-20:131:1694":{"id":"0:27-20:131:1694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1694","glob":false}},"2:11874:24315":{"id":"2:11874:24315","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11520:8115","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split":"2:11868:2334"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:8098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54-31:120:1741":{"id":"0:54-31:120:1741","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1741","glob":false}},"0:31-21:6625:1697":{"id":"0:31-21:6625:1697","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6625:1697","glob":false}},"0:63-25:9:1682":{"id":"0:63-25:9:1682","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1682","glob":false}},"2:11845:2372":{"id":"2:11845:2372","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:31037":{"id":"2:11927:31037","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-21:6058:1693":{"id":"0:84-21:6058:1693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6058:1693","glob":false}},"2:11849:31022":{"id":"2:11849:31022","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1983":{"id":"2:11895:1983","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11520:8115","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11895:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:24324":{"id":"2:11924:24324","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:28747":{"id":"2:11846:28747","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11847:28846"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:8118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:31032":{"id":"2:11911:31032","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52-31:100:1739":{"id":"0:52-31:100:1739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1739","glob":false}},"2:11868:2334":{"id":"2:11868:2334","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11520:8115","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split_whitespace":"2:11846:28747","str::rsplit":"2:11874:24315"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:2634","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26-21:6058:1693":{"id":"0:26-21:6058:1693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6058:1693","glob":false}},"2:11818":{"id":"2:11818","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11083:1367","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11819:798","2:11820:24059","2:11821:31016","2:11822:31017","2:11824:31018","2:11827:27334","2:11828:31019","2:11829:310","2:11830:24282","2:11831:24278","2:11833:24279","2:11835:24280","2:11837:24281","2:11839:31020","2:11840:31021","2:11841:24304","2:11842:24305","2:11843:28854","2:11844:28292","2:11845:2372","2:11846:28747","2:11847:28846","2:11848:2325","2:11849:31022","2:11850:28855","2:11851:24321","2:11854:24322","2:11857:24323","2:11860:19644","2:11864:19645","2:11868:2334","2:11871:24313","2:11874:24315","2:11877:31023","2:11880:31024","2:11883:24317","2:11886:24319","2:11889:31025","2:11892:31026","2:11895:1983","2:11898:31027","2:11901:31028","2:11904:31029","2:11907:31030","2:11909:31031","2:11911:31032","2:11913:31033","2:11914:31034","2:11915:31035","2:11918:31036","2:11921:20570","2:11924:24324","2:11927:31037","2:11930:31038","2:11933:31039","2:11936:31040","2:11938:24007","2:11939:24010","2:11940:24011","2:11941:24012","2:11942:31041","2:11944:2460","2:11945:31042"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:41-21:5078:1701":{"id":"0:41-21:5078:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:5078:1701","glob":false}},"2:11930:31038":{"id":"2:11930:31038","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14-21:3663:1680":{"id":"0:14-21:3663:1680","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3663:1680","glob":false}},"0:24-21:6041:1691":{"id":"0:24-21:6041:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6041:1691","glob":false}},"0:11-20:97:1678":{"id":"0:11-20:97:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1678","glob":false}},"2:11851:24321":{"id":"2:11851:24321","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32-21:37:1698":{"id":"0:32-21:37:1698","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1698","glob":false}},"2:11820:24059":{"id":"2:11820:24059","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:31040":{"id":"2:11936:31040","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11482:126","`FromStr`":"2:11481:2796"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11481:2796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11481:2796","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1048":{"id":"0:56:1048","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58-21:104:693","0:59-2:12102:135","0:60-20:32:1672","0:62-21:4573:1683","0:63-25:9:1682","0:65-21:1293:1676","0:66-20:68:1677","0:67-20:97:1678","0:69-21:424:1674","0:70-21:589:1675","0:71-21:5037:1684","0:73-21:2759:1679","0:74-21:3663:1680","0:76-29:27:1686","0:77-29:17:1687","0:78-29:25:1688","0:79-29:20:1689","0:81-21:6076:1690","0:82-21:6041:1691","0:83-21:6071:1692","0:84-21:6058:1693"],"is_stripped":false}},"0:37-21:104:693":{"id":"0:37-21:104:693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:693","glob":false}},"5:5290:31693":{"id":"5:5290:31693","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82-21:6041:1691":{"id":"0:82-21:6041:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6041:1691","glob":false}},"0:7-21:424:1674":{"id":"0:7-21:424:1674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1674","glob":false}},"2:11848:2325":{"id":"2:11848:2325","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:2351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19-29:17:1687":{"id":"0:19-29:17:1687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1687","glob":false}},"0:0:1769":{"id":"0:0:1769","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5132:1706","crate::executor":"0:46:1580","crate::stream":"21:1293:1676","crate::channel":"27:0:1703","crate::future":"21:104:693","crate::sink":"21:4573:1683"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1580","0:56:1048","0:4-2:12102:135","0:5-20:32:1672","0:7-21:424:1674","0:8-21:589:1675","0:10-20:68:1677","0:11-20:97:1678","0:13-21:2759:1679","0:14-21:3663:1680","0:15-25:9:1682","0:16-21:5037:1684","0:18-29:27:1686","0:19-29:17:1687","0:20-29:25:1688","0:21-29:20:1689","0:23-21:6076:1690","0:24-21:6041:1691","0:25-21:6071:1692","0:26-21:6058:1693","0:27-20:131:1694","0:28-22:7:1695","0:29-21:6628:1696","0:31-21:6625:1697","0:32-21:37:1698","0:33-21:20:1031","0:34-21:6627:1699","0:35-21:6626:1700","0:37-21:104:693","0:38-21:5130:922","0:39-21:4573:1683","0:40-21:1293:1676","0:41-21:5078:1701","0:42-21:57:1702","0:43-27:0:1703","0:44-21:6099:1705","0:45-21:5132:1706"],"is_stripped":false}},"0:60-20:32:1672":{"id":"0:60-20:32:1672","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1672","glob":false}},"0:46:1580":{"id":"0:46:1580","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1735","`LocalPool`":"31:120:1741"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48-31:65:1735","0:49-31:68:1736","0:50-31:109:1737","0:51-31:136:1738","0:52-31:100:1739","0:53-31:102:1740","0:54-31:120:1741","0:55-31:125:1742"],"is_stripped":false}},"0:29-21:6628:1696":{"id":"0:29-21:6628:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6628:1696","glob":false}},"0:66-20:68:1677":{"id":"0:66-20:68:1677","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1677","glob":false}},"0:18-29:27:1686":{"id":"0:18-29:27:1686","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1686","glob":false}},"2:11864:19645":{"id":"2:11864:19645","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:24319":{"id":"2:11886:24319","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11843:410","str::splitn":"2:11883:24317","self::pattern":"2:11520:8115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73-21:2759:1679":{"id":"0:73-21:2759:1679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2759:1679","glob":false}},"0:42-21:57:1702":{"id":"0:42-21:57:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1702","glob":false}}},"paths":{"16:6186:15472":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"30:816:19650":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"31:65:1735":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:47655:2163":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"30:769:2185":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:1564:2212":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:9765:34472":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:11145:23522":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"27:0:1703":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:2253:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5743:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10310:15832":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"30:97:19632":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11315:16247":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8080:2215":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8859:2850":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:20432:30541":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:5793:15457":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11774:18620":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7237:15504":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7236:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3977:29883":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5564:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9283:15673":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4345:12539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:14614:34472":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"2:20846:2704":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:51481:8638":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12964:19410":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2371:2611":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11186:16070":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:6903:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:3932:2623":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2505:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:3689:14611":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:5339:2803":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"31:120:1741":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"6:4814:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:53127:28780":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:50542:8089":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6332:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3956:2693":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11248:26076":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"21:6681:2063":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"31:0:1734":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"17:11853:18626":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12237:18713":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:573:9260":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8225:2726":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:5737:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5664:15452":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13572:19583":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:2509:14528":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:4297:31972":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"27:432:19744":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"17:10321:15798":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2909:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"21:7978:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:7699:26313":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:4057:23008":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10654:8092":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:274:32987":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"21:14138:2283":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:4666:2708":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6059:33492":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"9:709:2786":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:6425:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8474:2789":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:9006:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:47729:2172":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:47778:2176":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:6978:30593":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:386:15602":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:14897:2357":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:21819:2682":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:3501:2483":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:7576:2456":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:13686:2483":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:50696:8122":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:4103:2212":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6241:15475":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:6099:1705":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"21:1293:1676":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:9997:2185":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"21:11778:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"9:977:14242":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8247:2727":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13580:19585":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:7939:23515":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3167:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:4217:15043":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"12:646:2483":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:15180:34283":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:9021:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:13997:2219":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:46936:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4371:12542":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9601:15687":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:53005:2933":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13557:19578":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5472:15444":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:48708:2666":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"12:60:33000":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:21591:28293":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:534:2439":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:53685:2931":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8265:2755":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:505:2432":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"27:439:2847":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"17:10546:15630":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6790:15498":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:9975:8091":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9362:15625":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:58933:28812":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:7059:2771":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:6268:19689":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"13:220:33051":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6676:15492":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:1534:14441":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:4728:28239":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11233:8630":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4222:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:8245:8111":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2683:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:11309:8631":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4675:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5490:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4079:2719":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5845:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:11682:2193":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"1:3978:2697":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10123:2816":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:8141:2773":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:54792:8017":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3435:20783":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:6202:31969":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21695:28863":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:47489:8548":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:4399:8225":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"30:836:19651":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:20449:28005":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:1903:15722":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6472:14463":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"21:424:1674":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"21:7050:2069":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:5417:2164":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:5730:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"9:586:14271":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:1866:2504":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:14403:34472":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:9382:15669":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"30:0:1877":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4356:12540":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10608:15632":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6376:15484":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:338:2076":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"16:6359:15483":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:47696:8426":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:15234:34304":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"17:11951:18633":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6517:14462":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4621:12566":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:1212:2496":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:3119:2504":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2727:14537":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:2844:8462":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"29:0:1685":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:48048:8412":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:1642:10169":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:13258:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"16:5510:15446":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:2094:32092":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:5374:15438":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3162:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:7289:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"12:777:14435":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:2680:2295":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11828:18624":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2465:14526":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"21:10225:2177":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"5:7052:2481":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"21:10699:2175":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:13797:2276":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"16:2535:14529":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:13084:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"2:12312:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"30:731:34151":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10796:15589":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"30:699:8257":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:96:19632":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10221:15829":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11307:20042":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:5368:2805":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:51521:2892":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:46978:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5702:2832":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"21:15092:34286":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"18:652:2185":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:11372:34472":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:22101:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:7051:8416":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:12843:2199":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:10789:34472":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"5:1228:2498":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10159:15754":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7372:33260":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:3566:14560":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:48785:8474":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:669:2489":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"27:468:19730":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"5:3623:2518":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11862:1461":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:4095:2721":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:6287:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"9:956:14240":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7211:15503":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13221:19493":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"21:12575:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"17:8752:2632":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9909:15745":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6829:33360":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"21:781:2095":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:9868:2483":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"12:2198:32997":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:47363:8243":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:3426:2363":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:5871:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:4034:2623":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11034:15961":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6034:15463":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7135:33485":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:10463:2174":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"24:15:19672":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:47546:2590":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13192:19485":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:47678:2063":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:50980:2351":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2685:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9064:2853":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9475:15686":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2833:8459":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:20851:2898":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"29:27:1686":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"12:98:32993":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12278:18716":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9791:15738":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7298:15509":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:9102:2886":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:6277:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:8396:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"1:11825:20689":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11809:23501":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47380:2461":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:21741:28309":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4327:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7008:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:14367:2343":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"1:10915:26088":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:9936:2156":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"1:10037:20572":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4339:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21668:2678":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11161:16068":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:5094:31969":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10654:20678":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13071:19448":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:51009:8117":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2922:2011":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:6563:8424":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8978:15500":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11848:1337":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:4327:15081":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:49507:8057":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"28:33:2484":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"5:6600:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12251:18714":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12307:18723":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:10666:2596":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:4662:15176":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:13332:2212":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"21:14991:2363":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"0:0:1769":{"crate_id":0,"path":["futures"],"kind":"module"},"1:7025:22996":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"21:6625:1697":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"5:6917:2484":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:568:9259":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:36:32981":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"21:6058:1693":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"27:127:19726":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:9025:34472":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:14104:34472":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"17:562:15604":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:22398:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"18:624:34156":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5235:33367":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:21786:28858":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10121:15747":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:4559:21521":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"26:37:35823":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"21:10820:2178":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"18:0:1877":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:9017:8057":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:8357:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:5751:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12756:18958":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4663:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50522:8090":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:9204:2118":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"2:20726:2901":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:48024:2216":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:7247:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4419:2731":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4373:2444":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4615:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:5745:2840":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6362:10123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:47082:15539":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12768:18960":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:15149:34276":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"12:659:2484":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6865:33359":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:3854:14728":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:5676:2831":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9433:15661":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4591:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:10560:2171":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"30:681:19662":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:202:8161":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"30:807:19649":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8811:2847":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11685:25514":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2213:2326":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:3245:2487":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:7176:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:13695:19674":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:11684:18556":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11853:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:5007:26284":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13354:19498":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"21:7635:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3159:2650":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4377:12543":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8965:23510":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6440:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:402:26088":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:54831:8018":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"21:9806:2165":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:4344:8223":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2631:14533":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:507:2185":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:10013:8105":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:50270:8608":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"21:7277:2072":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"21:13853:2278":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"21:14745:32925":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"17:9165:34047":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7800:2596":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9339:15664":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13366:19533":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:13987:217":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:2737:2296":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10075:15749":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"21:7849:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12322:18724":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:12912:2204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"16:4262:15064":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:50876:8130":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:5390:8184":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:4574:15160":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:54293:2963":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7637:15527":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12609:18853":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13176:19483":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:7745:2077":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"17:8941:15622":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:51325:8152":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:10601:2168":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"16:2993:14546":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"30:81:19631":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8805:2484":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"21:7361:2081":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:6917:24183":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:13715:2484":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:7472:2509":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1849:2558":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"29:20:1689":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:10309:2066":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:50046:8271":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8159:2351":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:7320:2073":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:2152:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4585:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6903:15500":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"12:1065:32984":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"30:648:19660":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:967:15668":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6908:2533":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12514:18851":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11860:1463":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:2605:14532":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12730:18914":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:534:33282":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11849:1367":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:9691:15708":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:599:34162":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:300:32994":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"21:12113:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"5:6932:2275":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:5422:2807":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:361:2455":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13141:19458":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:11534:8113":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:6792:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:30015:28428":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:487:15603":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:5724:2828":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:11074:8581":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:38677:8257":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5433:15441":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:558:2441":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:10846:34472":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"2:9278:8269":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"13:108:33050":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3279:2640":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:9176:2557":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9778:15710":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:54675:8010":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:3342:2623":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:939:2492":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2943:2300":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4664:2707":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:12241:2086":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"5:6644:31965":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:12656:33490":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"5:6970:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8753:2808":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:4144:14994":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:420:14492":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:54183:2943":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"28:51:2275":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:48066:8414":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:9019:8058":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"30:114:19633":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:8561:15591":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9110:21492":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:52406:2951":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:4234:31972":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10670:15635":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"1:3051:2653":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:11859:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11856:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:6142:2191":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:51737:8028":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"30:788:19647":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:15068:34472":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"18:80:19631":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:2708:2191":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:15195:34284":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"6:4771:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2573:2636":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5635:13203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:11346:2187":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:11153:34472":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"6:4708:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:7148:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:5494:2062":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:51018:8116":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:9591:34472":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:51477:8626":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:4817:15211":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11184:20676":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:914:2487":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:6738:2893":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5482:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:51253:8148":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5411:15440":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5694:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:320:32991":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"29:17:1687":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"16:2557:14530":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:3663:1680":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"12:1832:2212":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:860:2483":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:29939:2514":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6985:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:15018:19687":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"1:8767:2809":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:956:2494":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2799:2891":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:20601:2906":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"21:9366:34472":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"18:531:19660":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:1089:2116":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:3389:8194":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:6628:1696":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:8110:15585":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"21:11532:2188":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"1:0:1359":{"crate_id":1,"path":["std"],"kind":"module"},"16:6109:15466":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"27:11:35835":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:2854:8464":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5533:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:53385:2966":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:11058:8579":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:12088:2083":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"21:39:2036":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"2:52761:2961":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4149:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5723:13209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6496:15486":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:21298:30539":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:7218:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2687:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4249:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"21:11835:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:12191:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:47333:8251":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:50085:27801":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1649:10170":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:7231:2070":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"2:52382:2959":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:614:34151":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50634:8096":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47473:28381":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12485:18850":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:21757:28415":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12934:19077":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4108:2722":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:12323:2978":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:11810:2078":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"1:11842:922":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9873:15787":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:6772:2062":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"16:3599:14569":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12797:18962":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13134:19457":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:2210:2594":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:8636:34472":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:8881:33679":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"21:8390:2091":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"16:6210:15474":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:9023:8055":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:10203:34472":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"16:6345:15482":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11639:18549":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:14849:2352":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:12136:2092":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4106:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8789:2212":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:8510:14484":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:538:19661":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:920:2488":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:53261:2973":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:48583:2663":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10774:15640":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:8136:2083":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:50726:2634":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13478:19550":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:8737:27807":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"21:13144:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"15:0:1874":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9061:15625":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2681:8039":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9897:15789":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11038:2618":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:1404:2485":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:51465:8623":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:9844:2212":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10108:15746":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:11270:8632":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2230:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:20718:2704":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:47402:8126":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:5305:2801":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"12:2178:32999":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2862:8466":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:8272:15609":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:20870:2704":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"21:5037:1684":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"16:5981:33363":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:719:19651":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:474:9247":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6781:15497":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7872:15531":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:11545:8110":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:10120:2166":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:12695:18910":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3680:2487":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10283:15803":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:1091:30938":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:21703:28382":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10207:15818":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4408:12545":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4837:2754":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:50285:28460":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5551:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:51725:8030":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4662:2703":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"14:187:14458":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:1917:8044":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:50744:8098":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:47442:8248":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:2771:14539":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6463:15485":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:11660:34472":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:54701:8012":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:7234:2487":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:6875:20568":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:49500:8049":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:11401:34274":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:11850:1445":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:8831:34472":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:12476:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"2:53621:2946":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:7679:2545":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:4150:8070":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10350:15640":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:7673:2090":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"16:7396:15516":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:515:19659":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:482:9248":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12748:18916":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:15165:34310":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"9:827:14335":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2683:14535":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4683:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"30:707:28872":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7970:15537":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13327:19496":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10642:15634":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:13722:2108":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"1:355:2454":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:47646:2162":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:755:19654":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:564:19662":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:53575:2942":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5508:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"28:37:2212":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"17:11734:18617":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7672:2501":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:927:2106":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:4606:15168":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:9987:23010":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:52336:28853":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1580:10164":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4024:8036":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7127:2573":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:12380:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10810:20630":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13382:19535":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"12:1840:2275":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:9875:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:2684:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12134:18645":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:47586:2527":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5737:15454":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"31:102:1740":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:54617:2935":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1614:10168":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:8710:2104":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"6:547:9256":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2673:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"30:883:19655":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1547:10161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:47022:2475":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6743:15496":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:21612:27778":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:50605:8094":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13203:19486":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11174:16069":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"21:14867:2354":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"21:14190:34472":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"17:8055:15587":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9577:15689":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:8911:33566":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:12277:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"9:863:14237":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:20720:2899":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1432:2489":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:1085:14438":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:50712:2632":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:1021:15672":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3908:2690":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1524:10158":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:962:2495":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:6805:2215":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"30:624:2185":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:8014:15539":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47566:8078":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:50592:8079":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:587:9262":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7557:15524":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:0:1867":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:766:19655":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:6474:8418":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9751:15709":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7166:15502":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4807:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6489:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:5233:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11343:16249":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10926:26085":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:47291:8250":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:7346:34472":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"21:9975:34472":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"18:671:19647":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:925:2489":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:5740:2623":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"6:4631:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:13320:34339":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"1:4976:26284":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3119:26604":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1720:10177":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5514:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:9083:2618":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7929:15534":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6593:15489":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:20767:2902":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:7513:26090":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:49514:8058":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11857:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:8100:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"12:834:2493":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4125:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10270:15804":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:48929:2483":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:51445:8617":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"21:15082:2121":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:10466:15837":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:4370:2221":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:48921:2212":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:11344:8104":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"9:920:14239":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:6082:26082":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:7179:8159":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4357:15087":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:4625:2730":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:7157:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"9:382:14344":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:8796:15620":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:8774:15588":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:1083:2499":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:7479:8415":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1597:2505":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:9686:2062":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"1:8843:2849":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:7615:2088":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:51469:8624":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:822:2492":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3152:8469":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:5142:2102":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:51695:2977":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:9657:34472":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"2:52813:2968":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:526:9253":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:10156:34472":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"17:13031:19442":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"12:1044:14437":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10490:15839":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"21:12948:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"17:12896:19074":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"14:160:14448":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:53835:2955":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9422:15662":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:48937:2484":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4537:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6270:15477":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10819:2807":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:47687:2064":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"27:497:19743":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"25:9:1682":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:8239:2670":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"12:393:33001":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8291:2706":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:4227:8216":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:52613:2944":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9183:15628":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1366:2212":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:51473:8625":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10374:15801":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:54635:8006":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13459:19544":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12087:18642":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:15024:2437":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5122:15420":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:13636:34334":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:14833:34472":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"21:5117:19685":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:9015:8048":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"21:13964:34472":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"1:11864:1459":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6654:15491":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:9046:2114":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"21:9621:2163":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"17:10520:15841":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10806:2552":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"12:697:2490":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:20404:8257":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:52512:2964":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13594:19619":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:632:30577":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:47764:2175":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"21:13365:2216":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"17:11014:15960":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:54041:2974":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5596:15450":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:6948:32017":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"22:7:1695":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"6:7259:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10625:15633":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:29979:8443":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:11746:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:6441:34277":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"2:49371:2829":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:6519:2842":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:52791:2965":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:5891:2845":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:0:1875":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:784:2171":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"21:8415:2093":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"1:8484:2212":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:8039:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4499:2686":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:4297:15075":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:590:28872":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:646:2468":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:8871:15621":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2359:2605":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11873:18627":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:54690:8011":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:10366:2164":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"12:725:2485":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"9:800:14371":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11594:18491":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"12:810:2488":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:47626:2160":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9644:15680":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"29:25:1688":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:707:8113":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:22365:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:5219:14484":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:47664:28814":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4389:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"21:13446:2107":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"21:7080:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:10631:21497":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:6602:26290":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"21:13825:34472":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"6:4544:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:6354:2834":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:8140:2774":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:12041:2065":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"17:10257:15805":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:387:33004":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"20:143:19669":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"16:7659:15528":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12046:18639":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:9308:34472":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:9499:26083":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:51178:8146":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7111:28381":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3173:8212":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:8493:34472":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"5:836:31993":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"1:10612:2757":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"27:140:19727":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:12682:2195":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:7641:2463":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5163:15437":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9328:15665":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"30:556:34179":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:48017:28871":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"30:638:19656":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4506:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5792:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1568:2484":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6171:15471":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:9210:2119":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:50830:8102":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9364:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:2884:32082":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5453:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:14701:2348":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"1:4743:2702":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:22299:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:10631:34472":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:11689:2192":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:6958:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:7810:2597":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:8689:34472":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"12:632:2212":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:50684:8125":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:3089:2531":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:47276:2461":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:11507:34307":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"1:1788:2539":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:8701:15619":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"21:13407:2096":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"17:10921:15845":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2750:8037":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:10636:27219":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:1641:8396":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"12:1859:2503":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:6114:23514":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:14225:2284":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:21392:2704":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:123:8934":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:6820:2071":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:2933:2297":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5886:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11866:1516":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:3662:2672":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:7944:2291":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4921:15243":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:48819:2771":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"21:6605:34290":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8096:2292":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4645:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12550:18852":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4427:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:11562:34472":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:5614:33256":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:5525:15447":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:4754:782":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:47303:28406":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:9745:2062":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"6:1531:10159":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:14729:2349":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:2838:8461":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:21485:28538":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:6252:19690":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"5:7080:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:4081:8227":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7603:15526":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"21:335:34420":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:13359:2215":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:4305:19675":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"6:4290:12532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:51147:8142":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:481:19657":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:8295:15610":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:21680:28300":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:51533:8640":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:44:14425":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10332:15833":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:22134:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:13791:2275":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"1:10193:2805":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:2974:8042":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:5553:2846":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7662:2500":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5592:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:6217:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4569:12559":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:51110:8138":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:7047:8417":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5541:15448":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12674:18909":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12617:18854":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:29973:8180":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:9893:2634":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:8014:2080":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"5:1413:2486":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:6669:31996":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10062:15751":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:532:9254":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:11176:2184":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"5:881:2212":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7426:15517":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:2759:1679":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"21:6704:34472":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"5:7005:2484":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2850:8463":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:4545:15155":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:52907:2941":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:12354:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:847:2212":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:1670:1067":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8171:2669":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:7575:2704":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:929:2490":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:47103:8200":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9317:15666":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9488:15685":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4726:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:47000:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13148:19459":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:4849:15219":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4087:2720":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:9530:34472":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"5:2375:30920":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11330:16248":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9539:15683":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7117:33258":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:48629:27773":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:6483:8184":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:48039:2213":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"21:12616:34302":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:9681:15735":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12781:18961":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4669:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"21:14966:34472":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"21:14934:2361":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:58912:28770":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"21:7384:34472":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:10127:8102":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:52316:28750":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:3125:15753":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13374:19534":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"21:8222:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"28:46:2483":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"21:9227:2157":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"17:12948:19078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:4938:2828":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2692:2445":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5184:14488":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:1758:8497":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48649:28435":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:4817:2623":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11271:16236":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:20451:28008":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13007:19440":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:3234:2647":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:3098:32016":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9627:15694":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:50513:2183":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:5815:15458":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"30:716:34162":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:12306:2201":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"28:207:2498":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"20:0:1671":{"crate_id":20,"path":["futures_core"],"kind":"module"},"16:5949:15460":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:9159:29885":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:4491:2746":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:8197:2082":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"16:4888:15234":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10682:15636":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"15:175:14465":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"21:6414:34470":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"21:14426:2345":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:12860:19008":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11226:23003":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"21:8653:2103":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"16:5878:14489":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"14:31:14448":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:20:1031":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"1:6466:2838":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4820:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:1847:2557":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"20:92:2704":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:11370:2671":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:7519:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"18:582:8257":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9155:15627":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6548:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21720:28420":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"24:9:19671":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"17:9193:33790":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:595:9263":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:10999:2809":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6070:15465":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:12731:2196":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"6:4277:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3191:29898":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:169:2059":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"2:20689:2897":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:1506:10155":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"27:181:19731":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"2:11591:8141":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4241:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5544:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11813:18623":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:54655:8008":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11855:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:1463:2517":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11106:16030":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:51226:8147":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48720:2667":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5520:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:50532:8088":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:6840:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:8289:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:494:9250":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:7299:14193":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:29756:2677":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:12714:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:51290:8149":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:47089:28665":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:4749:15191":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:21538:28535":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1387:2484":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:53497:2954":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11515:18439":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:8139:2775":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:39882:8430":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"30:546:19657":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5578:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:11067:2182":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"16:4721:15187":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4755:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"21:13742:34472":{"crate_id":21,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:6626:1700":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:53415:2969":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6842:33143":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:2080:2498":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:50030:8272":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:2868:14543":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13413:19540":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1728:10178":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8213:2665":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"12:1852:2502":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10997:15848":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:47748:2173":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:11434:34295":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"16:7357:15514":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:52715:2896":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4112:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:51315:8151":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"27:124:19725":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"11:0:1871":{"crate_id":11,"path":["adler"],"kind":"module"},"2:47055:8470":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:13755:2212":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:6656:8407":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:2705:14536":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6963:9208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9968:2550":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1959:2348":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:4108:8228":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:6938:2065":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:9400:8591":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:4:995":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:8259:2084":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"9:0:1869":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"21:9850:34472":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:53158:28882":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:2842:14542":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:2065:32028":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:14260:34472":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"16:6619:15490":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7848:20490":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6690:15493":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"0:56:1048":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"1:6567:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4471:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7329:15512":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:25640:2676":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"14:215:14451":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3601:2668":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7266:23516":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:131:1694":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"1:484:25980":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:7695:2552":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:50553:8080":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7278:15507":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:113:19633":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11841:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1074:2498":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11490:14474":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4364:12541":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"27:369:2845":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"2:2811:8456":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:51449:8619":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12816:18964":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4296:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:5482:2811":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:588:2458":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6419:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4195:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:1823:2521":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2508:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1376:2483":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13506:19574":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6146:15469":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:2162:32093":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"21:6071:1692":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:14928:2360":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:11300:16244":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:7097:2302":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"21:12771:2210":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:1786:2538":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:190:2061":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:9013:8049":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12884:19072":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:1749:28836":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11199:20699":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:6533:2843":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:4397:2730":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2876:30923":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13184:19484":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:11265:34472":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"17:11356:16262":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:11202:34472":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:10182:15752":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12349:18787":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:21793:2680":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7825:15529":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:6169:2845":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10875:15644":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13436:19541":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"30:824:8113":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6088:31965":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:1568:10163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5782:13214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6816:33269":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13158:19481":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7656:2466":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3153:2505":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5165:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2828:8458":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11075:2853":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"20:27:2704":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:10822:15641":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13231:19494":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:8047:2614":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:6502:8185":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6279:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:2880:32081":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12291:18722":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6200:15473":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:8494:14486":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:327:2075":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"17:11909:18629":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10854:15643":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9274:15653":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:54495:2932":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11149:16067":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:5780:15456":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21628:27792":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"21:12350:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"5:6275:2484":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:736:19653":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11854:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:7464:15604":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5670:13204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11137:16032":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:579:9261":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7249:15505":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:13510:2218":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:8146:2632":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11787:18621":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1692:10174":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:51453:8620":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:8989:2113":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"6:4317:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:4064:2623":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:32:14209":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9844:15744":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11054:16021":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5759:32536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8139:2178":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:13115:2206":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"21:8868:2108":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"12:353:32985":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:13167:2207":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"5:1708:2487":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:2831:26086":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:5815:2213":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"6:4747:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:6002:2979":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:933:2491":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:5548:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12060:18640":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:10087:34472":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:8506:202":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:9350:15663":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:8501:2792":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:8779:2105":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:52937:2945":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4459:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:47716:8421":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:7044:33285":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2345:2601":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1511:10156":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"21:8944:2112":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:8220:2725":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11436:18436":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13082:19449":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12033:18638":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1556:10162":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:48861:8555":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"21:10585:34472":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:1898:2570":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:4222:8215":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:38660:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11500:18438":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:1771:15688":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:4557:21519":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"30:777:19646":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12638:18908":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1538:10160":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6735:15495":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:8822:33673":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:8596:15616":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:47536:2591":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:2825:14541":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13024:19441":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4525:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:47617:8420":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7587:2426":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"30:761:2185":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:10476:15838":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:1674:10172":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7309:15510":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4304:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2816:8460":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13100:19451":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2307:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12164:18647":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:1931:15682":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:2916:15748":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:6463:2837":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:52460:2972":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7532:26093":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:6350:31969":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:47416:8246":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:14314:2342":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:7123:2064":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"21:5132:1706":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:9090:34472":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"31:100:1739":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"5:2873:8032":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1517:10157":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13039:19443":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:50930:8132":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8415:2787":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9376:26081":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7276:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"21:8075:2079":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"21:14801:2351":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"1:9864:20838":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:296:35775":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"12:1138:2499":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5605:13201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"21:11742:2077":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:22233:2446":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"21:8454:34472":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"2:54433:2967":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:51025:8126":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:11232:23000":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:22167:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5558:15449":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"27:72:19741":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:22431:2681":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4778:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:985:2496":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:10497:34472":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:13280:2205":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:6865:2150":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:15009:2365":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"21:15031:34341":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"6:1707:10176":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6818:26076":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:48058:2214":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:5882:8427":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"27:451:2851":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"21:11297:2186":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"18:574:2185":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12073:18641":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5990:25985":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:46834:8043":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"21:8332:2089":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"2:22200:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:7253:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:52490:2960":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6564:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:7224:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47355:8127":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6066:2978":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:751:2275":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:1612:31969":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:1443:2490":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8129:2157":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:12887:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"21:15097:2123":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:8608:2102":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:7494:2087":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"6:4575:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7265:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46896:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:15000:2364":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:9482:28096":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:47282:8214":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12265:18715":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:3010:14547":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10088:15750":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8342:2776":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8781:2810":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:1422:2488":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11858:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:20664:2908":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:3568:31969":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:5541:2215":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:54371:2947":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11056:20709":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:21807:2679":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10086:8099":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"21:11698:2072":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"17:13404:19537":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13168:19482":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3195:2651":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:22068:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"23:0:2016":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"28:0:2018":{"crate_id":28,"path":["slab"],"kind":"module"},"2:51043:8127":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:5130:922":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"2:7475:2512":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:242:33781":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:9413:34472":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"5:5138:2159":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:14377:2344":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"16:5761:15455":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4886:2763":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8432:2788":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:644:2185":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9401:15667":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2261:14490":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:11002:2069":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:1592:2504":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2807:8454":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7288:15508":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3369:2352":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:9552:2162":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:48810:2484":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"30:853:19653":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:7934:26311":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2791:8452":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"12:2053:2496":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:50038:27757":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5709:13208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"21:7251:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"28:67:35837":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"21:9167:34472":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:11547:15792":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12980:19438":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:21286:2894":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10583:15631":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"21:5857:1682":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:14055:2282":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"2:7148:2301":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9671:15701":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:14784:34472":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"2:9514:28083":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"30:844:19652":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7980:15538":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11606:18547":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:13491:2217":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:12666:34303":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"2:3989:29884":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:54739:8014":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10845:15642":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47386:8244":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11800:18622":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6052:15464":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:3457:14552":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"9:649:14260":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"21:12371:2197":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6303:9132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6991:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8830:2848":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"31:68:1736":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:20470:28009":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2657:14534":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"21:13583:2219":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"12:1555:14442":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4210:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:48802:2483":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:53080:28857":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:20879:2902":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12909:19075":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5203:14486":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3716:14614":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:13219:2209":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"21:7397:2087":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4310:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:4141:2220":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"16:2930:14545":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:22332:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:7516:29699":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7543:15523":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:1735:8498":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2940:2299":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"21:11323:34472":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:12166:2082":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"21:12531:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"9:188:14289":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:1586:2503":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:4707:2471":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:6424:34471":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"21:14519:108":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:9936:8104":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"30:741:34156":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5628:15451":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:11847:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4267:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9446:15674":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"21:14462:2157":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"1:6350:2216":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"21:14940:2178":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"31:109:1737":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"6:6339:2758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:2785:8453":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"30:655:19661":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12225:18712":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:6940:2508":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1257:2499":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21394:2900":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"21:23:2034":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:50990:8129":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:9196:2117":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"21:9464:2160":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:49854:8564":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:815:2491":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:53339:2962":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3377:8190":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:2779:8450":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11893:18628":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4639:12568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:1120:14439":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4561:21523":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"21:9115:2115":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:7555:34306":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"2:2769:2890":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10721:15638":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:10234:2064":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"17:9021:15624":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6017:15462":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:5740:8853":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11087:16029":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:14752:2350":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:13196:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:6717:2066":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:12630:18906":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8958:26301":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13527:19576":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"14:40:15848":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:54644:8007":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4136:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2389:14523":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:51132:8139":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11559:18444":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3387:2293":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:50894:8131":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13492:19568":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:47636:2161":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:12440:2198":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"21:10471:2172":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:13114:19453":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:49493:8048":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:5813:2623":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:17:2005":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:4547:2692":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2937:2298":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5460:15443":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2344:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"21:10544:34472":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:52561:2952":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:47319:8249":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:50670:8128":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:50289:8081":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4159:2723":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"21:12505:2087":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:51000:8118":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:13928:2280":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"16:6252:15476":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:7313:2074":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"17:10973:15847":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7847:15530":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:1586:10165":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11708:18615":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:4219:34454":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"21:6634:2062":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:6878:2066":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"18:690:19649":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11761:18619":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8165:2670":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:47343:8252":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9820:15785":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47461:2576":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:11088:8119":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7469:15519":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:47608:8419":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9223:15650":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:48033:8411":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10455:15828":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:10676:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"21:6627:1699":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"16:7267:15506":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10298:2806":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:11724:34472":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"17:8475:15586":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:7788:2593":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:7097:2575":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:9701:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6123:15467":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:10455:2167":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:2496:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:50614:8097":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10445:15642":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:10337:34472":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"21:2568:34342":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:10141:8100":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:30001:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:12102:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:30073:28416":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:14449:34472":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"6:6534:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6312:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11721:18616":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10233:15830":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:47707:2066":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:1836:2484":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6434:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:1550:2623":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"21:11105:34472":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"1:9371:2593":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"21:0:1673":{"crate_id":21,"path":["futures_util"],"kind":"module"},"5:3699:31969":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:861:2495":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:6041:1691":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"6:4162:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"26:53:35824":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:9293:15671":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:51338:8136":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6512:8186":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:50624:8095":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2803:8455":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:9691:2704":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10849:2810":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6402:10100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:1518:14440":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5319:2802":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"21:7203:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:5682:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7093:15501":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:679:2469":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"21:37:1698":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:5907:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:8732:29698":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:14343:34472":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"1:7613:2438":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"8:0:1868":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:636:34157":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12926:19076":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:11888:2080":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"14:0:1873":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:39873:8526":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:52650:2929":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"22:0:2015":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:50702:8121":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:47096:8222":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11217:16072":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:904:2275":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10403:15639":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:2549:26083":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10394:15835":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"21:14876:2355":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:2361:2606":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6510:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:9229:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:11151:2817":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:14887:2356":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:8797:2844":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5539:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6284:15478":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13340:19497":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:5354:2804":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:9914:34472":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"1:3236:2648":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:7140:2574":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:51034:2461":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2593:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:8956:2363":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"12:853:2494":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10497:15840":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7497:15521":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"9:111:14253":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:11844:1479":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"21:11224:2173":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"21:14737:2278":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"21:4573:1683":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:10169:8101":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10360:15799":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:2604:30924":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:1824:2550":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11128:26095":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8735:2806":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"21:13842:2277":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:5851:12428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:8526:15590":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"9:592:14258":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5669:2830":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8176:2660":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:288:2303":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:4441:15099":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:15267:34313":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:11540:8112":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:1051:2496":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:21134:2926":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:50579:8078":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"30:665:140":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9283:8270":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10932:25982":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:11395:34292":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"21:8754:34472":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:638:2465":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4485:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"21:13557:34472":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"2:52591:2940":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:10519:2170":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"1:2613:2345":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"21:14554:34472":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"18:491:34179":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6519:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"21:7183:2068":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"17:13279:19495":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"24:309:19683":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"18:727:19652":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6555:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3197:2652":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6385:10097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"21:7698:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:13475:34472":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"2:46956:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:4353:8224":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:57202:2975":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:3488:2212":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2433:14525":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:14573:2346":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:14511:2274":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"27:136:2845":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"30:872:19654":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:8402:2092":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"16:6330:15481":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:47595:2157":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"0:46:1580":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"16:2300:14519":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:10048:8098":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3611:2348":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9885:15788":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:52668:28834":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7168:8158":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:54716:8013":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8898:2833":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:47813:2180":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:4385:15091":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:3902:31969":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4447:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:13773:2484":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:8324:2764":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:3911:2095":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"21:10747:2176":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"17:9118:34007":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10210:27353":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7956:15536":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2460:8266":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:5494:15445":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:1845:2487":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:11330:2672":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"27:149:19729":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"1:11019:8638":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:9857:15766":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9631:15681":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:3444:2359":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:11867:1103":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9071:33629":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"28:199:19746":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"7:79:14216":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2795:2889":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:62:8879":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:562:9258":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7388:15515":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6719:33335":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:3132:32027":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2793:14540":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4550:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4716:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:20472:28011":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"26:0:2017":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"6:6582:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:21129:2903":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"24:0:1770":{"crate_id":24,"path":["futures_task"],"kind":"module"},"1:8490:2791":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4234:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6877:15499":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10405:2647":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:10641:2595":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4216:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:8241:15608":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:641:2467":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2992:2529":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3243:8041":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:48794:2212":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:11481:2796":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11536:15791":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:11843:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:7793:2595":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:8418:15614":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:4407:26093":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"16:2894:14544":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:8860:2107":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:46912:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8152:2634":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:8935:20629":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2343:2600":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"13:0:1866":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:1962:15706":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3922:2692":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1744:10179":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10752:15639":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:52428:2939":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"20:32:1672":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"30:798:19648":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:541:9255":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1713:2714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"21:4820:2281":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"1:4311:2718":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:22830:2675":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:870:2484":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11247:16124":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:53651:2949":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2499:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:12823:2211":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"27:154:2849":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:50794:8134":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12739:18915":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2579:14531":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"21:21:1031":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:12955:19090":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13126:19456":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9553:15625":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:7783:2592":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:20877:2904":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10385:15834":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7319:15511":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:13350:2214":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"15:193:14466":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:47739:8425":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:8212:15607":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7343:15513":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:50848:8100":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47409:8245":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:54579:2970":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12022:18637":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:14679:34472":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:10062:2185":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"21:331:2437":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:2338:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:15128:34281":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:54754:8015":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6298:15479":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:54664:8009":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:521:19656":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6528:15487":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11288:16243":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:52631:28845":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5447:15442":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:3402:14551":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:14282:2341":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"21:12969:2202":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"1:10341:26074":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:500:9251":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11199:16071":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8087:1682":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:3632:14578":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"25:0:1681":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:10396:34472":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:12064:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"2:11293:8629":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:53029:2934":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:8991:33849":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9805:15784":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:1927:2571":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47073:8188":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"27:187:19732":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"5:7251:8181":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4284:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11214:20631":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:12:19670":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:12555:2208":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"2:2764:2888":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:48852:2772":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:9930:15765":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:5704:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:36:2534":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11861:1460":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:9243:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:119:8933":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:47827:2182":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:8951:33997":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12148:18646":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:50504:8087":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22266:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:1628:33005":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:2555:34455":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"12:1029:2498":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1894:10316":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"12:119:32990":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:660:19646":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:1575:2487":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"9:505:14420":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:6390:2841":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:8441:15615":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:10650:2169":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"21:6310:19688":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"5:2055:2432":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:10155:8103":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:5703:15453":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2411:14524":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:6313:26290":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12361:18790":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:12410:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:10402:2651":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2579:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:1055:30940":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:2874:32113":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13214:19492":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"28:216:2496":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"21:12757:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"12:2205:2481":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:7819:2086":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"21:6988:2067":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"21:14908:2358":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"2:2774:8451":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2233:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4602:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:20417:30541":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:10868:2180":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"1:8912:23512":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"21:13899:34472":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"21:9504:2161":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"16:4413:15095":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11841:18625":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:6999:2484":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:681:19648":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:52861:2953":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:50077:27790":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3125:20493":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11235:16123":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:15039:2122":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:891:2486":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:3765:2673":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:50776:8135":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:14858:2353":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:50948:8133":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"9:622:14259":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:8992:20686":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:3506:2275":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:3026:14548":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:51304:8150":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:13341:2213":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:8269:2758":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:14635:2347":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"6:554:9257":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"21:13706:2212":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"1:878:2485":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11368:16263":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:11038:34472":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:14919:2359":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:13764:2483":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"16:7567:15525":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4693:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:1071:32115":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7856:2643":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:7300:34472":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"1:3665:2671":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:9427:109":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:10434:15836":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:12163:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:13780:2274":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"21:7917:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:54541:2950":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:3451:2631":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:6321:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:10941:2179":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"17:9526:15684":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:9490:34472":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"21:15210:34282":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"2:10687:8093":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:47423:8247":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10708:15637":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4828:2753":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11576:18447":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"27:483:2786":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"21:8161:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11447:8019":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:11525:8111":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6161:15470":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:8056:15540":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12118:18644":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:3864:2687":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3858:2688":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:14493:34472":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"21:10725:34472":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"1:7592:2436":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"30:691:2185":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11997:18635":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10399:2649":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:6458:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:1634:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4635:15173":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11528:15793":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:3179:8211":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:3086:2212":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9738:15711":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:3249:15771":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46795:8210":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8666:15618":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"21:6076:1690":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"21:8467:2096":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10894:15645":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11125:16031":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10949:15846":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8923:2437":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:247:33801":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"12:1872:2505":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:6962:2484":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:48685:2665":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:104:693":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"1:4622:2756":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10296:15802":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:6196:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:13059:19447":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:5053:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11497:14474":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:5811:25985":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:46881:8468":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:21644:27779":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13393:19536":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:48672:2674":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:1601:10166":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10444:2438":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12972:19411":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6668:33296":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:961:31969":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:51687:2976":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:8339:15611":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:8631:15617":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:4786:15204":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:2282:14518":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2217:2331":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13518:19575":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11939:18632":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8981:15623":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:5078:1701":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"16:2320:14520":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:14:1986":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4257:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4189:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:219:8047":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:52959:2948":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:9031:33782":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:2823:8457":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9712:15736":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:0:1876":{"crate_id":17,"path":["object"],"kind":"module"},"21:13676:19673":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"1:950:2493":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13047:19446":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:15086:2120":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"6:1606:10167":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2302:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11974:18634":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11868:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12337:15642":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:39833:2814":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11070:16022":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5485:2813":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:97:1678":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:6610:29134":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"21:12800:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47799:2178":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:48600:2664":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"20:68:1677":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"17:10528:15629":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12198:18710":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"9:33:14310":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"21:9325:2181":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:48566:2662":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:11913:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:51461:8622":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11391:2673":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:699:19650":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6287:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:7230:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11661:18555":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:11814:2470":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8231:2717":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12103:18643":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:10177:2063":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"6:1701:10175":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:762:2487":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"21:7444:34306":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"16:2749:14538":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5597:13200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:54769:8016":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:51457:8621":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:4563:8237":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:3640:2484":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"31:38:35862":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"1:11865:776":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10831:20715":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"21:10259:34472":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:1973:2518":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:7475:20576":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:10910:34472":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:10975:34472":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"5:1243:2497":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:12115:2081":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:4352:19677":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"17:9263:15652":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:4299:8222":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7942:15535":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:11621:2190":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:8970:23504":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"31:136:1738":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"16:2367:14522":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:5614:2275":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5996:15461":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6704:15494":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:20677:2704":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"30:753:34157":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11259:16233":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:273:31969":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:9722:15733":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"7:0:1506":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8392:2786":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10506:15806":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:4519:15153":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"12:0:1872":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:3122:20481":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13536:19577":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8162:15606":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3966:2694":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1571:2275":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:12435:2532":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7890:15532":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:13616:34472":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:48010:8409":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"21:9450:34472":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:10696:2292":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"12:2190:32996":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2996:2530":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5615:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2539:2344":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"9:19:14309":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:153:14495":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:82:2006":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:47503:2577":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:3093:2503":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:9011:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8875:2851":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:9947:15790":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:488:9249":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10706:21551":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1660:10171":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:2142:32086":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:3127:2502":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1580:2502":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6137:15468":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"21:7892:2078":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"21:13042:2203":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"5:864:2506":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3894:2689":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11617:18548":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:52983:2930":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3916:2691":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3312:2213":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5388:15439":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11011:21548":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"12:1003:2497":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:5661:29697":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:3263:14550":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2512:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:47788:8422":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:609:34178":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"10:0:1870":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:2184:28508":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2476:2342":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:7511:15522":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9108:15626":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:13401:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"9:676:14246":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"30:632:19659":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:11124:2183":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"21:11966:2079":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"14:221:14457":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:7864:2348":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3872:2275":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5702:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:9259:34472":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"1:5546:2845":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12850:19007":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:15222:34305":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"17:12008:18636":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12836:19005":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"9:896:14238":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:2069:2497":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3157:2649":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"21:10680:34472":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:4788:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:51358:8137":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12176:18661":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:14984:2362":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:14035:34472":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"2:11520:8115":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1684:10173":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4516:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3206:8040":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10420:15827":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"12:738:2486":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9303:15670":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:2487:14527":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4689:15179":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9501:15670":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:12188:2095":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:7775:34472":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:7953:2085":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:39869:26313":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:8393:15613":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4608:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"21:13306:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"1:621:2462":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10686:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:9025:8056":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:6235:19691":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"16:3188:14549":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:589:1675":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:1065:2497":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:20638:2907":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"31:125:1742":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:11991:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"14:7:14448":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4561:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:506:9252":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"15:214:14470":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:4289:8221":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9250:15651":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11465:21482":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6316:15480":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"21:5122:19684":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:2459:2704":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:13011:34472":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"17:8368:15612":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:30179:28378":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13091:19450":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4437:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11485:18437":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"26:43:35825":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:11846:1029":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12211:18711":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:53181:28773":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7909:15533":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9371:15626":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:2341:14521":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"14:165:14449":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4654:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:13864:2279":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"6:4201:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"27:146:203":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"1:9013:20697":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9700:15707":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"27:489:19742":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"1:4239:2724":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10245:15831":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:50453:29805":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:7013:34472":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"27:366:203":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:13388:34472":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"6:652:9310":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"21:8972:34472":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:4720:2709":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:9276:2158":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"6:4826:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9831:15786":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:9658:15734":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:57:1702":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"5:7064:2482":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11863:1462":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:3943:2483":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2867:8467":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:12314:2200":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"24:135:2060":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6156:2275":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:5915:2191":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"30:726:34178":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:8137:15605":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:52360:2971":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:5839:15459":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:4264:2623":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8108:2294":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:6923:2507":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2858:8465":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:9387:2159":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:12874:19010":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10987:2808":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:8428:2094":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"17:10139:15625":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:51161:8145":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9764:15737":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11748:18618":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:7483:15520":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7435:15518":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:50067:2786":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:52530:28813":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"21:13433:34472":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"6:4736:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9458:15700":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6567:15488":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3970:2695":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}