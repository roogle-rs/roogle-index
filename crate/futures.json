{"root":"0:0:1831","crate_version":"0.3.28","includes_private":false,"index":{"0:5-20:32:1734":{"id":"0:5-20:32:1734","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1734","glob":false}}},"0:40-21:1293:1738":{"id":"0:40-21:1293:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1738","glob":false}}},"0:83-21:6074:1754":{"id":"0:83-21:6074:1754","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1754","glob":false}}},"0:63-25:9:1744":{"id":"0:63-25:9:1744","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1744","glob":false}}},"0:66-20:68:1739":{"id":"0:66-20:68:1739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1739","glob":false}}},"2:12169:23974":{"id":"2:12169:23974","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:2318":{"id":"2:12180:2318","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43886:2344","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1764":{"id":"0:42-21:57:1764","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1764","glob":false}}},"2:12174:23997":{"id":"2:12174:23997","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12173:23996"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:1744":{"id":"0:15-25:9:1744","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1744","glob":false}}},"2:12159:22876":{"id":"2:12159:22876","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11412:8145"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3664:1742":{"id":"0:74-21:3664:1742","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1742","glob":false}}},"2:12246:28933":{"id":"2:12246:28933","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1293:1738":{"id":"0:65-21:1293:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1738","glob":false}}},"0:34-21:6630:1761":{"id":"0:34-21:6630:1761","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1761","glob":false}}},"2:12161:316":{"id":"2:12161:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12162:315","`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:1757":{"id":"0:28-22:7:1757","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1757","glob":false}}},"2:12203:24005":{"id":"2:12203:24005","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11668:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29602":{"id":"5:5526:29602","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2298","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2298","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6061:1755":{"id":"0:84-21:6061:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1755","glob":false}}},"0:50-31:109:1799":{"id":"0:50-31:109:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1799","glob":false}}},"2:12277:2440":{"id":"2:12277:2440","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4543:2440"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43940:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32-21:37:1760":{"id":"0:32-21:37:1760","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1760","glob":false}}},"2:12272:22087":{"id":"2:12272:22087","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79-29:20:1751":{"id":"0:79-29:20:1751","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1751","glob":false}}},"2:12221:28924":{"id":"2:12221:28924","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12275:28940":{"id":"2:12275:28940","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4542:28940"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43931:8152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6044:1753":{"id":"0:82-21:6044:1753","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1753","glob":false}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29598","5:5511:8464","5:5514:29599","5:5517:29600","5:5525:29601","5:5526:29602","5:5527:2187","5:5528:22085","5:5529:22086"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5510:29598":{"id":"5:5510:29598","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2298","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2298","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:25129":{"id":"2:12271:25129","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39702:25265","Self::is_ascii":"2:12270:22083"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39702:25265","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5133:948":{"id":"0:38-21:5133:948","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5133:948","glob":false}}},"2:12200:2327":{"id":"2:12200:2327","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11852:8141","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split_whitespace":"2:12178:26351","str::rsplit":"2:12206:24007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43632:2620","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:713":{"id":"0:58-21:104:713","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:713","glob":false}}},"2:12152:22515":{"id":"2:12152:22515","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:1804":{"id":"0:55-31:125:1804","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1804","glob":false}}},"2:12206:24007":{"id":"2:12206:24007","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11852:8141","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split":"2:12200:2327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43650:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:713":{"id":"0:37-21:104:713","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:713","glob":false}}},"2:12189:24015":{"id":"2:12189:24015","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:22089":{"id":"2:12274:22089","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:1797":{"id":"0:48-31:65:1797","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1797","glob":false}}},"0:76-29:27:1748":{"id":"0:76-29:27:1748","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1748","glob":false}}},"2:12218:24011":{"id":"2:12218:24011","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12030:421","str::splitn":"2:12215:24009","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43754:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5135:1768":{"id":"0:45-21:5135:1768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5135:1768","glob":false}}},"2:12175:26341":{"id":"2:12175:26341","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43602:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12212:28923":{"id":"2:12212:28923","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11852:8141","str::split":"2:12200:2327","prim@char":"1:12030:421","str::split_terminator":"2:12209:28922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43700:8160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2760:1741":{"id":"0:73-21:2760:1741","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1741","glob":false}}},"0:81-21:6079:1752":{"id":"0:81-21:6079:1752","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1752","glob":false}}},"2:12178:26351":{"id":"2:12178:26351","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12179:26325"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43906:8144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:23996":{"id":"2:12173:23996","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12174:23997"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:28938":{"id":"2:12265:28938","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:28918":{"id":"2:12160:28918","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1741":{"id":"0:13-21:2760:1741","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1741","glob":false}}},"0:24-21:6044:1753":{"id":"0:24-21:6044:1753","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1753","glob":false}}},"2:12192:20015":{"id":"2:12192:20015","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6629:1762":{"id":"0:35-21:6629:1762","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1762","glob":false}}},"2:12233:28927":{"id":"2:12233:28927","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11852:8141","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatch_indices":"2:12236:28928"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43782:8156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:1800":{"id":"0:51-31:136:1800","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1800","glob":false}}},"0:77-29:17:1749":{"id":"0:77-29:17:1749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1749","glob":false}}},"0:29-21:6631:1758":{"id":"0:29-21:6631:1758","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6631:1758","glob":false}}},"2:12196:20016":{"id":"2:12196:20016","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2187":{"id":"5:5527:2187","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:12435:136":{"id":"0:4-2:12435:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12435:136","glob":false}}},"0:18-29:27:1748":{"id":"0:18-29:27:1748","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1748","glob":false}}},"2:12171:28919":{"id":"2:12171:28919","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12036:1420","str::slice_mut_unchecked":"2:12172:28920","crate::ops::Index":"2:2984:2514"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:26325":{"id":"2:12179:26325","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12178:26351"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43915:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1801":{"id":"0:52-31:100:1801","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1801","glob":false}}},"2:12163:23971":{"id":"2:12163:23971","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:823":{"id":"2:12151:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1831":{"id":"0:0:1831","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1768","crate::executor":"0:46:1642","crate::stream":"21:1293:1738","crate::channel":"27:0:1765","crate::future":"21:104:713","crate::sink":"21:4576:1745"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1642","0:56:1080","0:4-2:12435:136","0:5-20:32:1734","0:7-21:424:1736","0:8-21:589:1737","0:10-20:68:1739","0:11-20:97:1740","0:13-21:2760:1741","0:14-21:3664:1742","0:15-25:9:1744","0:16-21:5040:1746","0:18-29:27:1748","0:19-29:17:1749","0:20-29:25:1750","0:21-29:20:1751","0:23-21:6079:1752","0:24-21:6044:1753","0:25-21:6074:1754","0:26-21:6061:1755","0:27-20:131:1756","0:28-22:7:1757","0:29-21:6631:1758","0:31-21:6628:1759","0:32-21:37:1760","0:33-21:20:1063","0:34-21:6630:1761","0:35-21:6629:1762","0:37-21:104:713","0:38-21:5133:948","0:39-21:4576:1745","0:40-21:1293:1738","0:41-21:5081:1763","0:42-21:57:1764","0:43-27:0:1765","0:44-21:6102:1767","0:45-21:5135:1768"],"is_stripped":false}}},"2:12183:24013":{"id":"2:12183:24013","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150":{"id":"2:12150","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12151:823","2:12152:22515","2:12153:28915","2:12154:28916","2:12156:28917","2:12159:22876","2:12160:28918","2:12161:316","2:12162:315","2:12163:23971","2:12165:23972","2:12167:23973","2:12169:23974","2:12171:28919","2:12172:28920","2:12173:23996","2:12174:23997","2:12175:26341","2:12176:26814","2:12177:22059","2:12178:26351","2:12179:26325","2:12180:2318","2:12181:28921","2:12182:26342","2:12183:24013","2:12186:24014","2:12189:24015","2:12192:20015","2:12196:20016","2:12200:2327","2:12203:24005","2:12206:24007","2:12209:28922","2:12212:28923","2:12215:24009","2:12218:24011","2:12221:28924","2:12224:28925","2:12227:2055","2:12230:28926","2:12233:28927","2:12236:28928","2:12239:28929","2:12241:28930","2:12243:28931","2:12245:28932","2:12246:28933","2:12247:28934","2:12250:28935","2:12253:22409","2:12256:24016","2:12259:28936","2:12262:28937","2:12265:28938","2:12268:28939","2:12270:22083","2:12271:25129","2:12272:22087","2:12273:22088","2:12274:22089","2:12275:28940","2:12277:2440","2:12278:28941"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5529:22086":{"id":"5:5529:22086","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12274:22089"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25-21:6074:1754":{"id":"0:25-21:6074:1754","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1754","glob":false}}},"2:12278:28941":{"id":"2:12278:28941","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4540:28941"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43949:8153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:28934":{"id":"2:12247:28934","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11877:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3664:1742":{"id":"0:14-21:3664:1742","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1742","glob":false}}},"2:12256:24016":{"id":"2:12256:24016","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:28915":{"id":"2:12153:28915","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:22059":{"id":"2:12177:22059","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43618:2619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4576:1745":{"id":"0:62-21:4576:1745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4576:1745","glob":false}}},"0:67-20:97:1740":{"id":"0:67-20:97:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1740","glob":false}}},"0:49-31:68:1798":{"id":"0:49-31:68:1798","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1798","glob":false}}},"0:71-21:5040:1746":{"id":"0:71-21:5040:1746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1746","glob":false}}},"0:16-21:5040:1746":{"id":"0:16-21:5040:1746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1746","glob":false}}},"0:7-21:424:1736":{"id":"0:7-21:424:1736","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1736","glob":false}}},"0:20-29:25:1750":{"id":"0:20-29:25:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1750","glob":false}}},"2:12250:28935":{"id":"2:12250:28935","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:28936":{"id":"2:12259:28936","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1803":{"id":"0:54-31:120:1803","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1803","glob":false}}},"0:19-29:17:1749":{"id":"0:19-29:17:1749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1749","glob":false}}},"0:21-29:20:1751":{"id":"0:21-29:20:1751","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1751","glob":false}}},"0:11-20:97:1740":{"id":"0:11-20:97:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1740","glob":false}}},"2:12245:28932":{"id":"2:12245:28932","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:28916":{"id":"2:12154:28916","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:315":{"id":"2:12162:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1802":{"id":"0:53-31:102:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1802","glob":false}}},"2:12262:28937":{"id":"2:12262:28937","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29600":{"id":"5:5517:29600","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:28928":{"id":"2:12236:28928","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11852:8141","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::match_indices":"2:12233:28927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43800:8157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:28930":{"id":"2:12241:28930","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:23972":{"id":"2:12165:23972","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:589:1737":{"id":"0:8-21:589:1737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1737","glob":false}}},"0:10-20:68:1739":{"id":"0:10-20:68:1739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1739","glob":false}}},"0:41-21:5081:1763":{"id":"0:41-21:5081:1763","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5081:1763","glob":false}}},"2:12230:28926":{"id":"2:12230:28926","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11852:8141","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::matches":"2:12227:2055"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43854:8159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12243:28931":{"id":"2:12243:28931","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:589:1737":{"id":"0:70-21:589:1737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1737","glob":false}}},"0:33-21:20:1063":{"id":"0:33-21:20:1063","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1063","glob":false}}},"0:43-27:0:1765":{"id":"0:43-27:0:1765","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1765","glob":false}}},"2:12167:23973":{"id":"2:12167:23973","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12215:24009":{"id":"2:12215:24009","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141","str::rsplitn":"2:12218:24011"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43736:8130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59-2:12435:136":{"id":"0:59-2:12435:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12435:136","glob":false}}},"0:78-29:25:1750":{"id":"0:78-29:25:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1750","glob":false}}},"0:44-21:6102:1767":{"id":"0:44-21:6102:1767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6102:1767","glob":false}}},"2:12253:22409":{"id":"2:12253:22409","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1642":{"id":"0:46:1642","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1797","`LocalPool`":"31:120:1803"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1797","0:49-31:68:1798","0:50-31:109:1799","0:51-31:136:1800","0:52-31:100:1801","0:53-31:102:1802","0:54-31:120:1803","0:55-31:125:1804"],"is_stripped":false}}},"2:12270:22083":{"id":"2:12270:22083","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12224:28925":{"id":"2:12224:28925","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29601":{"id":"5:5525:29601","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:28922":{"id":"2:12209:28922","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11852:8141","str::split":"2:12200:2327","prim@char":"1:12030:421","`DoubleEndedIterator`":"2:7310:121","str::rsplit_terminator":"2:12212:28923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43682:8161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1734":{"id":"0:60-20:32:1734","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1734","glob":false}}},"2:12172:28920":{"id":"2:12172:28920","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12036:1420","crate::ops::IndexMut":"2:2988:2515","str::slice_unchecked":"2:12171:28919"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6079:1752":{"id":"0:23-21:6079:1752","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1752","glob":false}}},"2:12181:28921":{"id":"2:12181:28921","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43896:8155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:424:1736":{"id":"0:69-21:424:1736","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1736","glob":false}}},"2:12186:24014":{"id":"2:12186:24014","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:8141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:28929":{"id":"2:12239:28929","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12227:2055":{"id":"2:12227:2055","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11852:8141","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatches":"2:12230:28926"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43836:8158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8464":{"id":"5:5511:8464","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6628:1759":{"id":"0:31-21:6628:1759","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6628:1759","glob":false}}},"0:26-21:6061:1755":{"id":"0:26-21:6061:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1755","glob":false}}},"2:12273:22088":{"id":"2:12273:22088","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:26342":{"id":"2:12182:26342","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43924:8142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1756":{"id":"0:27-20:131:1756","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1756","glob":false}}},"0:39-21:4576:1745":{"id":"0:39-21:4576:1745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4576:1745","glob":false}}},"2:12176:26814":{"id":"2:12176:26814","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43608:8147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:28939":{"id":"2:12268:28939","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11813:127","`FromStr`":"2:11812:2775"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11812:2775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11812:2775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1080":{"id":"0:56:1080","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:713","0:59-2:12435:136","0:60-20:32:1734","0:62-21:4576:1745","0:63-25:9:1744","0:65-21:1293:1738","0:66-20:68:1739","0:67-20:97:1740","0:69-21:424:1736","0:70-21:589:1737","0:71-21:5040:1746","0:73-21:2760:1741","0:74-21:3664:1742","0:76-29:27:1748","0:77-29:17:1749","0:78-29:25:1750","0:79-29:20:1751","0:81-21:6079:1752","0:82-21:6044:1753","0:83-21:6074:1754","0:84-21:6061:1755"],"is_stripped":false}}},"5:5514:29599":{"id":"5:5514:29599","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:8137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:22085":{"id":"5:5528:22085","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12273:22088"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:28917":{"id":"2:12156:28917","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12154:28916"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"21:12169:2141":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:1576:2486":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1517:14578":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13096:19210":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:2960:29874":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8285:2708":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40376:8106":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5567:15586":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:21118:2599":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:3185:27277":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:45836:2940":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"21:7956:2144":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"6:1495:10133":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:8457:32217":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"2:1637:8419":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:41671:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44439:8640":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:8863:2166":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"6:7575:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:40111:8234":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14259:19978":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10403:15903":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:4032:28512":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4800:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:22560:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:7400:2146":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"17:12826:19191":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"9:237:2769":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8224:2344":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:895:2252":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8356:2689":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:44159:8177":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"11:0:1944":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:207:8073":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3259:2636":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11098:15973":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:4623:2676":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11287:23284":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:8809:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10377:15875":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21279:2599":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10038:15810":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:5818:2253":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"18:582:8283":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:6838:8428":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10419:8129":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:42662:27189":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11231:2831":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:41722:8497":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6347:15618":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:6809:2862":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:6074:1754":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:9369:32217":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"5:7463:8183":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"21:7151:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12374:2237":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"2:2606:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"21:7895:2138":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"1:1837:2538":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:21101:2872":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"30:681:20033":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:7364:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"6:4291:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:6248:2822":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:40299:2559":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4650:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:7254:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:42690:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:5067:15378":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:8997:22423":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:4996:15355":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13830:19944":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7763:23153":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"30:741:31947":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7574:23277":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8003:22673":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4592:15239":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3377:8210":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"11:403:30730":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11045:15970":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"21:13199:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:10792:32217":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"1:4235:2706":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12133:18675":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:8225:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:7852:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:119:8922":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:910:2471":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:1520:10137":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:37:1760":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:45642:2886":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:860:2467":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6425:2256":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13557:19926":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2803:14681":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4814:15317":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10082:2532":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12435:19168":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:6290:167":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:1888:2553":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4626:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"26:53:33581":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:10568:15916":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:9093:32217":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"16:5793:31046":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13435:19920":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:3237:8067":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:46311:2962":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:9689:2122":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:14649:32217":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"17:10945:16002":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9665:31476":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:43590:8151":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:22080:26743":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:5743:2609":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"21:9213:2178":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:6744:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:12578:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"18:531:20031":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:10225:8119":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:15150:32129":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:3110:2638":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:2926:14686":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:43438:8116":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43896:8155":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:9294:8084":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:9075:22424":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:2353:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:21303:2599":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"21:4142:2260":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"16:7313:31245":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6872:15640":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:12:20042":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"16:5301:15564":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14417:19989":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:5081:1763":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"21:10090:32217":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:6022:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:13391:32217":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"2:20724:26916":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9875:15829":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:39329:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"23:0:2085":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:39515:26537":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"2:43602:8148":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:11557:8631":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12186:18679":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:9545:8290":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:10159:32217":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"21:11349:2227":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:11701:2132":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"5:4164:2609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:12001:2452":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:1273:2481":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12424:19167":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"14:7:14585":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"21:1293:1738":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"6:4854:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2695:8065":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:3519:15943":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4785:15312":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:22117:26757":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7539:15661":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11212:22418":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:4633:22963":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"30:807:20023":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10863:15773":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:6987:2255":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"21:14432:2197":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"11:798:2474":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5590:15587":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:6955:28548":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:21972:26667":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:190:2121":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"17:9409:31655":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1064:2481":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10161:15846":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8407:2768":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:805:2475":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6598:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:22527:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"21:13449:2166":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"21:14108:2284":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"17:9475:15770":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44651:8054":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"21:5040:1746":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:2854:8490":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:14846:2348":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:9300:8082":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6789:15637":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"27:187:20104":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"17:12757:19187":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:39228:8230":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:44548:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:42443:8084":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1073:2482":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12106:18673":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:5970:2822":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:1776:2521":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:13750:2275":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"16:2715:14677":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:1814:2532":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11084:15971":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10444:15869":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:14341:19983":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:14715:30698":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"21:8335:2148":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:12309:2241":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"6:4368:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:14898:2353":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"16:2421:14665":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:4819:2686":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:12826:2251":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"16:2962:14687":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:31017:8283":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:30441:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5068:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:9660:32217":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"6:7540:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:42964:2769":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6648:10278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:12317:2240":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"5:4074:2466":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:45956:2955":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:32173:2793":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46167:2889":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:11127:2223":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"16:7799:15674":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:44601:3002":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9482:2596":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"30:731:31943":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8480:2770":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4787:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14037:19965":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13673:19931":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7382:2558":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:11398:8584":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1103:14576":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:4426:28545":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:2970:29870":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1527:10138":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2569:23290":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:13619:32217":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"21:11227:2213":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"17:13787:19941":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6456:15625":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:46567:2924":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10845:15919":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:40588:2216":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14205:19974":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:12659:31242":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"2:43632:2620":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:5994:8448":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:494:9240":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:3777:14712":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:521:20027":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:7438:8096":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:40446:2201":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11250:15978":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:46213:2895":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:21312:2871":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9604:15773":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1595:10145":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:6655:8439":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9153:15765":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"30:624:2225":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:3058:14690":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13456:19922":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:40172:8271":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:8387:2453":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:7126:2124":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"11:760:2470":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:8292:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9840:15802":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:20877:2599":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:12745:2493":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1696:10154":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2475:8287":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:14819:2345":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:13639:32181":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:8078:2139":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"6:547:9246":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:7599:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"21:15135:32170":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"5:6788:8206":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:30419:8201":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1582:2487":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1826:2276":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:15009:2181":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:7268:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11872:18657":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"21:14961:2356":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"2:43931:8152":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9399:15769":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:12280:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"6:4524:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43754:8128":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12033:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4992:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11234:16013":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"21:6707:32217":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:10237:2124":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"1:8864:2830":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6868:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:8605:15733":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:9759:26299":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:6608:32146":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"21:11070:2222":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:44210:8179":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9032:15584":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11726:16022":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5920:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:13344:2253":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"5:6798:8207":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:46021:2865":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:21134:2866":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6815:15638":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"21:14988:20059":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"16:4536:15231":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:2131:2412":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47677:2903":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:0:1948":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:0:1735":{"crate_id":21,"path":["futures_util"],"kind":"module"},"6:506:9242":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1500:10134":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:4701:2711":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10621:15961":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10175:15773":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:55:14629":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:7912:20590":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:15001:32051":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"5:6637:28512":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:707:8139":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4171:2704":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:10978:32217":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"5:5612:8205":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"9:0:1942":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:2901:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"21:14584:32217":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"21:15056:2179":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"2:42436:8083":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6396:15622":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6571:15632":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:6791:27032":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11272:15777":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:14252:2334":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"1:929:2475":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4770:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4054:2681":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"21:11692:2232":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"22:7:1757":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:41798:8569":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"21:4823:2282":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:40436:2200":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:12558:2248":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"21:11727:32217":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:946:2477":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13109:19211":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:1121:2482":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6484:15627":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2766:8475":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4556:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:7864:2597":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:7053:2129":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"17:12891:19196":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8910:2828":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3739:2656":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2830:8485":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:12048:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12118:18674":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:8125:15682":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11371:15781":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:6594:2820":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:894:2276":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:5918:2231":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"1:3221:2635":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:5429:2783":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:14347:2337":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:21062:8506":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6900:15642":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11610:14618":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:12053:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:4262:8235":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1673:10151":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:2690:28428":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1257:2479":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10956:2785":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10161:23169":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4606:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:6465:2819":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"27:136:2822":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"5:3330:2470":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:285:30727":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:21178:2599":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:671:20021":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14227:19976":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:3414:2609":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6386:15621":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11600:15791":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:9292:8083":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:1561:2276":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:92:2599":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:10947:22322":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:12734:2236":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:9555:2202":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:2514:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:3220:14691":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:48060:8041":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"21:14837:2347":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"17:12631:19180":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8217:2620":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:13513:2258":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:7231:8438":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6763:15636":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:850:2466":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3998:2676":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:7636:2599":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"18:515:20030":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:14605:2340":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"16:6886:15641":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13991:19960":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10957:16003":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"21:8399:192":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"2:4768:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:12508:2146":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"20:17:2077":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:296:33501":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:9936:2599":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"30:648:20031":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1554:2252":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11696:16021":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1822:2467":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:6044:1753":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"16:5382:15583":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12618:19179":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7593:23270":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"21:13734:2466":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"1:4567:2729":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:42300:2808":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9977:15774":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:14699:2342":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"1:1558:2467":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10293:15864":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:42222:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:12534:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"17:13847:19945":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:43448:8117":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:42429:8075":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:11685:2233":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"18:590:27206":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12161:18677":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:135:2120":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"17:13167:19214":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2795:8479":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:4032:2677":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"21:13436:32217":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"5:3581:2252":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:14979:2358":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"17:14015:19963":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11354:15780":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9952:15811":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:1756:8517":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8834:2791":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40120:8269":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:21919:26235":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:10251:2795":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:579:9251":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:8068:15679":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:12078:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3180:23558":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41503:2647":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:1587:2488":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:14463:32217":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:2631:2338":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10323:15901":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10825:2287":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12579:19176":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2594:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:12717:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:40474:27036":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"30:872:20026":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:3810:14721":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:10000:2225":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:10118:2466":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:12353:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:660:20020":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6607:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:39267:8069":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:46691:2936":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11044:23281":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6850:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:21180:2868":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:3171:2252":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:7920:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:5128:2807":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"29:17:1749":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:45937:2906":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:21186:2870":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:43854:8159":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:14771:2344":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"6:5967:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11542:15737":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:21015:2881":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11815:18654":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6015:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:9978:22305":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10013:15815":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:43949:8153":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"20:143:20041":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"26:43:33580":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:0:1949":{"crate_id":17,"path":["object"],"kind":"module"},"16:2589:14672":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:8043:15678":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4698:15297":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:11852:8141":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11753:16023":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"20:82:2078":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"6:532:9244":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6232:15611":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:4306:20047":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"21:12803:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"6:5044:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12303:19161":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2465:14667":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:22791:2666":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:43511:8122":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:30619:26730":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:14177:19971":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11379:22058":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4568:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13882:19949":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:4576:1745":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:7316:2134":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"6:4543:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:1973:15851":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5363:15582":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"30:97:20003":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:11923:8165":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:7047:2190":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:2133:15845":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"9:393:14455":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:12043:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:7310:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"30:777:20020":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:47141:2891":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:6930:28529":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:10849:32217":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"21:9853:32217":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:1544:2609":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"21:11565:32217":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"24:9:20043":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:47347:2925":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:43419:2223":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11924:18660":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:9878:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"5:2223:28476":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12051:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8194:2197":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4729:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:256:31574":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4637:22967":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10339:15871":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:40313:2561":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:12470:2151":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:2194:30745":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:3178:2486":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:41731:2252":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"30:638:20027":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:43186:8109":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12605:19178":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:44427:2861":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:7725:8436":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:10683:32217":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:11167:22869":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:8834:32217":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:13937:19954":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"13:0:1939":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1733:10157":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4396:15187":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:7128:22070":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:4904:2736":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10529:2634":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11241:16014":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12041:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45897:2894":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10511:15909":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:4133:22045":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:4267:8236":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"20:0:1733":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:11510:32195":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"21:11326:32217":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:13834:2280":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"21:13335:2252":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"21:11624:2230":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"21:12760:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"16:3042:14689":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4489:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4841:15320":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:23:2095":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:14150:19969":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:582:15752":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5836:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"10:0:1943":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13427:19919":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4955:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9518:15771":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46803:2890":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:20743:26919":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12552:19174":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:0:1832":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:43618:2619":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"27:369:2822":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"2:40226:8266":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6796:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"30:632:20030":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:9768:32217":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:5413:2782":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5008:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13604:19929":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:40995:8435":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"31:102:1802":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"5:1118:28453":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7529:2470":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"11:2049:2480":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:7778:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:42261:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:10405:8131":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11007:15975":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:11633:8632":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:555:2419":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4740:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:915:2472":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:43836:8158":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:9744:23290":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12936:19199":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:5673:15592":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"15:394:14621":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:9661:8595":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:5775:15597":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:8470:2155":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:2787:2858":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:46464:27112":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13303:19916":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"21:14754:32217":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:7303:32217":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:42181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:8138:15683":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:43428:8118":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4984:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"10:44:14564":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"21:11398:32155":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"1:8161:2287":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:43459:8108":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:40558:2213":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:15038:32217":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"21:13957:220":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"18:699:20024":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11568:15789":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"27:140:20100":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"6:6711:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:6744:8445":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:7759:2542":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4908:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:44639:8056":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:21988:27168":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:652:2225":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:4928:15335":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:96:20003":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:47489:2897":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10609:15960":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:7665:15667":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:400:15750":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7517:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4794:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"26:0:2086":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"16:6303:15614":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14102:19968":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10486:15907":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8296:2700":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10795:2597":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:8139:2142":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"18:755:20026":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:4363:28545":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:14419:32217":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:22040:26741":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:14543:2339":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"9:486:14453":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:41874:2467":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5015:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:10262:32217":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:7852:2596":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12049:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:8103:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:12951:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:1041:2479":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:3219:2634":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:9032:22682":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:7609:14409":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:2567:14671":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12840:19192":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:11877:8136":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:45796:2928":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11199:16001":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2443:14666":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:8659:15754":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14216:19975":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:2760:1741":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:11979:22330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:3669:28512":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:9288:8075":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:10466:2214":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"17:8632:15753":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:15204:32168":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:8312:2710":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"7:79:14432":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:4564:15235":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:7522:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:13170:2247":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"17:12479:19170":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4341:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:7762:26922":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13448:19921":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8856:2252":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14026:19964":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9442:31261":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1603:10146":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:1838:2485":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:42767:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8113:2598":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:40405:2197":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"21:10944:2219":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"21:15237:32197":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:14489:109":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"16:7679:15668":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"21:11375:32217":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"5:3720:2341":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11310:2796":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:8200:2141":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"5:5954:2807":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4754:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3442:2345":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:9296:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40977:8433":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:44038:8172":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:904:2470":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40497:2124":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2756:2857":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2747:8064":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:638:2446":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4155:2702":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1513:10136":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13957:19956":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:14954:2355":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"2:2836:8486":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5890:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"9:330:14510":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4862:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10430:15904":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7474:15655":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13513:19924":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:20741:26914":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:7558:32119":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:9926:15813":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:13368:2256":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:10522:2210":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"1:11617:14618":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:6130:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:42745:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"30:699:8283":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:450:14454":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6427:15623":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8173:2289":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:9134:2603":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"21:7234:2130":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"2:26048:2661":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10544:15957":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6531:31194":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"21:13898:2281":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:14329:19982":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14054:19967":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:40219:8265":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:39522:8242":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13368:19918":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2527:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2317:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5955:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9083:15739":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:13362:2255":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"2:48022:8039":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9318:15768":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:311:30725":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9734:15776":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"21:12091:2142":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"5:1288:2480":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:7206:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:8757:32217":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:6540:15630":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4413:2426":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:1858:2488":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:8656:2162":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:43485:8106":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7289:15649":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:10470:23274":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:42727:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14380:19986":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:2314:14660":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44264:8163":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6618:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7631:15666":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:10336:8127":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7362:15650":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:13323:32194":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"1:4635:22965":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"11:399:30735":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:43782:8156":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"21:9207:2177":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:9809:2205":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"5:5839:2276":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:9202:22882":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6057:14631":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:1411:2252":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:20683:8283":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:46386:27147":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6323:15616":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7255:2754":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:42025:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7693:15669":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:5498:2785":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:3970:2673":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11367:22343":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:12619:32182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"31:65:1797":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"1:8848:2792":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12031:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:8086:15680":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:1911:10320":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8457:2769":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:4049:8063":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40162:8270":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6713:14603":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:30513:26697":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:491:31940":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:13823:2279":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:3517:2352":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:5393:2781":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2699:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40598:8443":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:6439:2276":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:14910:2218":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"2:43359:27030":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:9328:2221":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"6:4436:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3841:2658":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4374:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8334:2741":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4796:2692":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"8:0:1941":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:10427:2789":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:47923:2964":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2704:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:4046:2679":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:8872:15760":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5080:23195":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10330:15872":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14395:19987":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5863:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:836:2477":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2820:8482":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12691:19184":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:919:2473":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12952:19200":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:40105:2441":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9118:15764":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:22179:2667":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7833:15675":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:48137:8044":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40987:2254":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"27:127:20099":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"9:507:14457":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:41858:2252":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6160:31056":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:7349:2465":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"15:288:14609":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"21:6417:32203":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"21:9416:32217":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"2:12435:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"14:165:14586":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:7418:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:6427:32202":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"2:47981:8036":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7407:15651":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10253:15844":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:573:9250":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:8042:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:62:8868":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"9:426:14456":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4938:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:39702:25265":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"21:14074:32217":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"6:6565:9288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:12669:32183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"16:4323:15138":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4872:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:502:2412":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:531:2417":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:7474:8184":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:1831:2470":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:45622:2921":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11669:16020":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5807:15598":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:6485:28512":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"29:25:1750":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"21:2555:32110":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"6:6136:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6332:15617":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2402:1768":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:14403:19988":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13719:19935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12254:19160":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:261:31487":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:40517:2126":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:8740:15756":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5651:15591":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"28:207:2481":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"21:6255:20062":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"1:12040:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:9192:22891":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:47941:8032":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5849:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4716:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2399:14664":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9027:22694":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7061:30897":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11888:18658":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11943:18661":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:47885:2943":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:7998:23192":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:6238:20063":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"2:46487:27148":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:3441:14693":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11352:22413":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:2212:2319":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4518:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:1138:28273":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6573:10093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"27:497:20116":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:4117:8247":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3343:2625":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:10206:32217":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"2:21866:26249":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:1184:15824":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4002:26920":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2791:2860":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1570:2485":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:7235:8437":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14359:19985":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:43800:8157":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:1818:2252":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9806:15800":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"28:199:20119":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"16:8210:15687":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2555:2337":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:7725:2451":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"24:15:20044":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:2771:8474":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:10702:2215":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"17:11955:18662":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:6941:2125":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"5:2049:2503":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"21:7701:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:12050:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:2170:28390":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:2105:15886":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:10228:2217":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"5:4194:2609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11428:15784":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"27:72:20114":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"21:7447:32119":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"30:853:20018":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:488:9239":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:3594:2466":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:2959:8058":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:356:2436":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2497:14668":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14163:19970":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40953:2256":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4723:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:22167:2664":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12671:19183":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:10978:8114":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:40184:8153":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6977:15645":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22146:27165":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:927:2165":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:4965:15348":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6145:3004":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44132:8176":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44383:8621":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:11668:8132":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:45688:2927":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"30:691:2225":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:3295:14692":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6516:15629":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40488:2123":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4315:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"21:11108:32217":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"2:4384:8243":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:97:30739":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8926:2826":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:22153:2665":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:10547:32217":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:2523:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39345:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:7199:2491":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:12116:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:5987:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:14867:2350":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"5:7545:8202":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5940:15602":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:2168:30742":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13771:19939":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2520:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:1845:2486":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13749:19937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:10474:2212":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:10904:8120":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13083:19209":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:4002:2276":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2815:8481":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5704:15594":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:7182:2500":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13179:19215":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1102:28268":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:1649:10149":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:12653:3004":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:6906:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:20915:2875":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"21:5120:20057":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:4026:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"18:681:20022":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1690:10153":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"13:110:30797":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40396:2512":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40207:8264":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"21:1089:2175":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"6:4704:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44387:8639":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12769:19188":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13923:19953":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12174:18678":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7231:28477":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"27:0:1765":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"10:36:30721":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:8152:15684":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:41622:2650":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:10143:2620":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:7280:2132":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"6:653:9300":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4848:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12012:22342":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:5975:8842":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46645:2930":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:13767:2277":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"11:1538:14579":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13055:19207":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13659:15818":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2744:2291":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:5100:15387":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:42422:8074":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7622:15665":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:5135:1768":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:40526:8442":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4868:15323":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4949:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:7281:2297":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3524:2617":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:20726:26918":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:40742:2220":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3183:28507":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:667:2472":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7240:31241":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:2568:32034":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"6:7272:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:12413:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"11:2201:2464":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4695:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"31:0:1796":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"17:10799:15921":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12089:18672":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5959:15603":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"21:20:1063":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"16:8252:15688":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:1733:8518":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:21:1063":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"16:6658:15633":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:47950:8033":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8230:2655":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2808:8484":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44355:8622":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:11382:8582":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:13045:2243":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:40939:8430":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:8794:15758":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"14:202:8182":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:20971:2880":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:5558:2786":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"30:716:31939":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10581:15938":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13016:19204":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:8924:15762":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:9256:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6317:15615":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:43608:8147":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6541:2817":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:8164:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9744:31750":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11979:18664":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2874:14684":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:8262:2143":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"27:439:2827":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:21048:2876":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:7282:2467":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12457:19169":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8290:2709":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:35:2517":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5737:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10786:15923":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"30:824:8139":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:9727:26908":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"21:12044:2125":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"5:2035:2341":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3183:20602":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:530:30900":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"21:6881:2126":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:11857:8137":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1464:2468":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10741:2740":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:40574:2215":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"21:15119:32131":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"2:45712:2887":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43700:8160":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"30:753:31952":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:4042:2678":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:47961:8034":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:568:9249":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8990:2416":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4678:2670":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:13478:32217":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"1:12037:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22428:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11813:23287":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10575:2422":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:12690:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10760:22303":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"21:6629:1762":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"17:12792:19189":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:123:8923":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7511:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:4506:15225":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:43498:8107":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:45919:2900":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:6823:2131":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"13:226:30750":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2687:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4428:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3800:2470":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:1590:10144":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2474:2599":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6775:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9706:15775":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:57:1764":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"17:9344:31282":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:635:2445":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"21:11994:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9274:2619":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:10263:8133":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"30:798:20022":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10303:15899":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1709:10155":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4824:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5882:15600":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"27:149:20102":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:11155:16009":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"21:8692:32217":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:2900:14685":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:10913:32217":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:9748:2122":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"1:4698:2738":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:14707:2279":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"1:3940:2671":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10654:15937":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9170:23193":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"29:20:1751":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"1:10532:2636":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:3025:14688":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8878:2827":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9054:22364":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:14301:19980":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"21:14994:2416":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"17:11290:15778":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12333:19163":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4473:2711":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:3912:2154":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"21:14284:2335":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"17:11498:15787":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:11175:8639":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"21:8017:2140":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"21:11041:32217":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"17:10123:15819":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:1839:2539":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3200:8066":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12044:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3984:2674":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43682:8161":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44558:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:526:9243":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:7676:2149":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:10065:2225":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"18:0:1950":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:22101:26747":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13778:19940":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5994:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:44367:8627":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:14197:19973":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"21:8871:2167":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"6:4475:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:23238:2660":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7331:31239":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:1426:2466":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"30:726:31948":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:169:2119":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"6:4963:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1681:10152":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"14:40:18654":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13620:19930":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2168:8507":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"15:306:14610":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"21:14803:32217":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"17:10110:15848":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3212:2485":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:6961:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:11220:16012":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13707:19934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9153:2856":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:12443:2238":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:40946:27031":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:10391:8128":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13949:19955":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5775:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2663:14675":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:21625:2863":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:6538:2816":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:41986:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46265:2907":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22063:26750":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7515:15659":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:332:30736":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"21:14160:32217":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"16:2373:14663":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"30:655:20032":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8497:2771":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6044:30462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46927:2902":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:39529:8227":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:8713:2163":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:46991:2957":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40549:8446":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22593:2428":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:10728:32217":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"16:6018:15606":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8549:2252":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5799:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:844:2478":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5900:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:47970:8035":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:46243:2901":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2517:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13548:19925":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8539:2772":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"30:81:20002":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:10750:2216":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"2:41645:2651":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7295:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:12448:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:6991:2127":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"21:14230:32217":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"6:4616:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:1075:15816":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:13353:2254":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"27:451:2829":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"11:749:2276":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"21:11205:32217":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:22626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:8997:15734":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:8639:32217":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:6805:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40728:2218":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:5593:2122":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11520:15788":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:10634:32217":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:7553:15662":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10417:15874":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:30194:2662":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4420:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"21:8782:2164":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"0:56:1080":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"21:13494:2257":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"28:33:2467":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"6:1536:10139":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7396:26679":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:10369:2204":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:12077:18671":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46721:2942":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9777:15799":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6834:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:3172:8231":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11127:15787":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:6939:15644":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"15:327:14614":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4895:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:45867:2888":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8942:2829":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4506:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:1821:2506":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:40962:8432":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:8814:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40418:8440":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:8542:15735":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"14:187:14593":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13795:19942":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4380:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"21:402:23279":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"6:5058:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"30:788:20021":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:27:2599":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"11:657:2467":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:10399:32217":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:4304:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"21:7822:2145":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"17:3186:15920":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11473:2657":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11155:2791":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13332:19917":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3298:2632":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:48045:8040":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"31:136:1800":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"17:10832:15918":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:7731:2483":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:5049:23195":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:13967:2259":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:2925:2292":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"21:6684:2123":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:41657:2652":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:5824:2454":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13732:19936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:327:2135":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:41947:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:6843:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:8965:2812":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4810:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:7278:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9913:15814":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:20696:26777":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:636:31952":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12354:15963":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:793:2471":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:8982:27620":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:6978:23712":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:40192:2441":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:48098:8043":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2988:2515":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:20711:26777":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"21:13586:2259":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"1:952:2478":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10148:15847":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41866:2466":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12318:19162":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"21:7638:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11996:22670":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"7:32:14425":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:2141:28489":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"14:160:14585":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3155:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:14189:19972":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:9939:2196":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"1:10943:2542":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:13404:192":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:10597:15959":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13971:19958":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9887:15823":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:14:2058":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11791:18653":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:12042:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:4190:8097":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6156:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:2541:14670":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"28:67:33609":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:12047:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10555:15958":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1565:2470":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"21:9311:32217":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"1:10103:23198":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"27:489:20115":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:1702:2697":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"25:9:1744":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:619:2443":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12053:18669":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:9118:2174":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"16:7763:15673":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3186:20595":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6372:15620":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13757:19938":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11034:16005":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7855:15676":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"20:131:1756":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:13492:19923":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:482:9238":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10994:15976":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6667:14604":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13894:19950":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:44609:3003":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:8388:2757":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:12497:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:4032:14871":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:80:20002":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:5318:28512":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12394:19165":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:14904:2354":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"28:51:2276":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"15:0:1947":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:6637:2122":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:3460:2288":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:22758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11967:18663":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"21:12774:2250":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"30:761:2225":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:13854:19946":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10361:15897":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"21:10180:2123":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:9571:31572":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:695:2473":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:5074:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3389:8214":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:10563:2211":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"6:4469:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:1068:14575":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"27:11:33589":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"17:434:14634":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:43650:8126":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:6795:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:42702:27187":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4315:2707":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:6608:2821":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6850:15639":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9188:15766":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13029:19205":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11591:8050":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:12479:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"1:362:2437":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"21:13560:32217":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"16:6250:15612":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11118:16008":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13125:19212":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"29:27:1748":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"21:14671:2341":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"17:14044:19966":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:2882:23048":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:14236:19977":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:9281:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40506:8447":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4887:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7463:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:6069:23267":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10520:15910":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4781:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:4476:2167":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:11144:15999":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:32300:8455":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:39:2097":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:44664:27199":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"21:12846:2239":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42103:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:14396:2338":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"2:44566:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:644:2466":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41520:2648":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"27:468:20113":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"17:10671:15962":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:2461:28430":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:9170:32217":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:10871:2220":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"21:9493:32217":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"17:12982:19202":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40271:2560":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:7016:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:44375:8626":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10458:15905":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:1011:28512":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4496:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:6894:23282":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:9614:31571":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11178:16010":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40356:2574":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"21:13261:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"16:7568:31035":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:13709:2252":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:41883:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11385:22046":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:766:20019":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10633:15917":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:7552:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"21:11005:2129":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"11:723:2468":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:47599:2931":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44406:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:7529:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:22055:27195":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:44363:8623":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:32213:8540":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6986:15646":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"30:665:141":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:13812:2278":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:3651:2467":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"21:9430:110":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"28:46:2466":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:44221:8180":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12526:19172":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12377:19164":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:21533:2882":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"21:13761:2276":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"1:2377:2585":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5882:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:574:2225":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:46067:2929":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6067:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:3867:14754":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10535:2632":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12646:19181":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"21:6145:2231":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"6:554:9247":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13999:19961":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10906:15924":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:6079:2609":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:13087:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"1:5752:2810":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:30989:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1575:10143":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:424:1736":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"21:338:2136":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"30:114:20004":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10883:15926":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46289:2956":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6705:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4495:2712":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:2166:8506":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"11:2174:28091":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:6061:1755":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:14350:19984":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7707:15670":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8800:2789":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7564:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:13118:2246":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"16:2781:14680":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"21:15180:32121":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:12905:19197":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:9467:2200":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"6:4638:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:10653:2209":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"21:781:2154":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:9899:15819":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:5535:2204":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:8021:15677":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:5860:1744":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:13803:19943":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"27:154:2828":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"0:46:1642":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"17:9821:15801":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6769:8205":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44016:8171":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8897:2825":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5829:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"21:11838:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"11:736:2469":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"21:12194:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:2293:14632":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3517:2276":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12851:19193":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12878:19195":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:878:2490":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:11866:8139":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:7618:2147":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:7743:2541":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:7337:2464":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:1918:8070":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:7387:32217":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"1:5561:2788":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11603:23204":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5767:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:10604:2208":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:6726:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2694:2290":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4456:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"21:15165:32130":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:3160:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1473:2469":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5689:15593":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14315:19981":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:11594:8633":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:3499:2356":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13140:19213":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3261:2637":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:68:1739":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"16:3580:14694":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:940:2476":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"22:0:2084":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"17:8899:15761":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:7020:23272":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:8431:2153":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"16:7584:15663":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7505:15658":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:4393:8244":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7025:30822":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2777:8477":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11450:22074":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:3736:2657":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4833:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:9533:32217":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:41537:2649":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12052:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40132:26666":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12065:18670":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:14373:32217":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"2:2929:2293":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"21:12972:2242":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"21:6102:1767":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:9286:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:5629:2823":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5626:15589":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:43410:8115":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:2709:2427":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12592:19177":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:40252:8263":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9866:15804":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"21:13222:2249":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"14:215:14594":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6502:15628":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:4476:15219":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:6589:9123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:6079:1752":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:4815:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1663:10150":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:5125:20056":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"1:2591:2621":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:7682:2422":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7525:15660":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11535:2658":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:44371:8625":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40233:8267":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2611:14673":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"27:146:206":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:20879:2873":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"21:14970:2357":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:11074:15788":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:21528:2874":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:4014:26906":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2361:2580":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8176:15686":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:42927:8292":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12346:15965":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4748:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1631:10147":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5818:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:7250:9198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4550:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4929:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:149:14637":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"21:7748:2137":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:22494:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:43520:8125":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7592:15664":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40968:2253":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2352:14662":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13981:19959":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2737:14678":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:113:20004":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2209:2576":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6470:15626":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:3894:14757":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"11:2033:2479":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:817:2476":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12711:19185":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7433:15652":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:9497:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6077:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5737:15596":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"21:13679:20045":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:22692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:12035:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:11412:8145":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"9:357:14470":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:1852:2487":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10969:16004":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:11156:32217":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"5:276:2298":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:4620:15243":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5916:15601":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:643:2447":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:6306:3005":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9290:8074":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:2966:29869":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4587:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:20929:8506":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12004:18666":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:4985:2609":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"30:816:20024":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:538:20032":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:11812:2775":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:39411:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:10186:8132":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7656:2423":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:3934:2672":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:11535:2228":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"21:12890:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"1:837:2252":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7445:15653":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:10123:2206":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:11264:16015":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:1523:2502":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:719:20017":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:5028:15363":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:7425:2557":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9246:2356":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6841:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:47996:8037":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:39455:2458":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5414:31154":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7412:2556":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:4184:2705":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:12685:2235":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"16:6554:15631":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44067:8174":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11109:16007":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:9505:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:14005:32217":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"16:4900:15331":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"21:4408:23270":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"21:12067:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"5:5366:2161":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2761:2859":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6724:15635":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:10322:2784":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:47739:2937":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:4724:15299":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:986:2480":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13905:19951":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"21:14857:2349":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"17:9966:15773":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:41566:27200":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:30455:26651":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:5398:15584":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10812:15922":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:40346:2575":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:44622:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12035:18668":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:3082:2516":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2492:2335":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:331:2416":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"5:7245:2467":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7073:15647":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:41739:2466":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5805:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11623:15792":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12727:19186":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:44084:8175":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2387:2590":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:564:20033":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11992:18665":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:43924:8142":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:335:32053":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"1:1055:2480":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:13743:2467":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"11:2180:30738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:41609:2659":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14007:19962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6128:15607":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11852:18656":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:9978:32217":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"6:5979:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:2375:2584":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:20927:26422":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:42142:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:5720:15595":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11905:18659":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2697:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:40200:8152":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:41747:2467":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:6720:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6239:31244":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8304:2655":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11832:18655":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8211:2619":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:8509:205":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:22004:26734":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4483:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"25:0:1743":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"1:7920:2628":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10805:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"21:14481:2275":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:11268:32217":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"17:10390:15873":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:22659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:4220:32112":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"21:8405:2151":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:881:2469":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:44359:8624":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6036:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9485:31590":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:21749:2869":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:45734:2893":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"21:6631:1758":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"11:1611:30747":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10499:15908":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:46097:2935":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9528:31499":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5639:15590":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4818:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:44231:8181":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:8389:2756":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1482:2471":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3238:2488":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:2060:2481":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5612:15588":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4962:2746":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:562:9248":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13591:19928":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:8992:2172":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"2:2749:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:8141:2255":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:7661:2425":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:507:2225":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"9:52:14473":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13639:19914":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12539:19173":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:13410:2155":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"17:8711:15755":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11050:23248":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:1638:10148":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43167:8612":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"30:836:20017":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"21:11179:2224":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"21:9262:32217":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"17:10351:15902":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9716:31890":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:49943:2884":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:21637:26780":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6931:15643":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:45974:2961":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6688:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4535:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:41756:2754":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4913:2737":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2850:8489":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"28:37:2252":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"2:4148:8248":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:15052:2180":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4664:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:43576:8154":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:8496:32217":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:11300:2226":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"21:5544:2255":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:2859:8491":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:1778:2522":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:6720:2126":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:7718:2494":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9946:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:39508:15687":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"21:9230:2197":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"21:6628:1759":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:13870:19948":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:11781:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:3508:23083":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12148:18676":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5553:15585":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:4753:15304":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5342:15581":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11767:18652":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"30:769:2225":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:6193:22679":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40465:2203":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:10312:2126":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"6:1545:10140":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:14878:2351":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"16:6197:15609":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:9540:8289":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9115:2831":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2783:8476":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43886:2344":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45766:2923":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:47847:2909":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:7534:23210":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:3217:28500":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:41789:2755":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3145:8493":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"30:707:27206":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7099:15648":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4441:15208":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:782:2211":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:3735:2503":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:9594:32217":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"5:7290:2467":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44379:8620":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40756:2222":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:595:9253":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:1917:2554":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4413:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:9040:15648":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6671:10263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:22725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7038:30902":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40427:8441":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12994:19203":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:7497:2146":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"5:1492:2472":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8150:1744":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:3744:14703":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:9624:2203":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:7874:2594":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"30:546:20028":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9296:15736":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:12045:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43736:8130":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:8841:15759":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"30:556:31940":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"17:10223:15850":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:42952:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6171:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1302:2482":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:7736:2484":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"20:32:1734":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"24:309:20055":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"17:10051:15809":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:923:2474":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:2332:14661":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:7523:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:6161:23276":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:6313:20060":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:6444:32126":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"2:45666:2922":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3386:2253":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:40539:2212":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1557:10141":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10066:15837":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:2842:8487":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:7847:2595":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5745:2809":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:7186:2128":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:8494:8137":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10313:15900":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:12034:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10815:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"26:37:33579":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"17:10199:15852":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46119:2941":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4328:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:42064:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11194:2603":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10529:15956":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:14025:2283":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:14337:2336":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12502:19171":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"21:9453:32217":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:8330:2739":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:1717:10156":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:10834:22865":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7484:15656":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:11916:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:5779:2811":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10765:23093":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12412:19166":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2935:2295":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:7586:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"21:11404:32223":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:41586:26766":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"0:0:1831":{"crate_id":0,"path":["futures"],"kind":"module"},"21:7981:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"14:31:14585":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:599:31939":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:10458:2207":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"1:12029:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:644:2225":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"21:15067:2182":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"5:3204:2487":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:736:20018":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:13795:32217":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"21:6199:166":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"1:11033:23279":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:9390:2199":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:43540:8124":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:4234:2252":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"21:8611:2161":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"6:5877:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40283:26679":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10080:15863":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:12030:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4842:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:48075:8042":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:624:31947":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6915:30910":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:6630:1761":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"5:2962:28436":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:7261:28242":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:13725:2252":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:8278:2650":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:39389:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"1:7928:2341":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:2243:28356":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:41480:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"30:883:20019":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9048:15738":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2759:14679":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4463:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4395:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:4609:8257":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:1503:2473":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13964:19957":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:10377:8130":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:12915:2244":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:46335:2963":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"21:15098:32128":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:3321:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:42974:26631":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:3395:15925":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12864:19194":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:14195:2285":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:39487:8494":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11416:15783":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10931:15990":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:41807:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13683:19932":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11388:15782":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:4371:2261":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:2156:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"31:109:1799":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"31:125:1804":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:9199:2176":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:4789:26952":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:6008:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6357:15619":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6864:31050":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6028:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7739:15671":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:1048:30749":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"14:0:1946":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5994:15605":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11454:15785":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11642:15793":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:968:2479":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6214:15610":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"27:366:206":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"20:97:1740":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"17:9561:15772":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:10968:22347":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2689:14676":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46881:2896":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"29:0:1747":{"crate_id":29,"path":["futures_io"],"kind":"module"},"6:1506:10135":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42672:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"21:14889:2352":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:32209:23153":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:3300:2633":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4685:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:4258:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10266:15843":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:46433:27113":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2752:8454":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13155:15790":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11514:2656":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2803:8480":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:2511:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:14313:32217":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"17:14282:19979":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9487:23050":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"21:9279:2198":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"6:4764:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:8771:15757":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"31:100:1801":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"21:11813:2138":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:11872:8138":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:13283:2245":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"1:9282:2538":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:2164:15870":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13043:19206":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12921:19198":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:261:28512":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2216:2324":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:7558:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"30:0:1950":{"crate_id":30,"path":["memchr"],"kind":"module"},"11:630:2252":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:8975:32217":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:46957:2908":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"30:844:20025":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:39314:8492":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13069:19208":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10097:15849":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"21:13698:20046":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:8872:2467":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:10094:2252":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6438:15624":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:8418:2152":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"17:11467:15786":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8555:2773":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:3635:14695":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:40266:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8008:2286":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:41815:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6175:15608":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:7721:2497":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11056:16006":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:39433:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9990:15817":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:2359:2579":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:10500:32217":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:2914:2083":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13566:19927":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"27:124:20098":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:8977:26921":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:39494:8218":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:7523:15752":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:13869:32217":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"18:481:20028":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43940:2441":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8204:2218":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:30385:2499":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"9:177:14559":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10339:23047":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4401:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12815:19190":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:11745:2137":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:9655:15774":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13574:19915":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"21:7323:2133":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"1:11141:2790":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:8393:2150":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"2:41908:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:0:1945":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:822:2489":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:40456:2202":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:22028:2663":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12966:19201":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:4329:8241":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43530:8123":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:8947:2171":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"16:7753:15672":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"21:14828:2346":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:21747:2599":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:11304:22675":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:504:15751":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:11617:8630":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10471:15906":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:2825:8483":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12365:15964":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2932:2294":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:4742:2691":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:4393:2609":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:690:20023":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8949:15763":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:12054:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4387:2701":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:48007:8038":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"28:0:2087":{"crate_id":28,"path":["slab"],"kind":"module"},"2:44053:8173":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7546:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9850:15803":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:7463:15654":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"28:216:2479":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"1:10986:2792":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:12055:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1672:28512":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:3166:8232":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4740:2690":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22461:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"31:120:1803":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:13718:2467":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"5:6558:2467":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4389:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4944:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:7349:32217":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"5:7191:2467":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:5362:2199":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9016:15583":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:11437:32156":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:1747:27179":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10937:8121":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2799:8478":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8236:2654":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5379:2780":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:42935:27188":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12036:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:47801:2958":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3674:2653":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3938:2609":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:474:9237":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:614:31943":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:7505:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6289:15613":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8979:22695":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:10298:8126":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:43915:8143":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:42718:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13697:19933":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10843:22875":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4446:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:5133:948":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:12244:2145":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"14:221:14595":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:21310:2877":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:13147:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:10280:15898":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11337:22338":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1776:2470":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:11164:16000":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:2709:2231":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:11891:2140":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"17:10249:15857":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10981:15977":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11020:15974":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12046:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"21:11969:2139":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"17:11189:15790":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5843:15599":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:5475:2609":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:5622:2822":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:629:28501":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5051:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7494:15657":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:12522:2154":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:10340:32217":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:2359:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2698:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:43906:8144":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4917:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9223:15767":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"21:8360:32217":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:10823:2218":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"5:7211:2276":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:609:31948":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:44244:8162":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43182:26536":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:40148:8268":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4738:2687":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"21:4353:20049":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"31:38:33620":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:13014:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"1:8389:2750":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:9020:23171":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5080:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12028:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13862:19947":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:1027:14574":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11210:16011":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:6775:2122":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"16:2825:14682":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:6271:20061":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"21:7083:32217":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:5444:2784":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"4:0:1940":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:4339:8242":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2966:8068":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"31:68:1798":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:3664:1742":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:4440:8245":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:868:2468":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21200:2871":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:42982:26632":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:586:2439":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"27:432:20117":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"1:6429:2813":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:119:30740":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:727:20025":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:12642:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:13934:32217":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"5:7221:2492":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12017:18667":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:14524:32217":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:8566:2774":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:13689:2466":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:39369:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11591:15790":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1442:2467":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:9917:32217":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"21:15192:32138":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"16:2637:14674":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2846:8488":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:365:30722":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6820:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:15062:32149":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:9507:2201":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"11:1501:14577":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:541:9245":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7710:2450":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:21284:2867":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12659:19182":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:7363:2296":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"21:589:1737":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:42943:8291":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8818:2790":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:481:23293":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4973:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:4163:2703":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:14936:32217":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"2:7272:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:14722:2343":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"17:9939:15812":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44351:8619":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6692:15634":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7857:2593":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2519:14669":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1569:10142":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:104:713":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"27:483:2769":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:10101:22044":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:2984:2514":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5793:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:500:9241":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:30425:8467":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:8166:15685":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13914:19952":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5025:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:8105:15681":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:9298:8081":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:2186:30744":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2857:14683":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6625:2741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10783:22302":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:5972:15604":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7012:30892":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44196:8178":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7637:2438":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:45818:2934":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"21:9049:2173":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"2:5387:2609":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8241:2646":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11329:15779":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7372:22674":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"21:9028:32217":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"27:181:20103":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"21:11663:32217":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"21:10588:32217":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:12566:19175":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:1012:2481":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:587:9252":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10770:2593":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:3992:2675":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"21:13309:32217":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}