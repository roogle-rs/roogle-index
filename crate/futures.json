{"root":"0:0:1817","crate_version":"0.3.28","includes_private":false,"index":{"0:19-29:17:1735":{"id":"0:19-29:17:1735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1735","glob":false}}},"2:12157:31771":{"id":"2:12157:31771","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:8129","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:31772"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:8144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6628:1745":{"id":"0:31-21:6628:1745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6628:1745","glob":false}}},"0:29-21:6631:1744":{"id":"0:29-21:6631:1744","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6631:1744","glob":false}}},"2:12194:23817":{"id":"2:12194:23817","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:31778":{"id":"2:12171:31778","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:8124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:31784":{"id":"2:12199:31784","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:31784"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:8140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1736":{"id":"0:20-29:25:1736","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1736","glob":false}}},"0:83-21:6074:1740":{"id":"0:83-21:6074:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1740","glob":false}}},"0:10-20:68:1725":{"id":"0:10-20:68:1725","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1725","glob":false}}},"0:26-21:6061:1741":{"id":"0:26-21:6061:1741","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1741","glob":false}}},"2:12105:31765":{"id":"2:12105:31765","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:20005":{"id":"2:12120:20005","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:8452":{"id":"5:5429:8452","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:24884":{"id":"2:12113:24884","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:24883":{"id":"2:12110:24883","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:20792":{"id":"2:12177:20792","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:2037":{"id":"2:12151:2037","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:8129","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2037"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:8146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5133:941":{"id":"0:38-21:5133:941","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5133:941","glob":false}}},"0:70-21:589:1723":{"id":"0:70-21:589:1723","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1723","glob":false}}},"2:12076:24461":{"id":"2:12076:24461","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:31766":{"id":"2:12133:31766","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:8129","str::split":"2:12124:2309","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:31767"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:8149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:32440":{"id":"5:5444:32440","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2280","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:31761":{"id":"2:12080:31761","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12078:31760"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79-29:20:1737":{"id":"0:79-29:20:1737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1737","glob":false}}},"0:8-21:589:1723":{"id":"0:8-21:589:1723","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1723","glob":false}}},"2:12202:31785":{"id":"2:12202:31785","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:31785"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:8141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:24865":{"id":"2:12097:24865","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12098:24866"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1726":{"id":"0:67-20:97:1726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1726","glob":false}}},"2:12084:31762":{"id":"2:12084:31762","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:1786":{"id":"0:51-31:136:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1786","glob":false}}},"0:48-31:65:1783":{"id":"0:48-31:65:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1783","glob":false}}},"0:60-20:32:1720":{"id":"0:60-20:32:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1720","glob":false}}},"2:12136:31767":{"id":"2:12136:31767","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:8129","str::split":"2:12124:2309","prim@char":"1:11978:418","str::split_terminator":"2:12133:31766"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:8148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1056":{"id":"0:33-21:20:1056","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1056","glob":false}}},"5:5428:32436":{"id":"5:5428:32436","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2280","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2280","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3664:1728":{"id":"0:74-21:3664:1728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1728","glob":false}}},"0:76-29:27:1734":{"id":"0:76-29:27:1734","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1734","glob":false}}},"2:12087:24839":{"id":"2:12087:24839","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:31781":{"id":"2:12186:31781","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:28748":{"id":"2:12103:28748","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:28765"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:31759":{"id":"2:12077:31759","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1735":{"id":"0:77-29:17:1735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1735","glob":false}}},"2:12180:24885":{"id":"2:12180:24885","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:31777":{"id":"2:12170:31777","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1788":{"id":"0:53-31:102:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1788","glob":false}}},"5:5447:23820":{"id":"5:5447:23820","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:23823"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66-20:68:1725":{"id":"0:66-20:68:1725","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1725","glob":false}}},"0:73-21:2760:1727":{"id":"0:73-21:2760:1727","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1727","glob":false}}},"2:12089:24840":{"id":"2:12089:24840","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:24461","2:12077:31759","2:12078:31760","2:12080:31761","2:12083:21499","2:12084:31762","2:12085:314","2:12086:24843","2:12087:24839","2:12089:24840","2:12091:24841","2:12093:24842","2:12095:31763","2:12096:31764","2:12097:24865","2:12098:24866","2:12099:28709","2:12100:28741","2:12101:20573","2:12102:28765","2:12103:28748","2:12104:2300","2:12105:31765","2:12106:28710","2:12107:24882","2:12110:24883","2:12113:24884","2:12116:20004","2:12120:20005","2:12124:2309","2:12127:24874","2:12130:24876","2:12133:31766","2:12136:31767","2:12139:24878","2:12142:24880","2:12145:31768","2:12148:31769","2:12151:2037","2:12154:31770","2:12157:31771","2:12160:31772","2:12163:31773","2:12165:31774","2:12167:31775","2:12169:31776","2:12170:31777","2:12171:31778","2:12174:31779","2:12177:20792","2:12180:24885","2:12183:31780","2:12186:31781","2:12189:31782","2:12192:31783","2:12194:23817","2:12195:24652","2:12196:23821","2:12197:23822","2:12198:23823","2:12199:31784","2:12201:2422","2:12202:31785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:16-21:5040:1732":{"id":"0:16-21:5040:1732","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1732","glob":false}}},"0:15-25:9:1730":{"id":"0:15-25:9:1730","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1730","glob":false}}},"0:25-21:6074:1740":{"id":"0:25-21:6074:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1740","glob":false}}},"2:12096:31764":{"id":"2:12096:31764","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:2496","str::slice_unchecked":"2:12095:31763"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:31773":{"id":"2:12163:31773","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6102:1753":{"id":"0:44-21:6102:1753","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6102:1753","glob":false}}},"2:12142:24880":{"id":"2:12142:24880","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:24878","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:8116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4576:1731":{"id":"0:39-21:4576:1731","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4576:1731","glob":false}}},"2:12116:20004":{"id":"2:12116:20004","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:424:1722":{"id":"0:7-21:424:1722","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1722","glob":false}}},"2:12195:24652":{"id":"2:12195:24652","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:24788","Self::is_ascii":"2:12194:23817"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:24788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:31780":{"id":"2:12183:31780","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5135:1754":{"id":"0:45-21:5135:1754","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5135:1754","glob":false}}},"0:58-21:104:708":{"id":"0:58-21:104:708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:708","glob":false}}},"2:12102:28765":{"id":"2:12102:28765","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:28748"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:32437":{"id":"5:5432:32437","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:32439":{"id":"5:5443:32439","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6061:1741":{"id":"0:84-21:6061:1741","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1741","glob":false}}},"0:41-21:5081:1749":{"id":"0:41-21:5081:1749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5081:1749","glob":false}}},"0:32-21:37:1746":{"id":"0:32-21:37:1746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1746","glob":false}}},"2:12093:24842":{"id":"2:12093:24842","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:2422":{"id":"2:12201:2422","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:2422"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3664:1728":{"id":"0:14-21:3664:1728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1728","glob":false}}},"0:46:1628":{"id":"0:46:1628","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1783","`LocalPool`":"31:120:1789"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1783","0:49-31:68:1784","0:50-31:109:1785","0:51-31:136:1786","0:52-31:100:1787","0:53-31:102:1788","0:54-31:120:1789","0:55-31:125:1790"],"is_stripped":false}}},"0:55-31:125:1790":{"id":"0:55-31:125:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1790","glob":false}}},"0:59-2:12359:136":{"id":"0:59-2:12359:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12359:136","glob":false}}},"0:28-22:7:1743":{"id":"0:28-22:7:1743","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1743","glob":false}}},"0:65-21:1293:1724":{"id":"0:65-21:1293:1724","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1724","glob":false}}},"2:12086:24843":{"id":"2:12086:24843","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:31779":{"id":"2:12174:31779","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:23821":{"id":"2:12196:23821","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1742":{"id":"0:27-20:131:1742","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1742","glob":false}}},"0:0:1817":{"id":"0:0:1817","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1754","crate::executor":"0:46:1628","crate::stream":"21:1293:1724","crate::channel":"27:0:1751","crate::future":"21:104:708","crate::sink":"21:4576:1731"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1628","0:56:1073","0:4-2:12359:136","0:5-20:32:1720","0:7-21:424:1722","0:8-21:589:1723","0:10-20:68:1725","0:11-20:97:1726","0:13-21:2760:1727","0:14-21:3664:1728","0:15-25:9:1730","0:16-21:5040:1732","0:18-29:27:1734","0:19-29:17:1735","0:20-29:25:1736","0:21-29:20:1737","0:23-21:6079:1738","0:24-21:6044:1739","0:25-21:6074:1740","0:26-21:6061:1741","0:27-20:131:1742","0:28-22:7:1743","0:29-21:6631:1744","0:31-21:6628:1745","0:32-21:37:1746","0:33-21:20:1056","0:34-21:6630:1747","0:35-21:6629:1748","0:37-21:104:708","0:38-21:5133:941","0:39-21:4576:1731","0:40-21:1293:1724","0:41-21:5081:1749","0:42-21:57:1750","0:43-27:0:1751","0:44-21:6102:1753","0:45-21:5135:1754"],"is_stripped":false}}},"2:12124:2309":{"id":"2:12124:2309","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:8129","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:28765","str::rsplit":"2:12130:24876"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:2600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:23822":{"id":"2:12197:23822","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:1734":{"id":"0:18-29:27:1734","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1734","glob":false}}},"2:12145:31768":{"id":"2:12145:31768","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:1736":{"id":"0:78-29:25:1736","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1736","glob":false}}},"0:23-21:6079:1738":{"id":"0:23-21:6079:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1738","glob":false}}},"2:12154:31770":{"id":"2:12154:31770","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:8129","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2037"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:8147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:20573":{"id":"2:12101:20573","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2599","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:24843","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:31772":{"id":"2:12160:31772","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:8129","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:31771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:8145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1726":{"id":"0:11-20:97:1726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1726","glob":false}}},"0:34-21:6630:1747":{"id":"0:34-21:6630:1747","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1747","glob":false}}},"0:35-21:6629:1748":{"id":"0:35-21:6629:1748","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1748","glob":false}}},"2:12098:24866":{"id":"2:12098:24866","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12097:24865"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:23819":{"id":"5:5446:23819","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:23822"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1727":{"id":"0:13-21:2760:1727","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1727","glob":false}}},"0:52-31:100:1787":{"id":"0:52-31:100:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1787","glob":false}}},"2:12198:23823":{"id":"2:12198:23823","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:2169":{"id":"5:5445:2169","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6044:1739":{"id":"0:82-21:6044:1739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1739","glob":false}}},"0:81-21:6079:1738":{"id":"0:81-21:6079:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1738","glob":false}}},"0:4-2:12359:136":{"id":"0:4-2:12359:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12359:136","glob":false}}},"0:5-20:32:1720":{"id":"0:5-20:32:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1720","glob":false}}},"0:37-21:104:708":{"id":"0:37-21:104:708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:708","glob":false}}},"2:12083:21499":{"id":"2:12083:21499","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:8133"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:24841":{"id":"2:12091:24841","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:24878":{"id":"2:12139:24878","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129","str::rsplitn":"2:12142:24880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:8118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:1737":{"id":"0:21-29:20:1737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1737","glob":false}}},"2:12104:2300":{"id":"2:12104:2300","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:31763":{"id":"2:12095:31763","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:31764","crate::ops::Index":"2:2978:2495"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1789":{"id":"0:54-31:120:1789","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1789","glob":false}}},"2:12169:31776":{"id":"2:12169:31776","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4576:1731":{"id":"0:62-21:4576:1731","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4576:1731","glob":false}}},"0:43-27:0:1751":{"id":"0:43-27:0:1751","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1751","glob":false}}},"0:49-31:68:1784":{"id":"0:49-31:68:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1784","glob":false}}},"0:40-21:1293:1724":{"id":"0:40-21:1293:1724","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1724","glob":false}}},"2:12107:24882":{"id":"2:12107:24882","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:31782":{"id":"2:12189:31782","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5040:1732":{"id":"0:71-21:5040:1732","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1732","glob":false}}},"0:63-25:9:1730":{"id":"0:63-25:9:1730","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1730","glob":false}}},"0:69-21:424:1722":{"id":"0:69-21:424:1722","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1722","glob":false}}},"2:12106:28710":{"id":"2:12106:28710","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:8130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:31760":{"id":"2:12078:31760","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12127:24874":{"id":"2:12127:24874","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:8129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:31769":{"id":"2:12148:31769","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:28741":{"id":"2:12100:28741","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:28709":{"id":"2:12099:28709","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:31775":{"id":"2:12167:31775","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:1785":{"id":"0:50-31:109:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1785","glob":false}}},"0:56:1073":{"id":"0:56:1073","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:708","0:59-2:12359:136","0:60-20:32:1720","0:62-21:4576:1731","0:63-25:9:1730","0:65-21:1293:1724","0:66-20:68:1725","0:67-20:97:1726","0:69-21:424:1722","0:70-21:589:1723","0:71-21:5040:1732","0:73-21:2760:1727","0:74-21:3664:1728","0:76-29:27:1734","0:77-29:17:1735","0:78-29:25:1736","0:79-29:20:1737","0:81-21:6079:1738","0:82-21:6044:1739","0:83-21:6074:1740","0:84-21:6061:1741"],"is_stripped":false}}},"2:12165:31774":{"id":"2:12165:31774","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1750":{"id":"0:42-21:57:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1750","glob":false}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:32436","5:5429:8452","5:5432:32437","5:5435:32438","5:5443:32439","5:5444:32440","5:5445:2169","5:5446:23819","5:5447:23820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24-21:6044:1739":{"id":"0:24-21:6044:1739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1739","glob":false}}},"2:12130:24876":{"id":"2:12130:24876","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:8129","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:2309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:8114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:31783":{"id":"2:12192:31783","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:2756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5435:32438":{"id":"5:5435:32438","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:14037:19954":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11943:18650":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:43422:8095":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"26:53:36748":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"21:4476:2149":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:39379:2437":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:47931:8027":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:47523:2920":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2715:14666":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7652:2405":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"20:17:2059":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"6:5058:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4156:2683":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:2243:31555":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12394:19154":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:9809:2187":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"31:136:1786":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"1:7848:2576":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:4906:2717":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11428:15773":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:46411:28502":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"26:37:36747":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"21:10683:36582":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"18:574:2207":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8228:2634":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"20:92:2579":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"5:2049:2482":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"21:10090:36582":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:4638:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:6881:2108":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:39191:8058":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:477:26796":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4650:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5940:15591":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10812:15911":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:7652:2473":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:15192:35199":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"17:11467:15775":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:9952:15800":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:40280:2554":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40412:2105":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:14828:2328":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"21:12951:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:9474:21493":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:22715:2646":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:39432:15676":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:22025:28602":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:10522:2192":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"17:9777:15788":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:43409:8094":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40498:2197":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21843:28337":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:3510:2334":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:10550:2404":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"21:6238:20052":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"17:10863:15762":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"21:9328:2203":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:41672:2734":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:45991:2918":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22103:2647":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14007:19951":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6692:15623":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40150:8254":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:9369:36582":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:2844:8477":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:11796:8126":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:45566:2875":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:7364:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"30:769:2207":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14236:19966":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2781:2847":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:3076:2497":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6726:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5051:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:488:9228":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:1746:28664":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44525:2991":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:47663:2926":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:13014:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"17:13757:19927":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:7229:8425":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7999:20809":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"27:127:20088":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"2:47920:8026":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14150:19958":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"21:9416:36582":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"21:13335:2234":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"16:5626:15578":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:3220:14680":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4560:2709":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10351:15891":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2737:14667":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11558:14607":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"30:0:1933":{"crate_id":30,"path":["memchr"],"kind":"module"},"16:8068:15668":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7095:31391":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10226:2776":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43624:8148":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5818:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46137:2884":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11333:23283":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:42367:8072":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:62:8857":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6886:15630":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:3217:31403":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"27:140:20089":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:7254:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:43810:2326":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:2519:14658":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:10923:2766":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"21:6290:167":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:9965:21185":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:736:20007":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11007:15964":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2755:2848":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8216:2326":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11103:2772":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:2567:14660":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:2781:14669":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5067:15367":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"9:52:14462":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:21042:2579":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"20:68:1725":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:45636:2876":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13448:19910":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:7259:2538":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:0:1818":{"crate_id":24,"path":["futures_task"],"kind":"module"},"5:7272:8084":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:4043:8052":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:11727:36582":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:11019:26792":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:7327:2278":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4748:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:4603:8245":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10845:15908":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:6313:20049":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"31:102:1788":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:39439:29035":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10906:15913":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7183:2444":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:673:2430":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:4333:8230":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11178:15999":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:27:2579":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:9399:15758":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10293:15853":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:7558:35179":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:2378:2565":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:5757:2258":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:2765:8462":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:15052:2162":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"6:5025:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:14867:2332":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"16:6396:15611":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4587:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:47999:8031":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:12280:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"17:12412:19155":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"30:807:20012":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:2168:33812":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:14252:2316":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"17:11098:15962":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:13087:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"5:7230:28547":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13803:19932":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:30941:8271":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6939:15633":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:55:14618":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:719:20006":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1638:10137":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:11663:36582":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"16:2465:14656":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:1293:1724":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:46491:2913":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:22077:2645":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6841:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:21928:28594":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1495:10122":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12618:19168":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"21:12734:2218":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:2802:8472":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3963:2653":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9272:2519":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:7055:2471":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2814:8470":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:1411:2234":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2314:14649":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:681:20011":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:615:2425":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5363:15571":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:40680:2204":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12133:18664":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4785:15301":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:8210:15676":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:10369:2186":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"16:6540:15619":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"14:215:14583":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3139:8481":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6470:15615":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"30:853:20007":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6720:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13830:19933":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12631:19169":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9604:15762":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13964:19946":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7584:15652":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:10588:36582":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"18:614:35013":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8531:2753":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:45843:2889":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:7275:2279":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:589:1723":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"11:1852:2466":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:13898:2263":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:10654:15926":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8109:2578":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13109:19200":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40911:2236":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4436:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12891:19185":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:7633:2420":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:39453:8215":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:5745:2791":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"21:7778:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13435:19909":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11371:15770":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"22:0:2066":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"17:10945:15991":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8547:2754":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4606:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11398:21495":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14259:19967":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11454:15774":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5994:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"21:6684:2105":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:44120:8166":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"22:7:1743":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"16:5612:15577":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:8771:15746":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8472:2751":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"27:154:2810":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"6:6036:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44287:8612":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10445:26788":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3834:2638":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:41790:2446":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10110:15837":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:9469:8277":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"11:798:2453":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3927:2652":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12035:18657":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:13118:2228":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"6:573:9239":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:10500:36582":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:1464:2447":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:1506:10124":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"21:7016:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:7433:15641":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3344:2605":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40270:2555":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6332:15606":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:40512:2198":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44291:8616":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"30:836:20006":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:15:20033":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"1:6590:2802":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:6688:10250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47847:2953":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"28:207:2460":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"17:2164:15859":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:3932:2589":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:42851:8280":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4664:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41663:2446":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:8152:15673":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:4731:2667":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2926:14675":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:169:2101":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"6:7250:9187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:12394:2133":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"21:12972:2224":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:2771:8465":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:45791:2877":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46167:2890":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:4323:8229":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10253:15833":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10297:2765":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:14074:36582":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"6:4518:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6175:15597":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43873:8141":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:9044:20820":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6232:15600":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:10634:36582":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:1755:8505":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:12443:2220":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:44056:8164":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:2874:14673":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:9917:36582":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"1:8838:2773":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7240:34284":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:6637:2104":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:1565:2258":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:12803:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:3667:2633":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:45720:2917":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6372:15609":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:6764:32538":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:15001:35276":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:9475:15759":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:5861:2788":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10417:15863":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:32137:8528":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:898:2258":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3160:8220":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"30:691:2207":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:11156:36582":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:9048:15727":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4413:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4841:15309":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:7655:2476":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"27:451:2811":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"6:6671:10252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"21:8992:2154":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"16:5028:15352":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9866:15793":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:41573:2632":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:22004:28551":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:7447:35179":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:9688:29428":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8955:2793":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:43343:2205":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11118:15997":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7799:15663":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:504:15740":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9821:15790":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:7053:2111":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:46310:28593":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3377:2235":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1845:2465":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:8262:2125":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"6:4428:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:5615:2804":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:9217:8071":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:14605:2322":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"16:2637:14663":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4630:21726":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"30:824:8127":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12671:19172":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:11179:2813":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:5843:15588":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:4396:15176":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:12619:35299":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"1:7853:2573":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1702:2677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12552:19163":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"21:13494:2239":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"17:11832:18644":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:40380:2184":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"21:6608:35198":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"21:10340:36582":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"17:12952:19189":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:11565:36582":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:14910:2200":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:8932:2811":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2750:2846":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:11227:2195":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"1:9010:20880":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:3212:2464":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1011:32517":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43110:8097":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:8611:2143":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:2555:36161":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:32224:8443":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"30:114:19993":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2857:14672":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12539:19162":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12354:15952":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13332:19906":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4475:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9188:15755":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2819:8471":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:2201:2443":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7370:27961":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"14:221:14584":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8166:15674":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"29:25:1736":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:30379:28560":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"7:32:14414":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11955:18651":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11210:16000":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:8997:15723":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:47984:8030":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10430:15893":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"27:149:20091":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:11326:36582":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:11510:35286":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"2:3511:2258":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:6832:8416":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:1591:2467":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4770:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4488:2692":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3802:2449":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"21:8399:192":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"11:1831:2449":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6565:9277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5406:2763":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"31:38:36788":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"16:8105:15670":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13854:19935":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4463:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13937:19943":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:8138:15672":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1586:2466":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:43830:8132":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41525:2639":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40901:8421":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7994:20577":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"31:125:1790":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"2:21025:2861":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:9219:8072":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4047:2661":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"21:6961:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12374:2219":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:11535:2210":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"6:5836:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:14347:2319":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"5:4034:32517":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:450:14443":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:895:2234":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:43855:8140":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4753:15293":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:5125:20045":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"1:5551:2767":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:2213:2301":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:13718:2446":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:4371:2243":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"6:123:8912":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:11525:8622":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:6537:2798":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:20635:28769":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"21:6074:1740":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:927:2147":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"17:12106:18662":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:11005:2111":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"5:6603:8193":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:5491:2766":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:2105:15875":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10994:15965":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10249:15846":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4928:15324":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:43778:8147":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:12067:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"17:12377:19153":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:13934:36582":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:8949:15752":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"30:707:28699":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1068:14564":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"21:37:1746":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"30:872:20015":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:595:9242":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8326:2721":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9442:34996":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5437:2765":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13179:19204":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10444:15858":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:4035:2658":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:1826:2258":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:4395:2589":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:6140:2994":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"21:5818:2235":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:13767:2259":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"1:11091:2771":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4568:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6008:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:14337:2318":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"17:10361:15886":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:5972:15593":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40237:2541":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"11:723:2447":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3744:14692":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10581:15927":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:7822:2127":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"30:777:20009":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11967:18652":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:3058:14679":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"21:8782:2146":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:40300:8094":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4955:2726":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5955:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"21:7701:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:40666:2202":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:4441:15197":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:21561:28773":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12769:19177":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10066:15826":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"30:716:35025":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:494:9229":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:11343:8133":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1822:2446":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:8086:15669":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4616:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2830:8474":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8489:2752":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8900:2810":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"20:97:1726":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"6:1569:10131":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:9359:29030":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:5015:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11252:20914":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:14584:36582":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"1:2403:1754":{"crate_id":1,"path":["std","io"],"kind":"module"},"31:109:1785":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"4:0:1923":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12826:19180":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9016:15572":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13368:19907":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"30:844:20014":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9665:35000":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"21:8947:2153":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:12502:19160":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:9878:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"5:4365:32534":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3671:32517":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4039:2659":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10671:15951":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1138:31479":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7474:15644":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6986:15635":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:4434:8233":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43660:8118":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2497:14657":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:2803:14670":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11235:26798":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"28:46:2445":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"6:7278:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10123:15808":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4025:2657":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:933:2454":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:11329:8573":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"9:237:2750":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:79:14421":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"30:638:20016":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"31:100:1787":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"21:9199:2158":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"6:4955:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12851:19182":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10633:15906":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40029:2423":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3194:8055":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1673:10140":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:43514:8139":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:968:2458":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12457:19158":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40143:8253":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:14936:36582":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"30:632:20019":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:8834:36582":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:7025:34116":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:908:2449":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40086:8258":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:7748:2119":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:39411:8482":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4328:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6502:15617":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1696:10143":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2592:2601":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:13368:2238":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"18:690:20012":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8924:15751":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:590:28699":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:45690:2912":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"27:489:20104":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"1:6061:26777":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"21:10750:2198":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"27:439:2809":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:4380:2681":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"21:11838:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:10308:8118":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:10716:2720":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9153:15754":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4126:23286":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:8470:2137":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"16:6160:34107":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12566:19164":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6057:14620":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:39238:8480":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8153:2269":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:2709:2213":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"6:4389:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"15:306:14599":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:2689:14665":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21896:28501":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:8042:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:13362:2237":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:43383:8096":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9850:15792":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:5590:15576":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13043:19195":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:551:2401":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:6156:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:12044:2107":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:14396:2320":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"6:7505:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:9192:23953":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:2180:33809":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"13:0:1922":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1059:2459":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:5042:20758":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12118:18663":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:9660:36582":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:13155:15779":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:755:20015":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:14671:2323":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5882:15589":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:7589:26786":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"21:13795:36582":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"17:10013:15804":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:43678:8116":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:7303:36582":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:14160:36582":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"16:7763:15662":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:1520:10126":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:13957:220":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"21:15067:2164":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"16:3635:14684":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12303:19150":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13707:19923":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:44279:8611":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14227:19965":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"21:14803:36582":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"17:9716:34983":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4917:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:13436:36582":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"24:12:20031":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"17:12186:18668":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:8605:15722":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5673:15581":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10330:15861":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2421:14654":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5994:15594":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:6673:20687":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:7463:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7313:34274":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:2362:2560":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:7225:8426":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8222:2635":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"21:13323:35318":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"21:8164:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:6471:32517":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2785:2849":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:10159:36582":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:2388:2570":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:7638:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:10228:2199":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"1:6153:26790":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11045:15959":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"21:13698:20035":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"16:6214:15599":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:7696:31054":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4754:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"27:468:20102":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"2:5381:2589":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"21:12717:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"1:11036:26791":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:47894:8024":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:11624:2212":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5863:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:13869:36582":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"18:727:20014":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:42626:28674":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:5100:15376":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:1517:14567":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7622:15654":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:1858:2467":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6456:15614":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:43724:8145":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:4868:15312":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4862:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:80:19991":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11551:20806":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:11944:27953":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13795:19931":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4781:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:365:33815":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:914:2450":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"14:40:18643":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4626:21722":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:5284:2143":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:7522:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:7297:8171":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7445:15642":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6820:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:14489:109":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"17:11241:16003":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8854:2812":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"17:12592:19166":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:11205:36582":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:8659:15743":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"20:32:1720":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:43454:8111":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12318:19151":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:5622:2805":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:10507:2616":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:2360:2559":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:30309:2478":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:10399:36582":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:7525:15649":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7665:15656":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13548:19914":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:632:2427":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:10835:8108":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"21:6145:2213":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"5:3238:2467":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:482:9227":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:474:9226":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:3231:8056":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:582:2421":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2982:2496":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7860:2577":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:7529:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40157:8255":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43848:8130":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13749:19926":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:7632:2579":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14189:19961":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:6795:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"18:507:2207":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:6775:2104":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:11084:15960":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:10088:21494":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:9673:26783":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:3171:2234":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:12915:2226":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"1:885:2448":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:1733:10146":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:6720:2108":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:21124:2860":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13492:19912":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:43444:8113":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:10758:20847":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:4564:15224":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:13560:36582":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"5:7016:2479":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12053:18658":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:2186:33811":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:1288:2459":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:11313:8571":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:13619:36582":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:47946:8028":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"27:181:20092":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:4536:15220":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40320:2493":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:10138:20836":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:9030:15637":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44145:8168":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10038:15799":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6658:15622":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6571:15621":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:5074:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:1838:2464":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12757:19176":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21102:2579":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:12413:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:44533:2992":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:41502:28510":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2789:8467":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10161:15835":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2848:8478":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47865:8021":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:47065:2880":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:11813:2120":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:45861:2895":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6705:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5068:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:10547:36582":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:11354:15769":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8196:2200":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44588:28736":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10609:15949":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4304:12677":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2836:8475":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:5951:2589":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5008:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:3664:1728":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"16:4965:15337":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41774:2234":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:1636:8407":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13894:19939":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"21:14699:2324":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:44168:8150":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2632:2320":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:1732:8506":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:11179:2206":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"16:6386:15610":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4308:2687":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12089:18661":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11949:2433":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4723:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:4166:2589":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11992:18654":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5422:2764":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:10156:8107":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8125:15671":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13125:19201":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9485:34990":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:2908:2065":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4818:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"30:681:20022":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2160:8494":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40131:8252":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"21:13449:2148":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:22517:2410":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11199:15990":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:30437:28450":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:47413:2886":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"21:15009:2163":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:9049:2155":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"6:1595:10134":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:13834:2262":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:6421:2238":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12365:15953":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:207:8061":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:20803:2862":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:1012:2460":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:3222:2615":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:46727:2879":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:44299:8615":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3330:2449":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"15:288:14598":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11905:18648":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:6425:2794":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10621:15950":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:8863:2148":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2926:2276":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10390:15862":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8887:2807":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21058:2855":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11189:15779":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11568:15778":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:21452:2863":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"21:13967:2241":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"17:10786:15912":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:14108:2266":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:40370:2183":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13862:19936":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:2777:8464":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9032:15573":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:7041:2172":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11272:15766":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:39446:8230":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:45880:2944":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6317:15604":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:6384:20687":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"21:5120:20046":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"1:9065:21308":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:3977:2654":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:8639:36582":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:9105:2813":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:14205:19963":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:7659:8424":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22041:28609":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10199:15841":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:8431:2135":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:5920:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13639:19903":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:1603:10135":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:4236:2234":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:25972:2641":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6744:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7038:34060":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41482:28677":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"21:11969:2121":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"17:434:14623":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:35:2498":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:507:14446":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:568:9238":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:749:2258":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:44311:8628":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3501:27817":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:14857:2331":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:11030:26780":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"21:6102:1753":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"20:82:2060":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"21:10262:36582":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"18:707:8127":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"15:0:1930":{"crate_id":15,"path":["addr2line"],"kind":"module"},"26:0:2068":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"17:12792:19178":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4496:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11872:18646":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9160:20795":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8541:2234":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:554:9236":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"21:4220:36162":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"6:6077:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1527:10127":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14197:19962":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3517:2597":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7592:15653":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:4694:2691":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:9022:20703":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4854:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11144:15988":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:13586:2241":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"17:10280:15887":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:599:35025":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9469:2576":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:6392:2446":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12333:19152":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"21:8975:36582":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:5073:20758":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:9853:36582":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:39152:8218":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:10180:2105":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"0:0:1817":{"crate_id":0,"path":["futures"],"kind":"module"},"2:2738:2273":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"11:760:2449":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"25:9:1730":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"16:6239:34300":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:10913:36582":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:15204:35173":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"16:2589:14661":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:8043:15667":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4698:15286":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:40360:2182":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:261:32517":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:9689:2104":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:8335:2130":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"27:497:20105":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"6:6598:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:609:35040":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46043:2930":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2978:2495":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11696:16010":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:40207:28547":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:11041:36582":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"2:8420:8125":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:47885:8023":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:793:2450":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:40441:2108":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6977:15634":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"9:0:1925":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4704:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:41705:2735":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8165:2271":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:30543:28544":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:46213:2945":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"28:37:2234":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"14:202:8170":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:2468:2579":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2824:8473":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:15135:35184":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"17:12691:19173":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1776:2449":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:630:2234":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1501:14566":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2399:14653":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:878:2469":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13083:19198":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:10336:8119":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9318:15757":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1500:10123":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:30343:8189":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:47725:2947":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43091:8601":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:9124:2583":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"21:14463:36582":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"18:564:20022":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:636:35021":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5386:2762":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10511:15898":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8969:20812":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40035:8222":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:7323:2115":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"21:6906:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:41561:2631":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:10792:36582":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"1:11421:2637":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:7530:20675":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:46189:2896":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8792:2770":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11542:15726":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12921:19187":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:12534:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"16:6347:15607":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:4592:15228":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:7126:2106":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"1:3262:2617":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:9262:36582":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10266:15832":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:47809:2932":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2703:2409":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3722:2323":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:12091:2124":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:12577:2993":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:1841:2519":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:40108:8141":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:6843:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14715:33771":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"6:7609:14398":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9017:20828":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11388:15771":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"31:120:1789":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"11:1048:33808":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8288:2680":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:20620:28769":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:7065:31365":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8381:2730":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:0:1721":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:43334:8103":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:14889:2334":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:21110:2859":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"27:432:20106":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"6:532:9233":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4626:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"21:8103:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:7116:2446":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12161:18666":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13167:19203":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:10810:23514":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:527:2399":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3260:2616":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:41782:2445":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:6240:2804":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:5877:8831":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12711:19174":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:42888:2750":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"21:11745:2119":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:21979:28686":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5414:34149":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7570:26801":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11462:2636":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9118:15753":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:15056:2161":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"21:13222:2231":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:2746:8442":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9926:15802":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8449:2750":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:20665:29064":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:5849:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:864:2446":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"30:624:2207":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:10229:8114":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9614:34992":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11109:15996":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6516:15618":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4848:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5900:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:667:2451":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:3042:14678":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12815:19179":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9734:15765":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:0:1929":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12346:15954":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:6427:35340":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"2:43962:8160":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:96:19992":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"21:11349:2209":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"11:285:33824":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"21:7956:2126":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:44155:8169":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2853:8479":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10832:15907":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:5918:2213":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"16:7099:15637":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5805:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12435:19157":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"28:199:20108":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"21:3912:2136":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"11:119:33807":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"29:27:1734":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"17:11815:18643":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:309:20044":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"17:10458:15894":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"21:10849:36582":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"21:8017:2122":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:11776:8129":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:9230:2179":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"16:6915:34082":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:7523:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:42346:8062":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14282:19968":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4456:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:40342:8428":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10148:15836":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1426:2445":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:4228:2686":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"14:31:14574":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:7033:2470":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:15237:35332":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:12826:2233":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:10049:2445":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4420:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:9171:2338":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:7870:2574":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:1184:15813":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:20939:2870":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"14:7:14574":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"21:7186:2110":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"1:8810:2771":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10931:15979":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4556:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:822:2468":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:5816:2800":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:8296:2635":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13971:19947":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:653:9289":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:5065:2788":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:10800:2269":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10486:15896":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:1574:2464":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21987:28610":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:6171:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8209:2600":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11591:15779":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9223:15756":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:2194:33813":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10935:20890":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1523:2481":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:9028:36582":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:4678:2650":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6531:34313":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"21:12760:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"17:9561:15761":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:9390:2181":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"21:7497:2128":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:13566:19916":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:923:2452":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"12:0:1928":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6128:15596":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46021:2924":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6815:15627":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:7511:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39626:24788":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8987:20772":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40430:8435":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:11108:36582":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"21:13513:2240":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"16:6427:15612":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:14754:36582":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"6:1649:10138":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40389:2185":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6303:15603":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1690:10142":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2900:14674":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:1075:15805":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:13261:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"2:20607:8271":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13456:19911":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:2469:8275":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:1503:2452":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9913:15803":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2689:8054":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:20667:29059":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13591:19917":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13604:19918":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:14432:2179":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:43606:8149":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:21203:2579":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6632:8195":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:8021:15666":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:41436:2628":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:4378:8231":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"30:648:20020":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:8270:2630":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"30:741:35016":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4842:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:2919:2274":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:352:2418":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"21:6630:1747":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"2:3996:29038":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6589:9112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:7151:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:327:2117":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"18:660:20009":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:10322:8116":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"23:0:2067":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"6:5080:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13697:19922":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:11781:8125":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9528:35002":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:1103:14565":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"13:226:33833":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"27:72:20103":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"30:883:20008":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:40482:2195":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:49867:2873":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11979:18653":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10403:15892":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:13283:2227":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:40096:8259":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:1915:2486":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:9213:8063":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2688:2272":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:11488:8620":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13771:19928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"21:6629:1748":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"20:0:1719":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:43532:8135":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7568:33969":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1892:2534":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5882:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:22070:28742":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14102:19957":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"21:15150:35197":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"21:331:2398":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"15:327:14603":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:9279:2180":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"6:6850:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6028:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:7316:2116":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"5:5280:2181":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2373:14652":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"21:21:1056":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:23162:2640":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"21:8393:2132":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"17:0:1932":{"crate_id":17,"path":["object"],"kind":"module"},"21:10871:2202":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:41453:2629":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"21:12846:2221":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"6:6015:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:10978:36582":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"5:6622:8194":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:276:2280":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:10065:2207":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"1:2570:26783":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6625:2721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12905:19186":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43526:8136":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:43706:8144":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:20650:29063":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7833:15664":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"21:2568:35211":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:2809:8469":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:1545:10129":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:6707:36582":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"6:1513:10125":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:3492:2338":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12840:19181":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:587:9241":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4887:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5890:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7657:2407":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:332:33817":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:10025:2234":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:46235:2951":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7739:15660":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4764:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3383:8202":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:13478:36582":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"28:216:2458":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"17:10799:15910":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1709:10144":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12878:19184":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4543:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:2035:2323":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"27:11:36752":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2960:8057":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:7558:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:3810:14710":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7407:15640":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:44275:8608":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:6137:2993":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:2960:32564":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5767:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9143:2845":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:47601:2892":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4729:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:11692:2214":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"16:3580:14683":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:44188:8151":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4628:21724":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"21:6044:1739":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:47771:2898":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:854:2445":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2611:14662":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1780:2502":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:4814:15306":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:45898:2950":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:13812:2260":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"5:2970:32563":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13991:19949":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11290:15767":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:817:2455":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4783:31307":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:46915:2946":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13513:19913":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"28:51:2258":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"9:393:14444":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:582:8271":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42360:8071":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:12244:2127":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"1:1569:2449":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"21:14961:2338":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:15180:35189":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"16:7515:15648":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14301:19969":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:2223:31562":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:13404:192":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"16:530:34109":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:7924:2323":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4476:15208":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:21964:28549":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:11375:36582":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:47969:8029":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"9:426:14445":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4446:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7546:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:21952:2643":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:5554:2769":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:14837:2329":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"21:9978:36582":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"2:8313:2738":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:12194:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:14543:2321":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"5:3178:2465":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4380:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:1442:2446":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"31:0:1782":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"11:844:2457":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:1089:2157":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"5:7246:2537":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6554:15620":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1482:2450":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:579:9240":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7061:34151":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14380:19975":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"27:369:2804":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"11:1538:14568":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:657:2446":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:14230:36582":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"6:6796:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11258:2777":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12579:19165":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"21:14649:36582":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"1:498:2394":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5775:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:14350:19973":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7505:15647":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1590:10133":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10402:2770":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:338:2118":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:40072:8256":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5044:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7843:2575":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"15:394:14610":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:8632:15742":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:10944:2201":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"21:10123:2188":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"30:81:19991":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4944:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4984:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3295:14681":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:6809:2851":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6250:15601":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9939:15801":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:13147:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9899:15808":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"21:9939:2178":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"21:11685:2215":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"1:7706:2431":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5398:15573":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7539:15650":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14417:19978":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5720:15584":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"21:12890:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"17:9296:15725":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7308:8172":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:9493:36582":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"17:13069:19197":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"21:12508:2128":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:45742:2923":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:3583:2234":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:0:1933":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4794:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:131:1742":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:10223:15839":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"21:11437:35321":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"17:14177:19960":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6864:34030":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46805:2885":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1663:10139":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"21:6255:20051":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"21:14195:2267":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"5:2690:31495":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40877:2238":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4469:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3894:14746":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3184:28169":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"28:33:2446":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:9507:2183":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"30:753:35021":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1562:2446":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13778:19929":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:42224:2789":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"8:0:1924":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:9594:36582":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:45821:2883":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:10466:2196":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"16:5704:15583":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:149:14626":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:40329:2179":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10339:15860":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:10728:36582":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"21:2760:1727":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:629:31390":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44295:8614":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5737:15585":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"21:39:2079":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"2:4111:8235":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4341:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4733:2670":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13574:19904":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6438:15613":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:10563:2193":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11416:15772":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:8740:15745":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:335:35221":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"1:4691:2718":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10568:15905":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2556:2319":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"30:665:141":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:7234:2112":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"27:136:2804":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"21:9430:110":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13016:19193":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:7564:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7171:2443":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13882:19938":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:8899:15750":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4148:2682":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1473:2448":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11034:15994":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8348:2669":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"30:761:2207":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"5:7124:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"27:483:2750":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:11960:21311":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:8542:15724":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11056:15995":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8399:2749":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:2461:31430":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:7678:2404":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2923:2275":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2376:2564":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:40473:8434":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42867:8279":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:644:2445":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3435:2327":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:46645:2931":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8282:2689":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:3395:15914":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:6785:29049":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:261:35001":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6130:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:5469:2589":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:5651:15580":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"21:8692:36582":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:40652:2200":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:43106:28320":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:1068:2460":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11315:20784":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43435:8110":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:4900:15320":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:6534:2797":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4164:2684":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40124:8140":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2760:8463":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1611:33821":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:12116:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:7012:33909":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7289:15638":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11074:15777":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:9467:2182":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:43500:8142":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43940:8159":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:1077:2461":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"31:68:1784":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"17:11155:15998":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:652:2207":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5987:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:10074:2600":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10313:15889":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:4506:15214":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:43864:2423":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:7552:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42906:28761":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:2443:14655":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13096:19199":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:10267:8115":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6618:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"10:36:33804":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:41647:2234":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4897:2716":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:6981:2237":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4833:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7679:15657":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:11801:8124":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:7575:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7693:15658":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13029:19194":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"21:6061:1741":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"21:11398:35285":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"16:6197:15598":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"14:160:14574":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:7895:2120":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:10051:15798":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:2131:2394":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:3220:2614":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:47271:2914":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:10206:36582":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"21:10474:2194":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:11564:8621":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13787:19930":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:14:2040":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:1045:2458":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"21:5860:1730":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"5:3737:2482":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11020:15963":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:3596:2445":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"21:9624:2185":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:11123:8628":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:3166:8219":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:2133:15834":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6872:15629":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:13639:35172":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"1:8137:2237":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:1027:14563":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:40450:8430":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:11736:2756":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:3183:31379":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44351:2850":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"21:15038:36582":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"2:6738:8433":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:919:2451":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:12446:2136":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14341:19972":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4374:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:7387:36582":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:190:2103":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:21457:2871":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"21:7400:2128":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"6:4929:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6931:15632":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3933:2651":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:403:33827":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9182:23952":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4291:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12727:19175":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10957:15992":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"21:13761:2258":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"17:12017:18656":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:9223:8069":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11142:2583":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:40056:28468":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:40863:8418":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:4944:2589":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10735:21879":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2162:8495":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:400:15739":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:3179:29066":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:562:9237":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45612:2916":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:7727:2462":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9806:15789":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:12659:34298":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"2:43977:8161":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:7216:2539":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:8656:2144":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"17:9990:15806":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8277:2688":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40522:8431":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:8907:29436":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10350:8117":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:9213:2160":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"1:3111:2618":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:8902:31056":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3453:2270":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"10:0:1926":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5793:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3301:2613":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12659:19171":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"27:146:206":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"6:5737:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7025:2446":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:9207:2159":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:7618:2129":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"21:8757:36582":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"11:736:2448":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8916:2808":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"21:402:26792":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"21:12309:2223":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:10069:2513":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:4142:2242":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"1:7916:2608":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4938:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"21:9093:36582":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:6444:35194":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:4616:2656":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:538:20021":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1843:2520":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:927:2453":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:21549:2852":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:13410:2137":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"6:4872:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:30118:2642":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4789:2672":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:15062:35319":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:5771:2792":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46388:28556":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40351:8429":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:2663:14664":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:13170:2229":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"16:8176:15675":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"21:13689:2445":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"21:8457:36582":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6136:12593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40421:2106":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:43991:8162":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:14329:19971":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:97:33832":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4506:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:624:35016":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"9:486:14442":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"21:14524:36582":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:12774:2232":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"18:531:20020":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:1818:2234":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:4261:8224":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1102:31478":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"27:187:20093":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"17:11329:15768":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4716:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:6941:2107":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:42586:28731":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"30:816:20013":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9840:15791":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"30:699:8271":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7331:34327":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6022:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:358:2419":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13870:19937":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:7349:36582":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"21:14846:2330":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"16:6900:15631":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41419:2627":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1273:2460":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:6319:32517":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12148:18665":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6573:10082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:4466:2691":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:7020:23291":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10969:15993":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:8872:15749":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:11327:23287":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11234:16002":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:9409:34984":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:836:2456":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4483:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:12578:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"21:13199:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"25:0:1729":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:44283:8613":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2332:14650":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:32133:20846":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"0:56:1073":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:10323:15890":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:5372:2761":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:9274:2599":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4550:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11115:23510":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43283:29029":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:11548:8619":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:20839:2864":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"21:15165:35193":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"17:13957:19945":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:14373:36582":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:13949:19944":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"21:12317:2222":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"5:2962:31556":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:1118:31435":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7553:15651":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5829:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"21:13709:2234":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:8794:15747":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12526:19161":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11498:15776":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:8405:2133":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"17:14395:19976":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:5040:1732":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:1681:10141":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11300:20572":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11927:20867":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14026:19953":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:4387:8232":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"21:7920:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4315:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:4196:2589":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:20972:2865":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:44083:8165":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11642:15782":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4812:2666":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:9311:36582":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"21:23:2077":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:21104:2857":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1257:2458":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1580:2465":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:1911:10309":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:2493:2317":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1782:2503":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:5529:2186":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8144:1730":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:8509:205":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:12558:2230":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"16:5301:15553":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2840:8476":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:4428:32534":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1492:2451":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:21236:2860":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:14771:2326":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"6:4535:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:526:9232":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5738:2790":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11600:15780":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10529:15945":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:5133:941":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"6:4800:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"21:5544:2237":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:44134:8167":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47905:8025":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43372:8105":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:42353:8063":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:6648:10267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:7732:2463":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7073:15636":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2962:14676":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5979:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:5081:1749":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:41655:2445":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43542:2599":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"0:46:1628":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"9:357:14459":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13557:19915":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:46259:2952":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:7755:2523":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10914:20841":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:13344:2235":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:9875:15818":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:9590:8584":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"26:43:36749":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"29:20:1737":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:22091:2644":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:7083:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:8078:2121":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"6:4949:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11264:16004":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:40919:8423":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:12669:35287":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"2:41638:8485":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:6789:32542":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:8200:2123":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"6:7272:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46569:2919":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:6631:1744":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:42859:28678":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10080:15852":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:10702:2197":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"18:521:20016":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4695:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3187:28161":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9706:15764":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4735:2671":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:8496:36582":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:14707:2261":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"17:13055:19196":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8252:15677":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:45590:2911":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7494:15646":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5967:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:781:2136":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:13847:19934":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:13823:2261":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:21208:2856":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:841:2234":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6868:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4395:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:39418:8206":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:4032:14860":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10471:15895":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:9083:15728":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1536:10128":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:4724:15288":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7463:15643":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:5135:1754":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:5743:2589":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"18:491:35022":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:6823:2113":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:4008:29041":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:7599:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:5342:15570":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40195:2540":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46615:2925":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"14:187:14582":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9744:34995":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"9:330:14499":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:10868:8109":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11924:18649":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:7363:2449":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12982:19191":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:43820:8143":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40044:8257":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:6628:1745":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"24:9:20032":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"11:2060:2460":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"11:695:2452":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4524:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21912:28680":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:48022:8032":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40116:2423":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:11565:14607":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"21:7280:2114":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11791:18642":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:0:1927":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"21:6417:35200":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"1:10510:2612":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"13:110:33880":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:14025:2265":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"30:546:20017":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:4177:2685":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"30:97:19992":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:5236:32517":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14403:19977":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"21:13743:2446":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:8004:2268":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:6775:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12004:18655":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:7379:8190":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:12479:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"5:782:2193":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46851:2891":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:45945:2854":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:21790:28382":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:4353:20038":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"21:12685:2217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"31:65:1783":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"16:5553:15574":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:5916:15590":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"21:11701:2114":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"30:798:20011":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"9:177:14548":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4824:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:2541:14659":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:44307:8610":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3732:2636":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10981:15966":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:956:2457":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:3777:14701":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14359:19974":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13981:19948":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6789:15626":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10745:2573":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:10117:8120":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:5530:8193":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"21:14005:36582":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"21:7676:2131":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"5:3204:2466":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:113:19993":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:2170:31563":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6667:14593":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:9225:8070":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5959:15592":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5639:15579":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:14419:36582":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:6185:20783":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:7981:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13923:19942":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"21:8360:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:40886:8420":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:135:2102":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:640:2429":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12994:19192":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:10953:2773":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13303:19905":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2929:2277":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:9656:31260":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:6649:8427":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:14898:2335":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"21:11070:2204":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:42898:28730":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:4407:2408":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:515:20019":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11164:15989":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:7206:36582":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:13659:15807":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:2141:31372":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:0:1931":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2883:20715":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:6199:166":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:3645:2446":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:671:20010":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:4823:2264":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"29:0:1733":{"crate_id":29,"path":["futures_io"],"kind":"module"},"17:3519:15932":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44575:8043":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6273:2258":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8233:2626":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9571:34999":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:40398:28766":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"21:424:1722":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"16:5689:15582":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10597:15948":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:11781:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"28:0:2069":{"crate_id":28,"path":["slab"],"kind":"module"},"2:43574:8114":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:4004:2258":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5567:15575":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:3991:2656":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7079:2446":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:7519:15741":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:9533:36582":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"17:582:15741":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4740:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4963:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13905:19940":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"21:11268:36582":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"16:7362:15639":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:11891:2122":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"1:8558:2755":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:13353:2236":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:9748:2104":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"1:3181:24195":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4184:8085":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6044:33392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"21:8225:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4908:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"21:7852:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:8203:2599":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:11599:8120":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3025:14677":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:1973:15840":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:13045:2225":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"30:655:20021":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2293:14621":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:14979:2340":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:8304:2690":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11623:15781":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:14994:2398":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12936:19188":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:7586:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2825:14671":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:13750:2257":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:8711:15744":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5382:15572":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47874:8022":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11852:18645":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"10:44:14553":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:3985:2655":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"30:731:35013":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7484:15645":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"27:366:206":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"11:2174:30505":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1558:2234":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:44303:8609":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:12669:2472":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13673:19920":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:1820:2485":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10175:15762":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1121:2461":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"21:14904:2336":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:20648:29061":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:11404:35203":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"6:7295:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:13734:2445":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:8871:2149":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"6:541:9234":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10555:15947":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10303:15888":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:3867:14743":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:41538:2630":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:9555:2184":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"6:6607:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14044:19955":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"21:4306:20036":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"6:4401:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:644:2207":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8322:2719":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6805:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:547:9235":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:986:2459":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:10504:2614":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:5793:34263":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46091:2878":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4992:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:20895:2869":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:5807:15587":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:6604:2803":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:104:708":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"16:6323:15605":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:10740:23946":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"27:0:1751":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"17:256:34991":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:20:1056":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:13309:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:9518:15760":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:2049:2459":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9966:15762":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:21227:2579":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:500:9230":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6834:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"21:10237:2106":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:11127:2205":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"1:7908:20767":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6484:15616":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4895:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:8713:2145":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:11767:18641":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:6978:23683":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"29:17:1735":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"6:1575:10132":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:41714:8558":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"21:9453:36582":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"2:30349:8455":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"21:4576:1731":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:40223:8548":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:43464:8112":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"30:788:20010":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:10823:2200":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"17:11726:16011":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"21:6271:20050":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"17:12174:18667":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7753:15661":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12479:19159":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:14216:19964":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:11300:2208":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"6:506:9231":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"21:11994:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:8862:2446":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"21:12169:2123":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"6:5799:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:1543:2589":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:8314:2737":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4685:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1557:10130":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12646:19170":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:14988:20048":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"16:6357:15608":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:14954:2337":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:14878:2333":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"11:311:33819":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1672:32517":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4368:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:635:2428":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13140:19202":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4973:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13999:19950":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46357:28491":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:44563:8045":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:8315:2736":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:6991:2109":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"1:7759:20846":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:2352:14651":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:2033:2458":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:6079:1738":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"1:872:2447":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4810:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:9215:8062":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4489:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:14819:2327":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"16:4620:15232":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:9118:2156":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"6:1717:10145":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:7540:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"30:556:35022":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"16:4323:15127":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2741:8053":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:2759:14668":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6763:15625":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7128:23280":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11220:16001":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:10458:2189":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:11250:15967":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3371:8198":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11539:8039":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40463:2194":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10314:21488":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13683:19921":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8846:2234":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10499:15897":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:9768:36582":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:11916:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:2797:8468":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11761:24454":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4787:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:46881:2897":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7255:2734":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:10544:15946":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3299:2612":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14054:19956":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1921:2535":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"21:8418:2134":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"6:5877:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5962:2804":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:10604:2190":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"17:12065:18659":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10883:15915":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43760:8146":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7707:15659":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11888:18647":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9977:15763":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:481:20017":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13914:19941":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:10653:2191":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:8980:2398":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:10194:8121":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:296:36686":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:9867:2579":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:4996:15344":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43352:8106":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40176:8251":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3407:2589":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:11483:2638":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10910:2523":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:5587:2104":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"21:14313:36582":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"21:15098:35207":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:4256:8223":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:9474:8278":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6724:15624":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7631:15655":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2793:8466":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7721:2432":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12864:19183":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:2959:8047":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13620:19919":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6713:14592":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12966:19190":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:5988:8436":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:21234:2866":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8824:2772":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"21:10000:2207":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"1:10770:2577":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8868:2809":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6850:15628":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:4076:2445":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43556:2600":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6289:15602":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:45760:2929":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44363:8629":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:12353:36582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"17:8841:15748":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:11790:8127":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:8292:36582":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:944:2455":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5775:15586":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1631:10136":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11160:21079":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:11520:15777":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6711:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:14284:2317":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"1:2217:2306":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:21671:2579":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10377:15864":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7855:15665":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12254:19149":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40870:28745":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:7517:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:14722:2325":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:950:2456":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8186:2179":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"30:726:35040":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:4408:26786":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"21:14970:2339":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"27:124:20087":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"17:11753:16012":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"21:9170:36582":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:14315:19970":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:3441:14682":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12424:19156":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3729:2637":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:57:1750":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"2:43362:8104":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"21:13391:36582":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"2:20853:8494":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:45546:2910":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14015:19952":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:20801:2579":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:11285:20575":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:699:20013":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9344:34979":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13732:19925":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6894:26794":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:143:20030":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"6:119:8911":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:7045:2258":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7739:2522":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:40892:2235":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6018:15595":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:44008:8163":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:3186:15909":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:766:20008":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10097:15838":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2210:2556":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1302:2461":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:399:33823":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"21:8139:2124":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"1:6461:2801":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1818:2513":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:32097:2774":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"14:165:14575":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11669:16009":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"21:13679:20034":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:21673:2858":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:11847:8153":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:10312:2108":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"17:9887:15812":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:2966:32561":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:13725:2234":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:4142:8236":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14163:19959":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:20851:29772":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:15119:35208":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"2:45658:2882":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:20986:8494":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:805:2454":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11127:15776":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"28:67:36777":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:43839:8131":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13427:19908":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:48061:8033":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12077:18660":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:14481:2257":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"6:6067:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9655:15763":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10520:15899":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12605:19167":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13719:19924":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}