{"root":"0:0:2526","crate_version":"0.3.30","includes_private":false,"index":{"2:13630:22955":{"id":"2:13630:22955","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:25-21:6212:2452":{"id":"0:25-21:6212:2452","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:2452","glob":false}}},"2:13623:22956":{"id":"2:13623:22956","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13709:30497":{"id":"2:13709:30497","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13673:30489":{"id":"2:13673:30489","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13301:8904","str::split":"2:13664:3035","prim@char":"1:12452:482","`DoubleEndedIterator`":"2:8451:133","str::rsplit_terminator":"2:13676:30490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44431:8924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13729:30503":{"id":"2:13729:30503","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13741:24356":{"id":"2:13741:24356","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:39009"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3786:2440":{"id":"0:14-21:3786:2440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:2440","glob":false}}},"0:51-31:141:2498":{"id":"0:51-31:141:2498","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:141:2498","glob":false}}},"0:63-25:9:2442":{"id":"0:63-25:9:2442","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:2442","glob":false}}},"2:13710:30498":{"id":"2:13710:30498","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:2496":{"id":"0:49-31:68:2496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2496","glob":false}}},"2:13682:22993":{"id":"2:13682:22993","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12452:482","str::splitn":"2:13679:22991","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44503:8891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:2448":{"id":"0:20-29:25:2448","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:2448","glob":false}}},"0:73-21:2766:2439":{"id":"0:73-21:2766:2439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:2439","glob":false}}},"2:13711:30499":{"id":"2:13711:30499","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13327:8899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:2461":{"id":"0:41-21:5212:2461","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:2461","glob":false}}},"0:10-20:68:2437":{"id":"0:10-20:68:2437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:2437","glob":false}}},"0:40-21:1291:2436":{"id":"0:40-21:1291:2436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:2436","glob":false}}},"2:13736:22410":{"id":"2:13736:22410","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:9233":{"id":"5:5723:9233","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13656:21672":{"id":"2:13656:21672","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:422:2434":{"id":"0:69-21:422:2434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:2434","glob":false}}},"2:13620:24312":{"id":"2:13620:24312","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12848:8908"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13734:22409":{"id":"2:13734:22409","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13636:22984":{"id":"2:13636:22984","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13637:22985"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:2449":{"id":"0:21-29:20:2449","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:2449","glob":false}}},"0:34-21:6769:2459":{"id":"0:34-21:6769:2459","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:2459","glob":false}}},"5:5739:2895":{"id":"5:5739:2895","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:2463":{"id":"0:43-27:0:2463","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:2463","glob":false}}},"0:39-21:4707:2443":{"id":"0:39-21:4707:2443","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:2443","glob":false}}},"2:13615:30483":{"id":"2:13615:30483","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13740:24355":{"id":"2:13740:24355","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:39009"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:865":{"id":"0:58-21:104:865","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:865","glob":false}}},"2:13632:30486":{"id":"2:13632:30486","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12458:1754","str::slice_mut_unchecked":"2:13633:30487","crate::ops::Index":"2:40057:3245"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:422:2434":{"id":"0:7-21:422:2434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:2434","glob":false}}},"2:13643:28933":{"id":"2:13643:28933","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13642:28914"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44664:8906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:2456":{"id":"0:29-21:6770:2456","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:2456","glob":false}}},"5:5741:22407":{"id":"5:5741:22407","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13738:22405"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:22997":{"id":"2:13647:22997","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:2462":{"id":"0:42-21:57:2462","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:2462","glob":false}}},"0:54-31:120:2501":{"id":"0:54-31:120:2501","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2501","glob":false}}},"2:13617:30484":{"id":"2:13617:30484","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13615:30483"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6199:2453":{"id":"0:26-21:6199:2453","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:2453","glob":false}}},"0:23-21:6217:2450":{"id":"0:23-21:6217:2450","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:2450","glob":false}}},"2:13735:24351":{"id":"2:13735:24351","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40412:9049","Self::is_ascii":"2:13734:22409"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40412:9049","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:31201","5:5723:9233","5:5726:31202","5:5729:31203","5:5737:31204","5:5738:31205","5:5739:2895","5:5740:22408","5:5741:22407"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48-31:65:2495":{"id":"0:48-31:65:2495","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2495","glob":false}}},"0:53-31:102:2500":{"id":"0:53-31:102:2500","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2500","glob":false}}},"2:13670:22989":{"id":"2:13670:22989","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13301:8904","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split":"2:13664:3035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44399:8889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:22602":{"id":"2:13653:22602","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13697:30492":{"id":"2:13697:30492","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13301:8904","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatch_indices":"2:13700:30493"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44531:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:2438":{"id":"0:67-20:97:2438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:2438","glob":false}}},"0:62-21:4707:2443":{"id":"0:62-21:4707:2443","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:2443","glob":false}}},"0:19-29:17:2447":{"id":"0:19-29:17:2447","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:2447","glob":false}}},"0:83-21:6212:2452":{"id":"0:83-21:6212:2452","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:2452","glob":false}}},"2:13732:30504":{"id":"2:13732:30504","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13262:140","`FromStr`":"2:13261:3308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13261:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13261:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6182:2451":{"id":"0:82-21:6182:2451","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:2451","glob":false}}},"2:13664:3035":{"id":"2:13664:3035","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13301:8904","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split_whitespace":"2:13642:28914","str::rsplit":"2:13670:22989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44381:3364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:2502":{"id":"0:55-31:125:2502","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2502","glob":false}}},"0:78-29:25:2448":{"id":"0:78-29:25:2448","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:2448","glob":false}}},"2:13694:30491":{"id":"2:13694:30491","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13301:8904","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::matches":"2:13691:2757"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44603:8922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1291:2436":{"id":"0:65-21:1291:2436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:2436","glob":false}}},"2:13641:22131":{"id":"2:13641:22131","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44367:3363","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13720:22998":{"id":"2:13720:22998","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:22408":{"id":"5:5740:22408","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13737:22406"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66-20:68:2437":{"id":"0:66-20:68:2437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:2437","glob":false}}},"2:13650:22600":{"id":"2:13650:22600","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13634:22980":{"id":"2:13634:22980","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13636:22984","str::split_at_mut":"2:13635:22981"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2766:2439":{"id":"0:13-21:2766:2439","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:2439","glob":false}}},"0:81-21:6217:2450":{"id":"0:81-21:6217:2450","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:2450","glob":false}}},"5:5737:31204":{"id":"5:5737:31204","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:22995":{"id":"2:13685:22995","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:2446":{"id":"0:18-29:27:2446","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2446","glob":false}}},"0:16-21:5171:2444":{"id":"0:16-21:5171:2444","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:2444","glob":false}}},"2:13707:30496":{"id":"2:13707:30496","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2526":{"id":"0:0:2526","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:2466","crate::executor":"0:46:2022","crate::stream":"21:1291:2436","crate::channel":"27:0:2463","crate::future":"21:104:865","crate::sink":"21:4707:2443"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:2022","0:56:1365","0:4-2:45298:154","0:5-20:32:2432","0:7-21:422:2434","0:8-21:587:2435","0:10-20:68:2437","0:11-20:97:2438","0:13-21:2766:2439","0:14-21:3786:2440","0:15-25:9:2442","0:16-21:5171:2444","0:18-29:27:2446","0:19-29:17:2447","0:20-29:25:2448","0:21-29:20:2449","0:23-21:6217:2450","0:24-21:6182:2451","0:25-21:6212:2452","0:26-21:6199:2453","0:27-20:131:2454","0:28-22:7:2455","0:29-21:6770:2456","0:31-21:6767:2457","0:32-21:37:2458","0:33-21:20:1342","0:34-21:6769:2459","0:35-21:6768:2460","0:37-21:104:865","0:38-21:5264:1196","0:39-21:4707:2443","0:40-21:1291:2436","0:41-21:5212:2461","0:42-21:57:2462","0:43-27:0:2463","0:44-21:6240:2465","0:45-21:5266:2466"],"is_stripped":false}}},"2:13642:28914":{"id":"2:13642:28914","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13643:28933"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44655:8907","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:2442":{"id":"0:15-25:9:2442","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:2442","glob":false}}},"2:13646:28931":{"id":"2:13646:28931","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44673:8905","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13726:30502":{"id":"2:13726:30502","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611":{"id":"2:13611","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13612:1016","2:13613:22401","2:13614:30482","2:13615:30483","2:13617:30484","2:13620:24312","2:13621:30485","2:13622:342","2:13623:22956","2:13624:22952","2:13626:22953","2:13628:22954","2:13630:22955","2:13632:30486","2:13633:30487","2:13634:22980","2:13635:22981","2:13636:22984","2:13637:22985","2:13639:28930","2:13640:29022","2:13641:22131","2:13642:28914","2:13643:28933","2:13644:3026","2:13645:30488","2:13646:28931","2:13647:22997","2:13650:22600","2:13653:22602","2:13656:21672","2:13660:21673","2:13664:3035","2:13667:22987","2:13670:22989","2:13673:30489","2:13676:30490","2:13679:22991","2:13682:22993","2:13685:22995","2:13688:22996","2:13691:2757","2:13694:30491","2:13697:30492","2:13700:30493","2:13703:30494","2:13705:30495","2:13707:30496","2:13709:30497","2:13710:30498","2:13711:30499","2:13714:30500","2:13717:22141","2:13720:22998","2:13723:30501","2:13726:30502","2:13729:30503","2:13732:30504","2:13734:22409","2:13735:24351","2:13736:22410","2:13737:22406","2:13738:22405","2:13739:24354","2:13740:24355","2:13741:24356","2:13742:30505","2:13744:3168","2:13745:30506"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79-29:20:2449":{"id":"0:79-29:20:2449","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:2449","glob":false}}},"2:13688:22996":{"id":"2:13688:22996","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6182:2451":{"id":"0:24-21:6182:2451","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:2451","glob":false}}},"2:13612:1016":{"id":"2:13612:1016","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13705:30495":{"id":"2:13705:30495","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:30505":{"id":"2:13742:30505","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5124:30505"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44680:8915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:29022":{"id":"2:13640:29022","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44357:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13635:22981":{"id":"2:13635:22981","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13634:22980","str::split_at_mut_checked":"2:13637:22985"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:2438":{"id":"0:11-20:97:2438","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:2438","glob":false}}},"2:13703:30494":{"id":"2:13703:30494","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6768:2460":{"id":"0:35-21:6768:2460","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:2460","glob":false}}},"0:4-2:45298:154":{"id":"0:4-2:45298:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:45298:154","glob":false}}},"0:46:2022":{"id":"0:46:2022","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2495","`LocalPool`":"31:120:2501"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2495","0:49-31:68:2496","0:50-31:109:2497","0:51-31:141:2498","0:52-31:100:2499","0:53-31:102:2500","0:54-31:120:2501","0:55-31:125:2502"],"is_stripped":false}}},"2:13667:22987":{"id":"2:13667:22987","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13116:8895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:2446":{"id":"0:76-29:27:2446","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2446","glob":false}}},"0:60-20:32:2432":{"id":"0:60-20:32:2432","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:2432","glob":false}}},"2:13738:22405":{"id":"2:13738:22405","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13714:30500":{"id":"2:13714:30500","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:2465":{"id":"0:44-21:6240:2465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:2465","glob":false}}},"0:33-21:20:1342":{"id":"0:33-21:20:1342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1342","glob":false}}},"2:13717:22141":{"id":"2:13717:22141","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:3168":{"id":"2:13744:3168","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5125:3168"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44689:3169","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13633:30487":{"id":"2:13633:30487","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12458:1754","crate::ops::IndexMut":"2:3583:3246","str::slice_unchecked":"2:13632:30486"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13700:30493":{"id":"2:13700:30493","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13301:8904","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::match_indices":"2:13697:30492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44549:8920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13639:28930":{"id":"2:13639:28930","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44351:8911","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:587:2435":{"id":"0:8-21:587:2435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:2435","glob":false}}},"2:13737:22406":{"id":"2:13737:22406","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:2440":{"id":"0:74-21:3786:2440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:2440","glob":false}}},"0:38-21:5264:1196":{"id":"0:38-21:5264:1196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1196","glob":false}}},"2:13691:2757":{"id":"2:13691:2757","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13301:8904","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatches":"2:13694:30491"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44585:8921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1365":{"id":"0:56:1365","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:865","0:59-2:45298:154","0:60-20:32:2432","0:62-21:4707:2443","0:63-25:9:2442","0:65-21:1291:2436","0:66-20:68:2437","0:67-20:97:2438","0:69-21:422:2434","0:70-21:587:2435","0:71-21:5171:2444","0:73-21:2766:2439","0:74-21:3786:2440","0:76-29:27:2446","0:77-29:17:2447","0:78-29:25:2448","0:79-29:20:2449","0:81-21:6217:2450","0:82-21:6182:2451","0:83-21:6212:2452","0:84-21:6199:2453"],"is_stripped":false}}},"5:5738:31205":{"id":"5:5738:31205","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:3007","`String`":"5:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:30485":{"id":"2:13621:30485","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13622:342":{"id":"2:13622:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13623:22956","`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:2455":{"id":"0:28-22:7:2455","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:2455","glob":false}}},"0:32-21:37:2458":{"id":"0:32-21:37:2458","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:2458","glob":false}}},"2:13739:24354":{"id":"2:13739:24354","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:39009"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13679:22991":{"id":"2:13679:22991","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904","str::rsplitn":"2:13682:22993"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44485:8893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:2447":{"id":"0:77-29:17:2447","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:2447","glob":false}}},"0:50-31:109:2497":{"id":"0:50-31:109:2497","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2497","glob":false}}},"0:27-20:131:2454":{"id":"0:27-20:131:2454","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:2454","glob":false}}},"2:13613:22401":{"id":"2:13613:22401","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13626:22953":{"id":"2:13626:22953","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13637:22985":{"id":"2:13637:22985","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13636:22984"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:31202":{"id":"5:5726:31202","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13628:22954":{"id":"2:13628:22954","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13624:22952":{"id":"2:13624:22952","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:30488":{"id":"2:13645:30488","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44645:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6767:2457":{"id":"0:31-21:6767:2457","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:2457","glob":false}}},"0:45-21:5266:2466":{"id":"0:45-21:5266:2466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:2466","glob":false}}},"0:70-21:587:2435":{"id":"0:70-21:587:2435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:2435","glob":false}}},"2:13644:3026":{"id":"2:13644:3026","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44635:3052","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:865":{"id":"0:37-21:104:865","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:865","glob":false}}},"0:59-2:45298:154":{"id":"0:59-2:45298:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:45298:154","glob":false}}},"0:52-31:100:2499":{"id":"0:52-31:100:2499","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2499","glob":false}}},"2:13614:30482":{"id":"2:13614:30482","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13676:30490":{"id":"2:13676:30490","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13301:8904","str::split":"2:13664:3035","prim@char":"1:12452:482","str::split_terminator":"2:13673:30489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44449:8923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:30506":{"id":"2:13745:30506","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5122:30506"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44698:8916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13660:21673":{"id":"2:13660:21673","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5171:2444":{"id":"0:71-21:5171:2444","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:2444","glob":false}}},"0:5-20:32:2432":{"id":"0:5-20:32:2432","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:2432","glob":false}}},"5:5722:31201":{"id":"5:5722:31201","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:3007","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13723:30501":{"id":"2:13723:30501","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:8904"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:8900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:31203":{"id":"5:5729:31203","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6199:2453":{"id":"0:84-21:6199:2453","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:2453","glob":false}}}},"paths":{"17:12225:17306":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:1623:3199":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:14220:20643":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:14332:35367":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"14:214:15960":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6449:14754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"30:144:21795":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"2:41500:2926":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"30:1042:21798":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:44763:8934":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:22008:9044":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15785:21432":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39977:8983":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:8008:15572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5348:16725":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:41060:9331":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:16159:21460":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10657:3541":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15760:21429":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"21:2780:34602":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"2:22263:3335":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8649:3458":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"21:14849:35367":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"21:13913:2971":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"2:47098:28473":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:8014:17036":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"30:1384:21685":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:13822:2969":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"17:16036:21456":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43754:3523":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6625:33491":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:42806:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7192:17009":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13181:17423":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:3569:3348":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:47143:28478":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"30:1523:21677":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:23441:3422":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:7454:15193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7391:11060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1229:31966":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"21:9015:2875":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:22149:3618":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:16187:21463":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:1569:10925":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:41203:9214":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:925:3201":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5311:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"27:441:3580":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"6:8284:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:2496:3320":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:635:21803":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6876:16994":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"26:0:2794":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:8879:3526":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"21:8783:35367":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"14:187:15959":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:4956:16609":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5676:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14547:20659":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:22704:3335":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42451:3395":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:22918:3755":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6659:14769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14031:20151":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:22096:3623":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:16798:21648":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:44603:8922":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2966:16051":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8753:3522":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:3356:3611":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15586:21418":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:42439:3404":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11147:26452":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:548:156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"28:208:3213":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"17:10218:17130":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46965:3632":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42732:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"21:9833:2830":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:32802:3001":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11833:26337":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:8199:15735":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46433:3676":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4816:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:16341:21474":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5689:16951":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40129:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:41326:9218":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7259:17011":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:44449:8923":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:15531:21414":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5241:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:785:3201":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12962:17412":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:6376:2830":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:9344:24851":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11617:17156":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4875:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:4566:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:6758:31568":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:3363:3218":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:1907:3216":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:15351:21407":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12070:26442":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"21:15313:21716":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:7666:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:7922:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:3441:16059":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44485:8893":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"21:7398:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:16555:21634":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:8320:17051":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6526:14759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"21:4275:2972":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:45119:9397":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7180:3614":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:9637:35367":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"2:8369:9210":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14001:20149":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5341:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"21:7330:2836":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"1:11473:3309":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:1564:15941":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:698:3199":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:45414:8813":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:7460:2842":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"1:8284:3049":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:14077:2986":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"2:46544:3703":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6443:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46771:28631":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47583:8789":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:6526:9622":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"30:879:21788":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"2:34902:9254":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:7782:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13983:20148":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:1291:2436":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"18:651:2933":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3297:268":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12056:17298":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:5593:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11291:34299":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1893:3202":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"30:1008:21799":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"1:8546:2926":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12931:17174":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:13515:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"18:659:21677":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:8247:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11021:22126":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:7612:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:14868:3047":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:14006:21702":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:46363:3629":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:14349:3223":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:3378:8824":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:1984:3282":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9169:3542":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"21:2566:34463":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"1:6706:2968":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:6042:2987":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11053:3537":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:4810:16578":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:40899:9025":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44178:8880":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:44942:8941":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"21:14052:2964":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"11:1064:15938":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:4906:8998":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5727:16953":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:12457:1720":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:34729:9252":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:7123:8969":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:5757:33441":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:41044:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:13301:8904":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10983:3333":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:2793:3046":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1647:3217":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15939:21445":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:12451:1196":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:7467:2841":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"21:9597:35367":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"6:1514:10919":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:10535:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"21:14025:21703":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"21:12497:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"16:3308:16058":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5069:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:2086:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"21:14744:35367":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"17:14773:20673":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14917:20683":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:13681:2966":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"1:8629:3466":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6843:16991":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:14963:20686":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"30:1251:21792":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"21:6583:34445":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"30:1027:21801":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"16:7949:17030":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:7518:15197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:0:2646":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:8273:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11864:17243":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:23276:28518":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15121:20697":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"28:30:21775":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"16:6837:16990":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:23565:28501":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"21:12947:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"6:6631:14766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:15422:34444":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"16:2530:16031":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:12466:928":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:47603:8791":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:6185:3348":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13055:17212":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:13757:20134":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12860:17408":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"27:72:21770":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:43742:160":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:6211:3575":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"9:422:15818":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4990:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:42491:3397":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11926:17247":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:10313:8833":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"21:15032:2990":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:22062:29123":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6159:16963":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4815:3430":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:27:3335":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"2:42605:3511":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7016:17003":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"27:371:3575":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"16:4694:16508":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8049:3149":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:40871:28445":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:15474:34448":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"21:8549:2859":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:40239:8980":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5217:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:8028:17037":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:14139:2989":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:1900:3215":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:5388:29336":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:41758:2966":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:6967:2839":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:12518:2947":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"1:10993:143":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:8598:17058":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:13887:35367":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"2:47592:8790":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15931:21444":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:11750:8896":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:23299:3406":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9433:3348":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:1585:3201":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12920:17410":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11465:17193":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:44698:8916":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14533:20658":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:2486:16029":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3386:8826":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:12249:17355":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:2349:3213":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:6534:14760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"21:15024:3050":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"30:1457:36061":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"16:2684:16038":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6588:16978":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:7508:33475":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6028:16955":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:34171:9247":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:3029:9048":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:9611:2909":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"16:7372:17016":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:7829:9030":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:41316:2920":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41365:2924":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:15047:3051":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"18:589:21799":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:15304:3066":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:2206:9286":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:16008:21453":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:9136:2880":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"21:5992:2442":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"6:1494:10916":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5622:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6123:16961":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"21:13178:2952":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"21:11836:2940":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:38654:9256":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22147:3335":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44531:8919":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1727:10939":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:608:21801":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:10144:2933":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"16:2415:15997":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11788:17260":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12149:17266":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16714:21641":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42917:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:3587:16060":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:14652:20667":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11424:3335":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2796:16043":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:3719:3198":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:23430:3407":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:41023:9022":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5205:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5482:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:578:10029":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10771:3379":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:11407:3310":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:6411:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:33274:9244":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6111:16960":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:1932:3269":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15410:21408":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2670:9275":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"21:5251:21714":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:41232:2910":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"21:8653:222":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"11:430:33066":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:13062:9401":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8635:3455":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:8319:14240":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:12391:8878":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:3185:3286":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:11272:22144":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:7050:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14557:35367":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"17:14872:20680":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11527:17216":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:765:21676":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:3313:26645":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:6386:3761":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:328:15872":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"9:0:2644":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:4414:3463":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13398:17168":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:11871:35367":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:9377:22125":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:5641:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:538:10023":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1711:10938":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12028:17297":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13361:17166":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6421:16974":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10031:17125":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9437:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:5255:16701":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4869:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:8151:17043":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:32743:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43511:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:8014:15573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:44664:8906":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:6489:3575":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4890:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3913:3402":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:43067:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:10267:2914":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:9193:2881":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"2:42305:3394":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42473:3396":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:9997:35367":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"6:479:10016":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:15153:3054":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"21:15295:3065":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:16026:21455":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:41739:2965":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:575:3144":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:6851:35367":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:9804:35367":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"2:32832:8823":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:42595:3496":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:798:2987":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:11839:24928":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:23543:28524":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:13570:17176":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7640:3199":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:9768:2911":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:8926:2872":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"1:9425:3563":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5450:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5107:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:9357:2886":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"17:12191:17303":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:768:157":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:7287:31538":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5682:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8583:3391":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"25:9:2442":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:11029:22063":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14055:20153":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6269:16968":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13006:17415":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"21:10456:2834":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"17:11985:17294":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"19:0:1315":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14845:20678":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13095:17426":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:40909:9026":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:10846:2923":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:2521:3328":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"16:8000:17035":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12699:17403":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"21:15223:3061":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:45388:3757":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:896:33522":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:7563:15200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13592:17177":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:3786:2440":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:40189:3188":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4957:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8010:3335":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:959:3204":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:46754:3705":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6823:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7814:8946":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:24072:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2331:3027":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:881:2964":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6205:16966":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:15602:21419":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13635:17459":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5366:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"10:0:2645":{"crate_id":10,"path":["adler"],"kind":"module"},"21:6566:34601":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"21:8436:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"11:2121:3211":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:2228:15934":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:1652:3218":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:4483:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1538:3198":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:3854:17341":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"31:141:2498":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"21:11768:2938":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:7825:24598":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:386:3165":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:507:26440":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13945:20145":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2640:16036":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:47623:8793":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:15439:21411":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:45377:29531":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:16019:21454":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:15963:21448":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:15829:21434":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:11605:3198":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9316:3143":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:1551:10923":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:14909:35367":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"21:14045:3199":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"16:7212:15969":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:45111:9398":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7731:3509":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:5571:2907":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:4498:31564":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6658:16980":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"29:20:2449":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:42991:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:45323:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11026:34301":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7337:17014":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:14294:155":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8097:3271":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:15106:20696":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:7830:9031":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:491:10018":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:14261:35367":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"1:4362:3462":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1414:3214":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:44298:8886":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:4607:2875":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:4832:8990":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3747:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:11444:2934":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:45305:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12453:1906":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"21:11493:2935":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:14416:20652":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8668:3490":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:11971:3403":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7590:31505":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4937:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:3014:16053":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"7:0:1936":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1884:3199":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:7724:9212":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:3720:17323":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:5630:3534":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:6710:3564":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45107:9394":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:11679:2936":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"17:11386:17187":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:7262:31582":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:4680:3467":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5224:16693":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1213:31536":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:4163:3428":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"30:1508:21688":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"17:13781:20135":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:16728:21642":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:2328:3312":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"14:220:15961":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5462:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"30:957:21679":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"16:2450:16027":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7990:17034":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10843:17150":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:6182:2451":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"18:680:21679":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11309:17158":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1589:10927":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:8255:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2806:8822":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"21:6828:2831":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:22018:29117":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:984:3208":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:26472:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3916:3401":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:10543:35367":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:7765:17024":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8572:3400":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:4589:8821":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7706:3195":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:14806:2986":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:15192:3058":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"16:8626:17060":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"21:8125:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:2227:17248":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:40111:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9292:3562":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15812:21433":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:4028:2987":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12723:17377":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13890:20141":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:2715:2939":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"2:13966:2831":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:15953:21447":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4211:3431":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:8483:17052":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7883:3202":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12524:17321":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"30:1243:21791":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"1:8578:3399":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42683:2964":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:12878:2946":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:104:865":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:11878:8891":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4997:3446":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:563:21690":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:8206:3329":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14327:17365":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:43519:8832":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4997:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:46515:3648":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:9478:3338":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6098:16959":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1491:159":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2435:16026":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:4152:16081":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:1500:10917":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"0:46:2022":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:12478:1447":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:12462:8875":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:46853:3666":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:40943:9019":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7030:17004":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:45115:9396":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:1871:3252":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43104:3559":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6794:16987":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:11319:34294":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"31:100:2499":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"2:41748:9206":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"21:37:2458":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"21:11845:2840":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"6:5255:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7807:33536":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11818:17245":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6064:16957":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"21:10324:2831":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:16179:21462":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6337:16970":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"30:949:21796":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"21:8562:2860":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"6:473:10015":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"27:467:21769":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"17:10097:17126":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"21:7820:2857":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:11892:8894":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:14294:2971":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"30:1222:21789":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"6:1657:10932":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:10796:3342":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:10122:35367":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"21:11412:35367":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"2:45293:28634":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:16656:21637":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:5425:8856":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"5:3342:31513":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:9423:2906":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"17:14099:20156":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8363:24872":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4792:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:689:21680":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:14672:3045":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"30:1000:21680":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"10:44:15926":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:46483:3636":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:6769:2459":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"16:6970:17000":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4554:29401":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9190:2964":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:735:21675":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:506:15999":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:41172:3243":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:1554:3199":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4805:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:4574:31564":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:8585:17057":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11777:17234":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:32713:17062":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"21:13467:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"17:12625:17324":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6480:14757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6813:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:15182:3057":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:8344:2849":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"17:12762:17374":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:7641:2854":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"16:5144:16682":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5036:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:3583:3246":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1489:10915":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:2147:3049":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"21:10872:35367":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"28:217:3211":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"26:43:35998":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:14902:20682":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:15655:21420":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:1049:3213":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:43717:3341":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:12452:482":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"21:15516:34443":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:12832:9362":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"21:12235:2850":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"6:532:10022":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"10:36:33040":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:41181:2905":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7896:17124":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:10778:35367":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:12280:17357":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:2380:2964":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5603:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:706:8902":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13515:17173":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:445:15816":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9305:24880":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:10950:29277":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:1619:2964":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12472:1866":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1643:10931":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10246:17131":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:23410:29040":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:5195:3499":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8213:3333":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:8565:17056":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11448:17191":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:8105:17041":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:42843:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4404:16241":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7416:17018":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:698:21681":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:884:193":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:11401:17188":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:45173:3613":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11851:17244":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:5362:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10332:17134":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:45356:3759":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11717:3523":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:9460:165":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8091:3178":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:44187:2931":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:4983:16613":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5417:16748":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:14150:2990":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:8559:3364":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:9746:3332":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:538:21689":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:11925:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"6:5179:3451":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47437:3645":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15714:21425":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4225:3433":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:15326:34634":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:8365:9211":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13427:17169":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:22030:29117":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:22969:3756":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:15128:35367":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"6:5230:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15777:21431":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:44967:8943":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:8058:17038":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10784:34298":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"14:40:20135":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:7969:17032":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6507:14717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7168:15970":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12392:17335":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7951:26432":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4902:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13145:17419":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:46301:3663":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:23609:28640":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:9447:3570":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:16283:21469":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:7721:3156":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12347:17360":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12260:17356":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:2620:16035":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:11630:3364":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46898:3672":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5375:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1530:10921":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:7946:9201":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11630:17210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:13375:8928":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:23324:28470":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11475:17194":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"30:1447:21675":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"21:10381:2832":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"6:6419:14751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:4329:3348":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:41222:137":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3310:26648":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"30:1180:21792":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"11:2420:3199":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:4962:9000":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:1005:3211":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:8857:2871":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"6:586:10030":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:842:3207":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:8298:17050":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:10732:35367":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:13580:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"18:613:21802":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:8353:15772":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:12652:2854":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:22904:3335":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:3455:3202":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:12848:8908":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4161:3199":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11037:3490":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:7386:17017":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14627:20665":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"21:14638:35367":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:43442:28474":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:521:21684":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13909:20142":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:4045:2862":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"21:9351:2885":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:7996:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:16507:20134":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:46462:3630":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13322:17164":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:8614:2863":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:47270:3667":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12306:17358":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:10545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:10936:35367":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"21:4707:2443":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"5:1635:3232":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12419:27618":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:46690:3643":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12976:17413":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:8209:17046":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:3055:166":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:5426:3383":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:31503:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3495:8827":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:3346:9225":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:984:3220":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11281:17157":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:14214:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:10022:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"1:5865:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:11149:2837":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"21:15079:35367":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:12260:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:13193:17422":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:7539:15198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:40226:8972":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5586:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47039:3644":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44585:8921":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"21:11542:34442":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"30:940:21679":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"21:10513:2912":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:15876:21439":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:44288:8888":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14438:20653":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3303:3216":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6389:16972":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4113:3426":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:6881:3573":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:2020:802":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"21:2766:2439":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:12313:2849":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:44308:8887":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1674:33069":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:46625:3683":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:8290:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11539:17212":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1626:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:15459:34434":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"21:6770:2456":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:46739:3704":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6666:14770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:15235:2926":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"17:322:33517":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5196:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:6262:2912":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"20:0:2431":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:46348:3669":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:39398:9260":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44830:8938":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5420:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:4899:3489":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7058:17006":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46395:3665":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:559:10026":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:23026:3746":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:40089:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6144:16962":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"31:102:2500":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"17:15090:20695":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14127:20158":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:5468:996":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:34104:9248":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5334:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"21:10618:2920":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:14560:20660":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46608:3677":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:23310:29046":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"27:11:36004":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"16:2820:16044":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"21:12918:2960":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"17:11878:17155":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:6939:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:5025:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22551:3625":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6691:14773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:34037:3612":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:11224:29275":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"11:1914:3217":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:5171:2444":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"6:570:10028":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:40936:8915":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15844:21436":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43469:2908":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:7895:29158":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:22:834":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:523:10021":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:8866:153":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:15363:35367":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"2:2403:8829":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:44680:8915":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:8869:3227":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11606:17155":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6381:14688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8223:3330":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:41303:9215":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:14114:20157":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:41115:3307":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:13220:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:45103:9395":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:13696:2968":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:2105:685":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4842:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6502:15996":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"27:481:3523":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"6:5488:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"21:9007:2874":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"5:1576:3200":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10963:3329":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14692:20669":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:9397:22060":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:11434:243":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:2265:31514":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13349:17165":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:11185:35367":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"21:10484:35367":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"1:12476:985":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:8504:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11114:17154":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:8537:2858":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"17:13070:17155":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11902:17249":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:11889:2845":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"30:1418:21661":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:2672:9276":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:2347:31895":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"14:7:15951":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:881:3409":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"21:4540:26442":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"1:12463:755":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13854:20139":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:41194:9213":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:396:33052":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:9198:3583":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15919:21443":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:211:8831":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:45437:29034":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:44813:8937":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9139:3541":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7765:3291":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5804:3538":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6713:16983":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41049:3288":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"30:1074:21789":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"2:22167:3619":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6716:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:682:3174":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2498:3321":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7578:17023":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"30:1483:36036":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"21:8836:35367":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:41016:9021":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:16385:21477":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:42604:3180":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:10476:3064":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12736:17376":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13169:17454":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:2508:3326":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:9406:35367":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"15:288:15975":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45123:9391":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47060:3650":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"3:0:516":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14507:20656":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:11015:2928":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"5:7801:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3551:145":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10861:142":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:10934:3492":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:9156:3491":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11592:17204":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:9651:137":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"21:14721:3046":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"5:0:315":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:8043:33158":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:43209:8836":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:14522:2996":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"11:1601:15943":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:8723:141":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:8901:35367":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:11805:17246":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:8330:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:44227:8869":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15557:21404":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:47649:8795":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"20:82:2784":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:38709:9257":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3513:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15896:21441":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4827:27077":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:2554:2466":{"crate_id":1,"path":["std","io"],"kind":"module"},"21:14070:3199":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"30:1193:21679":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1:8255:3197":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"21:13764:35367":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"1:8026:3150":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7813:24601":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"16:908:33517":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"21:10372:2925":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"21:13121:2954":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"1:4349:3461":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15887:21440":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:5872:3575":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:15387:35365":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:12477:1946":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:8302:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"21:14930:3048":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"6:4970:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7919:17028":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7580:3235":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:12869:17170":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2590:16034":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:12471:1884":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1385:3213":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46316:3628":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:480:15815":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5562:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:881:3210":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11075:34307":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:740:3205":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:14031:2859":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5520:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:16632:21635":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6302:16969":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40982:9020":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8011:3166":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42530:176":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:11323:2932":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:15836:21435":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:46669:3637":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:7335:24595":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12952:17411":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10296:17133":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"15:394:15987":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:3084:8816":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:4486:21706":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"5:2584:30423":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12163:17301":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:10778:17147":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:3865:3233":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6904:16996":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:809:3202":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:6824:3567":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2860:16046":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:4439:21704":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"21:11957:2846":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"1:8235:143":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:12992:17378":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:8612:17059":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13014:17430":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:14083:2862":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43030:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1099:3212":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12018:17296":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:7295:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:2769:1074":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"22:7:2455":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"6:8308:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:1158:3214":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:5131:17425":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:14152:20160":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:15392:2890":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:10061:35367":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"21:13840:2970":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"21:14088:2987":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"17:16739:21643":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"21:15214:3060":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"1:8368:2997":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14947:20685":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1696:3452":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:12424:3179":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:22094:3335":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:9661:8900":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11579:17205":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:236:3523":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46800:28441":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:7332:9897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"30:1088:21791":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"1:1907:3262":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:5807:3540":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:12829:2945":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:22273:3620":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"27:136:3575":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:10539:8835":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:44340:8914":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:1400:3212":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8553:3363":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5387:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:47717:8799":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:41524:2930":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10516:17140":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:11271:2931":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"21:13035:2963":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"21:11709:35367":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:12027:8807":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5271:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:4464:3348":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:10748:156":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:4998:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:1117:3214":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:39:2805":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:963:3205":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"21:6429:190":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"2:43733:3343":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:41351:2923":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5172:16687":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11887:26341":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:2539:30124":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7159:17008":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12537:17319":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:14312:20647":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:11950:3401":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6638:14767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13871:20140":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15540:21415":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:331:3143":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:23417:3408":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:6864:2834":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:11653:17208":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:10303:35367":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:8196:3331":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:687:3175":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:41212:2909":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:12678:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"2:2215:9285":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:10549:8842":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"30:871:21787":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"17:11432:17190":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:5993:3561":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:8669:17062":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"30:1151:21789":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"6:7361:15191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:40860:9024":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8358:24885":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:14237:3761":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"18:481:21685":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13471:17171":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6173:16964":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11261:3542":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6822:16989":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:15641:17211":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5265:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:14405:20651":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40830:8988":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4896:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:12987:2962":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"28:46:2964":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"16:7305:17013":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:13307:8900":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5282:16705":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10597:17142":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:6452:3563":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"16:6914:16997":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:16494:20133":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"21:6781:2830":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"17:15731:21426":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1369:3211":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8694:3443":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6599:14763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11315:22044":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"30:971:156":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"17:14640:20666":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4947:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7368:3494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:23576:28598":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12687:17402":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2863:138":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:5305:17431":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:14612:20664":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:2083:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:12587:2948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"18:531:21688":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:6199:2453":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"1:3620:2999":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:400:26444":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"21:14061:3198":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:7845:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11129:26444":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:7531:3230":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15496:21413":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12035:15934":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2704:16039":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:15334:2889":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:7378:2838":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"6:5670:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41717:9203":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44266:8868":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6672:14771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13491:17172":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:15679:21422":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5316:24879":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1784:31568":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:9271:3582":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"21:14352:2994":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"2:44784:8935":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"31:120:2501":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"2:47612:8792":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3752:150":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:16642:21636":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:44990:8925":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:57:2462":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"17:10803:3363":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:9256:3579":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15946:21446":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5007:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:5301:3558":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:22155:3622":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5127:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5541:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:4542:29402":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10564:17141":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13958:20146":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6623:14765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44673:8905":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:8066:17039":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46722:3698":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5020:3440":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"29:0:2445":{"crate_id":29,"path":["futures_io"],"kind":"module"},"6:5088:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:22045:29114":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:9172:35367":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:15973:21449":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7462:17020":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1690:10936":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11706:17230":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:16613:20137":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:22047:29112":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3834:16062":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:5675:2967":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"6:6917:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"14:160:15951":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11085:3543":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11794:22058":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:3133:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7471:17021":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:10167:17129":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:2566:3194":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:12039:24917":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:42691:3198":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:11906:8892":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:5367:444":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:7223:17010":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2506:16030":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:564:10027":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:16171:21461":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:46821:28517":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:47193:3633":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15665:21421":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:11349:35367":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"16:6042:16956":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:15489:34436":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"16:6942:16998":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:7544:2854":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:4827:8989":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13119:17424":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6749:16985":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13547:17175":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"17:11998:17261":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:12557:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:3687:3358":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"27:146:223":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:13116:8895":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:9574:2908":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"21:10894:2924":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"6:7350:15190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6777:14784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:4207:3198":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7089:8967":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44357:8910":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:485:10017":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4953:8999":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:3110:16055":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5165:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:2294:31907":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10442:17138":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:3799:31568":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5666:3536":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6852:16992":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:10209:2933":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"11:2466:3202":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:3987:16064":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:2950:16050":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:11581:2964":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4921:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:32744:242":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:23332:28409":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11012:2998":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"24:296:35911":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"24:169:2827":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:11016:17152":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5139:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:12424:8879":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:6020:3505":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"21:12722:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"16:2550:16032":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:3381:8825":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:3329:3217":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"21:8369:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:14997:20688":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:6394:21718":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"1:7397:26438":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:34383:9250":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:42539:2964":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4018:3403":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10280:22190":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:8343:15771":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6866:16993":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:894:3198":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14346:17364":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2467:16028":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11141:26451":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:3351:3609":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9145:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6738:33521":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4939:3441":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"31:109:2497":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"5:1615:3205":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:10700:26436":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13041:17420":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:8422:3006":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:534:3138":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4964:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:47495:3700":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5477:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:30862:3405":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:10777:3377":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:0:1746":{"crate_id":1,"path":["std"],"kind":"module"},"1:5475:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12479:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:6600:189":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2840:16045":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14284:20645":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:1632:10930":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:22076:29121":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"21:13672:2965":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"2:32745:249":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2880:16047":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6084:16958":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:9314:35367":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:5264:1196":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"2:11673:8895":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5105:3486":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:7966:2853":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"16:2724:16040":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:3339:9223":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12095:17269":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:5575:2869":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:13096:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"16:6368:16971":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15997:21452":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:6930:31568":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"27:0:2463":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"17:10368:17135":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:0:1021":{"crate_id":6,"path":["libc"],"kind":"module"},"17:16750:21644":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:2255:3138":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11232:17194":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6188:16965":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:5736:3537":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8566:3052":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12983:17414":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12906:17400":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:42635:2791":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:4120:16072":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:3126:16056":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:13251:2953":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:14375:20649":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:12:21699":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:14161:2991":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:9496:3608":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:1580:15942":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"31:65:2495":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"17:16786:21647":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"30:1501:36065":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"1:8201:3332":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3526:2790":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:23260:29051":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"20:92:3335":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"2:2900:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10534:16953":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:10547:8841":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5325:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:16132:21458":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:16701:21640":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:12474:1878":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7075:17007":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"31:0:2494":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:41241:2911":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"20:97:2438":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"5:6284:3348":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:3777:28937":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:10748:2916":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"30:1159:21790":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"2:23348:28407":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10823:17149":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3554:146":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:4561:3348":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:44655:8907":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14672:20668":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:11654:34439":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"1:12467:910":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"31:125:2502":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:8978:35367":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:1339:17217":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:15381:2887":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:12455:1340":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"21:13293:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:0:2433":{"crate_id":21,"path":["futures_util"],"kind":"module"},"30:1138:21788":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2:5015:9001":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:33486:9243":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11782:24873":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:9581:3268":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:4873:16595":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"30:1017:21800":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"17:11124:34297":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6065:3181":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"21:9738:35367":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:46707:3649":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7113:8968":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:42333:28639":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4914:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:6885:9220":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"0:56:1365":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"2:47172:28638":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:16520:21633":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"21:10993:35367":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"17:13385:17167":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:948:3202":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"21:9472:2929":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"16:4929:16605":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:4753:8858":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14483:20655":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4829:27079":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:11864:8893":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42547:3198":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43725:29108":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"21:12702:2958":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"30:1429:21662":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"2:13322:8901":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"30:964:21680":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"9:355:15832":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8736:3503":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5357:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"13:0:2641":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6493:14716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"14:202:8945":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:9548:3510":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:15096:3052":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"6:5288:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12798:17406":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:8406:2851":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"21:6338:189":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:40824:3169":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:7493:35367":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"21:8064:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12897:17409":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"21:7702:34584":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"5:7560:2987":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:1249:31532":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3309:3157":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:41294:2834":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:80:21660":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:8543:208":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"30:1032:21802":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"2:47638:8794":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"30:1054:21803":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"6:6882:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:4503:2973":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:43957:28469":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"29:17:2447":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"1:12458:1754":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22546:3335":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:11678:17203":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:327:2843":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"6:1584:10926":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:8118:2967":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8672:3494":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"27:124:21754":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:43974:8870":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:14460:20654":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:42769:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13798:20136":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:44549:8920":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12066:17293":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13306:17163":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5709:16952":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7469:15195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4119:3425":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15981:21450":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3448:3378":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:12113:2847":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:47010:3638":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:7508:167":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"16:6239:16967":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:42273:3392":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:13663:2964":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"1:1085:3211":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9442:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14269:20644":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5249:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:11548:35066":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"14:0:2648":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:8800:2870":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:44196:8883":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:7577:15201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:8528:17054":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10565:27343":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"26:37:35999":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:43764:29042":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:11910:3402":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12204:17304":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:7737:3290":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:12803:33519":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"17:12044:17268":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:23139:29050":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:7431:11043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:4149:3427":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:13353:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"21:13324:2956":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"11:2301:3211":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:8402:149":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42555:3199":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:0:574":{"crate_id":2,"path":["core"],"kind":"module"},"1:5128:3488":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:45095:9390":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:47466:3679":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:15:21701":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"17:12409:17362":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:13489:2955":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"5:7620:30455":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:1087:2883":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:2112:9188":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"30:1580:36051":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"2:45099:9393":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:7495:26338":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"21:13376:2957":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"21:15528:34430":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"21:7197:2837":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"16:4766:16557":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2900:16048":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:0:2652":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:2772:16042":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:15144:3053":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"16:7424:17019":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12456:341":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"21:11519:35367":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:2894:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12319:17336":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:3049:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:14299:20646":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"11:671:2964":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:42880:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:4780:3485":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:8222:2847":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"5:7214:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:14196:35367":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"2:15:2760":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:13002:9402":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:309:21712":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"1:8498:2442":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"9:53:15835":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:8636:17061":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:41282:9219":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:6240:2465":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"1:10474:3546":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"11:2137:3212":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:44977:8944":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:12813:34447":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"6:6611:14764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:15148:20698":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14933:20684":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12216:17305":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:6434:24854":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8507:2998":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2482:3316":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:990:3209":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9364:17023":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4829:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:23554:28502":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:2648:3043":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5395:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11563:26448":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:8516:3000":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:4705:3154":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:45149:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5635:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16684:21639":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:11088:2927":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"29:27:2446":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"30:1130:21787":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"5:5142:3348":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:16264:21468":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:6708:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:22706:3621":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14573:20661":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"30:992:21679":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"21:13541:2943":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"21:925:2873":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:3141:16057":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6462:16976":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15549:21416":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:10406:24858":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:23587:28500":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:15475:21412":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5648:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5379:16733":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:13943:9051":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:8801:3523":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6462:14755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:96:21661":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:7085:2996":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:1122:31568":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:754:21683":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:3075:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:3403:3381":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10729:17146":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:10817:3149":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:8711:17063":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:11080:29271":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:10274:17132":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8889:2964":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"30:1264:21679":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"30:1230:21790":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"16:7959:17031":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12371:17315":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"26:53:35997":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"5:3337:3215":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:32709:22327":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"7:32:15788":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4943:3445":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11757:17233":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:4221:3432":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:16668:21638":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:8233:17048":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:33698:9246":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1563:10924":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"27:187:21760":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"21:11300:35367":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"1:3602:3053":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"31:68:2496":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"17:14586:20662":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"11:1725:159":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:491:34334":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:8546:17055":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:45008:8926":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6770:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"21:5266:2466":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:47664:8796":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4825:27075":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"21:10406:35367":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:6212:2452":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"17:15989:21451":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10774:3381":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:10938:34293":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:351:33057":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:1667:10933":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:1220:17209":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3352:3380":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14807:20675":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:12035:2848":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"11:2366:15944":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:6473:14756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42954:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"21:2553:35353":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"21:15229:3062":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:2406:17242":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:3706:2964":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8624:3465":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:8308:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:8186:35367":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:23012:3335":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:41031:9018":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6808:16988":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:11173:34305":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:5879:3576":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:8121:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:41733:9205":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:47524:3651":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:14019:20150":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9241:3581":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1597:10928":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:7762:2855":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"6:6758:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:1507:10918":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13266:17161":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6437:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:22064:29109":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:3091:31963":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"21:6747:34438":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"21:13157:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"11:2533:33045":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:9560:35367":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:11553:17207":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:14738:20671":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8906:3528":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:40149:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3531:8814":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:12816:17171":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:9343:2884":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"17:15689:21423":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:3436:9253":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:8223:17047":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15286:21405":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:9182:3543":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:16362:21475":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12082:17271":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"21:14435:2995":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"17:14886:20681":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:5060:16667":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:11087:29274":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:14708:20670":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10408:24892":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12234:17354":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:2148:3213":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:16399:21478":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2545:33046":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:10475:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11298:3338":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:7428:22585":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:488:157":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"21:14225:2992":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"2:42564:3509":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10494:147":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"21:14609:3043":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:14788:35367":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:3446:3377":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:123:33068":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:3503:17318":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12435:22037":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:42708:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:23368:28529":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12787:17370":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:32667:3544":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"30:1538:21678":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:23059:3745":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:3764:8984":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44503:8891":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:15162:3055":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"1:5114:3487":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:4:1280":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6680:16981":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:3792:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11503:17195":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:3539:2965":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:3542:3002":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:7777:3292":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5301:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4171:3429":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3307:28170":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:6537:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13610:17178":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:40412:9049":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14043:20152":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46640:3631":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:9262:2882":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"6:5570:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8824:3524":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7907:17027":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46500:3642":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:36778:9255":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:4132:2987":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11065:17153":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:11363:27054":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:47566:3706":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"30:1104:2964":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"1:4333:3459":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"21:13777:2874":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"5:6179:9614":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3087:31894":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44351:8911":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:16595:20136":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:3061:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:12046:15984":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:12188:2833":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"20:17:2783":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"17:14358:20648":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3042:24906":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44381:3364":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:23462:3335":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:7540:3199":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:3850:3049":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"30:1572:21681":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:8296:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"25:0:2441":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"15:0:2649":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6227:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:5835:8967":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:12475:1860":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:6217:2450":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"21:7350:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"8:0:2643":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6680:14772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"21:8575:2861":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"17:14140:20159":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:23598:28438":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:14520:20657":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:422:2434":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:46558:3617":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1684:10935":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"21:15040:33014":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:42626:9346":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6544:14761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8895:3527":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:9:21700":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:6987:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:967:3206":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:9513:35367":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"21:11581:34574":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"16:5318:16718":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:8178:2898":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:11982:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:31530:9044":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:23521:28633":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"21:14487:35367":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:46529:3697":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:1888:3202":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:34556:9251":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:9534:2907":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:10756:160":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"27:181:21759":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:10958:27039":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"21:15171:3056":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"16:7716:33501":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:9374:2905":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"11:1880:2964":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:13316:8902":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:45298:154":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:8137:17042":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:281:31568":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2754:3365":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12469:922":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:9982:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4976:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"27:434:21773":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"16:2920:16049":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:12459:1844":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:12473:1872":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:2323:3212":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:8112:3272":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8727:3504":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:15077:20694":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6723:14777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:2748:16041":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46948:3684":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13921:20143":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12605:17155":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12335:17359":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11788:3547":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11952:17254":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:6158:3558":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1108:3213":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:5195:9012":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:12970:2961":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"11:1140:15940":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:38764:9258":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:8559:181":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:40057:3245":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:40928:3169":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:7135:2835":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"6:8267:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"21:7531:35367":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"1:6827:3568":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"7:79:15795":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:8100:2852":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"17:12293:17314":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10630:17143":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"30:1408:21660":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"2:44799:8936":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:43452:8832":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"15:327:15980":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10394:17136":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:667:17124":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3693:185":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:41097:3293":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"21:6377:21719":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"1:439:188":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"28:42:3199":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:8479:2856":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:6556:34621":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"21:11057:35367":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:41273:2832":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:9323:22113":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15160:20699":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:23510:28503":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:12840:17373":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:3548:144":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"11:1105:15939":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7570:3222":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2209:3315":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:15573:21417":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14821:20676":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:10974:22109":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:32834:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:973:3207":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5057:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:32720:29154":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:12816:9360":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:10707:2919":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"17:10487:17139":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:7789:33512":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:47687:8797":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"22:0:2792":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"17:15864:21438":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:9912:35367":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:779:2862":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"27:154:3581":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"16:2570:16033":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:3095:31962":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:23245:28597":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:22585:29115":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"30:142:21794":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"5:779:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:7160:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"11:2559:33047":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44635:3052":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:581:9044":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"9:500:15819":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9452:3571":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:4844:16589":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:6746:3572":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8267:17049":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:6560:3762":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:4984:3155":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6790:32191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:2400:3198":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:3048:16054":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5650:3535":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:434:33061":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4267:16127":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7648:3199":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:8504:3005":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"21:10691:35367":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:9229:3578":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:1930:3268":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"21:12211:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"1:2326:142":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40219:9263":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:1869:3251":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:15261:35367":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"5:7824:8947":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:11214:2930":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"21:13806:35367":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"18:623:21798":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:12464:771":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5285:24879":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7044:17005":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:44253:8867":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:7270:2832":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:15315:21406":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:7074:9216":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:11823:8890":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:7316:10871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1625:10929":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:3695:16061":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:10537:8836":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11163:17155":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:587:2435":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"16:8503:17053":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"21:4353:35350":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:8276:3373":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:46380:3635":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"21:15279:3063":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"5:725:30472":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:44956:8942":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12749:17375":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7548:3221":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13970:20147":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:39:3247":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:8451:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15024:20690":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10793:17148":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:12135:17300":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:11252:35367":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"5:1604:3204":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3085:31967":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:23383:28505":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:43223:8844":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:12470:903":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:3496:3368":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:32803:9226":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1523:2964":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:10797:2917":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"21:13405:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:14579:3042":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"21:12861:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:41335:2921":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12122:17270":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:3668:27027":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8268:24924":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:2367:31924":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7554:17022":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:10541:8843":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10696:17145":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:12403:22117":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:854:3208":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:299:33054":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11045:3272":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"30:1172:21791":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"6:7986:9974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:4184:16090":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2718:3045":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2335:3032":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:515:21687":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:4674:9003":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:15701:21424":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:16297:21470":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6953:16999":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:954:3203":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:7080:29048":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:6748:14780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"21:10644:35367":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:2732:9376":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:12461:2950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"5:6839:3199":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:47779:8801":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9739:142":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:40886:9023":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44689:3169":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46331:3664":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7414:11045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8489:2967":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:772:3200":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6402:26435":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:3028:3335":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:996:3210":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"21:9237:35367":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:22842:3751":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12673:17390":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14796:20674":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11515:17222":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:7308:10067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11566:17206":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2029:3348":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12359:17361":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"0:0:2526":{"crate_id":0,"path":["futures"],"kind":"module"},"15:306:15976":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:42699:3199":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:2858:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22798:3750":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"21:8161:2848":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"6:6876:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6731:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"21:12138:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:12238:24515":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3405:3382":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:912:3200":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"28:55:3198":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"21:335:34461":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:14814:120":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"16:903:33518":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"21:338:2844":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"2:23192:29038":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2656:686":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:11371:2921":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"17:15753:21428":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:23620:28636":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"21:10350:35367":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:663:3171":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"13:110:33081":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:8913:29024":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:835:3206":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:16761:21645":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:10530:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:31145:8832":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:0:2527":{"crate_id":24,"path":["futures_task"],"kind":"module"},"1:4902:3467":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"21:20:1342":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"16:8096:17040":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"20:143:21698":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"6:5494:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:8261:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12711:17404":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:8640:35367":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"17:16323:21472":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10663:17144":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:22880:3752":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"21:23:2803":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:46927:3678":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11808:22139":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:47077:3699":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:31130:9178":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"21:7105:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4823:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:7695:3194":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:42251:173":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:6521:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:6310:26453":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:12465:750":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"21:6284:2939":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"20:32:2432":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"21:12388:2853":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"13:229:33082":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:44327:8917":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:7463:15194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2796:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"21:9455:35367":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:44127:29290":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:670:21678":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6740:14779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:10791:3340":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11733:17232":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:4369:2964":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:15064:20693":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:7487:15196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:10543:8844":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"21:5212:2461":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:46416:3670":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15621:21403":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:4608:8987":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"21:14122:35367":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"21:13641:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"30:0:2652":{"crate_id":30,"path":["memchr"],"kind":"module"},"17:13537:17174":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:9511:9338":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:2208:9287":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"21:6410:21717":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"1:8260:3196":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"21:11470:35367":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:13738:2863":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"2:3065:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:7341:15189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:7899:8964":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5117:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4311:26336":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:2770:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:3366:9245":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:23532:28472":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:6640:16979":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:3737:9262":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11358:17186":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:517:10020":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8643:3400":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3304:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:15739:21427":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4233:3435":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:8249:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:6579:3763":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"21:11807:35367":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:22573:3615":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13028:17421":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:43497:28476":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:47740:8800":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"28:60:2987":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"21:11829:2941":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:13082:17156":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"21:10234:35367":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:3851:3398":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:5526:31568":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"28:76:36027":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"17:16311:21471":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:873:3209":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:12623:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"1:11280:9414":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:47702:8798":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"21:9091:2879":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:7025:2834":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:32727:8998":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6440:16975":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9751:26457":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:11712:8884":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5282:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"27:368:223":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"2:22932:9275":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:11822:22130":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:16377:21476":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11068:22020":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4702:3468":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5533:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6902:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9356:24913":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8536:2905":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"27:127:21755":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:11122:35367":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"17:16198:21464":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10141:17128":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:13537:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:43536:141":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7604:3199":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5507:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:2480:3315":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:2161:3233":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:41724:2968":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5319:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:4528:3348":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:5950:2965":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"17:13662:17460":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:47392:3673":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:13039:9404":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:41264:2831":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:41152:8867":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"21:13946:35367":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"21:13529:35362":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"21:15286:3064":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"17:13290:17162":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"14:31:15951":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12570:17316":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9351:24889":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:5972:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:15203:3059":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"11:1920:3218":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:45301:167":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:0:2651":{"crate_id":17,"path":["object"],"kind":"module"},"30:1394:34334":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"30:1472:21676":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"2:47347:3639":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43970:28301":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:14662:3044":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"16:5649:16934":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:14016:3198":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"21:12904:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"2:31156:28595":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"18:507:2933":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12941:17401":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4241:16124":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:1521:10920":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15050:20692":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"21:10610:2922":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:4896:8997":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:380:3164":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:102:33067":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7495:33473":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:43557:8834":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"30:1209:21788":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"5:928:3219":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"21:13428:2959":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"6:5381:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"30:986:21679":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"21:12763:34585":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:13733:20133":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:16241:21467":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11421:17189":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6998:17002":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"21:15443:34441":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:14698:35367":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:16209:21465":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4984:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"21:15504:34446":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:317:33518":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:1898:9157":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:12108:17299":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:11785:8889":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"21:6767:2457":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:44206:8881":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:12424:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"21:5256:21713":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"9:176:15921":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"27:140:21756":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"24:135:2828":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"17:15036:20691":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7938:17029":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42643:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10115:17127":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"30:927:21792":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"21:14974:35367":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:14401:35367":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"2:9987:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22983:9275":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"21:4954:2993":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:43202:8835":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:1023:3212":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11831:17212":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:16822:20144":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"21:14094:2988":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"16:2660:16037":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12462:752":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:7604:15203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:47545:3685":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7542:33490":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15769:21430":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:708:3204":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:2172:3234":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5441:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"21:12338:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:2820:9033":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"16:6890:16995":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:6712:2987":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:3919:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5428:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10549:16954":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:13602:2944":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"17:16332:21473":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:16832:20146":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:16812:21649":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"21:13690:2967":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"29:25:2448":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:42511:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"20:68:2437":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"11:364:33050":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6256:33324":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:8165:17044":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8031:3152":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3758:8985":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7980:17033":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:13966:34373":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:10666:2918":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"17:13209:141":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40169:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:9212:3580":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:6768:2460":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"30:1062:21787":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"16:6731:16984":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:679:3173":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:888:2919":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:45131:9414":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"30:1441:8902":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"21:10967:2926":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"1:3350:3379":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6696:16982":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:4297:3348":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:630:3167":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3829:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:1085:33041":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7401:33254":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:13732:208":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"1:599:3146":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11720:17231":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:13692:17461":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:14058:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1888:2987":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:113:21662":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14072:20154":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:5085:16669":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:8179:17045":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:6564:14762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:5875:3348":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"17:12851:17407":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:14284:240":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"17:12583:17317":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:15561:35364":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"6:1539:10922":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44645:8918":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:7447:35367":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"1:4177:3430":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7750:9331":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3659:3064":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:41710:29102":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:3299:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:15431:21410":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41125:3306":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3058:148":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:13261:3308":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:8031:15574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"30:1465:21683":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"21:7892:2845":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:38819:9259":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:15377:2888":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"11:830:3203":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41766:9208":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:40061:9261":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:2990:16052":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:8875:9209":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11000:24853":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:7743:27631":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:14975:20687":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:15136:17174":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41510:2928":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44905:8940":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:21:1342":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"30:1201:21787":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:13933:20144":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11222:17156":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:5616:3533":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11691:17202":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:3930:3202":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:2282:192":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10928:17151":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:33970:3610":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:6919:2830":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:40074:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2013:3283":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:2142:1385":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:14036:2964":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"21:7424:2840":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"5:4162:31568":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12648:17322":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:553:10025":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5405:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:296:3007":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:8617:3395":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"21:7085:2833":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"30:1516:21686":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"1:3677:3060":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"27:452:3582":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"18:573:2933":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:12453:2951":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"21:8039:2846":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:43772:29047":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:1641:3216":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:12468:916":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4341:3460":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:9953:2913":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:16775:21646":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"14:165:15952":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7350:33437":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:904:3199":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:44399:8889":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:9699:2910":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"9:390:15817":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15010:20689":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:9206:3199":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:2551:33043":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5349:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"18:643:2933":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10387:3262":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"21:13719:35367":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:11971:17240":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7906:24596":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2440:2987":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:2437:17267":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:726:21682":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14750:20672":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:13926:29518":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"21:13013:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"16:6608:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:7801:24608":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:40013:8828":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:3674:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1626:2987":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:7591:34584":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"1:8839:3525":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:45364:3760":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"30:915:21791":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"1:11248:3491":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:938:2987":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:598:21800":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8077:3177":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:10168:29025":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12176:17302":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15418:21409":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:16218:21466":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"21:9892:2830":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"6:7586:15202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:14599:20663":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7358:17015":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:1675:10934":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3077:141":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"21:10602:2915":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"6:497:10019":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13157:17418":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"24:190:2829":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"6:4929:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12550:17320":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5629:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:16145:21459":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:5471:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:40920:8916":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14832:20677":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:3889:16063":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15905:21442":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12008:17295":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4941:3444":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:7448:15192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:42289:3393":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41075:3289":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:23054:3747":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:6895:3574":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:2815:30420":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13554:17182":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:5224:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12450:426":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:41375:9217":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1635:3215":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:14859:20679":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:0:2650":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6781:16986":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"30:1493:21684":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"20:131:2454":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"21:8601:35367":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"6:5151:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:0:2642":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13818:20137":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:155:16002":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"31:38:36068":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"17:14393:20650":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:44279:8885":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3052:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:31092:3229":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14084:20155":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:472:17122":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13205:17159":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:2773:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4902:16601":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"30:1116:21679":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"2:45315:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7789:8857":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"21:12060:35367":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:10418:17137":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6984:17001":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:45425:8811":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11333:165":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"5:1594:3203":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"30:902:21790":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"17:13719:17462":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12826:17371":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:3296:2964":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:34238:9249":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:12053:15984":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4495:3464":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10977:34308":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:32734:9321":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:685:3198":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7282:17012":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13451:17170":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:2378:17282":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5658:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:5044:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:7839:24599":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"6:5019:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6573:16977":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:583:17123":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11958:17241":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7883:17026":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"21:8283:2850":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:6056:2939":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:46587:3671":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12776:17405":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:1854:711":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7521:33301":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"21:10827:35367":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:14257:3758":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:45127:9392":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:13052:2949":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"30:892:21789":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"2:43481:28647":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:44878:8939":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:41250:28280":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"21:9677:35367":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"5:3308:31528":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15852:21437":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"11:328:33065":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:7548:15199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"30:1552:21679":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:5742:16954":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:45184:9415":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5186:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:22275:3619":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"30:1562:21680":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6952:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:9420:190":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44431:8924":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:41087:3363":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:4881:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6765:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:5198:16690":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:44216:8882":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6408:16973":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13838:20138":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:31124:8865":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5113:16674":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7838:17025":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5449:16757":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:14757:2905":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"12:0:2647":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3144:141":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"27:149:21758":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:15319:3143":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"21:7227:35367":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:11457:17192":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"5:1001:2964":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:8755:2869":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:9119:35367":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:13078:9403":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:14335:17363":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43216:8843":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:14996:3049":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"1:1630:3202":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13222:17160":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:45398:183":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"28:0:2795":{"crate_id":28,"path":["slab"],"kind":"module"},"6:5051:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"23:0:2793":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"6:1703:10937":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41145:3334":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:718:21674":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12886:17399":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46448:3682":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10953:22206":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"21:10083:2904":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"6:545:10024":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:13327:8899":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:23499:28596":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:5986:3560":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"27:487:21771":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:5551:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:8413:168":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:22930:29349":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:42417:29096":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:546:33457":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5295:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4569:3456":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:44367:3363":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:10173:29214":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46838:28477":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:16084:21457":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5412:1267":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"27:495:21772":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"6:465:10014":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6652:14768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}