{"root":"0:0:2557","crate_version":"0.3.30","includes_private":false,"index":{"2:13797:23116":{"id":"2:13797:23116","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:2530":{"id":"0:52-31:100:2530","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2530","glob":false}}},"2:13782:31044":{"id":"2:13782:31044","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12648:1771","str::slice_mut_unchecked":"2:13783:31045","crate::ops::Index":"2:40276:3285"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13864:31060":{"id":"2:13864:31060","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13856:22318":{"id":"2:13856:22318","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:876":{"id":"0:37-21:104:876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:876","glob":false}}},"2:13818:31047":{"id":"2:13818:31047","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13452:9259","str::split":"2:13811:3071","prim@char":"1:12642:492","`DoubleEndedIterator`":"2:8393:134","str::rsplit_terminator":"2:13820:31048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44783:9281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6217:2481":{"id":"0:23-21:6217:2481","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:2481","glob":false}}},"5:5728:22712":{"id":"5:5728:22712","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13874:22710"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:2469":{"id":"0:11-20:97:2469","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:2469","glob":false}}},"0:53-31:102:2531":{"id":"0:53-31:102:2531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2531","glob":false}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:31776","5:5713:9131","5:5715:31777","5:5717:31778","5:5725:31779","5:5726:31780","5:5727:2931","5:5728:22712","5:5729:22711"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74-21:3786:2471":{"id":"0:74-21:3786:2471","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:2471","glob":false}}},"0:54-31:120:2532":{"id":"0:54-31:120:2532","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2532","glob":false}}},"5:5712:31776":{"id":"5:5712:31776","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3043","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:3043","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4707:2474":{"id":"0:39-21:4707:2474","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:2474","glob":false}}},"0:25-21:6212:2483":{"id":"0:25-21:6212:2483","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:2483","glob":false}}},"0:42-21:57:2493":{"id":"0:42-21:57:2493","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:2493","glob":false}}},"2:13785:23100":{"id":"2:13785:23100","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13784:23099","str::split_at_mut_checked":"2:13787:23104"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13849:31055":{"id":"2:13849:31055","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:31062":{"id":"2:13869:31062","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13411:149","`FromStr`":"2:13410:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13410:3347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13410:3347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13850:31056":{"id":"2:13850:31056","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4707:2474":{"id":"0:62-21:4707:2474","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:2474","glob":false}}},"0:28-22:7:2486":{"id":"0:28-22:7:2486","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:2486","glob":false}}},"0:66-20:68:2468":{"id":"0:66-20:68:2468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:2468","glob":false}}},"0:32-21:37:2489":{"id":"0:32-21:37:2489","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:2489","glob":false}}},"0:78-29:25:2479":{"id":"0:78-29:25:2479","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:2479","glob":false}}},"0:51-31:141:2529":{"id":"0:51-31:141:2529","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:141:2529","glob":false}}},"0:5-20:32:2463":{"id":"0:5-20:32:2463","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:2463","glob":false}}},"0:69-21:422:2465":{"id":"0:69-21:422:2465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:2465","glob":false}}},"0:70-21:587:2466":{"id":"0:70-21:587:2466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:2466","glob":false}}},"0:84-21:6199:2484":{"id":"0:84-21:6199:2484","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:2484","glob":false}}},"2:13765:31041":{"id":"2:13765:31041","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13794:3062":{"id":"2:13794:3062","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44987:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13823:23110":{"id":"2:13823:23110","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259","str::rsplitn":"2:13825:23112"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44837:9253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:31050":{"id":"2:13838:31050","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13452:9259","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatch_indices":"2:13840:31051"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44883:9276","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:21818":{"id":"2:13807:21818","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13792:28781":{"id":"2:13792:28781","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13793:28782"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45007:9266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1291:2467":{"id":"0:65-21:1291:2467","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:2467","glob":false}}},"2:13866:31061":{"id":"2:13866:31061","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13780:23074":{"id":"2:13780:23074","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:2494":{"id":"0:43-27:0:2494","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:2494","glob":false}}},"2:13784:23099":{"id":"2:13784:23099","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13786:23103","str::split_at_mut":"2:13785:23100"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:22411":{"id":"2:13791:22411","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44719:3402","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:22645":{"id":"2:13763:22645","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:31777":{"id":"5:5715:31777","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13789:28783":{"id":"2:13789:28783","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44703:9270","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13783:31045":{"id":"2:13783:31045","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12648:1771","crate::ops::IndexMut":"2:3628:3286","str::slice_unchecked":"2:13782:31044"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:23118":{"id":"2:13801:23118","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:2475":{"id":"0:16-21:5171:2475","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:2475","glob":false}}},"0:77-29:17:2478":{"id":"0:77-29:17:2478","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:2478","glob":false}}},"2:13793:28782":{"id":"2:13793:28782","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13792:28781"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45016:9265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:2497":{"id":"0:45-21:5266:2497","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:2497","glob":false}}},"0:35-21:6768:2491":{"id":"0:35-21:6768:2491","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:2491","glob":false}}},"2:13825:23112":{"id":"2:13825:23112","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12642:492","str::splitn":"2:13823:23110","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44855:9251","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:2492":{"id":"0:41-21:5212:2492","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:2492","glob":false}}},"2:13772:352":{"id":"2:13772:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13773:23075","`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:876":{"id":"0:58-21:104:876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:876","glob":false}}},"0:34-21:6769:2490":{"id":"0:34-21:6769:2490","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:2490","glob":false}}},"2:13795:31046":{"id":"2:13795:31046","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44997:9275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:2526":{"id":"0:48-31:65:2526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2526","glob":false}}},"0:76-29:27:2477":{"id":"0:76-29:27:2477","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2477","glob":false}}},"2:13835:31049":{"id":"2:13835:31049","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13452:9259","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::matches":"2:13833:2796"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44955:9279","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:23018":{"id":"2:13876:23018","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:39281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13881:3210":{"id":"2:13881:3210","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5069:3210"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45041:3211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6182:2482":{"id":"0:24-21:6182:2482","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:2482","glob":false}}},"0:7-21:422:2465":{"id":"0:7-21:422:2465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:2465","glob":false}}},"0:79-29:20:2480":{"id":"0:79-29:20:2480","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:2480","glob":false}}},"0:71-21:5171:2475":{"id":"0:71-21:5171:2475","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:2475","glob":false}}},"2:13878:23020":{"id":"2:13878:23020","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:39281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-20:68:2468":{"id":"0:10-20:68:2468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:2468","glob":false}}},"0:33-21:20:1354":{"id":"0:33-21:20:1354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1354","glob":false}}},"5:5727:2931":{"id":"5:5727:2931","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1377":{"id":"0:56:1377","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:876","0:59-2:45681:163","0:60-20:32:2463","0:62-21:4707:2474","0:63-25:9:2473","0:65-21:1291:2467","0:66-20:68:2468","0:67-20:97:2469","0:69-21:422:2465","0:70-21:587:2466","0:71-21:5171:2475","0:73-21:2766:2470","0:74-21:3786:2471","0:76-29:27:2477","0:77-29:17:2478","0:78-29:25:2479","0:79-29:20:2480","0:81-21:6217:2481","0:82-21:6182:2482","0:83-21:6212:2483","0:84-21:6199:2484"],"is_stripped":false}}},"0:27-20:131:2485":{"id":"0:27-20:131:2485","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:2485","glob":false}}},"2:13811:3071":{"id":"2:13811:3071","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13452:9259","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split_whitespace":"2:13792:28781","str::rsplit":"2:13815:23108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44733:3403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:2533":{"id":"0:55-31:125:2533","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2533","glob":false}}},"2:13875:22709":{"id":"2:13875:22709","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13847:31054":{"id":"2:13847:31054","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:31051":{"id":"2:13840:31051","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13452:9259","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::match_indices":"2:13838:31050"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44901:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:2473":{"id":"0:63-25:9:2473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:2473","glob":false}}},"2:13879:31063":{"id":"2:13879:31063","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5068:31063"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45032:8910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31778":{"id":"5:5717:31778","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:587:2466":{"id":"0:8-21:587:2466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:2466","glob":false}}},"0:82-21:6182:2482":{"id":"0:82-21:6182:2482","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:2482","glob":false}}},"2:13804:21817":{"id":"2:13804:21817","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42735:203","prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13815:23108":{"id":"2:13815:23108","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13452:9259","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::split":"2:13811:3071"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44751:9249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2044":{"id":"0:46:2044","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2526","`LocalPool`":"31:120:2532"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2526","0:49-31:68:2527","0:50-31:109:2528","0:51-31:141:2529","0:52-31:100:2530","0:53-31:102:2531","0:54-31:120:2532","0:55-31:125:2533"],"is_stripped":false}}},"2:13843:31052":{"id":"2:13843:31052","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761":{"id":"2:13761","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13762:1027","2:13763:22645","2:13764:31040","2:13765:31041","2:13767:31042","2:13770:23011","2:13771:31043","2:13772:352","2:13773:23075","2:13774:23071","2:13776:23072","2:13778:23073","2:13780:23074","2:13782:31044","2:13783:31045","2:13784:23099","2:13785:23100","2:13786:23103","2:13787:23104","2:13789:28783","2:13790:28792","2:13791:22411","2:13792:28781","2:13793:28782","2:13794:3062","2:13795:31046","2:13796:28784","2:13797:23116","2:13799:23117","2:13801:23118","2:13804:21817","2:13807:21818","2:13811:3071","2:13813:23106","2:13815:23108","2:13818:31047","2:13820:31048","2:13823:23110","2:13825:23112","2:13828:23114","2:13830:23115","2:13833:2796","2:13835:31049","2:13838:31050","2:13840:31051","2:13843:31052","2:13845:31053","2:13847:31054","2:13849:31055","2:13850:31056","2:13851:31057","2:13854:31058","2:13856:22318","2:13858:23119","2:13861:31059","2:13864:31060","2:13866:31061","2:13869:31062","2:13871:22713","2:13872:23015","2:13873:22714","2:13874:22710","2:13875:22709","2:13876:23018","2:13877:23019","2:13878:23020","2:13879:31063","2:13881:3210","2:13882:31064","2:13883:24323"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13872:23015":{"id":"2:13872:23015","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40629:8943","Self::is_ascii":"2:13871:22713"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40629:8943","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5264:1208":{"id":"0:38-21:5264:1208","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1208","glob":false}}},"0:14-21:3786:2471":{"id":"0:14-21:3786:2471","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:2471","glob":false}}},"2:13770:23011":{"id":"2:13770:23011","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12975:9267"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-29:17:2478":{"id":"0:19-29:17:2478","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:2478","glob":false}}},"2:13771:31043":{"id":"2:13771:31043","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:2487":{"id":"0:29-21:6770:2487","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:2487","glob":false}}},"0:59-2:45681:163":{"id":"0:59-2:45681:163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:45681:163","glob":false}}},"2:13851:31057":{"id":"2:13851:31057","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13481:9260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:23071":{"id":"2:13774:23071","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:2496":{"id":"0:44-21:6240:2496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:2496","glob":false}}},"0:18-29:27:2477":{"id":"0:18-29:27:2477","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2477","glob":false}}},"0:13-21:2766:2470":{"id":"0:13-21:2766:2470","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:2470","glob":false}}},"0:73-21:2766:2470":{"id":"0:73-21:2766:2470","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:2470","glob":false}}},"2:13796:28784":{"id":"2:13796:28784","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45025:9264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13799:23117":{"id":"2:13799:23117","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:2463":{"id":"0:60-20:32:2463","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:2463","glob":false}}},"0:81-21:6217:2481":{"id":"0:81-21:6217:2481","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:2481","glob":false}}},"0:26-21:6199:2484":{"id":"0:26-21:6199:2484","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:2484","glob":false}}},"0:0:2557":{"id":"0:0:2557","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:2497","crate::executor":"0:46:2044","crate::stream":"21:1291:2467","crate::channel":"27:0:2494","crate::future":"21:104:876","crate::sink":"21:4707:2474"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:2044","0:56:1377","0:4-2:45681:163","0:5-20:32:2463","0:7-21:422:2465","0:8-21:587:2466","0:10-20:68:2468","0:11-20:97:2469","0:13-21:2766:2470","0:14-21:3786:2471","0:15-25:9:2473","0:16-21:5171:2475","0:18-29:27:2477","0:19-29:17:2478","0:20-29:25:2479","0:21-29:20:2480","0:23-21:6217:2481","0:24-21:6182:2482","0:25-21:6212:2483","0:26-21:6199:2484","0:27-20:131:2485","0:28-22:7:2486","0:29-21:6770:2487","0:31-21:6767:2488","0:32-21:37:2489","0:33-21:20:1354","0:34-21:6769:2490","0:35-21:6768:2491","0:37-21:104:876","0:38-21:5264:1208","0:39-21:4707:2474","0:40-21:1291:2467","0:41-21:5212:2492","0:42-21:57:2493","0:43-27:0:2494","0:44-21:6240:2496","0:45-21:5266:2497"],"is_stripped":false}}},"2:13833:2796":{"id":"2:13833:2796","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13452:9259","`DoubleEndedIterator`":"2:8393:134","prim@char":"1:12642:492","str::rmatches":"2:13835:31049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44937:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:31779":{"id":"5:5725:31779","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13861:31059":{"id":"2:13861:31059","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:31040":{"id":"2:13764:31040","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:2473":{"id":"0:15-25:9:2473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:2473","glob":false}}},"2:13776:23072":{"id":"2:13776:23072","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13790:28792":{"id":"2:13790:28792","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44709:9269","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:2469":{"id":"0:67-20:97:2469","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:2469","glob":false}}},"0:40-21:1291:2467":{"id":"0:40-21:1291:2467","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:2467","glob":false}}},"0:49-31:68:2527":{"id":"0:49-31:68:2527","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2527","glob":false}}},"0:20-29:25:2479":{"id":"0:20-29:25:2479","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:2479","glob":false}}},"2:13778:23073":{"id":"2:13778:23073","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:31053":{"id":"2:13845:31053","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13877:23019":{"id":"2:13877:23019","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1148:39281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:23114":{"id":"2:13828:23114","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:23106":{"id":"2:13813:23106","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13239:9255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:31780":{"id":"5:5726:31780","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:3043","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:3043","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:2528":{"id":"0:50-31:109:2528","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2528","glob":false}}},"0:83-21:6212:2483":{"id":"0:83-21:6212:2483","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:2483","glob":false}}},"0:21-29:20:2480":{"id":"0:21-29:20:2480","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:2480","glob":false}}},"0:31-21:6767:2488":{"id":"0:31-21:6767:2488","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:2488","glob":false}}},"2:13830:23115":{"id":"2:13830:23115","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13882:31064":{"id":"2:13882:31064","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5066:31064"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45050:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:23104":{"id":"2:13787:23104","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13786:23103"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:31042":{"id":"2:13767:31042","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13765:31041"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13874:22710":{"id":"2:13874:22710","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13883:24323":{"id":"2:13883:24323","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13811:3071","`str::find`":"2:13804:21817"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13762:1027":{"id":"2:13762:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:22713":{"id":"2:13871:22713","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:22711":{"id":"5:5729:22711","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13875:22709"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:23103":{"id":"2:13786:23103","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13787:23104"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13820:31048":{"id":"2:13820:31048","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13452:9259","str::split":"2:13811:3071","prim@char":"1:12642:492","str::split_terminator":"2:13818:31047"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44801:9280","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:31058":{"id":"2:13854:31058","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:45681:163":{"id":"0:4-2:45681:163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:45681:163","glob":false}}},"2:13858:23119":{"id":"2:13858:23119","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12642:492","self::pattern":"2:13452:9259"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13476:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:23075":{"id":"2:13773:23075","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:22714":{"id":"2:13873:22714","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:9131":{"id":"5:5713:9131","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13459:9261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:8176:17182":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:750:3241":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15919:21586":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"27:181:21903":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"17:16573:21780":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6623:33424":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"9:226:3562":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:42860:2827":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:41274:3342":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:296:36207":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"11:808:3244":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:13452:9259":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:8284:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:14388:3802":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:3965:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:14974:34709":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:2780:34650":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"16:2818:16181":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11269:17332":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:44642:9248":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10662:9206":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:8007:15712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15062:20836":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"21:14757:2941":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"16:2858:16183":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10176:17268":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:15214:3096":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"17:15785:21574":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:6030:3023":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3874:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"21:15040:33239":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"30:1201:21931":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"16:6841:17128":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:4513:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2465:16165":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:3925:3243":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5604:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6617:14905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1632:11068":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:45007:9266":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:10883:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:6503:22359":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:1944:3307":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"21:10324:2867":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"16:8025:17174":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:680:17264":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8336:3237":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:1569:11063":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14746:20816":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14454:20798":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3327:3196":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:1871:3243":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:423:33273":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:9552:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"21:11323:2968":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:23661:28464":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:11576:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10333:17273":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:485:10155":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:16766:21790":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14384:17502":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11395:17324":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:4954:16746":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2568:2497":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:1123:3254":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:4565:30605":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:11563:3374":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:8393:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"30:1572:21826":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"30:892:21933":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"17:15963:21590":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"21:14016:3239":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"1:12661:1902":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:7580:15341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:10234:34709":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:23547:3374":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:6737:14919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:42473:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"8:0:2678":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:8436:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:5288:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:940:3242":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:45016:9265":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:3423:9148":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"21:15096:3088":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"5:7627:3240":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3596:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6631:14906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5755:33344":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6571:17114":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12373:17497":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:8260:14373":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5488:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1589:11065":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12022:17432":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:6939:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:10132:17266":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:10880:17289":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:3439:16196":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15713:21568":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:44955:9279":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:7284:10205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:14721:3082":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:12214:17440":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42639:28577":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:4157:30587":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:44127:28767":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:47322:3708":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43899:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"20:82:2820":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"17:12103:17431":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:5740:17091":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7539:33541":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5564:2905":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41425:9101":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9220:3584":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:5230:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6899:3611":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:6583:34596":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"11:1862:3240":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:7330:2872":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"11:427:33274":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2877:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:5256:21857":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:14373:17501":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:3985:16201":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:4838:3469":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"21:13541:2979":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"21:13121:2990":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"6:5623:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:45781:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:10484:34709":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"1:702:3215":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48248:8843":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22685:30304":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"21:15334:2925":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:8714:3440":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:13602:2980":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"21:7467:2877":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"6:5482:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5083:16806":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:8206:17183":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6747:17122":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:9651:146":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"17:13730:17599":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:45681:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11901:17381":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1132:3255":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:14868:3083":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"27:368:232":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"6:5007:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2770:16179":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:7591:34601":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"16:6203:17103":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:9271:3000":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:23136:3789":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:8175:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:4071:3023":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:6954:3613":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:7098:9326":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:11955:9249":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40308:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3426:9149":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"18:507:2969":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3358:3259":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:33003:9123":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:11371:2957":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:47077:3719":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12173:17438":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:6669:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:10879:3422":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:6296:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:5139:3526":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"21:11088:2963":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:12959:9407":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:7251:3656":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:16538:21779":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:2521:3365":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8643:3440":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8624:3402":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11977:3589":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41516:2870":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4829:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:41322:3340":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:8299:3369":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"30:1483:36262":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"21:9406:34709":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"17:13093:17350":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"21:7105:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:6026:17092":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:15229:3098":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"16:2964:16188":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15324:21551":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5647:17071":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:13913:3007":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"27:72:21914":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:23108:3788":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5630:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:16211:21608":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:23409:28706":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:927:3241":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1612:3246":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:2167:3274":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:485:17262":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1551:3240":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:7460:2878":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"31:68:2527":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"17:15861:21580":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:6199:2484":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:13014:17551":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:1114:3253":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:5130:3525":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:5111:16811":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3371:3420":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:5107:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5265:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5512:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:1667:11071":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:155:16139":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:16013:21596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:42511:3433":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12666:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:15528:34609":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"21:14088:3023":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"21:9513:34709":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:45698:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"27:441:3622":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"21:15182:3093":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:12654:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14039:20295":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:23:2839":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:45138:9293":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:45492:9441":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:3046:16191":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2948:16187":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6695:14914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"21:12388:2889":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"17:16269:21613":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"14:164:16089":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:635:21947":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:1366:3252":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8960:3000":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:8549:2895":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:41746:2966":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:3934:3442":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:10670:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"25:9:2473":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"17:16301:21615":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6911:17134":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:5136:8902":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:13696:3004":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:6747:34594":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"16:3585:16197":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:5477:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:47417:3726":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:23012:30528":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"27:487:21915":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:2787:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6543:14900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:44541:9240":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5550:14197":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:14557:34709":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"21:5171:2475":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:1005:3250":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:707:3216":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3797:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:335:34791":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"17:12761:17515":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:6987:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14352:3030":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"30:1032:21946":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"17:11842:17384":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45739:3803":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:22175:30299":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15771:21573":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2820:8925":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"21:9611:2945":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:15844:21579":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5088:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:12618:9189":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"21:14579:3078":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:7635:9098":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3832:16199":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:11149:2873":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"6:5271:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"30:879:21932":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"6:6727:14918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:22203:3374":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:12034:9253":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7916:17165":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5058:16804":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:41236:8913":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:491:10156":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:12:21843":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:7378:2874":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"2:44679:9274":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2784:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13207:17592":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:1514:11057":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12575:17457":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13052:17568":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"21:8783:34709":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:12313:2885":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:12022:22499":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14545:20802":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:42960:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:44088:28763":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"21:13405:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"1:8798:3543":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:586:10168":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"21:15326:34703":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:909:3445":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:3699:3000":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12011:22419":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:11358:29501":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"11:676:3240":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14069:20297":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:7666:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:22205:3665":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:48081:8834":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:12970:2997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"21:9912:34709":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:3061:22260":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6186:17102":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8188:3310":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1563:11062":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:10936:34709":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"1:8895:3563":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5165:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:481:21830":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22880:3792":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:45504:9435":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:22264:3664":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"9:490:15957":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:4701:3193":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11540:17333":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"2:7806:29666":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8102:3189":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:43206:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"21:11548:34623":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:22787:3374":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9287:3240":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"21:10827:34709":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:10601:17281":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:1690:11074":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4890:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:8562:17193":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"21:14025:21847":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:10479:17278":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:8525:17191":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15144:20842":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"21:10513:2948":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:13120:17295":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:8277:3371":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"21:7544:2890":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"5:2364:30704":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4816:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6710:14916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"20:97:2469":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"16:8480:17189":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4881:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"30:1552:21824":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42851:9387":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8910:3564":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:14435:3031":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"21:9574:2944":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"21:9237:34709":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"16:6157:17100":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:23595:28458":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"28:208:3254":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"1:4171:3466":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:7702:34601":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:13219:17561":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:765:21821":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:23705:28468":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:4928:3195":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:8249:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3373:3421":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:8325:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12072:16072":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13436:17307":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"14:7:16088":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3431:9150":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:31704:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:45530:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:10875:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:595:3183":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:3411:9143":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"21:6377:21863":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"5:7738:3343":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6416:14890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9322:3623":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:7562:15340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3560:3001":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:12076:9252":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4967:3484":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7946:17167":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10898:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:5127:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:2722:16177":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"28:30:21919":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"21:14036:3000":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:42495:3432":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:37:2489":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:1996:3320":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:44987:3088":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45554:3651":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44703:9270":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:16631:20283":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:6610:14904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6237:17104":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:9835:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:10369:17274":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:11300:34709":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"16:6419:17111":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"27:154:3623":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:3396:3652":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:4906:8889":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:321:33447":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1727:11077":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:16241:21611":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15928:21587":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:4519:3387":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3322:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5568:14199":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40438:9166":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13795:20280":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12787:17513":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:16684:21784":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:1247:32235":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:8063:17176":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7468:17158":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:32910:22566":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2687:9179":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:5575:14200":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13183:17557":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12669:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:7273:30664":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:5289:3601":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"30:1193:21824":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"2:23672:28465":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"27:127:21899":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"16:5707:17089":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:8743:3533":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:22962:3794":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:44692:9273":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"20:131:2485":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"1:4255:3474":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:41504:9106":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:832:3249":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4517:3503":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:974:3245":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:4239:16261":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9215:3573":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:11196:3586":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:41573:2959":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:10202:17269":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:7668:3229":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7398:33521":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:3069:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45389:9283":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:1684:11073":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:47056:3713":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:44490:28878":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2618:16172":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8807:3542":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:1919:9051":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"30:1104:3000":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"1:5749:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:143:21842":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"5:1211:32234":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:41970:9113":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"21:10666:2954":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"16:8500:17190":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12864:17509":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:40456:8867":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2671:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:12609:25098":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13630:17247":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"30:986:21824":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:15534:21559":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"21:10967:2962":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"16:7835:17162":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:15279:3099":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"18:608:21945":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:8230:17185":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"30:1180:21936":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"30:971:165":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"16:7786:33588":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7890:22538":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:12668:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:10350:34709":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:11135:22513":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"3:1785:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11660:3348":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:6719:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:16650:21781":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:859:3251":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47546:3741":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:80:21806":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:12338:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:14006:21846":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:47993:3693":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:12062:9254":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:327:2879":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"1:8950:3565":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:16005:21595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:47269:28622":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"21:14094:3024":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"21:15192:3094":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"1:2750:9421":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:894:33445":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14637:20809":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6687:14913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:6852:14951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:15032:3026":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"16:7728:3545":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:47159:3685":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:12987:2998":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"11:763:3242":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4929:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:41285:9371":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13021:17552":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12028:22500":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6300:17106":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"21:57:2493":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"14:219:16098":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:11057:34709":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:4540:22665":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"21:15561:34708":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"16:6873:17131":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14322:20791":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"21:6566:34716":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"14:186:16096":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3063:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:15088:20838":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:9226:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"21:12878:2982":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:331:3182":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:45688:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:787:3243":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:15295:3101":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"1:9432:22354":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:906:33447":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:23276:28425":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5325:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10860:17288":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:47027:3659":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"31:120:2532":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"30:1516:21831":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"17:519:16136":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2658:16174":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:6919:2866":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:683:3212":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:16672:21783":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:6547:3799":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:12428:22667":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:33002:3037":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6040:17093":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:32868:3587":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11437:22483":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:32914:17199":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"21:10797:2953":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"5:3712:3239":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:15763:21572":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14137:20302":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:34323:9146":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:563:21835":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2099:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5539:14196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7492:33534":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:41939:9110":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:48052:8831":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"21:9699:2946":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"21:14332:34709":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"6:6472:14854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"21:9423:2942":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"30:0:2687":{"crate_id":30,"path":["memchr"],"kind":"module"},"11:1083:16077":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2511:3360":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:22276:3661":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"30:1465:21828":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"17:15569:21560":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11155:3575":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:5117:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:15286:3100":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:10707:2955":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"16:2588:16171":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:10381:2868":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:45496:9439":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"0:46:2044":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"21:14045:3240":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:8311:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:96:21807":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:14070:3240":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:12140:3441":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7518:33539":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:1535:3239":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:6169:9753":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:7308:10035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10815:17286":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"21:8100:2888":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"21:8344:2885":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"21:7641:2890":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:23000:3797":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5357:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:982:3247":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:31346:9188":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:11185:34709":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"21:925:2909":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"6:5664:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:7539:15338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:1063:33282":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:45684:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6779:17123":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:14710:20814":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:9892:2866":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"6:4921:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:8295:17187":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:46817:3711":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:15951:21589":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"29:20:2480":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"5:7679:3230":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:13481:9260":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:13840:3006":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:953:3023":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:102:33258":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14008:20293":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:8334:3042":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46770:3705":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:12461:2986":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:14261:34709":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"21:7398:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:1408:21806":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"5:1411:3255":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:10618:2956":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:11512:17332":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:45050:8909":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6967:17137":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6121:17098":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:596:17263":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:12975:9267":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7804:33596":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"27:0:2494":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:4384:3501":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:12546:9238":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"21:7227:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13777:2910":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:45337:9300":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:12947:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"1:4963:3480":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12243:16121":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:16802:21793":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:10283:17271":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11318:17296":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5249:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:6781:2866":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:15459:34595":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:8688:3435":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14611:20807":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:13013:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"17:13195:17556":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:12100:3442":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7935:17166":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:15353:21552":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:8162:17181":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:48156:8839":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5349:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:8173:3309":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13971:20290":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6438:17112":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13066:17559":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:11575:22492":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:8578:3034":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:16058:21601":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"21:8857:2907":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:45371:9282":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2914:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5222:3538":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:23468:28451":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:13125:9446":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:1087:2919":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:16613:20282":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"21:7085:2869":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:44333:28771":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"20:0:2462":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:9864:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:11064:22479":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"11:1898:3259":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:40276:3285":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:15474:34605":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:12621:17455":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7367:11198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:9351:2921":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:9953:2949":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:11438:17326":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:23331:28427":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7334:17151":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2736:3081":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:13732:217":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"16:8595:17195":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:34390:9145":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:40408:3236":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11743:17368":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:47529:3692":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"21:12518:2983":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"2:45488:9437":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:7973:17264":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12800:17512":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:45272:9298":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:8836:34709":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:6394:21862":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"16:8011:17173":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:7922:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:23584:28457":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"11:2297:3253":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"30:1054:21947":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"16:5253:16838":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:11768:2974":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"21:10083:2940":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"2:41116:8916":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13892:20285":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:8266:14374":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2344:3063":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11576:17350":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:1866:3023":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1494:11054":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2495:3355":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:13185:9444":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11127:22510":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6513:14898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:3334:27258":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46832:3671":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"30:949:21940":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"1:6775:3004":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9397:3182":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:7762:2891":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"21:39:2841":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:11485:17329":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"21:15079:34709":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"4:0:2677":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:47641:28643":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:10800:22651":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"15:0:2684":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:2243:17386":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:43354:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11455:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:13133:17564":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:0:2687":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:7515:15336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11667:17348":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:45820:28824":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11102:17292":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3097:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:10622:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2988:16189":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:5414:9226":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:45348:9301":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7713:33587":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:3199:3324":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"27:149:21902":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:11770:17370":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"21:8755:2905":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"1:12667:1966":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11370:3530":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:4897:8888":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:15624:21564":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7027:17141":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:10876:3420":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:12045:17433":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2772:3406":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42981:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:13423:17306":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13529:17311":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:32921:28850":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:7421:17156":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10965:17290":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41597:9104":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12643:17294":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:13239:9255":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"30:1501:36265":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"17:10455:17277":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12344:17496":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"30:1472:21821":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"6:7962:10112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:4653:3194":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:23141:3787":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4914:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10571:17090":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:13201:9445":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:12649:1861":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:2344:30703":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:321:33263":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:5328:17569":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:11099:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:43430:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:473:10153":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:10022:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:23502:3449":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13959:20289":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11394:22516":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43243:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4900:16738":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:41251:8908":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10647:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"21:6768:2491":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"1:8125:3188":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:41486:2867":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:299:3043":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:2394:17420":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:10872:34709":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:3571:2826":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"30:1523:21822":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:10655:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8872:3562":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22151:30293":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:7710:3345":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:4621:8893":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"21:14744:34709":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:2228:9193":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"16:7762:17161":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:1291:2467":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"1:4925:3506":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:123:33259":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:10778:34709":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"3:2062:9580":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"21:10732:34709":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:1919:3300":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:9015:2911":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"6:6744:14920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:43920:9204":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:11349:34709":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:12254:17443":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:3837:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12652:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"21:14788:34709":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"21:14930:3084":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"5:888:2955":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:9373:3604":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:7694:3346":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12272:17492":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:7041:17142":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:4353:34789":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:4039:3443":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:4871:16732":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:7519:3240":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:41980:3002":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:11122:34709":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"30:1074:21933":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"2:41077:8915":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:8575:2897":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"21:8926:2908":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"14:31:16088":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:16288:21614":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:16848:20292":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:46902:3718":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:4362:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:33032:9053":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:5725:17090":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:8264:17186":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1521:11058":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:6578:14901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15817:21578":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"21:13681:3002":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:14307:20790":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:13580:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"6:5503:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:3719:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:14814:121":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"17:16403:21623":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13648:17315":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:48107:8836":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"30:1580:36266":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"1:7983:22426":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4764:16694":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:8537:2894":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:4937:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:9833:2866":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:11889:2881":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"16:6729:17121":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10668:9214":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8700:3505":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:214:9201":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:4292:3387":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:9446:9379":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:6792:14923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5803:3580":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46849:3677":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:46931:3672":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:9374:2941":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"1:9534:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:8186:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4792:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:13663:3000":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"1:5697:3577":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6792:17124":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:13108:17294":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:8153:3218":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12653:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5387:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:11751:3000":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14776:20817":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:11957:2882":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"16:5377:16870":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"21:9262:2918":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"1:9237:3530":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:40196:8871":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:284:30587":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:10840:3402":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3467:3418":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:45706:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:4501:28856":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:6828:2867":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"17:13947:20288":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8720:3497":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:6398:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12447:17500":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:42769:3239":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"21:15171:3092":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:45238:9297":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"21:9997:34709":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:7135:2871":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"18:613:21946":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:3079:9196":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1643:3243":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4970:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:15198:20845":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:538:10161":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:0:2558":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:45508:9443":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5224:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46785:3670":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:13966:34631":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:16777:21791":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:14834:20820":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:15174:17313":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14178:20305":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:2810:30672":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:8479:2892":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:15504:34603":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"30:1062:21931":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"6:517:10158":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:12656:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"21:10372:2961":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:43049:3239":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4964:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14558:20803":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8708:17200":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:6558:3617":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5142:16819":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:7502:22659":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:11470:34709":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:40629:8943":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:9570:3377":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:699:3214":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6638:14907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6749:14921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:4692:16645":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3072:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:11800:3403":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7902:22539":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"18:573:2969":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"27:146:232":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:3593:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"30:1243:21935":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"2:43860:28761":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"20:27:3374":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:14971:20830":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:15387:34705":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:4193:3468":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:436:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:7570:26544":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:8030:3003":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15733:21570":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:41088:28559":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:5316:16855":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:589:21943":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:14845:20821":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:44579:9242":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:2540:3229":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6505:14897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:45512:9459":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:169:2863":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"21:8800:2906":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"21:13324:2992":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:8107:3190":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:47396:3720":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3481:9154":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"28:60:3023":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:47109:3673":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:23683:28466":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"15:327:16117":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:14093:20299":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14624:20808":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1500:11055":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43844:28759":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6939:17135":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"27:481:3562":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:12588:17458":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"21:9560:34709":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:16380:21621":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:1042:16076":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1584:11064":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:3858:3273":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:9596:9261":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7820:25097":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:41264:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15746:21571":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"30:1429:21808":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"2:43874:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"21:338:2880":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"2:13459:9261":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8695:3504":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:39038:9160":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"11:2126:3254":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:23014:9178":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:23617:28460":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"21:13806:34709":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"21:7350:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:3448:3243":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:6054:3602":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4981:16750":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12008:17378":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2258:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"26:53:36210":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:14910:20826":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"14:0:2683":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:6452:3605":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:9637:34709":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"21:12829:2981":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"16:4927:16742":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"26:43:36209":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:48072:8833":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:928:3260":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7209:16106":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6142:17099":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:1636:3240":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:7317:15327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:16250:21612":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2838:16182":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:4848:22462":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:15792:21575":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:9529:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:8280:9117":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:7750:3344":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:13946:34709":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"5:6826:3240":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:5940:3617":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6460:17113":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:5045:3479":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:3887:16200":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:40293:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:41148:3211":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6500:16133":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8289:3372":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12969:17313":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:13467:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"17:14883:20824":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:820:3248":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:15313:21860":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"18:659:21822":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3324:3258":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7279:17149":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:6810:9107":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:3877:17479":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1675:11072":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11200:17294":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10255:17270":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5640:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:42868:9389":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"17:12229:17441":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:44135:28768":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:1660:3258":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12298:17494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:465:10152":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:776:3023":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"21:12918:2996":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"17:11995:17379":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6390:14888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:22652:3667":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:4127:3023":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41126:8917":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5301:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:41202:8912":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10062:17265":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11089:3372":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:38928:9158":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:1883:3291":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:6659:14910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:5733:3579":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:47094:3725":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:2769:1085":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"17:12889:17545":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:23346:28701":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"30:1130:21931":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"2:23628:28461":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:7023:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:5560:2943":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:14225:3028":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:16177:21605":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:16512:20279":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:34948:9153":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:13672:3001":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"2:40232:9163":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:1397:3253":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:41140:8909":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6254:33363":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12035:17399":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14165:20304":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:559:10164":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12725:17540":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:39617:9161":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:8978:34709":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:2453:17405":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:32944:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:8231:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2878:16184":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7904:17164":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5395:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:47307:28624":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:11871:34709":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:8637:3088":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:400:22647":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:43095:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"14:213:16097":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"25:0:2472":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:6284:2975":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"16:3012:16190":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:12642:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:42761:3000":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44105:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:10672:9211":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:14609:3079":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"17:11151:17293":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:41394:3283":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3697:3096":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:4503:3009":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"1:5717:3578":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:104:876":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"17:15186:20844":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:706:9263":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:4439:21848":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:34602:9151":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"21:0:2464":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:44801:9280":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5611:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:15995:21594":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"21:8064:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"18:515:21832":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:357:33269":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:5134:3387":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43132:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"30:1027:21945":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"17:14924:20827":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40280:9164":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13231:17560":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14598:20806":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:8504:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6864:17130":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43041:3000":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14859:20822":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:5356:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:23417:28436":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:8803:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:9210:3572":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"17:16230:21610":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:3792:30587":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:43393:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:9768:2947":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:43572:9206":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1382:3254":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8092:3206":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:48014:3727":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:41416:9100":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14870:20823":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:8582:17194":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:135:2864":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:46984:3690":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10431:17276":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46800:3706":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:13764:34709":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"11:1652:33279":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:44320:28769":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"6:1711:11076":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:10691:34709":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"20:92:3374":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"6:5295:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:9091:2915":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11983:22415":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7553:15339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:47013:3745":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"30:1251:21936":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"30:1172:21935":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"2:45500:9440":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:8237:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5652:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12160:17408":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:7494:15335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:6767:2488":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"5:6700:3023":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:10644:34709":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:44719:3402":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1597:11066":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:14996:3085":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"6:4984:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:9263:3586":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:45167:9295":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11383:3585":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5494:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:7248:30660":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12664:1896":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"9:470:15953":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"30:1538:21823":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:22986:3374":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:1885:3257":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12055:17434":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:12557:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:15:2799":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:41403:2941":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"9:0:2679":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"30:1493:21829":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"17:11868:17350":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6452:14894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"31:141:2529":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"21:11581:34661":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"1:8607:2941":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:6486:14855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:8272:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3080:30830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:23526:3444":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10664:25023":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"21:11925:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:12593:22428":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8587:3036":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3792:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:47290:28623":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44783:9281":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:43832:2944":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:41587:2960":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15908:21585":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:22647:3374":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:8560:3003":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6096:17096":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7347:33517":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:3576:8892":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"21:14662:3080":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:16029:21598":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4591:3495":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:44080:3380":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11014:33852":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"30:871:21931":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"6:6858:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2504:16167":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13489:17309":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10821:33838":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:3937:3441":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:13162:9447":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:10882:3418":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:7857:9108":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"21:5875:3387":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"21:6769:2490":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:16417:21624":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:48092:8835":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1885:3292":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:531:21833":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"30:1042:21942":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"1:919:3240":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:4607:2911":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"16:6171:17101":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5450:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4247:3472":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4842:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:11493:2971":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"16:2413:16134":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:12623:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"5:7074:9325":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11855:17383":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:7472:22657":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:14061:3239":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:45565:9460":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5428:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:4363:3499":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:41463:2947":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:14122:20301":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:12722:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"6:8304:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"21:9804:34709":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"2:4776:8879":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7559:3275":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"28:42:3240":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"16:6335:17107":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:14337:20792":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:38873:9157":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14690:20813":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43565:9205":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42777:3240":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:8055:17175":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3139:16194":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4199:3469":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7156:17145":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:1892:3258":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:3693:16198":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:7390:11183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5319:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:41988:9115":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12711:17528":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:12424:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"21:15377:2924":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"1:8087:3374":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:12260:22665":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:14521:20801":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5170:16824":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4150:16218":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:4552:3387":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:13157:17562":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:16828:21795":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14897:20825":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:3357:9120":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13000:17550":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1781:30587":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15513:21558":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14350:20793":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"21:12453:2987":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"5:7872:9322":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40330:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:4171:3240":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8434:22219":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:16755:21789":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:11151:3310":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"21:7996:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:12236:16121":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:8090:2934":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:15304:3102":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"21:14698:34709":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:16021:21597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15985:21593":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1648:3256":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:16791:21792":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:23453:28449":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:41370:3373":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14396:20794":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:47223:3747":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12201:17439":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8344:22215":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:6998:9103":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:12614:3220":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:14368:3805":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:15469:21556":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"7:31:15926":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11143:3529":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:1639:3023":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:32935:9362":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:16315:21616":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1582:3242":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:40:3287":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6133:3222":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7302:17150":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4957:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"30:1008:21943":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"21:8369:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3707:3397":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:16700:21785":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:10748:2952":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:6602:14903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:7966:2889":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:41932:28740":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"21:779:2898":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"5:3337:30825":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:1558:16080":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:47508:3686":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2908:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"10:36:33250":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4182:16227":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:34256:3655":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4990:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11794:17371":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"21:9472:2965":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:41434:2945":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"30:957:21824":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"24:9:21844":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"1:10507:22389":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"30:144:21939":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"11:2513:30307":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:6379:22638":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1539:11060":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14110:20300":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:14021:20294":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:43815:9188":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:40445:8857":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"21:14909:34709":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"30:964:21825":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"21:7892:2881":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:45771:3801":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:11069:3368":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14730:20815":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3599:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8649:3439":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5441:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:46885:3712":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:4355:3498":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8739:3529":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"21:5212:2492":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"6:5658:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13592:17320":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:6274:3387":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5069:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:999:3249":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:41961:3001":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6756:14922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:47367:3714":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6645:14908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"30:1222:21933":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"5:6148:3601":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11907:3562":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"5:7108:9327":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:984:3261":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:2422:17380":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:7463:15334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12774:17514":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:1506:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:14052:3000":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:10378:25025":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:3075:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:14139:3025":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"21:4275:3008":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"5:5515:30587":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9847:22646":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:12263:17444":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:41557:2957":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13247:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4896:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44751:9249":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:33705:9141":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:2440:3243":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:10756:3584":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3822:29738":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:8039:2882":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:11053:17291":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2534:3367":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:12646:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"21:9119:34709":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:12825:17508":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44997:9275":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:7326:15328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13983:20291":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:16051:21600":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:680:21824":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:10144:2969":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:11843:9255":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:41041:3211":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11494:17330":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2:41156:8910":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:8125:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:2448:16164":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:42673:3435":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"28:55:3239":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:22924:3793":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"21:2766:2470":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"6:5057:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5471:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:6061:3603":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:45760:28885":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"21:13489:2991":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"5:2142:3085":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3843:3085":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:45358:9302":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5217:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:34189:3653":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"10:44:16064":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:10311:17272":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:45747:3804":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:13376:2993":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:4850:8887":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:23221:28424":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6887:17132":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:12217:8849":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:1122:30587":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:44662:9247":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:963:3243":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"21:7197:2873":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"21:13738:2899":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"6:5557:14198":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:4767:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"30:1159:21934":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"30:1418:21807":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:10923:3381":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:14487:34709":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:8222:2883":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"24:15:21845":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"30:1000:21825":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"2:41955:9112":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:23639:28462":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:2548:16169":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5151:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14152:20303":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4922:3528":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:10440:9203":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:6670:14911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:16350:21619":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"7:78:15933":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:12625:22507":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5506:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:48209:8842":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6679:14912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"21:4707:2474":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:22372:3374":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:3364:9122":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:969:3244":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:896:3000":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:9314:34709":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:10303:34709":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"6:7337:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6901:17133":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"21:11412:34709":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"1:9391:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:726:21827":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:292:33260":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46998:3739":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:7916:22540":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:5196:16827":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5405:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13608:17248":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"21:6770:2487":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"21:6967:2875":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"5:3298:3257":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"21:15128:34709":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"6:532:10160":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:13822:3005":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"17:14190:20306":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:15937:21588":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:5447:16894":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11423:17325":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:8040:33619":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:9437:22355":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8360:3085":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:10300:28945":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5044:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8824:3561":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6850:17129":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:643:2969":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"21:12861:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"21:12138:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"28:0:2831":{"crate_id":28,"path":["slab"],"kind":"module"},"2:10918:3379":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11106:22387":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"23:0:2829":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:48061:8832":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40368:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46952:3678":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:8247:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:16164:21604":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"21:12652:2890":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:4840:8886":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:22141:30293":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41538:2956":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46969:3684":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15074:20837":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2810:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:813:3247":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12663:17462":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7977:17170":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:412:15956":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15448:21554":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6702:14915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:6366:17108":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:13410:3347":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:44633:9245":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:22164:30298":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"30:1116:21824":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"17:11825:17398":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44855:9251":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:5675:3003":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"17:10524:17279":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:7009:3032":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"21:6182:2482":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:5417:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:13353:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"11:2323:3254":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:8278:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:7741:8922":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"21:14294:3007":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:41352:3326":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:12662:1884":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:978:3246":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"21:6056:2975":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"16:7189:17146":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11210:33856":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:12035:2884":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"21:9193:2917":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"2:3315:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6736:33443":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7165:16107":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"21:9343:2920":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"5:7599:30705":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"29:25:2479":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"17:10553:17280":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"21:12113:2883":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:13529:9286":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:10846:2959":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"28:46:3000":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"2:23094:3374":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:4486:21850":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"18:698:21826":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:9483:3546":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5871:3581":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11971:22412":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:16717:21786":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"21:10610:2958":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"11:2099:3252":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:10993:34709":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"2:31731:8937":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6387:17109":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13465:17308":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:8439:3033":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:6769:33035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42820:3535":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:47240:28621":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3587:3038":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6651:14909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:10209:2969":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"21:13690:3003":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"17:12854:17310":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:15640:21565":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:16838:20290":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:6109:17097":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13575:17313":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11118:3034":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44337:9234":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:23606:28459":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:32928:8887":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"21:15235:2962":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"16:8666:17199":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8765:3482":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"21:587:2466":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"5:4322:3387":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:5222:16830":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:2374:3239":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"31:100:2530":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:8429:22218":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44709:9269":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11063:33853":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10505:22390":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:4536:8875":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:5022:3485":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:47906:3687":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:7539:3023":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:1591:3244":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:0:2685":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:4850:22464":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:11262:22650":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:2507:33251":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:11179:22400":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1654:3257":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:912:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:31331:9073":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2226:9192":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:15153:3090":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"6:5019:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4725:3507":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:13220:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:7160:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:12579:9239":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:43586:9214":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:41312:3402":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"21:13641:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"1:8977:3567":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6638:17116":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"16:7013:17140":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:1352:17355":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:12077:22661":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:8243:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:10664:9205":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:7439:15332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11590:17345":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:10113:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:32945:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:6455:3805":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44733:3403":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:1233:17347":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:12945:9405":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2898:16185":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:1542:16079":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"21:15392:2926":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:42733:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:10666:9213":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12331:17452":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:42926:9390":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:15102:20839":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:2533:33256":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:6817:3608":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14057:20296":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:14077:3022":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:13509:17310":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5186:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:4045:2898":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"17:16525:20280":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:14054:28880":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:14498:20800":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:12188:2869":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:12645:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"21:8614:2899":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:43169:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"21:6240:2496":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"30:940:21824":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"14:201:9303":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6586:17115":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"21:12060:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:14849:34709":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:4333:26543":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:12260:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"18:113:21808":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:9597:34709":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:8966:3566":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:23395:28435":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7055:17143":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"21:11214:2966":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"17:14940:20828":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"15:306:16113":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4489:28854":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44096:3382":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11690:17346":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12065:17435":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5282:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:6513:9761":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"21:12904:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"21:13529:34688":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"17:11654:17295":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:45797:8855":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:8806:3268":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:4488:30605":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:1579:16081":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9352:3624":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10733:17284":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:564:10165":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"30:1441:9263":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"21:14638:34709":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:47567:28641":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:4265:16264":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5196:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:11993:9250":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:718:21819":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11256:22649":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8617:2962":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:16116:21603":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"21:8601:34709":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"31:109:2528":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"6:1507:11056":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16203:21607":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:15611:21563":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4808:16715":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:31325:8869":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:45484:9438":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8282:3368":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:15477:21557":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:3079:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5025:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:47662:3675":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:2553:34788":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"6:497:10157":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:12663:1890":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5179:3490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:23433:28446":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:14186:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:43317:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:1878:3256":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:9534:2943":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:2129:9083":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12120:17409":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2918:16186":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:14401:34709":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"6:4976:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"22:0:2828":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:3558:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:44883:9276":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22789:3663":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"26:37:36208":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"6:7407:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15896:21584":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:2528:16168":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5341:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"21:15047:3087":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:8640:34709":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"2:31293:3197":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:4954:3029":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"31:102:2531":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"6:523:10159":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:41722:2962":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15677:17349":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3331:27257":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:12648:1771":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:42527:3434":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"29:0:2476":{"crate_id":29,"path":["futures_io"],"kind":"module"},"6:5521:14194":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6779:3606":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:42695:3436":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11402:9459":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:47861:3715":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6360:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:6566:3800":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:10975:33851":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:8326:15910":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:5154:3527":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11728:17340":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:2579:30667":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:9293:3622":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:7004:28737":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"27:371:3617":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"5:2291:30699":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:389:33271":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13387:17304":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"27:136:3617":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"1:12643:1924":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:15578:21561":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15595:21550":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:4842:16726":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:45808:8853":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:8220:17184":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13771:20279":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:851:3250":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15801:21576":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12318:17495":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:4202:3239":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:36997:9156":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2348:3068":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:23361:28428":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:38983:9159":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:3306:16195":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7619:3240":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:8446:3041":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:22133:8937":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"21:5992:2473":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:15456:21555":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:491:34522":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:15144:3089":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"17:15035:20834":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:43579:9213":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3590:3387":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:14431:20796":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3782:9165":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6820:17126":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"11:718:3246":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:562:3207":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"17:14788:20818":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:8812:9116":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:12813:34675":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"1:4185:3467":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3872:3438":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:537:3176":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2303:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"21:10543:34709":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:901:33446":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15389:21553":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:14672:3081":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:44622:9232":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11346:17297":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:22177:30301":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12657:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:5344:22316":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:32:2463":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:11882:9244":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:41454:2946":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:479:10154":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:3090:30829":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:34457:9147":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12187:17404":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"21:14150:3026":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:11564:17354":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:7990:15711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40348:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:5241:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:9501:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7797:9305":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45041:3211":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:2251:3176":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2682:16175":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"29:27:2477":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:22258:3660":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11458:17327":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11080:22381":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"31:38:36279":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:15443:34608":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"1:3679:3100":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42830:3547":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"9:49:15973":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"30:1457:36260":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"21:5266:2497":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:45032:8910":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:47138:3679":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14081:20298":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:15024:3086":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"27:452:3624":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"2:2834:8926":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"17:12907:17309":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:190:2865":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:8633:17198":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6406:17110":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:570:10166":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"21:10122:34709":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"6:6590:14902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:8609:17196":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:1136:3255":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:7445:15333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"30:1151:21933":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"1:2341:3351":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1885:3243":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44569:9241":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4965:3483":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7551:17159":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7549:3263":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:12640:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:2525:33255":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:7527:3262":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:909:3239":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12647:1737":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:581:8937":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11040:3531":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:41377:9099":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"21:6556:34622":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"2:14426:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1665:3259":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:15223:3097":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:13700:17598":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13344:17302":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:33035:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"5:7723:9371":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:0:2557":{"crate_id":0,"path":["futures"],"kind":"module"},"16:6062:17094":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13304:17300":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:1489:11053":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13079:17558":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:10603:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:3291:3000":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:13293:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"1:9478:22474":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:9458:22358":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:1118:16078":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5313:22316":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22187:30302":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"11:2115:3253":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"13:0:2676":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:16329:21617":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12878:17511":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"13:110:33291":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13836:20282":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12749:17542":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11241:22647":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4371:3500":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:0:2686":{"crate_id":17,"path":["object"],"kind":"module"},"27:11:36216":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"21:6410:21861":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:44590:9233":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3517:3409":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:16744:21788":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:3401:3654":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:4959:8890":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:650:3208":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:16359:21620":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6806:17125":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:43280:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6082:17095":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15884:21583":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:789:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42713:3437":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"21:9136:2916":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"11:2394:3240":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12665:1878":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:11519:34709":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"13:229:33292":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:48186:8841":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14413:20795":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"30:1017:21944":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"17:15587:21562":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7459:17157":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:316:33446":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14365:17503":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:40388:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4233:3470":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:2424:9194":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5205:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10486:3300":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:8134:17179":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:15422:34607":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:4413:3387":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:2663:3079":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45180:9296":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1643:11069":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4703:3506":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44652:9246":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2159:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11997:22417":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:3524:17456":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5381:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"30:142:21938":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"21:15516:34604":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"5:1632:3272":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12659:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"30:1230:21934":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"21:7270:2868":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"11:2340:16082":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13928:20287":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"11:2354:3000":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:2235:9191":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7762:9227":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15876:21582":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9425:22352":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:12658:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:10894:2960":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"21:8161:2884":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:42936:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1:3095:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:10108:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9250:3585":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:33034:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"21:12211:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"12:0:2682":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2493:3354":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:10604:3100":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:14476:20799":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7987:17171":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:9738:34709":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:13687:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47208:3746":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:13887:34709":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:10830:17287":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"5:5821:9325":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"21:8653:231":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:11161:33855":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:8851:30062":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12093:17436":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:4436:3502":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"31:65:2526":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"31:0:2525":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:1632:3000":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:16814:21794":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:545:10162":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:553:10163":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45480:9436":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5311:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44117:3562":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:7984:15710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:1942:3306":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:14955:20829":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:5154:17563":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"21:6217:2481":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"17:3743:17461":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"29:17:2478":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:2685:9178":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:23515:3448":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:16068:21602":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:44937:9278":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:42752:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:14482:3264":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:48035:3748":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44559:9243":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15978:21592":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:9357:2922":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"5:7510:3270":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11112:33854":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1625:11067":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15013:20833":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:3066:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:7531:34709":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"16:2433:16163":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:8093:17177":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:11807:34709":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:31061:3446":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:41332:3339":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"21:6429:199":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"2:44837:9253":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3043:8942":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"26:0:2830":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"16:6995:17139":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:651:2969":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:22256:3374":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6802:14924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13996:20292":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:15659:21549":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5420:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"10:0:2680":{"crate_id":10,"path":["adler"],"kind":"module"},"1:3424:3422":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47434:3674":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:12678:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"5:3082:30670":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12357:17474":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11259:17295":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"27:434:21917":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7997:17172":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:8276:9118":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47964:3742":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5366:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:5874:3583":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:2275:3252":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"21:10406:34709":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:13719:34709":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"2:33917:9144":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12081:17406":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:11836:2976":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"5:2261:30698":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2414:3023":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15971:21591":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:32946:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13044:17553":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:6896:3610":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:7025:2870":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"6:1703:11075":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:42829:3221":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:15203:3095":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"17:12979:17539":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:14094:2867":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:42789:3545":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7256:17148":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:43001:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:48171:8840":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13673:17597":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:0:2681":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:10660:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:22162:30296":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:14806:3022":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:2566:34778":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"1:9404:22351":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14985:20831":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7292:11009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:13251:2989":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:4140:3464":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:8498:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:7493:34709":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"1:12229:22423":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:43071:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:23051:3798":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:47612:28642":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:11221:29500":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:11920:9256":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:14345:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1100:3252":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13819:20281":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11603:17344":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:8623:17197":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6459:14895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11502:17331":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:3042:3374":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4555:8876":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:544:33383":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:6471:22644":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11420:3377":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"21:9172:34709":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:45476:9442":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:3426:3423":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:14571:20804":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13876:20284":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7787:9304":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11888:17382":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:435:15954":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12287:17493":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3086:30828":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"22:7:2486":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"6:1551:11061":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:14122:34709":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"2:45025:9264":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3622:3089":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11749:22653":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:14159:2895":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4805:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47176:3691":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:9455:34709":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"6:5462:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4803:3524":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:578:10167":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11083:29497":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:23694:28467":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:5139:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"30:1562:21825":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:11444:2970":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:11059:22477":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"9:318:16010":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:15115:20840":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13585:17314":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"21:11542:34659":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"16:8317:17188":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:2156:3273":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"21:11015:2964":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:47479:3680":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10674:9212":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7880:17163":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3124:16193":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:23650:28463":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:12944:17538":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6500:14896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5933:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:8308:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:6915:30587":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:14211:2898":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6267:17105":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:12048:9251":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7956:17168":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:6088:3544":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:41444:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:14522:3032":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"18:623:21942":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:7845:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9310:3620":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"21:6338:198":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:13399:17305":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:13035:2999":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"1:2032:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:14665:20811":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"30:1209:21932":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:7508:176":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:9539:3615":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:12958:17548":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:670:21823":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:15128:20841":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8331:3238":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"30:1138:21932":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"16:6694:17119":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6981:17138":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"30:1384:21830":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11643:17294":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:8543:217":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"21:11654:34668":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"2:11775:3239":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41548:9105":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8272:3370":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:1011:3251":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"30:1394:34522":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"17:10586:17091":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:41163:8911":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12397:17499":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"3:2077:9579":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"2:6310:2866":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12133:17407":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5415:16885":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:7050:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:5390:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"11:686:3245":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13757:17600":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10700:17283":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6656:17117":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:15363:34709":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"2:3628:3286":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:13096:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"17:10634:17250":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5255:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"21:2715:2975":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"16:7383:17154":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:48118:8837":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:34775:9152":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"28:217:3252":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"6:6893:14953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:3108:16192":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8569:2473":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2638:16173":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13909:20286":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:8406:2887":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"21:10061:34709":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"1:12161:3443":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:3640:3035":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41525:9102":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"21:11271:2967":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"7:0:1956":{"crate_id":7,"path":["unwind"],"kind":"module"},"9:345:15970":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:2206:16072":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:48133:8838":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:6968:3614":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:5280:16842":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:8102:17178":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6428:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8630:3403":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:3147:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:41103:8923":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1573:3241":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6835:17127":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15159:20843":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15048:20835":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"21:6851:34709":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"1:10925:3188":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"21:7424:2876":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:9588:3650":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:11845:2876":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"30:1508:21833":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"2:41047:8877":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41300:3341":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:12235:2886":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:10295:30063":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:13476:9262":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:41243:8914":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:47816:3681":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5036:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7856:3243":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"27:467:21913":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"21:7820:2893":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"1:508:22609":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:8316:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"21:8562:2896":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"6:5617:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:7220:17147":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"27:187:21904":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"2:3809:8872":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6950:17136":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:12702:2994":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"16:2794:16180":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:7740:8921":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:41732:2964":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:6212:2483":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"17:13243:17298":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:649:3000":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:13515:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"1:12660:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2746:16178":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:12497:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"17:14811:20819":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:7583:3240":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:2096:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:1657:11070":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43057:3240":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:3688:26789":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:988:3248":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"30:927:21936":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"1:9386:22346":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:724:30810":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:11982:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:14678:20812":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12990:17549":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:4118:16209":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7966:17169":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6523:14899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:6197:2948":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:23065:9178":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:0:1763":{"crate_id":1,"path":["std"],"kind":"module"},"1:2811:3082":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:8294:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6878:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:663:3239":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:344:33266":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:5687:17088":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1530:11059":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2122:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44550:2967":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10766:17285":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5346:16862":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:8325:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:22674:3657":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4902:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:5323:29487":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:42555:28750":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"21:422:2465":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:14071:8945":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:24259:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15691:21566":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12409:17453":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:7430:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1227:30827":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7369:17153":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:689:21825":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46917:3724":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:7344:3533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5529:14195":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:8225:14368":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"21:21:1354":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:16730:21787":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42661:3431":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41946:3004":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12898:17546":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12562:17459":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:14585:20805":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"21:7447:34709":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"0:56:1377":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"2:47739:3709":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11963:17385":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:44901:9277":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"27:124:21898":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"16:8543:17192":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8028:22668":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10405:17275":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46864:3707":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:16219:21609":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"30:1088:21935":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"17:11814:17372":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:2484:16166":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2568:16170":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11616:17343":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5375:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:8901:34709":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:7575:17160":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12242:17442":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15699:21567":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11356:33858":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:6864:2870":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"6:4947:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12924:17537":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:10602:2951":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"21:5264:1208":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"16:8148:17180":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:4852:22466":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:15489:34606":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"5:7569:30696":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"21:3786:2471":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"6:4875:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"27:495:21916":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"18:754:21828":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:6606:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12836:17544":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11164:3580":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:6746:30587":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5576:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:12587:2984":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"17:11715:17341":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45676:28801":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"21:13178:2988":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:3317:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43805:28752":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11939:17387":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:3328:27113":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:9544:3616":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:5375:3404":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6711:17120":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"21:12803:33441":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"1:4134:3465":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"15:394:16124":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:4402:16378":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12430:17473":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1867:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12146:17437":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10667:17282":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13553:17312":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:619:3185":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:8283:2886":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"17:13360:17303":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:6280:3617":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:1858:3000":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"21:15319:3182":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"16:7072:17144":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2025:3321":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:11214:29499":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:15001:20832":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9279:3625":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:735:21820":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11328:33857":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6422:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15868:21581":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"21:15162:3091":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:6121:3387":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:12641:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:10150:17267":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12686:17460":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8706:3494":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"21:15381:2923":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"2:41495:2868":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11552:17360":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:4243:3471":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"21:15261:34709":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"15:288:16112":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:16395:21622":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:3332:3256":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3303:30821":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11629:17342":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9506:3605":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:12814:17543":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"30:992:21824":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"21:11709:34709":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:11829:2977":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"6:7524:15337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11989:17392":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7505:33536":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:15809:21577":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"11:2519:33253":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:12655:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"21:14196:34709":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"20:68:2468":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"17:11915:17294":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"30:1264:21824":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"18:538:21834":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"27:140:21900":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"5:1001:3000":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:8314:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12935:17547":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:11594:3349":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:5683:3576":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13260:17299":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:377:3204":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3803:8873":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:9445:17160":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:35121:9155":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1601:3245":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:983:3252":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12385:17498":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5947:3618":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:13052:2985":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"30:1447:21820":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"1:2509:3359":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:14258:20789":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:47935:3721":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"30:915:21935":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"2:22384:3661":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:13428:2995":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"17:16040:21599":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"14:40:20281":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:521:21829":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:7295:34709":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14161:3027":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"21:5950:3001":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:12763:34674":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"21:10456:2870":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"11:1027:3254":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:45323:9299":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5334:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:12737:17541":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"14:159:16088":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6441:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22382:3662":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:47191:3740":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11483:22486":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:16191:21606":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"21:10267:2950":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:20:1354":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:4771:8878":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:3540:9162":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11469:17328":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:26659:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11757:17369":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:43467:3600":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:45117:9292":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"9:380:15955":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:9514:3387":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"28:76:36222":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"17:14650:20810":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:309:21856":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"21:5251:21858":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:2872:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:16341:21618":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:2229:3354":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:2702:16176":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:11252:34709":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"9:168:16059":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:16658:21782":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:1001:3253":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12608:17454":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"31:125:2533":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"17:14443:20797":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:7355:17152":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8167:3219":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4997:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13856:20283":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:1696:3491":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13030:17516":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7409:22535":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"21:13157:34709":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"16:7413:17155":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:14284:249":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"30:902:21934":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"2:41472:28733":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23384:3447":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8654:3430":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8352:3414":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:7782:34709":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13328:17301":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:23495:28707":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42908:9391":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:31357:28539":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:383:3205":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7424:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:33493:9142":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:45153:9294":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:43882:9188":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:9677:34709":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"18:598:21944":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3158:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:17:2819":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:3469:3419":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44611:9099":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2339:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:9842:3371":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:15721:21569":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9675:3306":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:13470:9263":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:9007:2910":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"16:6678:17118":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:2043:3387":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:9337:3621":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5585:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:11679:2972":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"1:7878:22536":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"5:1520:3000":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}