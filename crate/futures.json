{"root":"0:0:1749","crate_version":"0.3.25","includes_private":false,"index":{"5:5093:3540":{"id":"5:5093:3540","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:1962":{"id":"2:11405:1962","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897","`DoubleEndedIterator`":"2:7070:119","str::matches":"2:11405:1962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50213:6122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6523:1676","glob":false}},"5:5109:2126":{"id":"5:5109:2126","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1666","glob":false}},"0:0:1749":{"id":"0:0:1749","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::future":"21:104:679","crate::stream":"21:1277:1656","crate::channel":"27:0:1683","crate::executor":"0:46:1559","crate::io":"21:5034:1686","crate::sink":"21:4475:1663"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1559","0:56:1030","0:4","0:5","0:7","0:8","0:10","0:11","0:13","0:14","0:15","0:16","0:18","0:19","0:20","0:21","0:23","0:24","0:25","0:26","0:27","0:28","0:29","0:31","0:32","0:33","0:33","0:33","0:33","0:34","0:35","0:37","0:38","0:39","0:40","0:41","0:42","0:43","0:44","0:45"],"is_stripped":false}},"0:56:1030":{"id":"0:56:1030","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58","0:59","0:60","0:62","0:63","0:65","0:66","0:67","0:69","0:70","0:71","0:73","0:74","0:76","0:77","0:78","0:79","0:81","0:82","0:83","0:84"],"is_stripped":false}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6522:1679","glob":false}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1668","glob":false}},"5:5107:61622":{"id":"5:5107:61622","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:679","glob":false}},"2:11449:54732":{"id":"2:11449:54732","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:60981":{"id":"2:11428:60981","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1717","glob":false}},"2:11450:54729":{"id":"2:11450:54729","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:5978:1670","glob":false}},"2:11440:60983":{"id":"2:11440:60983","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:61623":{"id":"5:5108:61623","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6978:218","`Box<str>`":"5:276:2278"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:5551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1652","glob":false}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1719","glob":false}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1722","glob":false}},"2:11396:54941":{"id":"2:11396:54941","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12368:1876","str::splitn":"2:11393:54939","self::pattern":"2:11030:5897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50131:5574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1013","glob":false}},"2:11343:54902":{"id":"2:11343:54902","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48043:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:5960:1673","glob":false}},"2:11334:60963":{"id":"2:11334:60963","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11332:60962"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1657","glob":false}},"2:11425:60980":{"id":"2:11425:60980","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11055:5896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:60986":{"id":"2:11455:60986","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4460:60986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50326:6129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1668","glob":false}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:5973:1672","glob":false}},"2:11353:6147":{"id":"2:11353:6147","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49979:6110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1662","glob":false}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1675","glob":false}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1667","glob":false}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1715","glob":false}},"2:11338:60964":{"id":"2:11338:60964","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11378:2309":{"id":"2:11378:2309","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11030:5897","`DoubleEndedIterator`":"2:7070:119","str::rsplit":"2:11384:54937","prim@char":"1:12368:1876","str::split_whitespace":"2:11356:60146"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50009:3539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1669","glob":false}},"2:11393:54939":{"id":"2:11393:54939","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11030:5897","str::rsplitn":"2:11396:54941","prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50113:5576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:54423":{"id":"2:11367:54423","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1658","glob":false}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4475:1663","glob":false}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1652","glob":false}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:4980:1681","glob":false}},"2:11356:60146":{"id":"2:11356:60146","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11357:60131"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50283:6125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:60131":{"id":"2:11357:60131","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11356:60146"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50292:6126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:582:1655","glob":false}},"2:11399:60970":{"id":"2:11399:60970","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11328":{"id":"2:11328","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10593:1346","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11329:784","2:11330:54726","2:11331:60961","2:11332:60962","2:11334:60963","2:11337:56075","2:11338:60964","2:11339:306","2:11340:54905","2:11341:54901","2:11343:54902","2:11345:54903","2:11347:54904","2:11349:60965","2:11350:60966","2:11351:54926","2:11352:54927","2:11353:6147","2:11354:5928","2:11355:2347","2:11356:60146","2:11357:60131","2:11358:2300","2:11359:60967","2:11360:60204","2:11361:54943","2:11364:54421","2:11367:54423","2:11370:4246","2:11374:7235","2:11378:2309","2:11381:54935","2:11384:54937","2:11387:60968","2:11390:60969","2:11393:54939","2:11396:54941","2:11399:60970","2:11402:60971","2:11405:1962","2:11408:60972","2:11411:60973","2:11414:60974","2:11417:60975","2:11419:60976","2:11421:60977","2:11423:60978","2:11424:60979","2:11425:60980","2:11428:60981","2:11431:54419","2:11434:54944","2:11437:60982","2:11440:60983","2:11443:60984","2:11446:5854","2:11448:6310","2:11449:54732","2:11450:54729","2:11451:54728","2:11452:60985","2:11454:5543","2:11455:60986"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6001:1685","glob":false}},"5:5110:54731":{"id":"5:5110:54731","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11450:54729"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:60974":{"id":"2:11414:60974","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7070:119","self::pattern":"2:11030:5897","str::match_indices":"2:11411:60973","prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50177:6120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6521:1680","glob":false}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1658","glob":false}},"0:8":{"id":"0:8","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:582:1655","glob":false}},"2:11340:54905":{"id":"2:11340:54905","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12385:1890"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:11612:134","glob":false}},"2:11451:54728":{"id":"2:11451:54728","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:54904":{"id":"2:11347:54904","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:5978:1670","glob":false}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:5943:1671","glob":false}},"2:11437:60982":{"id":"2:11437:60982","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1667","glob":false}},"2:11417:60975":{"id":"2:11417:60975","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:2300":{"id":"2:11358:2300","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50263:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3567:1660","glob":false}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2727:1659","glob":false}},"2:11329:784":{"id":"2:11329:784","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12368:1876"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:60967":{"id":"2:11359:60967","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50273:6124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:5973:1672","glob":false}},"2:11387:60968":{"id":"2:11387:60968","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876","`DoubleEndedIterator`":"2:7070:119","str::rsplit_terminator":"2:11390:60969","str::split":"2:11378:2309"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50059:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:54419":{"id":"2:11431:54419","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:61621":{"id":"5:5099:61621","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11448:6310":{"id":"2:11448:6310","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1559":{"id":"0:46:1559","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1715","`LocalPool`":"31:120:1721"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48","0:49","0:50","0:51","0:52","0:53","0:54","0:55"],"is_stripped":false}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1683","glob":false}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5032:907","glob":false}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1716","glob":false}},"2:11350:60966":{"id":"2:11350:60966","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12374:1881","crate::ops::IndexMut":"2:2983:4732","str::slice_unchecked":"2:11349:60965"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11337:56075":{"id":"2:11337:56075","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10598:6268"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:60204":{"id":"2:11360:60204","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50301:6127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:60972":{"id":"2:11408:60972","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11030:5897","`DoubleEndedIterator`":"2:7070:119","prim@char":"1:12368:1876","str::matches":"2:11405:1962"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50231:6123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:4246":{"id":"2:11370:4246","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48043:173","self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:60985":{"id":"2:11452:60985","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4462:60985"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50308:6128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:60961":{"id":"2:11331:60961","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1657","glob":false}},"2:11330:54726":{"id":"2:11330:54726","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11354:5928":{"id":"2:11354:5928","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49985:6111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:11612:134","glob":false}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:5943:1671","glob":false}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1277:1656","glob":false}},"2:11351:54926":{"id":"2:11351:54926","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11352:54927"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1682","glob":false}},"2:11443:60984":{"id":"2:11443:60984","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:4939:1664","glob":false}},"2:11434:54944":{"id":"2:11434:54944","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1277:1656","glob":false}},"2:11454:5543":{"id":"2:11454:5543","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4463:5543"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50317:5544","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1669","glob":false}},"2:11339:306":{"id":"2:11339:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11340:54905","`u8`":"1:12385:1890"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:679","glob":false}},"2:11411:60973":{"id":"2:11411:60973","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11030:5897","`DoubleEndedIterator`":"2:7070:119","prim@char":"1:12368:1876","str::rmatch_indices":"2:11414:60974"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50159:6119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1666","glob":false}},"2:11341:54901":{"id":"2:11341:54901","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48043:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4475:1663","glob":false}},"2:11421:60977":{"id":"2:11421:60977","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:4939:1664","glob":false}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1720","glob":false}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:417:1654","glob":false}},"2:11419:60976":{"id":"2:11419:60976","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:2347":{"id":"2:11355:2347","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49995:3537","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11381:54935":{"id":"2:11381:54935","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10854:5578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6520:1677","glob":false}},"2:11364:54421":{"id":"2:11364:54421","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11423:60978":{"id":"2:11423:60978","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:5854":{"id":"2:11446:5854","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10991:5479","FromStr::Err":"2:10992:125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48185:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10991:5479","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10991:5479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2727:1659","glob":false}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1662","glob":false}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1721","glob":false}},"2:11384:54937":{"id":"2:11384:54937","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12368:1876","str::split":"2:11378:2309","`DoubleEndedIterator`":"2:7070:119","self::pattern":"2:11030:5897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50027:5572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11374:7235":{"id":"2:11374:7235","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11030:5897","`None`":"2:48043:173","prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3567:1660","glob":false}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1678","glob":false}},"2:11345:54903":{"id":"2:11345:54903","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9127:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1674","glob":false}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1346","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:61619","5:5093:3540","5:5096:61620","5:5099:61621","5:5107:61622","5:5108:61623","5:5109:2126","5:5110:54731","5:5111:54730"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5096:61620":{"id":"5:5096:61620","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:60962":{"id":"2:11332:60962","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:417:1654","glob":false}},"5:5092:61619":{"id":"5:5092:61619","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:5551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2278","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:5551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:60979":{"id":"2:11424:60979","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:54730":{"id":"5:5111:54730","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11451:54728"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5034:1686","glob":false}},"2:11402:60971":{"id":"2:11402:60971","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48041:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:54927":{"id":"2:11352:54927","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11351:54926"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:54943":{"id":"2:11361:54943","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11030:5897","prim@char":"1:12368:1876"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1718","glob":false}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:5960:1673","glob":false}},"2:11390:60969":{"id":"2:11390:60969","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12368:1876","self::pattern":"2:11030:5897","str::split":"2:11378:2309","str::split_terminator":"2:11387:60968"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50077:6116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11035:5898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11050:5901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:60965":{"id":"2:11349:60965","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11350:60966","`str`":"1:12374:1881","crate::ops::Index":"2:2979:4731"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"21:11071:2162":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"1:941:2250":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"30:546:7247":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:387:63224":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:51780:6011":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:10598:6268":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1654:40371":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"25:9:1662":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"16:2984:7007":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4673:42769":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:939:62126":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"21:13082:2188":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:11235:47737":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:8368:7059":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6545:43828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:1943:6383":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"27:419:200":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"16:2570:7049":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:11739:56910":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:11568:2051":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:47099:2882":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:6747:2250":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11070:47636":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12349:52109":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:6853:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"18:671:7237":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:12184:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"2:52235:6013":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:3898:2187":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:11841:1991":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:1903:47114":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:119:6623":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12390:1895":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:12280:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:7143:56065":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:5840:2891":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:624:64178":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5402:6768":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:54090:20879":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9338:2187":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:6500:2492":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"17:12307:52045":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:6867:5399":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7779:59066":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:14442:2323":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"2:47117:2138":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4274:42726":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:11646:2071":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"15:0:1853":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:5438:6770":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5959:6974":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7214:42906":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11368:5656":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:29572:6188":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10796:7179":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:12372:1879":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5007:5353":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2731:5336":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"21:14108:2318":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"18:582:5470":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:9091:2096":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:2223:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:646:39511":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1376:5377":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10608:7065":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5554:43359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5759:5653":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4515:42749":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:20959:5891":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"21:13427:4009":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"16:7430:192":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:50752:6136":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4096:42709":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:5024:4603":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:7728:3899":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4329:42733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:10084:5566":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:2916:7119":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"21:13047:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"2:9516:5573":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:646:4009":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8680:5485":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:524:6970":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:50604:5915":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"0:0:1749":{"crate_id":0,"path":["futures"],"kind":"module"},"16:6597:6805":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:8561:7141":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:9223:47066":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:966:5382":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8212:7180":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5642:5647":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:56959:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48278:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2666:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13382:53193":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:5887:5451":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:2819:4724":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11684:51878":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:5083:5350":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:1832:2187":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3374:5458":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:4581:5770":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:6449:62152":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46548:5520":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:6953:39425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11787:51943":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:46979:6196":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:14921:2511":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:10360:7215":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4346:42735":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2482:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:10780:6117":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:50027:5572":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:4688:60248":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8606:5601":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2780:4719":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:8285:2070":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:8692:5815":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:2252:6979":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:47231:2889":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:49342:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"21:6520:1677":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:13126:53114":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"21:9745:64375":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"17:8272:7187":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46951:6194":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47282:2886":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:1230:5391":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:53807:6027":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:2755:4711":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:3792:4009":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2247:5712":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13082:53107":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:49798:2161":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2784:4717":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:4207:4201":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"16:6087:6739":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:853:5386":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:771:2149":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:5927:6788":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:0:1651":{"crate_id":20,"path":["futures_core"],"kind":"module"},"17:562:47005":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:14869:64203":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"28:23:2187":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"16:6037:6994":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:9516:2141":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:6523:1676":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:10708:7181":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"21:14759:4966":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"9:188:6520":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:12382:1887":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:50583:5913":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:14314:2321":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:9425:64375":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10221:47317":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:6012:6791":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5534:43392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9764:47129":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:50308:6128":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:5547:6318":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"9:800:44638":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"12:861:5387":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9284:5652":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:8155:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"21:13538:2251":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"17:11199:47685":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:4501:5761":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3900:3529":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"14:187:45274":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5841:42624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"3:223:204":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:20166:5887":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4745:42776":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:2190:63222":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"21:6687:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:824:5900":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5568:43360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11315:47861":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9519:56275":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:46507:4737":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:8291:186":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"2:4081:6055":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:47543:2871":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4312:5435":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9155:47018":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:5642:3529":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"21:14574:64375":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:49038:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"21:12856:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"21:6150:4969":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"2:53869:5992":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:7000:6312":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9831:7205":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:6336:2493":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"19:0:993":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"21:13106:2191":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:8602:5510":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:47155:60141":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"27:377:6427":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"16:7189:6706":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"21:8649:64375":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:2291:7020":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"12:1065:6616":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:52949:6002":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6807:7031":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:11612:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"22:7:1675":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"17:13366:53191":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:48159:6201":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4716:42773":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11186:47684":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6277:40296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5692:43402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"30:665:138":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:8162:7128":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:11750:60236":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"30:81:53625":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9897:47235":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11709:56653":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:7417:2874":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:2833:6976":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46514:5460":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:57011:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13393:53194":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2380:6991":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11708:51937":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:7147:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:21285:59577":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:842:6388":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:1964:5707":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:12387:1892":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11185:56660":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"21:6042:2167":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"25:0:1661":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:1962:7143":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:10880:59073":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:7955:11201":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12909:52733":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:487:39466":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"21:11222:64375":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:7831:5898":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"26:43:64678":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:7932:10203":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:20285:5589":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4242:5430":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1722:40378":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:48780:5507":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:7220:42907":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10374:7157":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:2674:6999":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"21:104:679":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:2479:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"30:97:53626":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:131:39156":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:7714:2065":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"17:9382:47084":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4257:6062":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:0:1851":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"12:985:5388":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:8985:64375":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:970:5383":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5536:6776":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"27:384:4918":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:12836:52663":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:7568:2069":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:49053:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:11247:47738":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:11882:199":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:5113:46216":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47127:2139":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:21732:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:5510:43390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2473:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7321:6723":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:50077:6116":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"30:761:2163":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"12:1836:4010":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:13566:64375":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"17:11356:47876":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:13796:2257":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"17:11515:51761":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11528:47239":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4904:56613":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"21:9282:2137":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:46541:60242":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:8920:64375":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:1601:2187":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:1580:40365":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21930:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:6785:192":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:8056:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11330:47862":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7350:7037":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:9302:5654":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5681:6780":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:51965:6000":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8086:5443":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:5676:5649":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:21765:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:50177:6120":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"14:215:45267":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:6755:6390":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:48109:4009":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:5175:45343":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7266:6817":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13527:53234":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:46453:197":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:56998:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8756:5352":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"21:12710:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"15:175:6636":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"7:0:1485":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5210:45340":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4427:42742":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:14669:2335":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:3311:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3160:4738":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:1668:40372":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:2935:2187":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:10837:5652":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:20254:5892":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"21:7812:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9873:47233":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:4939:1664":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"6:7255:42912":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12781:52619":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4208:45839":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:4376:45887":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:6228:200":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4810:42782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2245:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:7389:2066":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:2661:2270":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:47308:2158":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:8674:2084":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"1:11207:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:2668:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12630:52564":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:8295:47007":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4475:42746":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"9:863:6453":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"21:11491:2166":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"21:9220:2159":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"29:17:1667":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"17:12617:52512":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:12378:1883":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9263:47068":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:531:7250":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:2205:5399":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5691:5650":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:50913:199":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:1886:11213":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:20699:15372":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:915:5377":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46845:6129":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2273:182":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:10819:6121":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12118:51966":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:29630:6189":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9283:47085":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:10455:2149":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:53415:6035":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5739:6782":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"21:12147:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"6:5523:43391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:12885:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"2:53025:6009":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9472:3927":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4735:3939":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:80:53625":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3417:62126":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47509:2867":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"28:37:2250":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"21:11294:64386":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"17:10159:47210":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:7510:2067":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"17:12046:51961":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:9:4197":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:21351:60185":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:2885:7011":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11337:11208":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:4341:3938":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:10854:5578":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:49909:5569":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"30:798:7238":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47207:2884":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11368:47877":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:10870:64375":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"9:586:6493":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:6424:43820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1678:40373":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:47221:2150":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"30:836:7241":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"21:13148:2075":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"5:6307:6361":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:7938:5392":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:247:64148":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:8184:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:8585:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:9317:7195":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3393:45347":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3457:2338":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:7532:56273":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11751:56659":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4179:42715":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:50009:3539":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:4267:5520":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:2526:6997":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46389:193":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2831:4726":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:9982:64375":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:52187:6028":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:5960:1673":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"21:10358:2152":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"30:707:60197":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4264:5433":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:54038:20875":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4698:42771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:10350:2145":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:9691:7145":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"27:412:4900":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"2:8590:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:716:10206":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:52635:6034":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"21:14823:2100":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"5:2942:5466":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"30:624:2163":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:14234:64375":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"16:4680:45975":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:13705:64375":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"31:109:1717":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"21:10439:64375":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:6262:6726":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:4519:198":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13192:53143":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:771:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:3310:3544":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:9062:64375":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:11350:56624":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:7095:6989":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8857:4909":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:7727:5375":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12022:51959":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:0:1750":{"crate_id":24,"path":["futures_task"],"kind":"module"},"6:4247:42723":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2596:7050":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:6500:43824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5995:6790":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:6735:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:53557:6003":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11853:51948":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:11662:56268":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:0:1338":{"crate_id":1,"path":["std"],"kind":"module"},"16:5574:6777":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10625:7067":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:1088:5388":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"30:716:64174":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:52089:6033":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:1737:6245":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11162:56661":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8632:5290":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"21:7848:2064":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:49354:4909":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:12389:1894":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:8911:64164":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:48185:204":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:4722:2256":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:2804:4720":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"29:20:1669":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"1:9392:4906":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:52135:6021":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:8475:7069":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:47240:2151":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13413:53198":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2976:5465":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46475:4734":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"27:516:4950":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:52357:5990":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"28:193:5390":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:8822:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5733:43407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:2573:2319":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:49564:6308":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8498:5617":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7850:6731":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:49071:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:8941:47014":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:8981:47015":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"30:807:7239":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3948:5835":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4506:42748":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4778:42779":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:3139:4736":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8897:5631":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:7424:2877":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:51834:6032":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"21:14055:2317":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:14542:2326":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"20:82:1985":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2900:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:2476:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:4762:5475":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5480:43387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:20694:5893":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6101:6713":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8880:5630":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9644:7074":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:1049:6410":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:8701:47012":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11873:51949":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:47169:2042":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4298:5429":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:50966:2388":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:47026:11732":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:6133:4970":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:2727:1659":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:7231:5749":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2665:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:7958:6760":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:1216:5389":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:7166:44359":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:215:6378":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:6673:2191":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11125:47645":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:50740:6143":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2253:2306":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:7226:42908":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:4029:62121":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:5759:1662":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"1:7971:11208":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7243:42910":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5819:5657":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4598:42759":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5941:188":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13168:53140":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2772:4712":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:4121:5313":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:1686:40374":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:20203:5984":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6450:6634":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:5880:3908":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:52005:60208":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:20332:5890":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"9:649:6497":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:3179:45345":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:13640:64375":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"1:1617:5465":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"21:11836:2058":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:13776:64375":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"16:6178:6794":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:9366:5578":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9778:7147":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:9571:5574":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4010:5752":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:8117:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:5390:185":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:6166:4968":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"6:4126:42712":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:3156:5740":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:6094:160":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:8862:5367":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:2178:63223":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"12:1003:5389":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5194:45341":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4367:42738":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11774:51942":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8618:5602":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4527:42750":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12485:52508":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7975:6419":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:12198:52032":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:49364:59835":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11436:51758":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12797:52620":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21996:6165":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"21:1277:1656":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"17:10245:47319":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4437:5816":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6323:6719":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:8362:2075":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"21:11705:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:2500:7008":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:36:63215":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:6474:62150":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:9552:64375":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:10445:7182":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:614:64182":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8415:2156":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:6071:5790":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:699:7240":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:48392:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:12210:56063":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:1394:5380":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:13514:4010":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:20016:60891":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:58286:60128":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"21:13669:2255":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"13:108:63275":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:50231:6123":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48316:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:10261:2142":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"1:4965:5349":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:6035:5781":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:48126:6199":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:53745:6007":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:13463:2087":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:11939:51954":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13536:53235":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8526:7161":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:10480:64375":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:4294:42729":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3995:5584":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:8363:1662":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:20:1013":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:10763:2158":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"21:11861:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:507:39469":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:777:6607":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11506:5654":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:21963:163":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:11055:5896":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4740:5347":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:10232:64375":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:56985:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:9010:2094":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:10962:2160":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"21:14203:2135":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"1:11971:29389":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:2898:204":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:9708:7744":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:12005:5471":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"5:7055:5379":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"14:40:47462":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11485:51759":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5876:43439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12211:52033":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:50617:6210":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:6522:1679":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"1:11445:59041":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:9303:7090":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:296:64676":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"30:556:64179":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"1:4113:5759":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2766:4713":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:49967:5481":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:10583:7062":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5720:43405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11217:47686":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:10072:2042":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"21:7208:2053":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:6945:2048":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"12:1872:5468":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"28:53:64697":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"9:382:6448":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:20416:15354":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9371:47017":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11724:54401":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4307:42731":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:10015:2144":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:10938:3553":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:6883:2046":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:11813:51945":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11500:51760":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:1120:6618":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:12371:1878":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12955:52748":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"21:13251:2193":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:50532:5911":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9820:7203":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6981:44199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"9:956:6451":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:1707:5765":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11174:47683":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12384:1889":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9805:7202":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:1931:7076":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:4988:62128":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:2243:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:1338:2187":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:9844:7206":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:39335:5335":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:11594:64375":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"17:13279:53153":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"21:8867:64375":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:12322:52046":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1680:5379":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"21:10366:2150":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"12:1840:2250":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"30:638:7246":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:4653:5771":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:2724:5448":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:52871:6014":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2142:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:13357:64375":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"21:13738:2194":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"21:14486:5219":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"16:4536:45951":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:678:10204":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8955:5634":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:48168:38714":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:1415:5382":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13374:53192":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:14:1965":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:6872:58738":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:4318:45877":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11343:47863":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:32:1652":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:7420:2876":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:20014:60893":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10139:7092":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6705:5373":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:11851:2380":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:46946:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:2927:2274":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:62:39090":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9791:47130":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:9599:5575":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2378:5716":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7934:6727":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:46431:195":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5873:200":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2750:4714":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13404:53195":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13327:53154":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"21:329:3927":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"16:0:1854":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:11050:5901":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:135:39157":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4644:42765":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7307:6821":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11559:51766":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:47553:2189":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:48177:187":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"21:14906:2491":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"21:12584:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"5:3350:4009":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"12:815:5383":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13100:53109":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11300:47858":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6881:6810":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:3153:5739":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:4840:46015":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10761:5653":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:4092:62121":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:3590:45365":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:6132:59033":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"17:11137:47646":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:11680:2057":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"5:4932:2137":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10403:7060":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2809:4721":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5713:43404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2979:4731":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:113:53627":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:51710:60132":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:487:47004":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:49807:5564":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:7873:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:8706:5290":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:454:5677":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"21:8323:2073":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"21:12036:2061":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"6:4102:42710":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:12498:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"21:11983:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"30:114:53627":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:1080:2095":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:6908:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:2797:4723":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7245:6815":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:46932:5978":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:658:5708":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7825:6824":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9627:7088":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12964:53068":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:47137:2140":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:47178:2043":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5625:43398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:1033:62096":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"14:165:45266":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6509:43825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11288:47857":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5835:43437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5519:6775":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:625:5541":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9592:161":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2278:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:993:5386":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46823:6292":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:333:3928":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:8318:6096":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7101:59106":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:6311:43816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8939:5632":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:12393:1898":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4534:42751":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:5856:6787":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4152:42714":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:11333:2749":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"1:6389:2380":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6124:6763":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:4309:59062":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"21:14838:2102":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:7292:2066":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"21:6798:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"12:1845:5379":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:2358:6995":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6354:6800":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:8297:2071":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:12564:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:4667:10208":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5715:6781":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"29:25:1668":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"1:12350:56574":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11054:47635":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8527:56274":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"21:14376:2322":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"16:7521:6717":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:53209:6015":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4575:42756":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:15008:4180":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"22:0:1994":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"28:19:4010":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:48506:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12748:52574":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6230:6797":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6294:6743":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:47198:2045":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3081:3557":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:7803:6823":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:581:39478":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1185:5388":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:11958:2062":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"1:8807:5620":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"21:10897:2048":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:46287:4742":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2920:2272":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3228:4744":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6308:6798":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"26:53:64679":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"21:9203:64375":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"9:676:6542":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:8600:188":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:1608:2250":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2924:2273":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:3190:3554":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6188:6795":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9488:7079":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5793:6785":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"12:822:5384":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4224:42720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:6738:6389":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:5541:43393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3326:157":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:2039:6412":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4653:42766":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13007:53098":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:2311:6698":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12934:52735":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10420:7216":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2909:1990":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9446:47086":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4212:42719":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4421:5813":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:9885:47234":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:50426:5905":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4200:42718":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"21:7530:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12768:52618":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12638:52566":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12874:52668":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:386:47003":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6768:6808":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:20037:60896":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:10568:6304":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10721:47021":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10497:47325":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:49568:5554":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:8137:47006":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:11530:64375":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"21:11196:2164":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:20242:5342":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:5060:5355":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:50283:6125":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12392:1897":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11547:47238":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10520:47326":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"21:8884:2092":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"17:12291:52044":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:53953:6030":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"21:6529:2041":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"16:4404:45891":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:9298:4009":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:9447:2140":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"16:7447:6724":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12550:52510":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:21306:59464":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:660:7236":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:515:7249":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4286:42728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9909:47204":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:999:5387":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4312:6063":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10283:47294":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:8055:7056":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11646:59059":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:6302:43815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:53667:6023":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4797:42780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:49890:5568":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:9105:2098":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"0:56:1030":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"6:6998:44200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:2534:64586":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:50301:6127":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"31:102:1720":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"21:6773:2045":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:46409:196":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:169:2038":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"1:4250:5431":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:3721:2250":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2930:2275":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12148:51968":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:8441:7183":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"30:699:5470":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:49995:3537":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4683:42770":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:8545:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:3751:62126":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2510:2317":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:10584:6306":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"21:13931:64375":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"1:11197:5713":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:10803:6118":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:50569:5912":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1887:40515":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:11989:56576":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:12374:1881":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:50411:5902":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4450:5817":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3949:5599":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:3418:2268":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11106:47644":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6415:43819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:4308:5434":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2489:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:51004:5596":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:7279:64375":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"21:12111:2065":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"5:6777:4010":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:14780:2101":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:7078:2047":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:50263:2326":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:4186:201":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:11758:2059":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"16:6139:6793":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:47146:2141":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"27:397:4899":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"2:50728:6138":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6479:43823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6322:43817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11951:51955":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6219:6796":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12674:52567":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11617:51870":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11451:59075":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:4475:1663":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:13532:2250":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4629:42763":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:7842:5673":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:967:47083":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:7279:44387":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:9405:5565":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:13436:4200":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:9379:5452":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:6818:2129":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:2730:61854":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9339:7197":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10774:7058":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:8531:64375":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:21699:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:3149:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:3972:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"21:14833:5196":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"16:4432:45895":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:56576:6150":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:9562:54394":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"21:10642:2154":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6545:6733":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6855:6809":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8730:5348":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4300:42730":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:29558:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2436:5342":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:8339:47008":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:9947:47236":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:14023:2316":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"17:11761:51941":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9021:47016":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13091:53108":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:9447:5786":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:727:7242":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"27:503:4914":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"21:9957:2163":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"17:12278:52038":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7887:6732":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:4626:45969":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:5226:63509":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5822:5659":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12073:51963":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4191:42717":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"21:13187:2086":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:48801:5509":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5582:43394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13071:53106":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"21:14355:64375":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"5:4936:2081":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:12346:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"5:6732:4010":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:1825:2645":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1562:40363":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:590:60197":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3475:2334":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:50748:6142":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8422:3537":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46870:5544":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:5313:58734":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21245:5857":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4611:42761":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:9626:5421":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:4206:5341":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:736:7243":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10466:47322":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:7072:6356":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"30:0:1856":{"crate_id":30,"path":["memchr"],"kind":"module"},"12:353:6620":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10321:7214":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13141:53116":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"14:221:45273":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"27:431:4903":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:448:5676":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"21:13021:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"21:11019:2161":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"16:8034:6696":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:6405:59040":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10997:47462":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:542:5693":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:6605:2865":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"21:5943:1671":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"30:769:2163":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2762:7003":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:6677:5791":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:51756:6019":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:7293:58591":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:10394:7159":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:7033:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4398:42740":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4449:42744":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:766:7245":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:14590:2327":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"16:6149:6764":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:48092:2663":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"31:136:1718":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:21372:6179":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:13483:64375":{"crate_id":21,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"6:4239:42722":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:9645:5422":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13176:53141":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9165:64150":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:52024:5989":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:11271:64375":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"17:9700:7144":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"12:1085:6617":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:7249:42911":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:7841:5342":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:52789:6029":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"14:31:45265":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:8822:64151":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"21:13129:64375":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"18:574:2163":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:14167:2320":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"2:46349:194":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:582:1655":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"9:827:6450":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"12:1518:6627":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"21:21:1013":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"30:788:7237":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:9466:1991":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:7545:6744":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:50732:6140":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:48430:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3226:3555":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"21:14628:2331":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:4968:5347":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4581:42757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4834:5361":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8059:5463":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3076:4735":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:6879:5400":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"9:505:6443":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:7787:2057":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:9061:7092":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:5817:2167":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"6:600:39481":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"27:425:4902":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:2309:176":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:57:1682":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"21:11245:2165":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:12860:52666":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:48244:4010":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:539:39472":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:6288:6360":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:13091:2189":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:49979:6110":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10182:47208":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"14:7:45265":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:5375:2142":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"21:7126:2049":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:13417:4199":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"21:14118:2319":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"21:8503:2081":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:21209:59587":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"21:8401:199":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"1:1473:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:896:6455":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:14890:64204":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"1:2023:179":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4115:42711":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"9:19:6544":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:5592:6968":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:21193:60121":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"21:14809:64375":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"16:7920:6826":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:8441:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"12:659:4010":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4592:42758":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:4900:56609":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12033:51960":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4258:5432":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"23:0:1995":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"6:4726:42774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:538:7251":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:39286:2603":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:50779:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:2315:183":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13492:53226":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:153:6703":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4804:42781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10310:47320":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:50724:6135":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:13024:53099":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"9:920:6452":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:2244:6416":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:13232:2192":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:5034:1686":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:5452:2041":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:47534:2188":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6763:61972":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12176:51983":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:1634:5468":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9250:47067":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4510:45949":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"21:11911:2044":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"17:12695:52568":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:3017:45344":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11854:5752":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10506:47297":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:0:1653":{"crate_id":21,"path":["futures_util"],"kind":"module"},"21:9640:2041":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"17:12087:51964":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:9660:64375":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:2981:6381":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:50505:5910":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13340:53155":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11909:51951":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:14617:2330":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"17:9930:47220":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8220:2266":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4496:42747":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:907:4010":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:8726:64375":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:3094:5379":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"21:12455:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"17:13459:53202":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:7195:64375":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"1:2406:5727":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8734:13481":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:46906:6290":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13506:53232":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9458:7055":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46892:6128":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7022:6986":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:48228:2187":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:2740:7002":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:3249:7131":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10722:5651":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:12739:52573":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:9071:64155":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10270:47295":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:5472:6772":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:20851:5590":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2583:59037":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:491:64179":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:9601:7081":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2478:6996":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9527:6810":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5741:43408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:53059:5991":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:1859:5466":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:6375:40297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:12015:6645":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"27:11:64680":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:58307:60215":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13478:53208":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"21:6319:4285":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"2:21666:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:6758:2190":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2026:178":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:274:63216":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11151:5357":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"21:9892:2163":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"21:10120:2155":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"1:8116:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"15:214:6641":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:13966:2259":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:10194:60231":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:13031:53100":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"21:13879:2258":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"20:92:5342":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"2:50637:6211":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6843:7033":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"21:8227:2068":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"16:6030:6792":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:20291:5591":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10108:7122":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13580:53243":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9631:7075":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:4740:45987":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:11101:5904":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7008:5588":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5749:62751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:6081:4010":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10393:5766":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4712:45983":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11661:51877":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11259:47847":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7948:6728":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12730:52572":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7615:6729":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:652:2163":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:1021:7200":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11773:58742":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:21831:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"21:12628:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"1:12368:1876":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4317:42732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"30:655:7251":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"31:68:1716":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:9322:108":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"1:987:5385":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6248:6716":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"21:12310:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"6:1525:40359":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:6156:62126":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6008:62126":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:751:2250":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:9117:5342":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:51016:5594":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6441:6801":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:1771:7082":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:683:10205":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:51987:6004":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:9360:4903":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"0:46:1559":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"21:13174:64375":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"12:2069:5389":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12060:51962":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:11123:2151":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"1:7868:5696":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"12:1866:5467":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:14765:3927":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:4890:5433":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7335:6736":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:8763:2087":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"17:11149:47681":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8481:5605":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21260:60217":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:0:1846":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9193:64160":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5672:43400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12337:7182":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5503:6774":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:8310:2072":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:2662:5332":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:52311:6005":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10434:47321":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2696:7000":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:1385:5378":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:50974:2389":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:4195:6057":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"21:14681:2156":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:4902:56611":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9658:47126":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:10154:64375":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:9671:7115":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6538:43827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"21:10291:64375":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:10497:11206":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:6352:40323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:9514:56259":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9293:7199":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11087:47643":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"20:68:1657":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:48794:5508":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:10594:2153":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:5344:58734":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4461:42745":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:19982:60831":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"31:100:1719":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"27:443:4904":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"28:202:5388":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"1:9461:56254":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"9:622:6496":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:3191:4743":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2250:2301":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"18:96:53626":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:242:64154":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:38113:177":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:7237:42909":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5861:43438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:620:61979":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7037:6199":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:8596:47009":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:1738:40379":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"28:32:4009":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"17:11161:47682":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:21358:6240":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:21268:59533":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:2548:6998":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:50440:5908":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:3448:45348":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:12999:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"12:60:63228":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4257:42724":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:5894:62152":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"18:644:2163":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:50756:6137":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:49333:5368":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"21:8605:2083":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"21:8388:64375":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:8839:2091":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:10121:7123":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:46334:4733":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:49985:6111":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"21:395:59071":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:6425:2725":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:11625:2060":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9722:47125":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:11963:5446":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:12220:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"21:13728:214":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"6:6392:40300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:725:5377":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10476:47323":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1348:4009":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:9557:5576":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"30:632:7249":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:11164:64375":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"21:13061:4431":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"16:2784:7005":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6632:6806":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7863:5681":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:1500:40355":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13158:53139":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:4565:45956":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:7730:47005":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"27:495:4909":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"15:193:6637":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:9902:5711":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:5005:5351":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"21:12689:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"16:6682:6735":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4768:42778":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:7018:2043":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"1:11575:56663":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:4135:45790":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:513:39470":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4231:42721":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8356:2190":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"21:14084:64375":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"21:6715:2050":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"6:4139:42713":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"30:648:7250":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:560:39475":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9681:47127":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:6558:5885":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11734:51939":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:20283:5342":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:6778:5787":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"29:0:1665":{"crate_id":29,"path":["futures_io"],"kind":"module"},"21:14772:64336":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"31:0:1714":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"16:2332:7013":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:521:59064":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3267:3552":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:1550:40362":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:7029:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9751:7146":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:53915:6010":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6571:6804":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:9118:64149":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"21:6185:161":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"6:4361:42737":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:276:2278":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"8:0:1847":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:6612:2045":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"1:12379:1884":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1511:40357":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"21:14732:2338":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"6:545:39473":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:9308:64375":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:8796:7066":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:14725:2337":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"1:7853:56562":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:9585:5577":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:8092:2061":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:20442:5987":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:52042:60202":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:11256:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:29496:4700":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:10805:64375":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"1:4212:5339":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:50131:5574":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:10545:2147":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"16:3254:45346":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:8631:47010":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:7934:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:50389:5899":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5379:6767":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:9359:2138":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"6:6572:43830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:4272:2196":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"31:65:1715":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"17:11271:47850":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1714:40377":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:9350:7198":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:12653:2180":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"21:14975:2513":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"26:37:64677":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:2718:2271":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:46853:6287":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:2718:7001":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12237:52035":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:7093:2276":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:7208:42905":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:681:7238":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:6926:6195":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13184:53142":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:44:6605":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:2848:4730":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:6576:2042":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"1:8076:5713":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:7070:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46809:5976":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"21:14493:2325":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:11530:56902":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:11300:64339":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:11670:5663":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10296:47293":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:4888:62126":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21177:5861":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:8738:60732":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:3608:4010":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2734:61857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"9:33:6545":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:9108:47017":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:8951:64159":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4364:5522":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:636:64185":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:6806:60813":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"27:0:1683":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"16:6164:6715":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:7909:2059":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"16:7287:6819":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4253:45860":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:4777:46000":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:52713:6022":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:23:2013":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:11997:51957":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:14675:2336":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:9553:7092":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:4974:62125":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:2843:4729":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:3337:2187":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:10575:64375":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:5472:43386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2760:4710":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:11648:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"6:4635:42764":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:6492:3908":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:3125:47209":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2394:5721":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10670:7185":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7113:6990":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6269:39389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:7995:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:10836:2157":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"1:9907:56074":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"31:125:1722":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"27:124:4906":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"17:9183:47019":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:6820:4010":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13214:53150":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10682:7186":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:0:789":{"crate_id":6,"path":["libc"],"kind":"module"},"16:3557:45356":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:2983:4732":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:5174:5597":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:39322:6419":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:495:39467":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2380:5717":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"12:632:2187":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:12472:2172":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"9:709:4909":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"27:370:4951":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"16:7413:6756":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46899:6289":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:3373:3529":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10743:6114":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4565:42755":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11828:51946":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11536:47237":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:48544:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4621:42762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:1029:5390":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:957:5380":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"21:12423:2171":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:11518:5655":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7907:6825":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:8604:5511":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:47293:2156":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"21:13447:2187":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:47108:2883":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:12334:56257":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:9274:2187":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:5443:2190":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"6:1518:40358":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"21:14525:64375":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:12061:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:8124:5734":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6329:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:10204:2045":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:54049:20876":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:49953:6206":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:39326:5457":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"9:592:6495":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:2402:7014":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:21233:5856":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"10:0:1849":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"21:7970:2058":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"16:5758:6783":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:669:5381":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11217:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:52333:6008":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6654:6721":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2437:2604":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:417:1654":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:1695:40375":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:19997:60831":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:49325:60187":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1426:192":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:4597:45964":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8435:2326":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8215:4998":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5443:43330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:7043:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4190:6056":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:49877:5552":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:719:7241":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:48468:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:11100:64375":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"1:12385:1890":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:1636:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:0:1850":{"crate_id":11,"path":["adler"],"kind":"module"},"21:10620:64375":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:2485:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4690:968":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10350:7058":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:325:2054":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:6599:64375":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:4121:64584":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"17:10642:7188":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9346:5450":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1595:40366":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3400:2327":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:7266:42913":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:48620:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11034:47575":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:20229:6052":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:6311:59033":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"21:13845:64375":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"16:5450:6771":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12850:52665":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:4980:1681":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"6:5605:43397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:49817:5562":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:8349:64375":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"1:11227:2267":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:8592:5506":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:51935:6012":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10385:7158":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:11612:2056":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:2788:4716":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:9478:5572":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"21:11934:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"21:14144:64375":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"1:5502:184":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7535:6718":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:2647:2320":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8583:5485":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"21:10496:2146":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:54113:20880":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:13324:2194":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"16:5424:6769":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"20:131:1674":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"21:7744:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:7593:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:9385:64375":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"2:49919:5570":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:51690:60144":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:10414:2148":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:14936:2510":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"6:4280:42727":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:50744:6141":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:7241:64375":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:52403:5994":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46963:6195":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5771:6784":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12366:1874":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:7640:2056":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"6:4551:42753":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:4321:5521":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"27:475:4907":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"7:32:44482":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"21:12176:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:12896:52732":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9401:47082":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11341:5343":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:564:7252":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"27:307:3908":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:9290:180":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:4525:6284":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:6521:1680":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:10991:5479":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:3567:1660":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"12:1138:5391":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"21:11783:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:6781:5667":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13572:53241":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:6317:6362":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"21:14963:2508":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:46913:6291":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8643:5755":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:7948:5393":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:592:39480":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:49838:5553":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2921:6699":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8099:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:29536:6050":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"21:8252:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6048:6705":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:21103:6162":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:8596:5508":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:48236:4009":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"21:11048:64375":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:4714:768":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2961:4741":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4185:42716":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:8588:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:11606:51869":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:9507:58728":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8510:45340":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6697:7026":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4540:42752":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5699:43403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1600:40367":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10207:47308":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:1643:6048":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"12:738:5378":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"31:120:1721":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"14:160:45265":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:12380:1885":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:54143:20882":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10332:7222":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"21:8941:2093":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:9354:4010":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9475:7080":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:56933:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:38130:5470":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:12:4196":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"9:0:1848":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:50760:6221":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"14:202:6314":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6409:43818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5656:5648":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:47036:11731":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:976:5384":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10490:47324":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:27:5342":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"6:5587:43395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1067:6411":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9541:56583":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:47525:2869":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:7256:2060":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"17:10894:7124":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"20:142:4195":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"27:508:4949":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"17:11721:51938":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:8110:46999":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"31:38:5291":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:56972:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"27:304:200":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"28:0:1997":{"crate_id":28,"path":["slab"],"kind":"module"},"1:8132:3547":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4437:42743":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:481:7247":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:14638:2332":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:8031:2062":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"5:4059:3529":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2896:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2673:4155":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:49827:5563":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:10684:64375":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"5:6955:6394":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:501:39468":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6115:6711":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6721:6807":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:507:2163":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"30:726:64183":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:8241:7184":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6337:6799":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"21:10715:2156":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:48658:6205":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8949:2187":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:6793:6384":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:49105:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:1629:5467":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:2019:61975":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:707:5900":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:2968:5467":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"30:844:7242":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12381:1886":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:5422:2250":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:6009:5780":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:20863:60829":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"21:8755:2086":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:52501:60130":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:49738:6109":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:8857:5366":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:4912:46039":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:14750:2340":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"21:12241:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:10528:7178":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:5531:3939":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7276:6818":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5606:6778":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"21:39:2015":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:8966:5635":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:48354:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:22395:5939":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13594:53277":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:10741:64375":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"2:54075:20878":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13203:53144":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11594:5420":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"12:810:5380":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:6212:3908":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13134:53115":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7489:6695":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10455:7217":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"21:10051:64375":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:1672:1049":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:52532:60194":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12948:52736":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13221:53151":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:675:10202":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:554:39474":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1636:40369":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12008:51958":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:897:4009":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9539:7077":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4013:5753":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:14295:64375":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"18:690:7239":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"12:1852:5465":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10739:56070":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:4614:3529":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:3623:45374":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:8584:64375":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:13583:2252":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"21:12541:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"6:1541:40361":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6524:43826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8323:3558":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:4816:42783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:7215:2052":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"1:1935:5706":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10921:47452":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"21:9831:2748":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"5:859:2187":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:13377:4590":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:13557:53236":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:519:39471":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:0:1856":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6293:39348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:50113:5576":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4206:42564":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:98:6619":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:12383:1888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:14608:2329":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"5:6723:5551":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:51904:60193":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"12:393:63225":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:8774:7057":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:47257:2153":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:8752:3537":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11893:51950":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:962:5381":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:13456:4010":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"17:8393:7114":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11538:6221":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:6942:6393":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:9484:56592":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:8991:64163":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46593:5960":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12884:52730":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"30:883:7245":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4417:42741":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9433:47080":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:13298:64375":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"12:320:6621":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:52555:60191":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:50594:5914":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"30:872:7244":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13148:53117":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:14252:2249":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"2:49020:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:54205:20884":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:8535:2338":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:12512:2185":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"17:12134:51967":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5660:43399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"21:10933:64375":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"1:9607:5420":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:46772:31827":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:4320:5437":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:7217:5748":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:1505:40356":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9330:5656":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:9424:4904":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2814:4722":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12225:52034":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"21:5019:4604":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"12:300:6622":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5782:43410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:6636:58738":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2664:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:410:58742":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:1111:5390":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"13:220:63231":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"27:391:4898":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:2792:4718":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8428:3539":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:47516:2191":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:56946:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:1760:6244":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:4:978":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2835:4727":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:6833:2044":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"5:6989:6311":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:97:1658":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:19969:5470":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2745:4709":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11639:51871":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:14707:64375":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"21:14260:107":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"12:762:5379":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:12022:6645":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4399:5811":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:48787:5506":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"9:111:6512":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"21:5032:907":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:12908:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"1:11172:5442":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12816:52622":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11673:186":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3590:5608":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:3460:2323":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:13605:2254":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:46248:4012":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:4051:6054":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:11035:5898":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5223:13487":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:5978:1670":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"16:6474:6802":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:50159:6119":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6506:6803":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:11757:56636":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5504:43389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"26:0:1996":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:14599:2328":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:6996:2878":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:2456:7019":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:7289:44388":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:7172:2051":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:2825:4725":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4489:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:51734:6031":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2396:5722":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:47323:2160":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"21:7098:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"18:755:7244":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2776:4715":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:0:1855":{"crate_id":17,"path":["object"],"kind":"module"},"6:4665:42768":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:3472:6428":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:50987:155":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:47056:2880":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"28:185:3937":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:3343:2188":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:9154:64375":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"16:3707:45410":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9526:7078":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46781:5973":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10546:47020":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5365:6714":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8638:5754":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8464:5604":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:13496:2187":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"17:11974:51956":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:37:1678":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"9:977:6456":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:49141:5505":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"21:12375:2066":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"17:9362:7092":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1532:40360":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:10516:56073":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:21633:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:2607:3541":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:47077:2881":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:6600:160":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13518:53233":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:54064:20877":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11915:5759":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"21:774:2074":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:54018:20873":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7071:6811":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7042:2277":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7256:6816":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:50812:6223":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21864:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:6992:2879":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:6001:1685":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:5619:60669":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:20957:5342":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:50923:205":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:1584:62126":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:3176:5886":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:6972:61971":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:11698:2074":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:1751:60206":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"21:14649:2333":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"1:11557:5421":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:8594:5507":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:5808:3811":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3960:5836":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:48253:177":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11434:59071":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:20435:5342":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2947:6380":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:14827:2099":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:571:5697":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10257:47296":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:309:4602":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"1:9602:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:10566:5664":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"21:9099:2097":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"6:1701:40376":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:54009:20872":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:11894:5753":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:8548:2082":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"16:7227:6814":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:8494:45341":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:5619:3529":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:12825:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:11402:2747":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"5:1971:6413":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:47564:2873":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:3813:2074":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"16:7215:6813":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:12783:2179":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:51802:5999":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9408:5453":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:50800:5424":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:599:64174":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:1201:5390":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"30:741:64178":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:12373:1880":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:2726:61855":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5974:6789":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10944:3551":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:2184:59357":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9031:64158":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:8418:7127":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:13216:64375":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"6:1643:40370":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:49083:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:12388:1893":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:47187:2890":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7374:6822":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:595:5364":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:8313:6095":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:50931:189":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:14420:64375":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"16:6276:6742":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12926:52734":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:50273:6124":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"12:1628:63229":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:14660:2334":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"17:9328:7196":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:6837:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7581:6741":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9712:47128":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:46365:192":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:13100:2190":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"16:2622:7010":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:7414:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:12386:1891":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12339:10207":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:8666:47011":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:8150:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4761:42777":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3482:3524":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10875:7125":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:52165:6025":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:11044:5900":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:1435:6408":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:6975:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:1605:4010":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6646:7028":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11831:5607":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:5717:2188":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"14:0:1852":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:4043:2195":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"7:79:44489":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:7726:3900":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12251:52036":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:1861:11206":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:48101:2187":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:8808:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:5973:1672":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"17:12980:53096":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7404:6740":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:14951:2509":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"2:52995:6006":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:8871:47013":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:9323:3539":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2220:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:47272:2154":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:1612:5379":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:2648:7009":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:50213:6122":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:1884:7744":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3166:4740":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46766:5544":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:1552:3529":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:50457:5909":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9857:7130":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9422:47081":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:47086:2135":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:48117:4010":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:5199:6360":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6495:6633":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:8154:2063":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"5:5962:2250":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"30:853:7243":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:135:2039":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:3362:5459":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"21:9122:2135":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"17:9577:7083":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10973:47461":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4605:42760":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:52281:6001":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:4808:46007":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"21:12752:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:2839:4728":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:8598:5509":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1623:5466":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:54128:20881":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:1555:6629":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:29736:6190":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:9127:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13231:53152":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"21:2549:64255":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"2:29321:6235":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:5642:6779":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:2053:5388":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7917:10200":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"30:753:64185":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10233:47318":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5595:43396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1608:40368":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:8140:2323":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4354:42736":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8064:5711":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11576:51769":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"30:777:7236":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8210:4997":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:567:39476":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46876:6288":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"21:12401:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"16:7637:6712":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:51864:6020":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:21798:4358":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:17:1984":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"6:1574:40364":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:12367:1875":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9274:47069":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11237:56908":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:6912:6392":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7461:6725":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:6511:2888":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:575:39477":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13354:53156":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"1:7889:5296":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:5009:5354":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4288:45871":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"12:697:5382":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:50317:5544":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:21384:6178":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:50292:6126":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"12:2198:63219":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2570:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:49899:5571":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:48041:175":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:2465:6415":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:336:2055":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:6309:4309":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"16:2273:6978":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10062:47207":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12164:51969":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"21:13594:2253":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:3188:3553":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2556:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10949:47460":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8405:2135":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:5684:43401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:49789:5561":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:8881:64153":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5570:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4379:42739":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:53991:5995":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:608:39482":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"12:1044:6615":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:10941:3555":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10854:7142":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:339:159":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5498:43388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:190:2040":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:7366:6738":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:420:6684":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12972:53069":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6448:43822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5817:6786":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8069:5442":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:3154:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"13:0:1845":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:586:39479":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8547:5807":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:6975:44198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10822:47022":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"30:691:2163":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:4348:45883":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4737:42775":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4429:5814":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8687:5812":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:6208:4967":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:920:2085":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"18:521:7246":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:14741:2339":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:49044:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:928:5378":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7741:58739":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:7670:64375":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:46793:5974":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6554:43829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:10129:2043":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:9770:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"17:11800:51944":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5772:43409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:21322:59474":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12361:52112":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"30:816:7240":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:50059:6115":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:12375:1882":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:49317:5369":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4659:42767":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9597:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3265:3551":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6430:43821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:609:64183":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:3150:5738":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4879:46030":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5154:6980":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12756:52616":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12609:52511":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:20411:5342":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:1404:5381":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12265:52037":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"21:12960:2184":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"1:1102:5389":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:6667:2041":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:13047:53104":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:11552:2169":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"2:11908:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:46534:6759":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12103:51965":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7475:6720":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"29:27:1666":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:50326:6129":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:13505:4009":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"16:2424:6992":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:2676:2167":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"2:20035:60894":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8372:2267":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:10117:5567":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:1359:4010":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11014:47574":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11594:51813":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"21:14001:64375":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"16:2859:6977":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:14470:2324":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:21050:6160":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13114:53111":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:7146:64375":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:2725:61853":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:3001:7006":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10652:5661":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9501:7090":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"12:834:5385":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:9486:64375":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"21:9261:64375":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"1:8698:5764":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5727:43406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:13521:2249":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"2:54029:20874":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11167:56666":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:1823:11194":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:13073:2187":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"21:10392:64375":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:12937:64375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"2:21897:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6540:200":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:2816:7004":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1933:5693":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7868:6730":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:3466:57128":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2654:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11841:51947":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9316:5655":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12391:1896":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7992:6759":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:3228:3556":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:7450:2501":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:8570:5808":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"27:405:3908":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"21:9581:2041":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:13059:53105":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6668:6722":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:1534:6628":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"21:10526:64375":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:6814:4010":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"30:681:7252":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:14478:2253":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"21:7339:2501":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"5:3529:5379":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:49157:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:9171:2136":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"21:4254:4203":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"6:4706:42772":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:20444:5890":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:52759:6026":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:1120:5391":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9738:7148":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:5705:5651":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:13142:186":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:25205:5970":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10752:7060":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6759:6734":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:36:6355":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4335:42734":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4559:42754":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:14190:64375":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"16:3845:45524":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13436:53199":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11748:51940":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8384:2269":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6713:6737":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7297:6820":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9895:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:1825:11195":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6002:5778":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5488:6773":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4653:45972":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10845:7182":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21156:59476":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"27:484:4908":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"1:7798:59062":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10075:47205":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:49372:59836":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6437:56278":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:29530:5374":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"12:2080:5390":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"21:9701:2143":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"1:951:5379":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:49864:2880":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:51886:6024":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:9443:5579":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3548:62126":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3002:5468":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7144:6812":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6820:63289":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6794:7030":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46833:6293":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:884:2187":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:11559:2168":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"17:10088:47206":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"30:731:64182":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10983:5296":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12514:52509":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:50736:6139":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11030:5897":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:48582:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5165:5482":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12369:1877":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:2864:5000":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:15:4198":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:1919:5585":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8789:13488":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:52454:60196":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:54166:20883":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:52379:5993":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13039:53101":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:3680:45407":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"21:11000:64375":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"27:460:4905":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"1:8712:5773":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:9399:2139":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"6:4267:42725":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"21:10098:64375":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"futures_macro","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"25":{"name":"futures_sink","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"slab","html_root_url":null},"29":{"name":"futures_io","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}