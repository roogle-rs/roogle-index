{"root":"0:0:1940","crate_version":"0.3.29","includes_private":false,"index":{"2:12739:26782":{"id":"2:12739:26782","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43822:8287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:24700":{"id":"2:12769:24700","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12410:8281","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::split":"2:12763:2441"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43864:8266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:12999:143":{"id":"0:4-2:12999:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12999:143","glob":false}}},"0:10-20:68:1848":{"id":"0:10-20:68:1848","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1848","glob":false}}},"0:62-21:4701:1854":{"id":"0:62-21:4701:1854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4701:1854","glob":false}}},"2:12728:24664":{"id":"2:12728:24664","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41926:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:30264":{"id":"5:5530:30264","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:1859":{"id":"0:78-29:25:1859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1859","glob":false}}},"0:39-21:4701:1854":{"id":"0:39-21:4701:1854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4701:1854","glob":false}}},"2:12831:29602":{"id":"2:12831:29602","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12371:130","`FromStr`":"2:12370:2912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42069:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12370:2912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12370:2912","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12713":{"id":"2:12713","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12714:863","2:12715:20978","2:12716:29580","2:12717:29581","2:12719:29582","2:12722:21006","2:12723:29583","2:12724:336","2:12725:24667","2:12726:24663","2:12728:24664","2:12730:24665","2:12732:24666","2:12734:29584","2:12735:29585","2:12736:24689","2:12737:24690","2:12738:27321","2:12739:26782","2:12740:21016","2:12741:26814","2:12742:26810","2:12743:2432","2:12744:29586","2:12745:27322","2:12746:24708","2:12749:24709","2:12752:24710","2:12755:20260","2:12759:20261","2:12763:2441","2:12766:24698","2:12769:24700","2:12772:29587","2:12775:29588","2:12778:24702","2:12781:24704","2:12784:24706","2:12787:24707","2:12790:2166","2:12793:29589","2:12796:29590","2:12799:29591","2:12802:29592","2:12804:29593","2:12806:29594","2:12808:29595","2:12809:29596","2:12810:29597","2:12813:29598","2:12816:22906","2:12819:24711","2:12822:29599","2:12825:29600","2:12828:29601","2:12831:29602","2:12833:23406","2:12834:25864","2:12835:23410","2:12836:23411","2:12837:23412","2:12838:29603","2:12840:2569","2:12841:29604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1940":{"id":"0:0:1940","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5260:1877","crate::executor":"0:46:1750","crate::stream":"21:1293:1847","crate::channel":"27:0:1874","crate::future":"21:104:749","crate::sink":"21:4701:1854"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1750","0:56:1153","0:4-2:12999:143","0:5-20:32:1843","0:7-21:424:1845","0:8-21:589:1846","0:10-20:68:1848","0:11-20:97:1849","0:13-21:2760:1850","0:14-21:3780:1851","0:15-25:9:1853","0:16-21:5165:1855","0:18-29:27:1857","0:19-29:17:1858","0:20-29:25:1859","0:21-29:20:1860","0:23-21:6204:1861","0:24-21:6169:1862","0:25-21:6199:1863","0:26-21:6186:1864","0:27-20:131:1865","0:28-22:7:1866","0:29-21:6756:1867","0:31-21:6753:1868","0:32-21:37:1869","0:33-21:20:1138","0:34-21:6755:1870","0:35-21:6754:1871","0:37-21:104:749","0:38-21:5258:1020","0:39-21:4701:1854","0:40-21:1293:1847","0:41-21:5206:1872","0:42-21:57:1873","0:43-27:0:1874","0:44-21:6227:1876","0:45-21:5260:1877"],"is_stripped":false}}},"0:50-31:109:1908":{"id":"0:50-31:109:1908","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1908","glob":false}}},"2:12716:29580":{"id":"2:12716:29580","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:1913":{"id":"0:55-31:125:1913","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1913","glob":false}}},"2:12724:336":{"id":"2:12724:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12725:24667","`u8`":"1:12051:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:2432":{"id":"2:12743:2432","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44100:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:1866":{"id":"0:28-22:7:1866","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1866","glob":false}}},"2:12778:24702":{"id":"2:12778:24702","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281","str::rsplitn":"2:12781:24704"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43950:8270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:1853":{"id":"0:63-25:9:1853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1853","glob":false}}},"0:79-29:20:1860":{"id":"0:79-29:20:1860","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1860","glob":false}}},"0:18-29:27:1857":{"id":"0:18-29:27:1857","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1857","glob":false}}},"2:12726:24663":{"id":"2:12726:24663","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41926:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1911":{"id":"0:53-31:102:1911","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1911","glob":false}}},"0:73-21:2760:1850":{"id":"0:73-21:2760:1850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1850","glob":false}}},"0:24-21:6169:1862":{"id":"0:24-21:6169:1862","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6169:1862","glob":false}}},"2:12828:29601":{"id":"2:12828:29601","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:23410":{"id":"2:12835:23410","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12723:29583":{"id":"2:12723:29583","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:2569":{"id":"2:12840:2569","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4611:2569"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44154:2570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12725:24667":{"id":"2:12725:24667","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1628"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:29598":{"id":"2:12813:29598","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:24710":{"id":"2:12752:24710","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:23408":{"id":"5:5544:23408","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12836:23411"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1907":{"id":"0:49-31:68:1907","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1907","glob":false}}},"0:14-21:3780:1851":{"id":"0:14-21:3780:1851","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3780:1851","glob":false}}},"0:45-21:5260:1877":{"id":"0:45-21:5260:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5260:1877","glob":false}}},"0:44-21:6227:1876":{"id":"0:44-21:6227:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6227:1876","glob":false}}},"2:12796:29590":{"id":"2:12796:29590","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12410:8281","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::rmatch_indices":"2:12799:29591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43996:8296","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1849":{"id":"0:11-20:97:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1849","glob":false}}},"0:52-31:100:1910":{"id":"0:52-31:100:1910","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1910","glob":false}}},"0:38-21:5258:1020":{"id":"0:38-21:5258:1020","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5258:1020","glob":false}}},"0:65-21:1293:1847":{"id":"0:65-21:1293:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1847","glob":false}}},"0:54-31:120:1912":{"id":"0:54-31:120:1912","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1912","glob":false}}},"2:12717:29581":{"id":"2:12717:29581","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12809:29596":{"id":"2:12809:29596","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:30267":{"id":"5:5542:30267","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2413","`String`":"5:7520:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2413","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:2166":{"id":"2:12790:2166","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12410:8281","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::rmatches":"2:12793:29589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44050:8298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:424:1845":{"id":"0:7-21:424:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1845","glob":false}}},"0:26-21:6186:1864":{"id":"0:26-21:6186:1864","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6186:1864","glob":false}}},"2:12787:24707":{"id":"2:12787:24707","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:24665":{"id":"2:12730:24665","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:24708":{"id":"2:12746:24708","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12816:22906":{"id":"2:12816:22906","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:23411":{"id":"2:12836:23411","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:21006":{"id":"2:12722:21006","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11965:8285"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6755:1870":{"id":"0:34-21:6755:1870","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6755:1870","glob":false}}},"0:71-21:5165:1855":{"id":"0:71-21:5165:1855","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5165:1855","glob":false}}},"0:56:1153":{"id":"0:56:1153","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:749","0:59-2:12999:143","0:60-20:32:1843","0:62-21:4701:1854","0:63-25:9:1853","0:65-21:1293:1847","0:66-20:68:1848","0:67-20:97:1849","0:69-21:424:1845","0:70-21:589:1846","0:71-21:5165:1855","0:73-21:2760:1850","0:74-21:3780:1851","0:76-29:27:1857","0:77-29:17:1858","0:78-29:25:1859","0:79-29:20:1860","0:81-21:6204:1861","0:82-21:6169:1862","0:83-21:6199:1863","0:84-21:6186:1864"],"is_stripped":false}}},"2:12735:29585":{"id":"2:12735:29585","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1523","crate::ops::IndexMut":"2:3116:2645","str::slice_unchecked":"2:12734:29584"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:29586":{"id":"2:12744:29586","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44110:8295","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:30263":{"id":"5:5526:30263","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2413","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2413","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1858":{"id":"0:77-29:17:1858","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1858","glob":false}}},"2:12763:2441":{"id":"2:12763:2441","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12410:8281","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::split_whitespace":"2:12741:26814","str::rsplit":"2:12769:24700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43846:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:1857":{"id":"0:76-29:27:1857","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1857","glob":false}}},"2:12734:29584":{"id":"2:12734:29584","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1523","str::slice_mut_unchecked":"2:12735:29585","crate::ops::Index":"2:3112:2644"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:29603":{"id":"2:12838:29603","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4610:29603"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44145:8292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:30265":{"id":"5:5533:30265","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3780:1851":{"id":"0:74-21:3780:1851","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3780:1851","glob":false}}},"0:51-31:136:1909":{"id":"0:51-31:136:1909","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1909","glob":false}}},"0:66-20:68:1848":{"id":"0:66-20:68:1848","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1848","glob":false}}},"0:82-21:6169:1862":{"id":"0:82-21:6169:1862","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6169:1862","glob":false}}},"0:21-29:20:1860":{"id":"0:21-29:20:1860","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1860","glob":false}}},"0:25-21:6199:1863":{"id":"0:25-21:6199:1863","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6199:1863","glob":false}}},"2:12810:29597":{"id":"2:12810:29597","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12435:8276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12736:24689":{"id":"2:12736:24689","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12737:24690"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12742:26810":{"id":"2:12742:26810","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12741:26814"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44129:8283","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:23406":{"id":"2:12833:23406","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:23409":{"id":"5:5545:23409","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12837:23412"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6754:1871":{"id":"0:35-21:6754:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6754:1871","glob":false}}},"2:12715:20978":{"id":"2:12715:20978","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1138":{"id":"0:33-21:20:1138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1138","glob":false}}},"2:12799:29591":{"id":"2:12799:29591","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12410:8281","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::match_indices":"2:12796:29590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44014:8297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1750":{"id":"0:46:1750","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1906","`LocalPool`":"31:120:1912"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1906","0:49-31:68:1907","0:50-31:109:1908","0:51-31:136:1909","0:52-31:100:1910","0:53-31:102:1911","0:54-31:120:1912","0:55-31:125:1913"],"is_stripped":false}}},"2:12755:20260":{"id":"2:12755:20260","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41926:194","prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1843":{"id":"0:5-20:32:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1843","glob":false}}},"0:37-21:104:749":{"id":"0:37-21:104:749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:749","glob":false}}},"5:5527:8606":{"id":"5:5527:8606","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:1853":{"id":"0:15-25:9:1853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1853","glob":false}}},"0:59-2:12999:143":{"id":"0:59-2:12999:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12999:143","glob":false}}},"2:12738:27321":{"id":"2:12738:27321","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43816:8288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:30263","5:5527:8606","5:5530:30264","5:5533:30265","5:5541:30266","5:5542:30267","5:5543:2302","5:5544:23408","5:5545:23409"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12808:29595":{"id":"2:12808:29595","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:29594":{"id":"2:12806:29594","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:27322":{"id":"2:12745:27322","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44138:8282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:23412":{"id":"2:12837:23412","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12741:26814":{"id":"2:12741:26814","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12742:26810"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44120:8284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12793:29589":{"id":"2:12793:29589","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12410:8281","`DoubleEndedIterator`":"2:7780:124","prim@char":"1:12034:444","str::matches":"2:12790:2166"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44068:8299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:29604":{"id":"2:12841:29604","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4608:29604"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44163:8293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6753:1868":{"id":"0:31-21:6753:1868","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6753:1868","glob":false}}},"0:43-27:0:1874":{"id":"0:43-27:0:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1874","glob":false}}},"2:12802:29592":{"id":"2:12802:29592","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:24698":{"id":"2:12766:24698","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12226:8272","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12732:24666":{"id":"2:12732:24666","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10495:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:20261":{"id":"2:12759:20261","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41926:194","prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12804:29593":{"id":"2:12804:29593","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5206:1872":{"id":"0:41-21:5206:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5206:1872","glob":false}}},"2:12714:863":{"id":"2:12714:863","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:444"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:29582":{"id":"2:12719:29582","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12717:29581"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:24690":{"id":"2:12737:24690","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12736:24689"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1843":{"id":"0:60-20:32:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1843","glob":false}}},"0:29-21:6756:1867":{"id":"0:29-21:6756:1867","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6756:1867","glob":false}}},"2:12781:24704":{"id":"2:12781:24704","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:444","str::splitn":"2:12778:24702","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43968:8268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12784:24706":{"id":"2:12784:24706","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12825:29600":{"id":"2:12825:29600","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1850":{"id":"0:13-21:2760:1850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1850","glob":false}}},"2:12749:24709":{"id":"2:12749:24709","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6186:1864":{"id":"0:84-21:6186:1864","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6186:1864","glob":false}}},"0:48-31:65:1906":{"id":"0:48-31:65:1906","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1906","glob":false}}},"0:40-21:1293:1847":{"id":"0:40-21:1293:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1847","glob":false}}},"0:83-21:6199:1863":{"id":"0:83-21:6199:1863","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6199:1863","glob":false}}},"5:5543:2302":{"id":"5:5543:2302","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:25864":{"id":"2:12834:25864","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39873:25998","Self::is_ascii":"2:12833:23406"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39873:25998","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:589:1846":{"id":"0:8-21:589:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1846","glob":false}}},"2:12822:29599":{"id":"2:12822:29599","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:29588":{"id":"2:12775:29588","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12410:8281","str::split":"2:12763:2441","prim@char":"1:12034:444","str::split_terminator":"2:12772:29587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43914:8300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:589:1846":{"id":"0:70-21:589:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1846","glob":false}}},"0:69-21:424:1845":{"id":"0:69-21:424:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1845","glob":false}}},"0:81-21:6204:1861":{"id":"0:81-21:6204:1861","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6204:1861","glob":false}}},"0:23-21:6204:1861":{"id":"0:23-21:6204:1861","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6204:1861","glob":false}}},"0:27-20:131:1865":{"id":"0:27-20:131:1865","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1865","glob":false}}},"2:12819:24711":{"id":"2:12819:24711","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:444","self::pattern":"2:12410:8281"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41924:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12430:8278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1859":{"id":"0:20-29:25:1859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1859","glob":false}}},"5:5541:30266":{"id":"5:5541:30266","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7520:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7520:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1873":{"id":"0:42-21:57:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1873","glob":false}}},"0:19-29:17:1858":{"id":"0:19-29:17:1858","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1858","glob":false}}},"0:67-20:97:1849":{"id":"0:67-20:97:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1849","glob":false}}},"0:32-21:37:1869":{"id":"0:32-21:37:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1869","glob":false}}},"2:12772:29587":{"id":"2:12772:29587","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12410:8281","str::split":"2:12763:2441","prim@char":"1:12034:444","`DoubleEndedIterator`":"2:7780:124","str::rsplit_terminator":"2:12775:29588"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43896:8301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12415:8277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:749":{"id":"0:58-21:104:749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:749","glob":false}}},"0:16-21:5165:1855":{"id":"0:16-21:5165:1855","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5165:1855","glob":false}}},"2:12740:21016":{"id":"2:12740:21016","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43832:2758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12766:19422":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:2958:8627":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:46050:3065":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8494:2908":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:45926:3012":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10457:16110":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:37:1869":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:45836:3046":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:13516:33574":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"5:6847:8346":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:44406:8318":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6889:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42318:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:13217:3142":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"18:531:20276":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:97:1849":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"16:5963:15837":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:8921:2962":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:11063:16240":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2905:8619":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:40750:2331":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:7839:2726":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4584:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22107:3134":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:7436:2556":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4053:15106":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:298:31193":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:2284:14865":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:13668:2372":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:44441:8321":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:9873:2237":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:10812:8273":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7381:23255":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:2178:29142":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6687:15868":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:2946:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6100:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9608:16007":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:13875:33896":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"2:40341:8405":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9702:16009":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:7616:13139":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4893:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:2864:14917":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12847:19427":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43816:8288":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:11749:2346":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"2:41848:2798":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:44597:8787":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:39461:8206":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:10266:16086":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:13310:2623":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43846:2759":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:4313:2844":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10537:2775":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:1840:182":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"31:38:34152":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:40764:2332":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:7359:2245":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"27:371:2958":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:3493:24126":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:7251:2239":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:2709:2685":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:2696:14910":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"30:1574:20269":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:39625:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:614:20391":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:8181:15919":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4686:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:43589:28195":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:9301:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:10284:33896":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"5:3246:2618":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:44431:8320":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6148:3142":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:9:20288":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"1:3162:23127":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"30:1161:20378":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"5:6857:8347":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"21:8838:2278":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"21:14049:2598":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:2815:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"21:6832:33896":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:12633:2261":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"16:2832:14916":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11408:16013":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"27:124:20343":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"16:6456:15858":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:14804:112":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:8892:2961":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41128:2374":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6136:30507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12155:18909":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:43440:8249":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:7692:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:1874:2681":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:434:14867":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:22239:3139":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"11:1051:14806":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11372:21164":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7544:15894":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"26:43:34083":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:9103:15973":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:3232:14925":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:6380:20307":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"21:10003:70":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"1:8238:2785":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11309:22949":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14297:20216":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"21:5943:2371":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"1:12038:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:149:14870":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:48015:3083":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:14986:2455":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"20:143:20286":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"21:15037:2457":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"17:9712:32377":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14270:20214":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13056:19440":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:14567:2448":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"21:11817:2348":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:13039:2355":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"16:8050:15912":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2406:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"29:27:1857":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"21:11103:33896":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"21:12997:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"21:10875:2332":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"16:6268:31667":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"30:1052:20387":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:3062:2197":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1604:10294":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13724:20174":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:548:146":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3243:2776":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:12683:2364":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"16:5760:15831":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8158:2405":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:5982:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10833:24017":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:11036:20937":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46479:3032":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12935:19431":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"8:0:2053":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:44569:8772":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6676:29002":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:261:32394":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:919:2605":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"21:4267:2378":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"21:13019:2369":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"1:1041:2611":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11662:15972":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6658:9436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1514:10284":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:731:2605":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7708:15903":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10340:23555":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6893:31613":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10751:16155":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13149:19446":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5075:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:5258:1020":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"1:11292:20941":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8563:2911":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1419:2370":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:15377:33576":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:1967:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:3077:134":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5891:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:15:2169":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:6432:2949":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:7171:8587":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12124:18907":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8979:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43689:8248":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:8417:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:4897:2777":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:3112:2644":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2899:8616":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:9110:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:10604:16145":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:23161:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:10448:14802":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1126:29271":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:3677:29002":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:11562:32849":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"17:13967:20190":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:40682:8589":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:22333:3128":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4814:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7496:2688":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8191:2312":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4742:2824":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22062:3133":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"21:9494:33896":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"17:12725:19419":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6545:15864":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40525:2705":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:4082:2598":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7014:29068":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:6438:20305":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:9355:2312":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:9836:123":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:6386:15854":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:13083:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"21:7512:33896":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:32382:23469":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6868:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:48164:8171":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:3282:257":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:47017:3015":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:15495:32874":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"1:1055:2612":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:15309:2545":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:12052:1625":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"30:1582:34122":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"16:6792:15871":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10166:16075":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:7483:2687":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:8154:15917":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2057:2634":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10699:16176":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:11425:2342":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:30628:27018":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:1710:10303":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:10495:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11992:18898":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7828:15909":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10824:2405":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11548:16019":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:12951:2367":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"11:1010:2612":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:15182:2464":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"1:11172:24015":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:14537:20234":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2722:14911":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"21:12094:2254":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:13340:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"5:3808:2602":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5992:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22328:3130":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:10692:2759":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5743:15830":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"21:11252:2339":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"1:8797:2925":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:21209:28254":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"28:42:2599":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"6:4902:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6913:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:7116:2242":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:4444:8376":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"21:13828:2376":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:4030:2814":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9373:16003":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:15172:2463":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:7763:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:2889:2994":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:40632:2318":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:5588:15821":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12112:18906":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1664:10298":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"30:949:20267":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"11:2461:31199":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8012:2404":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2590:260":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:48259:8178":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:4497:15454":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44836:174":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13827:20179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"21:15507:32877":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"1:11621:14851":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:860:2599":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6691:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"30:1211:20376":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"2:13012:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:644:2341":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:7639:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:10625:33896":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:44138:8282":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8301:2794":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11935:18895":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:3502:2466":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:48137:3089":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7884:15911":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:11965:8285":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:6434:8584":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:21974:2730":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:3915:14992":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:4806:15547":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"21:8524:208":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"5:1481:2601":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:9243:2289":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"1:6646:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8282:2845":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:44369:8317":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:42683:8216":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8208:2758":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3734:2796":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:636:20392":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:357:2565":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4977:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:622:2572":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7041:31289":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40435:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"30:966:20267":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"21:14065:2393":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"30:1439:20249":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"17:12306:18920":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:22535:27804":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12005:2581":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4388:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:40664:2238":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:5982:2943":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"21:10494:2320":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"21:14839:33896":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"5:5144:2943":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2450:14900":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"30:1274:20267":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"14:215:14827":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:12057:1683":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:9844:8224":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:671:20266":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:10475:20986":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:507:2341":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12877:19428":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11762:16028":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:46133:3025":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10187:16076":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:548:9394":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7694:15902":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43790:8294":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:15303:20304":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"5:7509:8236":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:4641:15478":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2369:128":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:13994:20290":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"6:5829:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:0:1842":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:44577:8775":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:8020:2253":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"6:4854:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:10764:22941":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:21221:28256":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:7556:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:32400:8375":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"21:8264:2257":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"1:8992:20738":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2538:8424":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40317:8402":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:21416:2730":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2400:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:2334:2598":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46235:3000":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:5641:2959":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:2927:8620":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8233:2793":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12238:18915":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2212:8646":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:5969:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43996:8296":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13203:19450":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:44565:8770":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3083:136":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2826:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"21:104:749":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"1:8221:2458":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:3764:14937":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:40361:2570":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:5260:1877":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"17:14091:20203":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43189:27813":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5798:15832":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:10885:8267":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6718:2878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"30:1114:2370":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"21:9719:33896":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:21437:3002":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:910:2603":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:6072:20981":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:1075:16051":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8170:2407":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2872:2409":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4639:21034":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:7738:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:44581:8773":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:39508:8634":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:40928:2338":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6583:15866":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:80:20247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:3191:29337":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7462:15887":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:15193:2465":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"17:13452:20162":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9661:32386":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:11529:33469":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:5448:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:13528:32830":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"17:11282:16238":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8353:2826":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:21864:28260":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7102:15882":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:21976:3004":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6711:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:6945:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:22627:27067":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:12152:8781":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11518:2795":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2618:14907":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10548:16142":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10955:2921":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:48061:3034":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:44277:8314":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12577:19410":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11296:16248":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"21:7276:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:23316:2803":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"21:11810:2349":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"1:8536:2909":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44853:8194":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:1680:29002":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:40914:2336":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1970:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"30:1182:20380":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"21:7743:2262":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"17:12622:19412":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:638:2574":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11449:16014":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5696:15827":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9853:16035":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:41984:2370":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"31:120:1912":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"16:6346:15850":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:9035:15883":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:7705:8578":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:8927:15995":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"30:1098:20380":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"6:1632:10295":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4808:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:5973:2958":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:12016:2255":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"18:590:20388":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:14325:20219":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:15069:33896":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"16:5088:15613":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6844:15873":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:23192:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:7907:2596":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13423:20161":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"30:1010:20268":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1:12055:1624":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:7657:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2305:14893":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:9456:32376":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1591:10292":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:8199:2628":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:42676:8215":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43804:8291":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4385:2838":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"20:68:1848":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"11:796:2602":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:8203:2254":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"21:9632:2317":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:31162:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:5989:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:3780:1851":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:4248:8237":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"21:13659:2371":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:12045:684":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"21:14184:33896":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"16:2472:14901":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:12037:1136":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:7645:13143":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:4527:15460":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"7:0:1673":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3186:2616":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"21:9436:33896":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"17:9887:16037":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:9618:33896":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"1:5397:2918":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2316:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:6901:15875":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6189:31647":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:904:2602":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:11160:2927":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6798:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44050:8298":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:169:2234":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:13950:20189":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11743:16027":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:7253:2631":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12466:16203":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"10:0:2055":{"crate_id":10,"path":["adler"],"kind":"module"},"21:11852:33896":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"5:5334:29002":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:40904:2334":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13260:19454":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2894:8617":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4455:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:30792:27006":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"9:52:14703":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:6251:2958":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:7517:2305":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11720:16026":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14164:20211":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:207:8211":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2537:2730":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8960:2948":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:23223:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:42162:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7932:2455":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:402:20937":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"21:14138:2397":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:12712:19418":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:868:2610":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6332:15849":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5130:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:12481:8305":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:6263:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:7780:124":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:12478:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"17:8795:15991":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"27:499:20361":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"16:4949:15570":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3049:120":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11273:16247":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:504:2541":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:755:20271":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:13034:2266":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"30:1554:20267":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4233:2843":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"21:1089:2290":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:9488:28599":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4824:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12046:789":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5995:15839":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:1127:14808":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2321:14894":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:15367:2295":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"16:7722:15904":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8477:2907":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:7031:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:9218:33896":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:2968:29378":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:7903:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:11635:32968":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"18:609:20390":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:9072:2286":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"6:4710:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44454:8302":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:1546:10288":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"27:0:1874":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:44585:8774":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22648:26892":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:15269:2469":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:12216:2257":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"6:4488:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4082:104":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"9:486:14683":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4461:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:96:20248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:11166:33896":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"6:5033:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11152:16243":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:42956:27681":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6401:15855":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:4434:29053":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:17:2191":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"6:5146:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:946:2609":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9973:21110":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:5111:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"21:15030:31147":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"16:2907:14919":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11099:16215":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22146:3135":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13982:20192":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12686:19416":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"21:10064:2311":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"6:4401:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:11195:2338":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:44226:8311":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:22700:2802":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:3938:2808":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:48221:8176":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3743:2634":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5627:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13869:20182":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13488:20163":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10241:16054":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6047:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"21:14282:2377":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"6:5867:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"30:888:20377":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"2:46032:3059":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7284:2891":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41114:28202":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:6248:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:15134:2459":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:10331:33896":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"11:1862:2615":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:727:20270":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:39873:25998":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:8097:15914":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:5982:15838":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4966:2883":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:2822:2408":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:4399:8375":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44248:8312":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:1842:2370":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6968:15879":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:15086:2458":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"1:12032:395":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:582:15987":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"15:327:14847":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44294:8315":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:495:9388":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:1910:695":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:2364:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6545:2953":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:30616:8212":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:8072:15913":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:4105:8201":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11574:16020":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:2150:16124":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6934:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4989:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:10946:21111":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:45902:3052":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:6809:2238":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"21:2709:2347":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"6:1558:10289":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43678:8257":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:21827:3008":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:11112:16214":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"21:9934:2321":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"21:10688:2327":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:7530:15987":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43914:8300":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:11826:2247":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"11:101:31187":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40612:2316":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1019:29002":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:7467:26931":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:7647:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6753:15870":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:31190:8420":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13759:20159":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:14222:20213":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12137:18908":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5974:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10739:16199":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:14110:33896":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"17:14101:20204":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:10814:122":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:10774:8259":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:5417:2919":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:6199:1863":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:14033:2599":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"17:9781:16011":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:2139:2541":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:42042:2892":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8331:2878":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:45856:3011":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3287:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:3168:23921":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2297:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1718:10304":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:10097:22859":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2406:14898":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3602:2598":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4939:1086":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:8289:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:40353:8293":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:122:31196":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:11455:20996":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:5121:15622":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:10599:2328":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"6:4878:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43864:8266":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:589:1846":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:39521:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:9978:33896":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"17:9999:16046":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4523:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3982:2811":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8002:24059":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7436:15886":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"30:1394:20273":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46647:27021":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"21:4701:1854":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:43021:8214":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:10190:2341":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"17:9351:15970":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12294:18919":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:10740:2877":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46311:3060":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13923:20188":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:47095:3021":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10617:16146":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"21:10042:33896":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"6:4364:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"21:8595:2270":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"6:1528:10286":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:400:15985":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"30:1002:20267":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"2:41825:27086":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10037:16052":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:22413:27373":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"30:880:20376":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"21:7141:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:23068:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2210:8645":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"21:7873:2252":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:4205:8382":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12544:19408":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:8115:15915":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:7889:172":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3031:8205":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11640:16023":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10317:16091":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:596:9401":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8309:2847":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12514:19406":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4738:2807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:43896:8301":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:4533:20988":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"11:1541:14810":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"21:7428:33896":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"17:11338:16250":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:14249:33896":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"2:39686:8350":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"21:15225:2334":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:2587:2451":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13839:20180":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:11527:8254":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"21:4601:2282":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:14500:20231":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:1903:2682":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11174:16244":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11618:16022":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:785:2394":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4506:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:3065:14924":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"21:7311:2243":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"17:13633:20169":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11587:16021":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:15316:32462":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:10099:24039":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"27:485:2906":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"27:441:2963":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"21:8530:2266":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"24:15:20289":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"30:973:20268":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"21:14040:2370":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:7733:2580":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11217:20704":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:7600:20988":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:881:2620":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11382:16253":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"21:13108:2360":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"1:7644:2730":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5085:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:14127:20207":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:14058:2599":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3325:2764":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6929:15877":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13547:20164":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5673:15826":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2837:2557":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:14652:2450":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"16:6485:15860":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9922:16064":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3201:2773":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4847:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"30:911:20379":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"17:10629:16147":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"27:470:20358":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"1:8287:2846":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:8045:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:22575:2800":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4641:21036":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:42009:2891":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"21:10729:2324":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"21:6733:32872":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"16:7360:31708":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1682:10300":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1490:2603":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10341:16089":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46111:3019":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:423:31210":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:841:2608":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11508:16017":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"9:393:14685":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:1869:2616":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:6071:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12253:18916":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9148:2991":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"30:1140:20376":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"6:6804:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:11393:33896":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"1:1546:2602":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40515:2706":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9934:16058":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42061:2198":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"21:8460:2263":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:327:2250":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:12410:8281":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:678:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:46081:3013":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:22253:8645":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13915:20187":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"21:6415:180":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"6:4776:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:4172:2744":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:527:9391":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7292:2622":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"21:7801:2264":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"16:4462:15443":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:3830:14955":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:13751:33896":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"21:12859:2352":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:12889:19429":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:2494:2594":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:15480:32873":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"6:4800:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"31:65:1906":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"1:3165:23935":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3968:2810":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6818:15872":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:43728:8247":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10667:2598":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:6762:2237":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"2:21175:28250":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:22693:28660":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:538:20277":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:7879:133":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:7669:2554":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12659:19414":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4705:2848":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:40641:2319":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:3272:8635":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:1036:2613":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9476:2727":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:5941:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3312:28085":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:21153:8420":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:5827:2583":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:12191:8780":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3557:2394":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2355:2711":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:44772:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43760:8263":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44129:8283":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11478:2796":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:23130:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:44616:125":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12438:19403":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:894:2394":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8386:2887":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:923:2606":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:7408:2594":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:39647:2588":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:14317:20218":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"30:1261:20381":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"17:8849:15993":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43206:150":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6560:31622":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"21:8142:2255":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:10508:16111":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"28:55:2598":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"1:12050:784":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4698:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:14127:2396":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"16:3032:14922":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:10465:33896":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"21:7683:32879":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"30:1457:20263":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"6:5068:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"27:434:20362":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:41170:8576":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"25:9:1853":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"16:8195:15920":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"21:13683:2374":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:11451:33896":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"17:11394:131":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:1537:10287":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"21:10672:33896":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:40331:8404":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"30:1564:20268":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10384:16082":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:47205:3082":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:14628:33896":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:10210:8743":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:12209:18913":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:41137:8573":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11192:16023":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"31:100:1910":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"6:5885:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:43832:2758":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40725:8588":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10904:16161":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10647:16194":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5712:15828":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9986:16047":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:11906:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"2:12115:8779":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"12:0:2057":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:2970:29101":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4884:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"30:1482:20264":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"2:48155:8170":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:39422:8361":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"27:127:20344":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"6:574:9398":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:2085:2613":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2936:8626":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:4058:26631":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:46010:3053":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10323:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:15213:2467":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"1:1064:2613":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"31:109:1908":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"2:44100:2458":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5015:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13711:20173":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:1650:10297":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:2568:32865":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:42128:2599":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"14:160:14818":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8293:2837":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5009:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"27:140:20345":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"16:6467:15859":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:6594:2599":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:13793:33896":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"16:7128:15883":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11359:16252":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44762:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:6043:2347":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"21:14920:2454":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"17:12960:19433":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:30600:8609":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7269:31700":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:42972:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1450:2599":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:14336:20220":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1542:2394":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6222:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5866:15834":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"27:136:2958":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"11:822:2606":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:2469:29111":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:666:2370":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:41884:2790":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4603:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"21:13476:2361":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"1:2371:2716":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10576:16143":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:21192:28262":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10157:21165":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"21:11523:32970":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"5:1522:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:10591:2330":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"17:9004:15998":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13677:20171":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:2165:14802":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"21:10853:33896":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"17:14057:20199":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12811:19425":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:41861:2789":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"30:1451:8279":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"11:759:2600":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"21:15382:2297":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:4431:20292":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:7856:2728":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22726:2804":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2875:8202":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:8986:8277":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:40545:2729":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:13686:20172":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:10713:33896":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:9087:15819":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:9174:2288":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"17:13229:19452":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11614:14851":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:14082:2395":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"11:992:2611":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:2586:261":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:7331:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:41655:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:4070:26630":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9329:2758":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11972:18897":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:2948:8624":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12831:19426":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11952:18896":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13852:20181":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"20:27:2730":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:13114:19444":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:57:1873":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"21:927:2280":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"17:10662:16195":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:30594:8341":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8937:2965":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11163:16208":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"30:1203:20267":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"2:8873:2582":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:2978:29233":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:6468:2955":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1434:2598":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6741:10426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:14858:2453":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"17:13072:19441":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:2974:29232":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4613:15474":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3692:2599":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3282:2772":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:12430:8278":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:2043:2455":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:4325:8367":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13555:20165":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:5823:2237":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:48210:8175":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12016:22928":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"13:0:2051":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:21418:3001":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7660:15901":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12041:1609":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7541:23807":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:40289:8403":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10098:16044":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12599:19411":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:5755:2946":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7391:15885":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6927:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:42697:8224":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:26163:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2913:20979":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2339:14895":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"26:0:2201":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"2:12370:2912":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9049:20884":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"21:15353:33896":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"1:11818:20935":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40274:2570":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"27:187:20349":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"16:4835:15552":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"21:15294:2472":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:43436:27779":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13891:20184":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"30:958:20385":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"0:46:1750":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:4938:844":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:62:9015":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5859:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7554:15895":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6764:10411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5310:123":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44110:8295":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:11870:2252":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:22197:27332":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:8959:33896":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:15161:2462":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"6:4440:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11138:16212":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:2967:8196":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:7833:2411":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"21:9387:33896":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"21:10948:2334":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"1:5570:2922":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:8205:15921":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:781:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7862:15910":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:6324:179":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"28:217:2611":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"21:14024:2370":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:21852:2998":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:13086:2269":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11227:16245":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:7361:2599":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:2810:14915":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4473:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:309:20300":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:32407:8683":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"21:6227:1876":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"17:10293:16008":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:7701:8579":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:44573:8771":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7620:8342":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:7849:2724":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:5378:2314":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:32393:28020":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:4755:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"21:331:2545":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"17:13189:19449":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4908:2873":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:9541:33896":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:13898:20185":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:2933:14920":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13245:19453":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:569:9397":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:2580:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:2149:29110":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:7844:2727":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:2487:31202":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8851:2370":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11983:23136":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:42279:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:14014:20195":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:563:9396":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10580:2551":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:9831:114":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:3220:2615":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:7633:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44865:8192":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1310:2614":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:415:178":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10521:16141":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:9838:8216":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14002:20194":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9306:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3179:2370":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4955:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"3:0:469":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2200:626":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:14688:33896":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"6:507:9390":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"0:0:1940":{"crate_id":0,"path":["futures"],"kind":"module"},"5:7520:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4789:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:39:2212":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"2:2970:8629":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:8239:15922":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:44154:2570":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5242:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4676:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:7457:2373":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:9848:8221":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11216:16211":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:2381:2721":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4040:2815":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6696:14837":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:48312:8181":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"30:1064:20392":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"1:3839:2797":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7474:15888":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:14796:2393":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"2:22284:2730":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:6552:32980":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"30:1475:20271":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"17:13086:19442":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:8687:15988":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"24:12:20287":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"17:14111:20205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:9749:2319":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:12049:788":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:11951:8733":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43218:2906":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:629:29269":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:40572:2642":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9960:16049":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:47141:3027":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:1562:14811":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:48236:8177":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:22170:2730":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"9:177:14789":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:6898:20947":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:15465:32876":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:10078:2661":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:15251:33896":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"2:43668:8256":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:296:34064":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"1:6612:2957":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:22519:27010":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:574:2341":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:10305:2238":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:5632:2744":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:261:29002":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1501:10282":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:703:2604":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7365:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:11938:2253":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"6:1913:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12048:787":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:4859:28078":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"21:8228:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:1110:29092":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"21:15434:32875":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:12499:2353":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:11911:18894":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:12035:1644":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43750:8265":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5017:15590":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9197:22932":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:660:20265":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40552:8246":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"21:13392:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"2:2583:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44263:8313":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:915:2604":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9165:24040":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"30:1511:34150":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"1:837:2370":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:10643:2370":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:41712:2788":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"11:324:31204":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"21:13764:2281":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:7755:2671":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:14523:20233":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:41143:2371":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:2351:2599":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:6159:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5052:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10198:16102":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"31:125:1913":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"1:1535:2370":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3073:2410":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6898:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"21:10353:2333":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:46549:3088":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12051:1628":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"14:40:18895":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:13255:145":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"27:146:223":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:2827:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:42201:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7568:15896":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5104:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40388:8399":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4578:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4595:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:47171:3033":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"20:92:2730":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"2:46701:26923":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10249:2931":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:7622:13140":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:12435:8276":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13299:19456":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:817:2603":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:1525:14809":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4841:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:680:2598":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41975:167":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:781:2269":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"1:3990:2812":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:12053:1626":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:2969:14921":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12087:18904":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11236:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"21:8081:2259":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"6:5928:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4627:2813":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:389:31188":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4161:2840":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4744:2827":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5830:15833":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13907:20186":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:23761:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:1145:2614":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42926:8212":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:21365:3006":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7792:15908":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:588:9400":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:9565:16006":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4932:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1521:10285":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:7270:2621":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:2012:16090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8227:2794":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8327:2876":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:1855:2602":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:10113:16072":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:557:2548":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9481:21000":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:4702:2875":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8138:2373":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4428:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3203:2774":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9015:24056":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:7924:2767":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47953:3062":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12984:19435":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:30333:2799":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:13415:2365":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:23099:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:3280:2771":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11146:2926":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9791:32395":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:0:1515":{"crate_id":1,"path":["std"],"kind":"module"},"5:3576:176":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:15219:2468":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:41741:27683":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:7534:8323":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13136:19445":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:12442:2356":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"26:37:34082":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"21:7489:158":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:9027:23252":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:3080:135":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2369:2715":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:42916:27688":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"9:330:14740":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"31:102:1911":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"15:0:2059":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5502:2921":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10469:16140":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"30:996:20267":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"21:10974:33896":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"2:7287:8569":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11328:16249":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:8387:2258":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"17:10930:16160":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10638:16148":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:40452:26931":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:599:20389":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:23:2210":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"6:483:9386":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11075:16241":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6017:15840":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:687:113":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:6569:32878":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"6:7371:14450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7006:15880":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6813:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13011:19437":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3293:8363":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:3996:2813":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"19:0:1116":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2823:8203":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5140:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12040:1523":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:44593:8769":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:2670:14909":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:7751:2412":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"21:4478:20294":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"6:1703:2834":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6226:15844":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:2479:31201":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2548:14904":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12912:19430":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40673:2239":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:10769:2724":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9278:16002":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10917:16159":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6156:15842":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:13061:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:13280:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:4496:2379":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"6:489:9387":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:8996:2282":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"5:1531:2633":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4616:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:22199:8645":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3445:2406":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:7066:2240":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:41678:2786":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12474:16201":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7343:9346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12025:18900":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9946:16054":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12281:18918":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:12641:114":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5117:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:47355:3016":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2877:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:13206:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:8988:2281":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:14077:20201":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:6813:2997":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:9332:2292":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:15552:33578":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:15519:32869":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"21:12659:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"21:10103:33896":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"21:12810:2351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:9846:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:699:20269":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2574:14905":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:4557:15466":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6041:15841":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:7679:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"21:13809:2375":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"16:2428:14899":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2987:8633":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:504:15986":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7388:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"30:142:20383":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"16:5574:15820":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5921:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13793:20176":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10534:2773":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:1820:2667":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:2788:14914":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"21:7977:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4610:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:11788:33896":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"1:533:2546":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:7235:27126":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6531:15863":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:9806:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"21:7086:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:44823:3141":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:868:2600":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2601:21003":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:475:9385":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:43236:27770":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:42137:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:7405:2247":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"5:3589:2370":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3299:8362":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9276:2667":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:3600:14928":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40301:26896":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:13238:2359":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"28:30:20364":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:42069:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:42999:131":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:9814:2237":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:22299:3129":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:5797:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:7137:22842":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:11935:8731":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:48351:8182":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1734:10305":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:43649:2339":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8803:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2668:131":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:10789:16200":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43715:8246":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:11281:33896":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"21:15450:32871":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"21:14599:2449":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:46281:3054":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"21:20:1138":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:1763:27689":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44068:8299":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:14778:33896":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"21:4037:2269":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"21:14004:2598":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"5:5867:2394":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11846:16260":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41903:2791":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7262:2599":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5648:15824":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:8582:33896":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"27:149:20347":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:9453:2337":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"21:6204:1861":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"6:1691:10301":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:6542:2952":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:10759:33896":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:8764:33896":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:10055:150":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:940:2608":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2880:8596":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:357:31190":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:7610:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"13:110:31260":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41162:2372":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:1772:8655":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:14149:2398":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:2919:2995":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5403:15818":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:5537:2744":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:8979:15997":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7718:2579":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:8660:15968":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13163:19447":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"22:0:2199":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:22602:27687":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:6169:1862":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"16:4774:15539":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:10827:2331":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:2974:8630":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:8595:15971":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8826:15992":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:5419:15819":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4719:15532":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:256:32392":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:45880:3047":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9173:15999":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:8350:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:12971:2368":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"17:9763:32390":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"0:56:1153":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"5:7316:2599":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4471:2848":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"29:0:1856":{"crate_id":29,"path":["futures_io"],"kind":"module"},"1:11384:22858":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:8874:2894":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:6520:29002":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12532:19407":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:8205:8577":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:12899:2366":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:12033:1020":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:8634:222":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"6:4529:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44163:8293":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4566:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10431:16138":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:5868:2744":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"21:14711:2452":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"5:3150:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11262:16237":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:3441:16163":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:14084:20202":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12054:1627":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:15022:2397":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"5:1472:2600":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:0:868":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12008:18899":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10371:16083":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"29:20:1860":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:22975:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4571:2866":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10127:16073":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"21:14320:33896":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"18:582:8420":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9913:16039":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8007:23254":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10926:8270":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13287:19455":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"30:1533:20265":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6120:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:1749:8656":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9022:23269":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12044:18901":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:40650:26648":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6243:15845":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41152:8574":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12555:19409":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:12119:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:4628:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40468:2690":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5661:15825":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:8875:2893":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:5322:15799":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"11:1850:2394":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10589:16144":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:2317:2370":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:11236:16246":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:21207:28259":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13803:20177":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11368:16216":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14461:20228":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"11:483:147":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40395:8400":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:15413:32870":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"17:8766:15990":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5782:2947":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10367:16096":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:22:722":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:46188:3086":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:2231:29102":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7523:15892":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:5245:20302":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"17:11789:16258":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:2260:2612":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:4153:2839":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:9071:15818":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6086:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:450:14684":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:5612:15822":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7513:15891":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:11130:2244":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:11053:20939":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"30:1428:20248":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"1:11315:2932":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41924:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:6003:8989":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"21:11038:33896":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:1651:8557":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10013:16008":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:48289:8180":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5955:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6059:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:11233:33896":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"17:11352:16251":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"21:8817:33896":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:1407:149":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10085:16045":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4169:2841":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:652:2341":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1511:2605":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44641:2996":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13740:20175":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11816:16259":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:48175:8172":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:9187:22910":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"11:2394:2602":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:10963:16157":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12185:18911":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:40603:8582":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7902:2597":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:30560:2630":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:8325:2256":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:10968:8269":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"30:924:20380":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"16:2881:14918":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10535:16112":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"21:13589:32841":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"21:2774:32981":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"foreign_type"},"24:190:2236":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"1:5573:2924":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:12885:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"2:2825:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"30:1467:34138":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"6:6012:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6261:15846":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:9578:33896":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"17:13817:20178":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5897:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:32:1843":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:21424:3005":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:119:9069":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:39679:8636":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:42052:8717":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8147:1853":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2359:14896":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:9105:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:5384:15817":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:5053:24030":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:1961:8208":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:5710:2320":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6318:15848":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:14069:20200":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:4202:2744":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:15324:2296":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:724:147":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:555:9395":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4375:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8454:2906":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4998:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5044:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"30:1126:20267":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"11:2286:2613":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:7645:2567":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14157:20210":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6569:15865":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46427:3020":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11125:16213":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4947:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"21:12703:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1281:2613":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"21:7448:2248":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"16:6279:15847":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"30:1503:20272":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"4:0:2052":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:43640:8255":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6107:2744":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4860:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:4585:15470":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:22714:2801":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10981:16008":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:9129:2734":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46525:3087":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"11:1846:2599":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12268:18917":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:9404:2313":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"1:2623:2760":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"7:31:14655":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"28:76:34112":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:1759:2650":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"30:1042:20391":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"5:1500:2604":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:3737:2795":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1568:2618":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:1092:14807":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:4:1099":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:14213:2399":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"16:2744:14912":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:165:14819":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:2368:2394":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"21:12744:32978":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"2:44780:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:850:2598":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46151:3031":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:6445:2403":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:1507:10283":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40482:2692":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"21:10125:2341":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"16:6499:15861":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"9:507:14687":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:4401:2744":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6781:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2915:2993":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14347:20221":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:42981:8212":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1496:10281":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13990:20193":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:14119:20206":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:14379:20223":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"27:181:20348":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"13:226:31261":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:5433:2920":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:2763:913":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"foreign_type"},"30:1240:20379":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"16:7651:15900":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:40440:2691":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:10276:28051":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:12000:23256":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"21:9893:33896":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:3327:8204":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10794:2728":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:9658:33896":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:40280:8365":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:0:2061":{"crate_id":17,"path":["object"],"kind":"module"},"2:2657:119":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:9117:2287":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"17:11711:16025":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14043:20198":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12039:1490":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13668:20170":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1761:2651":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40715:2328":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2766:14913":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:40581:2312":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:9324:2291":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"17:9138:15974":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"30:1037:20390":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"11:427:31211":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9070:21020":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:825:2619":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:4371:29053":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43228:27771":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2923:8621":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:2698:29108":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:8167:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:363:2566":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6721:15869":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14174:20212":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:44420:8319":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:10024:16009":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10495:16113":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9897:16038":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:39700:8358":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48184:8173":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:12319:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:47891:3028":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:533:9392":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:1293:1847":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:46781:3049":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"21:12169:2240":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"16:7015:15881":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4862:15555":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:5727:15829":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:44120:8284":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7668:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:9532:32385":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2210:2438":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:39561:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4914:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:5816:31419":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"25:0:1852":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:21535:2730":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4666:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4052:2818":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42357:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:681:20267":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6228:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:335:32863":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"1:8873:2963":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6960:15878":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6114:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:46170:3080":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:7525:2261":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"6:6128:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:43658:8258":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:2303:14812":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:10686:16154":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:276:2413":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6879:15874":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22551:27024":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5634:15823":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7739:2670":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:929:2607":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"30:1493:34123":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"2:6440:28662":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:4994:2744":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:4855:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"21:6186:1864":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:48274:8179":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11887:18893":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:48195:8174":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:15143:2460":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"1:8829:2927":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12034:444":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:11486:8261":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11047:20974":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:14309:20217":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:8518:2265":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:6299:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11001:16164":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:7598:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"21:7006:2241":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"21:13706:33896":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"1:1744:649":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5084:24030":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12946:19432":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:82:2192":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"17:14479:20230":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:13144:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:646:2576":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6513:15862":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:40702:8583":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5910:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11024:16162":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:10970:22915":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:7054:31649":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:8294:131":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:7065:8580":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:23006:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"31:136:1909":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"30:1544:20266":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:10996:2336":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:4389:8374":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:44815:3140":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10411:16103":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8201:2334":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:11199:2734":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:2978:8631":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"30:901:20378":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"16:3655:14929":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:521:20272":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:491:32413":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:3728:2455":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43197:2739":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"21:6753:1868":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"5:898:2370":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7664:2552":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:7651:13144":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:12056:838":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:42944:2315":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4968:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:32386:15922":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:4316:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:4800:2829":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:8196:2624":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:45948:3018":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14515:20232":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:3232:16158":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:2178:16084":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:6989:29064":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9868:16036":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3396:2744":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7534:15893":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3484:2470":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"21:6363:20308":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:12241:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:10562:16108":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7318:15884":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:6542:32982":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"21:9338:2293":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"16:6361:15852":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2504:14902":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12672:19415":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44589:8768":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11342:21193":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"30:1518:20276":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"1:7690:2551":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"20:131:1865":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"2:43770:8264":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:5250:20301":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:44014:8297":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:10647:2326":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"5:6828:8345":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:11304:2340":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"1:2203:2707":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8552:2910":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9095:180":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:13901:2377":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"1:7866:2725":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:7324:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9208:16000":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:0:1844":{"crate_id":21,"path":["futures_util"],"kind":"module"},"6:6700:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11536:16018":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13275:16025":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"21:11500:33896":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"17:11688:16024":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"21:11330:33896":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"1:11595:8188":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12779:19423":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:5905:15835":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:5206:1872":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"5:3212:2617":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"22:7:1866":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:8907:2279":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"16:4417:15422":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6682:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:13165:2358":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:12173:18910":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:6164:20977":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2964:8628":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:0:2060":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:123:9070":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10140:16074":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"21:11690:33896":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:9850:8222":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4480:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12791:19424":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:14449:20227":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5123:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:1644:625":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46333:3066":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3209:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:7208:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:6915:15876":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:10735:8272":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:3797:14946":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13612:20168":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6742:14836":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:12434:2357":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:12699:19417":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1576:10291":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:8556:2268":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:42515:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11390:16012":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:21190:28264":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6204:15843":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:13677:2373":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:14510:2403":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"16:4745:15534":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:9100:33896":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"11:1687:149":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:21546:3002":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9052:15969":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:9633:8213":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:2596:14906":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10950:16156":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:6755:1870":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"2:39581:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:1558:2744":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"31:68:1907":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:22587:26889":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4823:2823":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:2760:1850":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:9788:2470":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:515:20275":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4351:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8815:2926":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:11660:2344":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"5:35:2646":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"28:46:2370":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"1:1557:2616":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"21:14272:240":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"24:135:2235":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:40693:2241":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:21544:3003":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:11069:2335":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:4870:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:23037:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:14025:20196":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11180:8787":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1784:2602":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"30:1148:20377":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"16:536:31308":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4922:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4493:2849":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:11453:8260":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9575:32375":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:2519:2449":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:9515:2314":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:4473:2555":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7621:15899":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11474:16015":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12197:18912":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:4986:15583":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12226:18914":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:9100:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:1876:2617":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4889:15558":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:39537:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:3225:29330":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:8543:2267":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"1:8867:2599":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:22466:27374":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12646:19413":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:10437:2241":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:43421:8760":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"21:12294:2256":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:42476:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:8243:28602":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"21:11352:2329":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"17:11245:16022":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:4010:2394":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:10047:146":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12047:786":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7582:15897":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"29:25:1859":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:10485:2730":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:7742:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:4948:2400":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:4174:8381":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:2238:2611":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:5130:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10090:2736":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8546:2370":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:11357:21015":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:6428:2374":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:8714:15989":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:952:2610":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:42240:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4535:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:23254:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"24:0:1941":{"crate_id":24,"path":["futures_task"],"kind":"module"},"14:31:14818":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:15285:2471":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"21:7379:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12405:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"16:5049:15598":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:881:2601":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13576:20167":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7604:2602":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12453:19404":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:8896:15994":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"26:53:34084":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:13216:19451":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"21:13502:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"1:1551:2615":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:10308:27206":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:21822:2730":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:46600:26924":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7581:20992":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7545:8324":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:45980:3048":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:23285:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:14146:20209":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12971:19434":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"28:60:2394":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"30:1253:20380":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"18:113:20249":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:736:20263":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:14013:20291":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"2:40774:8585":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:48099:3068":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:6474:2394":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"14:7:14818":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44145:8292":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"27:368:223":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:10808:33896":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:13974:20191":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12374:19401":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8974:23271":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"21:10215:33896":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:4131:22849":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:6948:2246":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"18:690:20268":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12738:19420":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:3049:14923":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10673:16196":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8214:2759":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:3461:14927":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10842:24010":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:40369:8292":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2294:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"18:707:8279":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14421:20225":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10398:16136":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:14389:33896":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"17:12485:16202":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:6341:3143":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7492:15889":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:4182:2842":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9446:16004":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:14475:33896":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:11963:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:1073:2614":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2948:131":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"21:15152:2461":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:44878:28577":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4830:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12998:19436":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:6196:23264":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:641:2575":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:12784:31665":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"2:43741:8262":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4556:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10421:16137":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"21:7178:2244":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"21:338:2251":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"17:13568:20166":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:5640:8345":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10772:16175":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:14734:33896":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"16:7768:15906":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"14:187:14826":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:46381:3014":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:21:1138":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"9:0:2054":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:564:20278":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14283:20215":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:2074:2612":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:42435:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:6968:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:22185:3138":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"30:1027:20389":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"17:11873:16261":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8843:2928":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:40402:8401":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12099:18905":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:6756:1867":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:12424:8279":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13041:19439":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:10917:33896":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"30:1169:20379":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"16:6352:15851":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8404:2905":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:40734:2329":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46935:3067":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:719:20262":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"31:0:1905":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"16:4921:15566":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"21:8736:2276":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"17:11202:16209":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"21:8781:2277":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"21:14545:33896":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"2:39603:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:9824:16034":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"21:12928:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"2:2832:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:1570:10290":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:46905:3061":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:4320:8366":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:785:2327":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["core"],"kind":"module"},"6:6107:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:3888:14989":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"15:306:14843":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:7916:23924":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2931:8622":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:9785:33896":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"30:0:2062":{"crate_id":30,"path":["memchr"],"kind":"module"},"18:624:20387":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2380:14897":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8275:2789":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6169:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10540:2771":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:9592:2316":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"28:0:2202":{"crate_id":28,"path":["slab"],"kind":"module"},"23:0:2200":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"17:10441:16139":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12063:18902":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:6248:8590":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22610:27075":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:2209:16109":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4516:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:7604:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:8167:15918":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:42690:8223":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:15276:2470":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:6270:2347":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"17:14470:20229":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7282:2394":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"30:936:20381":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"21:5985:1853":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:14964:33896":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"2:12226:8272":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:12369:2260":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"9:357:14700":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46503:3081":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5023:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:481:20273":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"14:221:14828":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:1681:1172":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3116:2645":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:10524:33896":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:3241:2775":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9391:132":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11049:16228":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:47813:3056":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:13954:32479":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:14423:2402":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"9:426:14686":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9243:16001":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44561:8767":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11491:16016":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"21:8106:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:10248:2322":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:13934:33896":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"1:12044:682":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:44653:8788":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6600:15867":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8859:2966":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:13650:2370":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"17:9973:16048":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10942:2671":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:9493:27781":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"21:4345:33425":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:1797:2661":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:6598:2956":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:2058:2611":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:1296:2612":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7420:2595":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:9555:2315":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"1:3368:2371":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10432:2925":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"28:208:2613":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"11:2473:31197":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:2644:14908":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:1539:2599":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10782:21168":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"21:13363:2363":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"6:4434:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:8281:15923":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"7:78:14662":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:47561:3050":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2427:1877":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2884:2992":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:7067:31397":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14402:20224":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:40421:8397":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5004:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:12842:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:46678:27030":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:829:2607":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8985:2545":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:580:9399":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:21363:2730":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"21:15204:2466":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:41992:2598":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"21:12041:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:14356:20222":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:1822:2668":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:3565:16181":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:10940:8268":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:32494:8597":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"30:1018:20388":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"16:7342:31690":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4764:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:32346:2929":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"21:5669:2373":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"21:10583:2323":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"6:6943:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5634:2958":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4044:2816":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4724:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1596:10293":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:0:2056":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14135:20208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4543:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6961:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:4242:2370":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:1072:31209":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:1882:2618":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"10:44:14794":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"21:11474:2343":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:4500:8378":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7028:20944":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:8485:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:12175:8778":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4647:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"30:1404:32413":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"6:6819:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7503:15890":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4908:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5152:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:9680:2318":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"21:13719:208":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:46859:3055":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:9469:132":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"21:13311:2362":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"5:4356:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:4040:29002":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:3338:2602":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:8954:15996":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9618:32391":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:7702:14639":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:766:20264":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6415:15856":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7736:15905":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:3427:2459":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:8134:15916":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:46457:3026":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:12192:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"1:2201:132":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"30:1219:20377":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"16:6425:15857":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:482:20990":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:12415:8277":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6376:15853":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:9842:8223":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6944:31599":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:41695:2787":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6666:10241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"30:1084:20378":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"21:6396:20306":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:3364:8207":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:0:2062":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1635:31184":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10215:16088":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:542:9393":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"30:1072:20376":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"11:693:2599":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2206:2433":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"27:72:20359":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:3932:2809":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"30:1418:20247":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"2:40622:2317":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:11539:2797":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10759:21156":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"21:12604:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"1:10988:2928":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:1563:2617":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5435:31617":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"21:6754:1871":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"21:7572:32879":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"5:7332:29084":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:12538:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:11390:22846":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:4453:8377":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"21:8882:33896":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:4917:2874":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:2353:2710":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:9489:32383":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"30:1190:20381":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"1:12058:1231":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:6920:33896":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:13102:19443":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:42000:2599":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42112:2370":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40594:8581":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9651:16008":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:43822:8287":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:7453:2689":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:14662:2451":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"17:13779:16053":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7090:31621":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:4677:8391":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"30:1526:20274":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"17:11317:16239":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:5363:15816":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:10362:2239":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"6:4783:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6083:14864":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:1382:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7896:122":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:14747:2312":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"17:10060:16050":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7302:29106":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:10847:8266":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44474:8303":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:654:9448":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:5748:2945":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"27:453:2965":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"5:1265:2611":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:4838:413":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:7947:2260":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"1:5383:2917":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11307:16025":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1639:10296":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:1146:29094":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:40376:8398":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:2982:8632":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:14340:2401":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:2555:33426":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"14:0:2058":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4746:2828":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:15014:2456":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"11:860:2609":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:42554:2944":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:7353:2599":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12497:19405":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3672:2792":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1674:10299":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5939:15836":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13175:19448":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"21:13454:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"21:9295:33896":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:12423:19402":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:10778:2325":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"6:4496:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7782:15907":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:5382:2276":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10715:16197":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:21163:28250":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"21:14899:33896":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"16:7597:31444":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13694:20160":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:1697:10302":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:772:2601":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:43968:8268":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:10293:21003":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"15:394:14854":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4637:21032":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"30:980:146":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"15:288:14842":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:4344:15373":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:6900:2237":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"11:344:31206":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:10228:16087":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"10:36:31183":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"21:424:1845":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:6837:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:42396:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:12999:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:2911:8618":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"9:237:2906":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:3986:2744":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:2663:2452":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6079:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2526:14903":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:47703:3022":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:501:9389":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4449:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4745:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10095:2738":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:10954:8271":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:8621:33896":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:13725:2270":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:3512:2753":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44342:8316":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"14:202:8322":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:43181:2737":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13877:20183":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14435:20226":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:1184:16059":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:9153:33896":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:14034:20197":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12751:19421":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:12794:32971":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"16:7613:15898":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:2251:29140":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"27:154:2964":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"11:2467:27772":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10727:16198":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"30:144:20384":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"16:3315:14926":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"21:7474:33896":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"1:10804:133":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:9522:16005":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:7441:2249":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"17:11087:16242":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:15118:33896":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"21:10387:33896":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:5165:1855":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"21:12568:2354":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"21:7622:2261":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:9753:16010":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22664:27032":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8905:2964":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:13207:33896":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:30686:27020":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:7826:33896":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"29:17:1858":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"27:11:34085":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"30:1232:20378":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"1:6985:23806":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:9840:8215":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13025:19438":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10279:16085":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:6845:2241":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:12075:18903":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"27:491:20360":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"17:10479:16135":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:41121:8571":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43950:8270":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6359:179":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:2953:8625":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:42120:2598":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4549:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:15371:2294":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:588:2568":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"21:14076:2394":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:2943:8623":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:11607:24074":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}