{"root":"0:0:1966","crate_version":"0.3.30","includes_private":false,"index":{"2:12994:24758":{"id":"2:12994:24758","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:35460"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:882":{"id":"2:12865:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:29905":{"id":"2:12985:29905","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:2941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:2941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:22372":{"id":"2:12987:22372","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1937":{"id":"0:53-31:102:1937","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1937","glob":false}}},"0:60-20:32:1869":{"id":"0:60-20:32:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1869","glob":false}}},"5:5559:30596":{"id":"5:5559:30596","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:22376":{"id":"2:12989:22376","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:1886":{"id":"0:21-29:20:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1886","glob":false}}},"0:14-21:3786:1877":{"id":"0:14-21:3786:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:1877","glob":false}}},"2:12973:25009":{"id":"2:12973:25009","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:29884":{"id":"2:12868:29884","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:882","2:12866:24503","2:12867:29883","2:12868:29884","2:12870:29885","2:12873:21006","2:12874:29886","2:12875:339","2:12876:24967","2:12877:24963","2:12879:24964","2:12881:24965","2:12883:24966","2:12885:29887","2:12886:29888","2:12887:24989","2:12888:24990","2:12889:24993","2:12890:24994","2:12892:27119","2:12893:27038","2:12894:20892","2:12895:27168","2:12896:27164","2:12897:2459","2:12898:29889","2:12899:27120","2:12900:25006","2:12903:25007","2:12906:25008","2:12909:20550","2:12913:20551","2:12917:2468","2:12920:24996","2:12923:24998","2:12926:29890","2:12929:29891","2:12932:25000","2:12935:25002","2:12938:25004","2:12941:25005","2:12944:2191","2:12947:29892","2:12950:29893","2:12953:29894","2:12956:29895","2:12958:29896","2:12960:29897","2:12962:29898","2:12963:29899","2:12964:29900","2:12967:29901","2:12970:21088","2:12973:25009","2:12976:29902","2:12979:29903","2:12982:29904","2:12985:29905","2:12987:22372","2:12988:24753","2:12989:22376","2:12990:22377","2:12991:22378","2:12992:24756","2:12993:24757","2:12994:24758","2:12995:29906","2:12997:2596","2:12998:29907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12903:25007":{"id":"2:12903:25007","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:24967":{"id":"2:12876:24967","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:1877":{"id":"0:74-21:3786:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:1877","glob":false}}},"0:69-21:422:1871":{"id":"0:69-21:422:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:1871","glob":false}}},"0:71-21:5171:1881":{"id":"0:71-21:5171:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:1881","glob":false}}},"0:18-29:27:1883":{"id":"0:18-29:27:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1883","glob":false}}},"2:12979:29903":{"id":"2:12979:29903","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:1889":{"id":"0:83-21:6212:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:1889","glob":false}}},"2:12963:29899":{"id":"2:12963:29899","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:29894":{"id":"2:12953:29894","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:8310","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::match_indices":"2:12950:29893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44407:8326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:24990":{"id":"2:12888:24990","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:24989","str::split_at_mut_checked":"2:12890:24994"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4707:1880":{"id":"0:62-21:4707:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:1880","glob":false}}},"2:12866:24503":{"id":"2:12866:24503","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:29901":{"id":"2:12967:29901","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6769:1896":{"id":"0:34-21:6769:1896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:1896","glob":false}}},"0:0:1966":{"id":"0:0:1966","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:1903","crate::executor":"0:46:1776","crate::stream":"21:1291:1873","crate::channel":"27:0:1900","crate::future":"21:104:766","crate::sink":"21:4707:1880"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1776","0:56:1180","0:4-2:45148:147","0:5-20:32:1869","0:7-21:422:1871","0:8-21:587:1872","0:10-20:68:1874","0:11-20:97:1875","0:13-21:2766:1876","0:14-21:3786:1877","0:15-25:9:1879","0:16-21:5171:1881","0:18-29:27:1883","0:19-29:17:1884","0:20-29:25:1885","0:21-29:20:1886","0:23-21:6217:1887","0:24-21:6182:1888","0:25-21:6212:1889","0:26-21:6199:1890","0:27-20:131:1891","0:28-22:7:1892","0:29-21:6770:1893","0:31-21:6767:1894","0:32-21:37:1895","0:33-21:20:1164","0:34-21:6769:1896","0:35-21:6768:1897","0:37-21:104:766","0:38-21:5264:1044","0:39-21:4707:1880","0:40-21:1291:1873","0:41-21:5212:1898","0:42-21:57:1899","0:43-27:0:1900","0:44-21:6240:1902","0:45-21:5266:1903"],"is_stripped":false}}},"2:12950:29893":{"id":"2:12950:29893","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:8310","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatch_indices":"2:12953:29894"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44389:8325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:21088":{"id":"2:12970:21088","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:30598":{"id":"5:5570:30598","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:339":{"id":"2:12875:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:24967","`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1885":{"id":"0:20-29:25:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1885","glob":false}}},"2:12982:29904":{"id":"2:12982:29904","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1180":{"id":"0:56:1180","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:766","0:59-2:45148:147","0:60-20:32:1869","0:62-21:4707:1880","0:63-25:9:1879","0:65-21:1291:1873","0:66-20:68:1874","0:67-20:97:1875","0:69-21:422:1871","0:70-21:587:1872","0:71-21:5171:1881","0:73-21:2766:1876","0:74-21:3786:1877","0:76-29:27:1883","0:77-29:17:1884","0:78-29:25:1885","0:79-29:20:1886","0:81-21:6217:1887","0:82-21:6182:1888","0:83-21:6212:1889","0:84-21:6199:1890"],"is_stripped":false}}},"5:5573:22374":{"id":"5:5573:22374","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:22377"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:25005":{"id":"2:12941:25005","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:587:1872":{"id":"0:70-21:587:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:1872","glob":false}}},"0:63-25:9:1879":{"id":"0:63-25:9:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1879","glob":false}}},"0:26-21:6199:1890":{"id":"0:26-21:6199:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:1890","glob":false}}},"2:12870:29885":{"id":"2:12870:29885","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:29884"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:21006":{"id":"2:12873:21006","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:8314"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1899":{"id":"0:42-21:57:1899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1899","glob":false}}},"0:48-31:65:1932":{"id":"0:48-31:65:1932","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1932","glob":false}}},"2:12900:25006":{"id":"2:12900:25006","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:24996":{"id":"2:12920:24996","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:8301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1875":{"id":"0:11-20:97:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1875","glob":false}}},"0:24-21:6182:1888":{"id":"0:24-21:6182:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:1888","glob":false}}},"2:12897:2459":{"id":"2:12897:2459","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44493:2485","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:1902":{"id":"0:44-21:6240:1902","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:1902","glob":false}}},"0:79-29:20:1886":{"id":"0:79-29:20:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1886","glob":false}}},"0:55-31:125:1939":{"id":"0:55-31:125:1939","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1939","glob":false}}},"0:66-20:68:1874":{"id":"0:66-20:68:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1874","glob":false}}},"2:12958:29896":{"id":"2:12958:29896","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:1900":{"id":"0:43-27:0:1900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1900","glob":false}}},"2:12997:2596":{"id":"2:12997:2596","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4739:2596"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44547:2597","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:1883":{"id":"0:76-29:27:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1883","glob":false}}},"2:12976:29902":{"id":"2:12976:29902","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:29906":{"id":"2:12995:29906","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4738:29906"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44538:8321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:24993":{"id":"2:12889:24993","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:24994"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1933":{"id":"0:49-31:68:1933","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1933","glob":false}}},"2:12890:24994":{"id":"2:12890:24994","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:24993"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1291:1873":{"id":"0:40-21:1291:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:1873","glob":false}}},"2:12956:29895":{"id":"2:12956:29895","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:24963":{"id":"2:12877:24963","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:29892":{"id":"2:12947:29892","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:8310","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::matches":"2:12944:2191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44461:8328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:24964":{"id":"2:12879:24964","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:20892":{"id":"2:12894:20892","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44225:2787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:2468":{"id":"2:12917:2468","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:8310","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split_whitespace":"2:12895:27168","str::rsplit":"2:12923:24998"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44239:2788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:29907":{"id":"2:12998:29907","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4736:29907"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44556:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:2328":{"id":"5:5572:2328","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:27168":{"id":"2:12895:27168","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:27164"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44513:8313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:20551":{"id":"2:12913:20551","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1938":{"id":"0:54-31:120:1938","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1938","glob":false}}},"2:12886:29888":{"id":"2:12886:29888","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12061:1548","crate::ops::IndexMut":"2:3220:2674","str::slice_unchecked":"2:12885:29887"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1891":{"id":"0:27-20:131:1891","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1891","glob":false}}},"0:23-21:6217:1887":{"id":"0:23-21:6217:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:1887","glob":false}}},"5:5562:30597":{"id":"5:5562:30597","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:8641":{"id":"5:5556:8641","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:29898":{"id":"2:12962:29898","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1884":{"id":"0:77-29:17:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1884","glob":false}}},"0:65-21:1291:1873":{"id":"0:65-21:1291:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:1873","glob":false}}},"0:45-21:5266:1903":{"id":"0:45-21:5266:1903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:1903","glob":false}}},"0:31-21:6767:1894":{"id":"0:31-21:6767:1894","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:1894","glob":false}}},"2:12887:24989":{"id":"2:12887:24989","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:24993","str::split_at_mut":"2:12888:24990"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:29889":{"id":"2:12898:29889","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44503:8324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:25002":{"id":"2:12935:25002","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12055:457","str::splitn":"2:12932:25000","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44361:8297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:30599":{"id":"5:5571:30599","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2440","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2440","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:22375":{"id":"5:5574:22375","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:22378"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1164":{"id":"0:33-21:20:1164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1164","glob":false}}},"2:12883:24966":{"id":"2:12883:24966","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1936":{"id":"0:52-31:100:1936","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1936","glob":false}}},"2:12881:24965":{"id":"2:12881:24965","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:1881":{"id":"0:16-21:5171:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:1881","glob":false}}},"2:12885:29887":{"id":"2:12885:29887","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12061:1548","str::slice_mut_unchecked":"2:12886:29888","crate::ops::Index":"2:39955:2673"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:25004":{"id":"2:12938:25004","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-20:68:1874":{"id":"0:10-20:68:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1874","glob":false}}},"0:32-21:37:1895":{"id":"0:32-21:37:1895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1895","glob":false}}},"2:12893:27038":{"id":"2:12893:27038","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44215:8316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:1935":{"id":"0:51-31:136:1935","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1935","glob":false}}},"2:12988:24753":{"id":"2:12988:24753","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40309:24887","Self::is_ascii":"2:12987:22372"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40309:24887","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:29897":{"id":"2:12960:29897","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:29883":{"id":"2:12867:29883","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:25008":{"id":"2:12906:25008","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:1892":{"id":"0:28-22:7:1892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1892","glob":false}}},"0:58-21:104:766":{"id":"0:58-21:104:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:766","glob":false}}},"2:12932:25000":{"id":"2:12932:25000","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310","str::rsplitn":"2:12935:25002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44343:8299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:22377":{"id":"2:12990:22377","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:1898":{"id":"0:41-21:5212:1898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:1898","glob":false}}},"0:81-21:6217:1887":{"id":"0:81-21:6217:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:1887","glob":false}}},"0:82-21:6182:1888":{"id":"0:82-21:6182:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:1888","glob":false}}},"2:12909:20550":{"id":"2:12909:20550","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1869":{"id":"0:5-20:32:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1869","glob":false}}},"0:7-21:422:1871":{"id":"0:7-21:422:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:1871","glob":false}}},"0:8-21:587:1872":{"id":"0:8-21:587:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:1872","glob":false}}},"0:19-29:17:1884":{"id":"0:19-29:17:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1884","glob":false}}},"0:38-21:5264:1044":{"id":"0:38-21:5264:1044","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1044","glob":false}}},"2:12892:27119":{"id":"2:12892:27119","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44209:8317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:1934":{"id":"0:50-31:109:1934","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1934","glob":false}}},"2:12896:27164":{"id":"2:12896:27164","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:27168"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44522:8312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:1876":{"id":"0:73-21:2766:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:1876","glob":false}}},"2:12929:29891":{"id":"2:12929:29891","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:8310","str::split":"2:12917:2468","prim@char":"1:12055:457","str::split_terminator":"2:12926:29890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44307:8329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1875":{"id":"0:67-20:97:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1875","glob":false}}},"0:4-2:45148:147":{"id":"0:4-2:45148:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:45148:147","glob":false}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:30595","5:5556:8641","5:5559:30596","5:5562:30597","5:5570:30598","5:5571:30599","5:5572:2328","5:5573:22374","5:5574:22375"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78-29:25:1885":{"id":"0:78-29:25:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1885","glob":false}}},"0:25-21:6212:1889":{"id":"0:25-21:6212:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:1889","glob":false}}},"0:15-25:9:1879":{"id":"0:15-25:9:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1879","glob":false}}},"0:35-21:6768:1897":{"id":"0:35-21:6768:1897","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:1897","glob":false}}},"0:39-21:4707:1880":{"id":"0:39-21:4707:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:1880","glob":false}}},"2:12923:24998":{"id":"2:12923:24998","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:8310","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split":"2:12917:2468"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44257:8295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:1893":{"id":"0:29-21:6770:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:1893","glob":false}}},"0:59-2:45148:147":{"id":"0:59-2:45148:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:45148:147","glob":false}}},"2:12944:2191":{"id":"2:12944:2191","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:8310","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatches":"2:12947:29892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44443:8327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1776":{"id":"0:46:1776","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1932","`LocalPool`":"31:120:1938"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1932","0:49-31:68:1933","0:50-31:109:1934","0:51-31:136:1935","0:52-31:100:1936","0:53-31:102:1937","0:54-31:120:1938","0:55-31:125:1939"],"is_stripped":false}}},"0:84-21:6199:1890":{"id":"0:84-21:6199:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:1890","glob":false}}},"0:13-21:2766:1876":{"id":"0:13-21:2766:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:1876","glob":false}}},"0:37-21:104:766":{"id":"0:37-21:104:766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:766","glob":false}}},"2:12899:27120":{"id":"2:12899:27120","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44531:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:22378":{"id":"2:12991:22378","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:24756":{"id":"2:12992:24756","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:35460"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:29890":{"id":"2:12926:29890","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:8310","str::split":"2:12917:2468","prim@char":"1:12055:457","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:29891"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44289:8330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:24757":{"id":"2:12993:24757","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:35460"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:29900":{"id":"2:12964:29900","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:8310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:30595":{"id":"5:5555:30595","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2440","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2440","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:29886":{"id":"2:12874:29886","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:8012:15960":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:10319:2264":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"1:3579:2782":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44493:2485":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:41123:8624":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:32912:8231":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:4170:27577":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:7912:2756":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"14:165:14859":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:8648:226":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:13015:16026":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6348:15900":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10665:22182":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:31017:8583":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6244:15893":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4698:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:9654:27778":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:10401:33018":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:40895:27043":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7946:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12076:1648":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1596:2643":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:12558:8310":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:2231:14842":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8263:2360":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:12518:2941":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:32826:2435":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:3804:2824":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:533:2573":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:10661:2352":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"5:2049:2482":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"21:12183:2266":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:2436:2745":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"21:15019:2483":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:48355:3063":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15569:20333":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"21:6747:33122":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"21:587:1872":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"16:4355:15462":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:588:9440":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:3397:8392":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"9:481:14723":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5885:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6579:15909":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:44963:8811":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"22:0:2225":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"6:6100:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6669:15912":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4884:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:8831:33018":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:6362:15901":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:41135:2267":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"21:9188:2314":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"11:774:2627":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"21:7045:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:12072:1652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:23797:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2341:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:9131:2313":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"17:14516:19569":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9026:2572":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8534:2936":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11621:16155":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"21:21:1164":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"16:2593:14947":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"21:14011:2625":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"21:13733:2296":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"6:5033:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15313:20314":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:4333:8412":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40847:8431":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8916:2626":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"30:1391:20563":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11605:16177":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42543:2625":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:16235:20524":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"30:144:20674":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"21:11439:2368":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"18:608:20680":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"25:9:1879":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"16:6221:15891":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:7692:14678":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4603:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:12336:8820":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"21:7265:2265":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"21:12873:2380":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"1:8076:2431":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:32795:15962":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:15445:20328":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12043:16201":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"27:72:20649":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"21:10017:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:48185:3057":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:706:8308":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14575:16026":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12408:16280":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:3376:8673":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:41167:8623":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:48478:8202":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:1054:2639":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:7995:2438":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:396:31546":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:12899:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"1:3512:2433":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:597:16038":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5023:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12388:16279":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:41082:2345":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:15091:2485":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"2:3039:8669":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:11392:16128":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:12308:2282":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10997:16078":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:1896:2629":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:46721:3049":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:46274:3077":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6134:15886":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6222:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12353:16287":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11647:16183":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10710:16055":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:40749:27047":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11269:16116":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:533:9432":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11595:16182":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"21:12717:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"2:40806:2597":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:10651:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5020:2773":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:5849:2976":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5959:14904":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5117:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13235:19013":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12724:16061":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:6609:2981":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:1051:2640":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7869:15952":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:42314:2819":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"8:0:2078":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:12053:407":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"12:0:2082":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13116:16340":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13553:19034":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:12070:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:34627:8660":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5484:2948":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:15376:2320":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"16:3545:14968":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:6240:1902":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"11:1910:2643":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:945:2636":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:9555:33018":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"1:2434:2744":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6422:31911":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:3416:27479":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:580:9439":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:40840:8430":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8908:2995":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:2196:29185":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:4300:2872":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11661:16154":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6646:15911":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"21:12673:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"21:7661:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:12563:8306":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2271:2460":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:2917:14961":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11242:16114":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12454:16291":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:4220:2868":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:491:32827":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"30:1216:20667":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"2:40923:2721":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3739:2821":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:588:2595":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5859:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:41351:2362":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14051:19539":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8336:2818":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6764:10451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4814:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:3856:15032":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:9257:2315":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"17:12683:16303":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:15289:20312":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:12054:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:7924:2757":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"30:1436:20539":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"30:1479:20554":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"21:14289:2405":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"17:15301:20313":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:11079:8299":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"30:1145:20667":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"16:7482:15940":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4440:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:47153:3084":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8348:2875":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:11366:2355":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"17:16198:20521":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7411:2626":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:41192:2357":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3556:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:1602:2644":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"21:15484:33121":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:12090:8773":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"21:15358:33018":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"11:1676:31539":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:7991:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:1131:29071":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"21:5950:2399":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:12798:31781":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"21:11802:33018":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"21:15230:2360":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"21:6769:1896":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"2:3185:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40066:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1710:10343":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:10746:21130":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4755:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2641:14949":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:12030:2281":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"17:13325:19018":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13946:19531":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:46326:3088":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:3266:2645":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5992:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:6982:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:5278:15856":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:33674:8654":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11227:16086":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10954:16076":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"21:6846:33018":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"2:48553:8207":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:1795:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:40986:2758":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"21:14716:2479":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"21:14220:2426":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:14177:19546":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:8921:2305":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:13882:33018":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"16:5331:15859":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:7633:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:521:20562":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:832:2630":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22477:3159":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4955:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:9529:2340":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"21:2566:32943":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"17:11026:16080":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"21:12647:2287":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"16:7523:15942":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:3753:2482":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4789:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10018:16017":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"21:15187:2491":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"16:6737:31718":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47389:3050":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:742:2632":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:43984:27764":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11825:16218":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5120:22299":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2383:2398":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"21:6410:20596":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"11:787:2628":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4676:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:1790:2629":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:475:9425":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2446:2750":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:670:20556":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12189:16282":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:212:8240":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:9763:2345":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"17:15266:20309":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:3220:2674":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:7503:162":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:40777:8434":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:15314:2572":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"27:495:20651":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"21:9114:33018":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:12071:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22975:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:1576:10331":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14271:19552":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:5025:2806":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"21:11763:2372":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:8387:2905":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22346:27428":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12557:16096":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"0:46:1776":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:31100:27182":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:24025:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"15:0:2084":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7609:15947":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15616:20337":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10155:2960":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:7365:14489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8354:2866":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:504:2568":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3392:2793":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40309:24887":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:6595:2430":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:3473:16205":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:31574:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44389:8325":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15390:20322":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43816:8800":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:1456:2626":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:2203:16126":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43631:27122":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:10718:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5829:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40008:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"22:7:1892":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"17:9984:16044":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13814:19524":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:22840:2831":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:44185:8323":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:42426:2626":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:45029:3025":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6445:15906":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2419:14939":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"21:4503:2407":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:6395:8625":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7973:2623":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:5485:15860":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6893:8375":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10915:32761":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:34144:8657":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2355:14936":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"21:335:32941":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:8303:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:15769:20348":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13723:19520":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:4049:2840":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:596:9441":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"21:779:2295":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"21:400:24495":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"30:993:20557":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"16:6759:15916":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6159:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4890:2852":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44640:8341":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:4093:2773":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"14:202:8351":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6718:2907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:15157:2488":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"21:11824:2375":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"2:3188:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4578:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4595:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:32882:2436":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"21:6776:2263":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:22013:27850":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:123:31524":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:7622:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:34085:8655":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:45262:27210":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:2749:14954":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:2249:29188":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13899:19529":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12707:16060":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10054:2690":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:7508:2718":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:47499:3111":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:15342:20317":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:14347:2428":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:15329:2322":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:22402:8684":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12949:16068":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:6212:1889":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"6:5928:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:7227:8615":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5015:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"31:120:1938":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"1:1585:2629":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11743:16188":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:515:20565":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:11344:33018":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"16:5713:31890":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11313:16118":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:1151:29276":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"27:371:2987":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:9452:2756":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:7118:2920":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12969:16014":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"21:15139:2486":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:11247:33018":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"11:2304:2638":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15281:20311":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11367:16096":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4932:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:68:1874":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:41013:2671":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:7466:2621":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:1098:16093":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12371:16067":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"21:15382:33157":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:1862:2690":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8599:2398":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:32809:8405":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"21:14430:2429":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"21:13319:2390":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:859:2626":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6679:2986":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6116:15885":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:16121:20515":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:12758:33058":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"5:266:29279":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7056:22691":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:10117:33018":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"11:299:31527":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4267:2398":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3233:22820":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:43584:27225":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13999:19535":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:726:20560":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:46894:27033":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:1917:2644":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4975:2902":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:11382:20891":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8939:2990":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:7998:2482":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:21341:27843":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"9:446:14724":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:5309:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11093:2763":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:7355:15932":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4808:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:4572:8406":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1521:10325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:13030:2397":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"9:356:14740":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2284:14905":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:1578:2626":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:9054:22338":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:9632:33018":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"2:26425:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12251:16255":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"30:1179:20670":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"17:16050:19015":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:7539:2287":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"16:2979:14962":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10828:32274":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:15010:20292":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:7907:2755":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8270:2787":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"30:1448:8308":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"5:4107:2625":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6462:15907":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7672:24479":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:5708:2988":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7209:24272":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12572:16056":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"21:12055:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:15410:20324":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:1802:8592":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:4453:8397":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:7371:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13173:16342":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"15:306:14883":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13606:19038":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:6566:33163":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"17:11115:16089":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44461:8328":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:14863:2480":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:10796:2398":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10381:24450":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:44407:8326":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:765:20554":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:12982:2396":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"30:947:20557":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"17:9671:16013":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:2063:2661":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:22433:2759":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:7373:2271":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"5:6032:9029":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:3609:2398":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4616:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:10613:2354":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:12362:16288":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:3768:2661":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:44979:8808":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6077:15883":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:16138:20516":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:5515:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:42476:2609":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:13597:2378":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"16:6555:14877":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:754:20561":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6503:2421":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12318:16068":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"20:92:2759":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"16:4907:15623":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:0:1868":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:11010:2362":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"17:12056:16202":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12127:16206":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40026:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"21:9569:2341":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"16:6546:15908":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3170:2223":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:8750:2302":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:13510:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"2:42352:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:7679:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:44798:8347":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:41206:2358":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"27:467:20648":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"6:7388:14491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:12333:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"30:971:20558":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"16:4283:15413":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6215:15890":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:10646:2906":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5921:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13844:19526":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:13116:2388":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:10927:8290":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:15387:2323":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:44686:8344":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4610:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5662:15871":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:5464:2947":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"21:7020:2267":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"17:10137:16010":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3080:8661":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"21:10451:2267":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"16:4518:15510":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"25:0:1878":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:21356:27841":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:483:9426":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:13400:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"9:329:14780":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:7548:2717":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3468:8236":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:32827:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:15760:20347":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2509:14943":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4761:15592":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12792:16020":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"21:15166:2489":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"17:11497:16125":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6366:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5601:15867":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1440:2625":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:40046:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12225:16257":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3551:2497":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:32914:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41558:8606":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1734:10345":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5568:15865":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:8095:2285":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"16:5006:15653":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:48489:8203":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:6495:2402":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5822:2975":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"21:11543:33079":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:9130:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7889:15953":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6692:15913":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10846:2700":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:45239:8223":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"30:0:2087":{"crate_id":30,"path":["memchr"],"kind":"module"},"21:12913:2394":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"11:2554:31533":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"15:327:14887":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:5569:2950":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:42535:2398":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:48449:8199":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15023:20293":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13785:16244":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"29:20:1886":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:42976:2973":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:1691:10341":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6895:31825":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"21:11144:2270":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:15678:20342":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:11117:33018":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"16:7103:31892":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:7610:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:8532:2291":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:5867:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44951:8807":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:41341:2360":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11089:16091":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:7393:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:10004:8244":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"21:12965:2395":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"5:634:29067":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12074:1650":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:22747:27169":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:2175:16166":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"30:1425:20538":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"16:5580:15866":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2617:14948":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10612:16053":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3012:3021":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:12320:8818":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:9002:2307":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"16:7932:15955":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10229:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"21:11209:2364":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:7740:2581":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:481:20563":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:34281:8658":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:42495:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"30:1454:20553":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2:30749:2828":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:5966:2263":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"21:13658:2398":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:10431:28202":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"30:1081:20668":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"2:2676:8454":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:31011:8370":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:44833:8350":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"28:55:2625":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:43613:2935":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"7:78:14702":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:12133:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:42898:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5894:2610":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5033:2912":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"13:110:31598":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6610:15910":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:33302:8652":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4566:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12300:16286":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13509:19031":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:1478:2627":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6201:15889":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6819:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4733:15587":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3906:2826":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:1316:2641":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7324:15929":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10284:16048":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:47855:3079":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:6823:2264":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:10661:16054":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:1207:16101":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1718:10344":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4236:2870":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:44053:8289":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11354:16129":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14147:19545":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:13727:212":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"21:11649:33155":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"16:3260:14966":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"21:13575:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"21:13288:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:12206:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"6:4480:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4628:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"31:136:1935":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"20:27:2759":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:14723:20280":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:1024:29279":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:5669:8374":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:867:2627":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21567:3030":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:16079:20512":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11042:16081":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14246:19550":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"30:1579:20559":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:23609:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:11547:16179":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:40764:8432":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:10869:21124":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:1566:14849":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11443:16133":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:2728:2479":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11865:16241":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11288:22200":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:46130:3075":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:45040:8828":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5104:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:2883:14960":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:7345:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14031:2398":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"18:563:20568":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6086:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:8055:15962":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4572:15518":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:9309:33018":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:3597:16223":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:3600:14969":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:434:31549":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"21:15523:33124":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:41607:8611":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:430:31548":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"10:44:14834":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:15418:20325":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40956:2735":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:48606:8210":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11341:16130":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13375:19021":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6059:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14788:20282":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:0:2087":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:2988:29069":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:1287:2640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15333:20316":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"15:394:14894":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"21:11295:33018":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"5:4035:2421":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"21:15372:2321":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"1:10075:22320":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"21:15499:33147":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"21:15454:33126":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:836:2398":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:22295:3164":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12056:1668":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12485:16294":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1674:10339":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"27:434:20652":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"17:10439:16051":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:10988:33018":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"30:999:20557":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"2:44289:8330":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5298:15857":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:15218:2494":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:9858:16040":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5897:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"21:15209:2493":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:44823:8349":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12597:16306":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:2562:31530":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11110:21115":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"21:14001:20580":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"17:14311:19555":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:40721:2597":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:16269:19024":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:1087:31553":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"21:9010:2308":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"5:2994:29077":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"27:124:20633":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:0:1870":{"crate_id":21,"path":["futures_util"],"kind":"module"},"17:14529:19570":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:123:9110":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:710:2631":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4847:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"21:7155:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:10639:33018":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:14475:19566":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11674:16184":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"11:1142:14848":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4947:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"30:1187:20671":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"6:1682:10340":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6837:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12887:16065":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"27:154:2993":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"5:3206:2643":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:1271:2638":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:14134:2423":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"17:11405:16127":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:5266:1903":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:9606:2342":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:45223:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:14693:33018":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"1:9949:22021":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:13024:16070":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4860:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"7:31:14695":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"21:8973:33018":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:11688:16150":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:45250:8221":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:15836:20353":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:7488:33018":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:22211:3162":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14189:19547":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:46529:3029":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"21:6859:2267":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"6:4776:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:14844:33018":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"21:8156:2281":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:21302:8450":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:22001:3027":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7565:15945":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:15177:2490":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"17:2037:16132":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:7319:2648":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:3386:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:7462:2274":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:43341:2341":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12006:21094":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6099:15884":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:8431:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3349:2801":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:13941:33018":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"1:4119:2847":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"29:17:1884":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:4302:8411":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:2110:8237":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8900:2398":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8616:2940":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13986:19534":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:3622:2625":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5941:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:13187:2292":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6268:15895":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14079:19541":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"21:13462:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"18:689:20558":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:14809:116":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:12027:2608":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:4707:1880":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:7130:2268":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:15957:20509":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"21:7815:2290":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"17:10982:16077":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14260:19551":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:22348:8684":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:46427:3054":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:46150:3040":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:700:2626":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"27:481:2935":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"6:6889:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:12629:8334":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:645:2603":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:4702:15579":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:10345:33018":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"11:351:31543":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"11:2326:2639":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:15368:20319":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:10944:24476":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:4649:15572":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:39986:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1507:10323":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:527:9431":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7491:15941":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5130:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:9338:2317":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"16:7619:15948":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:5640:2953":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:15281:2497":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"2:41589:8609":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7802:2607":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:1496:10321":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:15511:33146":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"16:4968:15638":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:44035:8286":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:2780:33071":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"foreign_type"},"2:6584:8619":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"18:680:20557":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13089:16339":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:296:34501":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:6056:2373":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"16:4399:15483":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7653:15949":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9737:16011":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:15596:20335":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:3240:2642":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:6199:1890":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:14025:19537":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:3181:2437":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:15206:20305":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:12808:33134":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"1:7823:2700":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4704:21236":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:1581:2421":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7477:2622":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10671:32531":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:33967:3024":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13308:19017":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4666:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9107:21026":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:7668:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6107:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:22615:27129":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:41063:2343":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46972:27187":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:9887:2263":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:7397:27605":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:47465:3062":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5111:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:4228:2869":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10524:16052":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3569:2493":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:21512:2759":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13774:16243":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6228:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12264:16254":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:14801:2420":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"2:3313:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:309:20590":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:7913:2439":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2399:14938":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4708:21240":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:23985:2832":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"20:97:1875":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7998:15959":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:13215:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:3008:8630":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6282:15896":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:14356:19558":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12055:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"30:1530:20555":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8066:22295":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5009:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:80:20537":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6128:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"21:9346:2318":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"2:46995:27140":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"30:1111:2398":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"16:7971:15957":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12443:16281":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11318:24483":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12808:16021":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:357:2592":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:918:2632":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7361:29183":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"21:8609:2296":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:44619:8340":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:14256:33018":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"1:8922:2992":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10399:2787":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:531:20566":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:45161:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11413:22079":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:8022:15961":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"21:14117:33018":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"1:10886:2957":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12993:16069":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11075:16096":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7598:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11853:16240":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:21976:3037":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:43835:8278":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:6903:8376":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:9145:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"21:11576:33063":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:11121:8298":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:102:31535":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"2:9039:2922":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:9163:2763":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:42114:2815":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:4396:29284":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15039:20294":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"21:10931:33018":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"9:52:14743":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:149:14910":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:10440:2802":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"21:14657:2477":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:7038:29311":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:15299:2499":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"6:5910:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:32802:27765":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:8589:2938":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8391:2907":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:22482:3157":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:11562:2826":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:23425:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40798:8322":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44145:8294":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:844:2634":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:10229:33018":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:7536:2716":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:15308:20594":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"17:15434:20327":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:42818:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"21:10262:2348":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:13685:2401":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"1:6056:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:46344:3094":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14503:19568":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13497:19030":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:47649:3045":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2584:2476":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"26:43:34504":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:3266:2802":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12543:16300":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:6139:24492":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44734:8345":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8951:2993":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8276:2788":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11396:21104":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:2167:29189":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6741:10466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6431:15905":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22683:27123":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7651:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"21:9508:33018":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:41053:2342":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4968:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40910:2719":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:1975:712":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:2275:2465":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:20:1164":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"17:13473:19028":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:11920:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"2:7619:2401":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:6880:3026":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:14925:2481":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"16:7376:15934":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:4821:16305":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"21:422:1871":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"1:9135:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:104:766":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:3044:8670":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"21:13676:2400":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:14072:2420":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:7760:2578":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:651:2367":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12278:16285":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:42174:27201":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"21:8896:33018":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:23891:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"30:1123:20557":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"21:4353:33132":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:3463:2773":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:951:2637":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4984:2903":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:2140:2639":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5004:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:1708:2773":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"21:9828:2263":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:11075:8827":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6908:31765":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3403:8391":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13674:19519":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:2469:2629":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:22319:2759":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"30:1500:20562":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"21:9694:2344":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:46196:3081":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:12942:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"17:13832:19525":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:914:2631":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:5500:2949":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:7840:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:15176:20302":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:31205:27117":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6682:9310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:4236:8394":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4107:2844":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:22853:2830":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:2351:8684":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13211:19012":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"14:214:14867":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"21:10822:33018":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:4560:2878":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:14083:2421":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"17:16249:20525":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:41580:2399":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"21:6768:1897":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"21:11537:33149":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"21:14191:33018":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"21:6583:33120":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"11:1883:2398":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:15426:20326":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:261:32497":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:7917:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:4444:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4473:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:44987:8827":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"21:13759:33018":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"17:12671:16334":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:8071:22360":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:1574:2398":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9181:3020":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:13214:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"21:9592:33018":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:8605:2939":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"9:177:14829":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15273:20310":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:47311:3044":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:7526:33018":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"21:13714:33018":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:11634:16153":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:837:2633":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10573:32725":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"30:1200:20557":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"21:8557:2293":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"9:501:14727":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12260:8819":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6700:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:22123:2759":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:39:2238":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:11557:16180":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:5251:20592":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"17:13538:19033":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40821:8428":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:44198:8320":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13594:19037":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:44522:8312":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:15463:20330":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:42487:2224":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1664:10338":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:46941:27121":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:43369:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:569:9437":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:11841:24491":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:14969:33018":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"1:8201:2401":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:2304:14933":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:43416:8243":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:10139:2367":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"17:15078:16095":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11166:16094":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:14065:2626":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:11680:8283":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4870:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:10204:2367":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"5:2074:2662":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15116:20297":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:7419:2626":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"21:11266:2365":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"1:10950:24449":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:6556:33164":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"6:4922:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:42779:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:4275:2406":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"11:811:2629":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:10773:33018":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:2835:14958":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6658:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7990:2796":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:3406:14967":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12422:16290":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:9002:2977":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:3347:2800":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15138:20299":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"30:1250:20670":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"2:43592:2768":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"20:32:1869":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:32883:8631":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:40814:8321":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"0:56:1180":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"5:1686:29279":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7653:24488":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"30:1490:34570":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"16:3010:14964":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:6713:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4769:2904":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:883:2637":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14977:20290":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:15224:2495":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"5:2990:29084":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:364:31541":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15701:20343":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4496:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4351:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:10841:2357":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"17:16165:20518":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:15438:33123":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"2:21339:27848":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:32755:2958":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8300:2814":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:281:2440":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:903:2629":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:23245:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:13239:2295":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6773:15917":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:44123:8276":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:22125:3033":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2688:2789":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:46405:3048":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4535:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:15556:33045":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"16:7294:15927":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1968:2711":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7551:15944":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15822:20352":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:21971:2759":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:15456:20329":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10728:2432":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44538:8321":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:46575:3083":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:718:20552":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12089:16199":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:437:14907":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15748:20346":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8463:2934":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:14212:19548":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:44307:8329":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2459:14941":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:0:2085":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2542:27474":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:10443:2804":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:40993:8275":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11128:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:613:20681":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14414:19562":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6370:3172":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"28:217:2638":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"1:12075:1651":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:43314:27185":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9020:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"27:368:227":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"2:44761:8346":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8370:2876":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:22806:27263":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:32816:8723":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:2151:2640":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14994:20279":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4380:2873":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7984:15958":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:48645:8211":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"30:1007:20558":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"21:14279:244":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"6:4841:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:1537:2660":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6711:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46819:3116":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:5630:15869":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7335:15930":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:13961:32933":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"2:21358:27849":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7366:15933":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"27:452:2994":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"16:2769:14955":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:4581:8407":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:2689:14951":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"3:0:484":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:2977:21307":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:856:2635":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:10010:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8221:2432":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:8217:2280":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"17:11467:16131":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:4787:15595":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7351:2663":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:44063:8287":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:10867:33018":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"17:15168:20301":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:5794:15875":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:44959:8812":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"14:7:14858":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8413:2855":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1824:2679":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"31:102:1937":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8446:2916":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:256:32799":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:1506:2631":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"21:14552:33018":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"30:978:150":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"2:39959:8672":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"27:136:2987":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"1:12077:857":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6724:15914":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:36676:8663":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:3665:2421":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:39971:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:11514:33018":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"1:7968:2624":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"21:8538:212":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"18:113:20539":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"30:1515:20566":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"17:13437:19026":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14545:19571":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:3245:29234":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:2375:14937":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"21:14156:2425":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:12824:16062":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:33488:8651":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:15778:20349":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7429:31664":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:7192:2270":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"16:536:31823":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:893:2421":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14560:19572":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2666:24497":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:41599:2400":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11158:22177":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:23155:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:12038:21044":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6254:15894":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1040:2638":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"28:30:20654":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:7962:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6788:31889":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:7290:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:790:2353":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:10641:2759":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:47997:3051":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:42551:2626":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:574:9438":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"14:0:2083":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:909:2630":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:44209:8317":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46843:3117":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1072:2641":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10887:32768":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:3232:2644":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"21:8401:2284":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"21:14089:2422":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"1:11478:21313":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8879:2956":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6169:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:44669:8343":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"21:12230:2283":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:4986:16311":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"30:1464:34559":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"20:131:1891":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"2:41035:8616":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:7375:2626":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4097:2843":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13922:19530":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:119:9109":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:8242:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:5701:2987":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7706:15951":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:4227:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:15058:20278":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:7604:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7982:22339":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:7586:33031":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"6:4516:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"30:1069:20666":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1:4111:2845":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:43378:8241":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:687:2625":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"9:237:2935":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12066:701":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44655:8342":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:8795:2303":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"16:6811:15919":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6798:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1570:10330":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:7080:2266":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"21:10479:33018":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:43074:8244":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:12074:8771":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11016:16079":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13292:19016":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:10888:8301":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:1914:27152":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7951:15956":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13959:19532":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:2234:16151":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7602:16038":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:46445:3060":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:11000:8295":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5346:31798":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:41091:27050":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12659:16298":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"30:1559:20557":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:6217:1887":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:11093:8297":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7414:15937":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:5499:15861":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2971:2584":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43095:8253":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3830:15029":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3431:8233":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14868:20285":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:830:2646":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13455:19027":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:4607:2308":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46464:3109":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:635:20682":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:39911:8235":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"21:9733:33018":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:44547:2597":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:9140:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:10702:2353":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"21:13371:2391":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"6:4434:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13485:19029":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44967:8815":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2789:14956":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:42560:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2652:2478":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11799:16238":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:12513:2381":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"26:37:34502":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"5:4197:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13146:16341":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:3308:2804":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:40787:8435":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:31032:8241":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8233:2434":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10073:21312":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"21:15035:31502":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:22755:27193":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:5264:1044":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"16:6858:15921":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:489:9427":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11407:22208":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:3993:15146":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13046:16023":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4674:15574":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:16259:19022":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:12062:1633":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"18:643:2367":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:44165:8293":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:7679:2331":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:15074:33018":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:6338:183":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:5852:2346":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:6040:2987":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:0:1967":{"crate_id":24,"path":["futures_task"],"kind":"module"},"6:4764:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10622:32723":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:46797:3110":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14855:20284":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:15190:20303":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"21:13835:2404":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"6:4724:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5146:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6929:31786":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4543:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:4628:8408":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:42292:2818":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:10376:2265":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:7697:33031":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"2:40086:2615":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:7099:24500":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:42662:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:9087:21114":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9066:22317":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15814:20351":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12080:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12073:1649":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:557:2575":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:6767:1894":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:10185:16015":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11341:2961":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4647:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:9646:2343":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"16:5238:15839":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22864:2833":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4908:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7063:29286":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5075:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:45151:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:6665:2985":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"21:9232:33018":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"16:3177:14965":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:1607:2645":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:15720:20344":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:10259:2767":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"13:0:2076":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:44155:8292":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7152:15924":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:5377:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:47199:3090":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1115:29278":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:43324:8241":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"21:57:1899":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"17:14341:19557":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:7702:14679":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:0:2086":{"crate_id":17,"path":["object"],"kind":"module"},"21:4954:2427":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"16:4844:15606":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6943:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"31:38:34574":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:22668:27232":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:48568:8208":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1596:10333":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5825:15876":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"21:14752:2338":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:4987:28158":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1558:10329":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:800:2421":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7595:15946":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:6263:22354":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6666:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4529:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4527:8405":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44971:8813":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10002:8245":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:6961:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:12618:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"21:11977:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:44812:8348":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10854:2950":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:4966:425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:42477:2923":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11056:2956":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:48309:3112":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41044:8617":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:11840:2273":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:41022:2338":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:41176:2355":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7386:15935":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11214:16087":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:42857:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:2769:933":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"foreign_type"},"21:10508:2346":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"21:13801:33018":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"17:10155:15858":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"21:4540:24479":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:10350:16050":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"30:934:20671":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"2:7333:8622":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:34026:8656":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46675:3043":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:1291:1873":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"6:563:9436":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10769:32701":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44225:2787":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6120:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:96:20538":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14372:19559":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10818:16057":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:8363:2655":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:11501:2825":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:40738:8433":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46627:3095":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1302:2639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:14599:19574":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"31:109:1934":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"30:1061:20682":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"1:11541:2824":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:11952:2279":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"6:4783:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:5896:2421":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:7419:2273":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:34454:8659":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:12448:2385":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"6:1703:2863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:5681:2773":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:9033:21103":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4364:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11637:14891":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:44513:8313":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12929:16067":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"26:0:2227":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"16:6941:15922":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:32791:21174":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:22771:27027":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:13908:2405":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"2:44257:8295":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"30:1095:20670":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"16:7444:15938":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"9:423:14726":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:7492:2583":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:2553:14945":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:1923:8694":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:9450:33018":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"5:6136:2773":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:0:539":{"crate_id":2,"path":["core"],"kind":"module"},"21:7887:2278":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:2766:1876":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:12065:699":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5955:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:1496:2630":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13753:19522":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:9799:8242":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:11618:8217":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:7961:2286":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:22791:27167":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:6870:8374":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12107:16056":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1697:10342":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"27:127:20634":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"5:5170:2972":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:43601:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10246:21304":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"21:12824:2379":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:12583:8305":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2729:14953":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:6631:2626":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:8059:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:2157:2568":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:14968:20289":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:43831:27148":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:15027:2424":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"6:6079:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44215:8316":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13252:19014":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:4452:2867":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:589:20678":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:48431:3118":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:13348:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"30:956:20675":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"1:10446:2800":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:6012:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13738:19521":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:4601:2582":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:5875:2773":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:38717:8667":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"27:140:20635":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"5:3211:29224":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10737:21111":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11142:16056":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10759:16056":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:5360:29279":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:42332:2820":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46605:3089":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:22448:3158":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"21:13047:2383":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:5878:15879":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11574:14842":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:328:31537":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"21:14517:2430":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"1:8866:2955":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"24:12:20577":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"16:2995:14963":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:9907:33018":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:9755:16009":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:0:2081":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6062:31740":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:11866:33018":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"17:11153:16057":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47435:3056":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2966:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11419:16056":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"27:441:2992":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:922:2633":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:0:2077":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:42092:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12695:16302":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:42466:2921":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:46482:3115":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"20:143:20576":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"17:11324:16144":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10365:8783":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:15102:20296":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:5140:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:10538:33018":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:45148:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:928:2634":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:542:9433":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6320:15898":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:15:2194":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4549:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"30:1472:20561":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"17:15324:20315":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10534:32574":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"21:7636:2287":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:13855:19527":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3027:8653":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:47229:3096":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44503:8324":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:573:2367":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:8407:27781":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12464:16292":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:43081:8245":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22256:3163":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:41114:2265":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8283:2485":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8549:2937":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12399:16289":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13344:19019":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:15198:2492":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"16:7345:15931":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11764:16190":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:13568:19035":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:555:9435":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44975:8814":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:48469:8201":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:23065:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:3264:16200":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"21:8278:2283":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"17:513:16037":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:6713:29279":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:42410:2398":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"30:922:20670":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"2:44343:8299":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4584:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6781:10449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:2352:2640":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"21:14396:33018":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"29:25:1885":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"5:1487:2628":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:10448:24497":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"29:0:1882":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:44073:8288":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:82:2217":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:21695:3031":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:15624:20338":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3230:22817":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:2987:8225":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:43353:27181":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42146:2817":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"21:37:1895":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:3799:2626":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15734:20345":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44110:8275":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:31043:27203":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:5066:863":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:14574:2475":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"5:886:2647":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:15274:2496":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"1:5694:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:21684:2759":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:507:9430":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7311:2626":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:7616:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4893:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:3017:3023":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:1939:2710":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:44239:2788":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:11083:2361":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:44955:8810":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:44443:8327":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:12058:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"21:12492:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"17:13581:19036":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"21:7442:33018":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:5171:1881":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"17:14131:19544":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"21:11884:2278":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:44044:2365":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:15151:20300":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"30:1208:20666":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:9807:16025":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14463:19565":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4433:15494":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:10338:2954":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4686:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"27:187:20639":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:501:9429":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11102:16090":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:3786:1877":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:15356:20318":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10675:2753":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:1537:10327":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"21:4486:20584":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"1:9457:21299":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:10008:8253":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:46174:3076":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:4376:8266":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1885:2696":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"21:13484:2389":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:41144:8618":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"30:1415:20537":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"21:23:2236":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"21:14991:2482":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"13:226:31599":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"21:6962:2272":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"5:7594:8353":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13972:19533":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:14402:19561":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12030:16203":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:5637:2951":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"21:15042:2484":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"17:15222:20307":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12508:16295":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:2353:8685":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"21:8034:2279":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"28:42:2626":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:4439:20582":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"5:4426:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:16032:19014":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:12374:8301":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7302:2658":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4914:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:1650:10337":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:1517:2632":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"21:8120:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:4035:2839":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"14:160:14858":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:47075:3078":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15376:20320":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10688:21031":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6114:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:538:20567":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:31601:8450":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"0:0:1966":{"crate_id":0,"path":["futures"],"kind":"module"},"5:7669:8371":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:10254:2765":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2728:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"30:1523:20564":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"2:11038:8296":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:5897:15880":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8855:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"30:1229:20668":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"21:10056:33018":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"11:2569:2621":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:10727:33018":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:44361:8297":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:9948:2347":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"21:8852:2304":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:15092:20295":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"30:878:20666":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"16:6152:15887":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"30:1137:20666":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11755:16189":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"30:1015:20678":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"6:5152:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"29:27:1883":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"17:11189:16092":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11788:16237":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13877:19528":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:14876:20286":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3999:2838":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:21693:3032":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:1887:2697":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5982:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43395:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6188:15888":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42701:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10933:24495":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6966:24477":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6136:31045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:7332:8621":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:3199:2398":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:5675:2401":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:4809:2853":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12022:24437":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:735:20553":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42401:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:2268:2736":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11524:16178":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10699:2757":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:4937:15630":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12863:16064":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1604:10334":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:42280:2827":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:2443:2421":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5891:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2529:14944":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11630:22280":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:8210:1879":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:8369:8612":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:10367:2359":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:12297:8821":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:14056:2625":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"1:6231:24502":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:9672:33018":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"1:12079:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:39875:8390":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:10298:33018":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"21:13173:2386":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"6:1514:10324":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:482:24481":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:11180:33018":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"1:8981:2994":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11256:16115":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:3157:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:6011:2972":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9916:16042":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"9:391:14725":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3358:2629":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11493:16138":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"21:15148:2487":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"1:3310:2805":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"31:68:1933":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"17:11841:16239":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6927:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:48515:8205":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:169:2260":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:12647:16299":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:16105:20514":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"21:7757:2288":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:4448:8396":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"28:60:2421":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:21324:27837":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:4063:2842":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:31:14858":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:16223:20523":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13064:16022":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14449:19564":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:654:9488":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:12578:8307":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:15469:33125":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:7934:2754":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:5521:15862":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8253:2338":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"31:125:1939":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"17:12076:16198":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11583:16152":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"30:1049:20677":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"1:8289:2823":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:1923:2645":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:5038:15662":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"30:142:20673":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"17:11877:16197":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13363:19020":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:6868:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4902:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2709:14952":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:40866:8427":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:581:8450":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11730:16187":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:6803:15918":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12328:16251":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"27:487:20650":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"16:7270:15926":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14038:19538":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"21:2715:2373":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"2:45210:3170":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8511:2935":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:1903:2642":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8892:2957":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44531:8311":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11293:16117":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12530:16301":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13766:16245":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5645:15870":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12494:16258":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:43623:27170":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7639:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:5815:2974":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5846:15877":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:3741:14986":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:45202:3169":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10670:22201":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"21:2553:33133":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"1:363:2593":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:23703:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6913:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:12456:2384":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:11831:2374":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"6:495:9428":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:5776:2773":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"21:13091:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"2:2675:2759":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11067:21038":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11368:20894":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:1087:2316":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"6:4977:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:46220:3041":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:21312:27837":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"21:12255:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:5541:15863":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22562:27139":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:48583:8209":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2492:1903":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7225:15925":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:12552:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"17:12238:16256":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41565:2402":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12621:16304":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:48393:3097":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:42418:2625":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6882:31658":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15473:20331":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1826:2680":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11773:16236":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4706:21238":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6691:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"27:181:20638":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"10:36:31521":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"30:1166:20669":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"17:14847:20283":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2319:14934":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44983:8809":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:403:16036":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:22699:27234":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:40833:8429":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:9886:16041":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6230:15892":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:30979:2657":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4694:2842":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"21:15321:33128":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:880:2628":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7684:15950":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4854:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:3191:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4198:24269":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:13367:3171":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:7556:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11128:16088":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:1639:10336":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:2548:31534":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"21:8570:2294":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:5197:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:3560:21374":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:11407:33018":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"1:6499:2978":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14912:20287":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:9061:22297":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:2269:29181":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8343:2874":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:11052:33018":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:10006:8252":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:41574:8608":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5969:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:875:2636":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:16212:20522":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:6318:2987":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"21:6934:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:4388:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10317:16049":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:4517:8404":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8849:2954":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11063:16100":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:4462:15500":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14587:19573":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4194:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11228:22333":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11898:16217":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"30:1401:32827":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"6:1501:10322":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9781:16039":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6965:15923":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"21:13524:33154":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"6:1913:10509":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:15417:33119":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"16:6745:15915":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7391:29000":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14325:19556":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3801:2825":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"27:146:227":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"16:6030:15882":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:12856:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"21:14604:2476":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:40884:2720":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:13691:2402":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"1:4813:2857":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5085:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:1900:8695":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13387:19022":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:33908:3022":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:45169:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"27:0:1900":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"21:14904:33018":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"21:10686:33018":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:6141:31783":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11510:16124":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:9220:22194":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:12900:16066":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:41073:2344":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41551:27224":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:4249:2871":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4998:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:3391:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42130:2816":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21573:3034":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4545:15514":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5044:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2418:2739":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:9952:2497":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:46375:3042":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14986:20291":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22833:27218":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:673:2398":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:6549:29279":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:4813:15598":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:40:2675":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:698:20559":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:15256:33018":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"21:6452:20595":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"11:1582:14850":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:637:2601":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8966:2991":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:6535:2984":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:17:2216":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"21:14145:2424":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:15126:20298":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:2403:2625":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:6898:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:39955:2673":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:15383:20321":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:6426:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:8474:2289":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"1:4772:2877":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6408:15904":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10251:16047":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:62:9055":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:13817:2403":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:9418:2339":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:4182:27563":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14386:19560":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11537:16145":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:1066:14846":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:5726:15873":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15992:20510":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:14752:20281":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:13636:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"2:40116:8674":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11051:16106":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:598:20679":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:6429:184":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"17:10419:16012":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14235:19549":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:6394:20597":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:16151:20517":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"21:13667:2399":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"27:11:34512":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"30:1034:20680":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"6:4738:2836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13399:19023":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2336:14935":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4830:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42478:8757":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10092:16046":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13797:19523":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:15635:20339":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12067:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"21:11674:2370":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"11:1891:2421":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4556:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:3709:14977":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:1063:2640":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7176:31943":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15944:19012":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"21:10792:2351":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"6:7657:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4428:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"26:53:34503":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"21:13246:2387":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"5:1425:2398":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:13152:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"21:9086:2312":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"16:8097:15963":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"9:0:2079":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"30:1508:34557":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"21:9369:2338":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"5:7331:2421":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"14:187:14866":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15608:20336":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:925:2306":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"21:15123:33018":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"2:4217:8230":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:6284:2373":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"1:11644:14891":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:548:9434":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42258:27252":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"27:149:20637":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"16:5865:15878":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10905:16059":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5316:15858":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"30:1587:34569":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"21:10962:2360":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"21:9401:33018":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"6:7645:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:1632:10335":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"30:1158:20668":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"17:14284:19553":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:5616:15868":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:12697:2392":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"17:13272:19015":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11812:16196":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:13536:2377":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"2:10845:2788":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15582:20334":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:12419:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"1:8295:2822":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:1591:10332":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:2573:14946":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5068:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2959:8232":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6813:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:5992:1879":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:12383:2286":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"17:15521:20332":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7194:31905":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:15646:20340":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:23335:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12851:16063":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:13772:2307":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"17:15799:20350":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7914:15954":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:6770:1893":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"21:4045:2295":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"6:4455:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1590:2642":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:7453:24432":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:10012:8250":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5151:22299":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:11704:33018":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"30:964:20557":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"2:21586:3031":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"30:1039:20681":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"2:21514:3035":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:5759:15874":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"21:10605:2356":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"21:8635:33018":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"17:12478:16293":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11702:16185":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"21:12582:2382":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"1:4538:2877":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"21:5212:1898":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"16:7400:15936":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4491:15506":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:14040:2626":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:3227:21975":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7717:2594":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4824:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:3494:2486":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6292:15897":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"21:6377:20598":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"17:14933:20288":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:21370:27846":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:4710:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:39296:8668":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7306:15928":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:338:2277":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:7222:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:1271:20557":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"17:12342:16253":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4488:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11715:16186":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:7716:2759":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4461:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:16176:20519":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"21:15290:2498":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"16:5919:15881":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6263:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:11488:2369":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:10044:16045":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14298:19554":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10720:32496":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4638:2895":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15931:19011":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:11335:22184":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:15249:20308":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:9150:8306":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12584:16057":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:6047:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:7867:8613":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"14:40:19013":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:621:2599":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:14327:33018":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"21:8596:33018":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"6:1546:10328":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:11107:8300":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:9:20578":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"30:1258:20671":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"21:9799:33018":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"28:0:2228":{"crate_id":28,"path":["slab"],"kind":"module"},"17:11567:16181":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:38662:8666":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22334:3167":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:45005:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:41216:8620":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12201:16283":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"30:909:20669":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"24:135:2261":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:12059:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14489:19567":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:1025:2639":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:14047:2398":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:3268:2803":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:2423:2626":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:44556:8322":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:42937:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:8181:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:48247:3091":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:1160:2641":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4401:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9198:22350":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"21:11318:2366":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:13424:19025":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40879:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:14783:33018":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:6215:3171":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5123:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"21:8778:33018":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:4989:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:2124:2638":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6394:15903":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10486:2578":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:6376:15902":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:11606:8284":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:5450:2946":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:9659:28660":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7452:15939":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9284:2696":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:6248:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5974:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"10:0:2080":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12289:16250":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"30:1569:20558":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:4459:29284":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:2420:2740":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:3049:8671":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:10463:27264":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:7788:2606":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:1887:2626":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:44846:8331":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"30:1237:20669":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"16:2819:14957":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"21:11465:33018":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"1:12061:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6934:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44084:8277":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12068:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6599:14876":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:14436:19563":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10170:15859":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:10889:2358":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"2:11639:8285":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:22733:27040":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4878:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:7341:2649":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:6590:27230":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40727:8395":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6331:15899":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:7917:2753":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:40136:8387":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:15214:20306":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4523:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:22388:3168":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13187:19011":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:16093:20513":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:41105:2264":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:331:2572":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:9015:22327":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21565:2759":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:4065:29279":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12060:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:40123:8379":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:7653:2629":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"28:208:2640":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"21:6182:1888":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"14:220:14868":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:48504:8204":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:13461:2650":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:2718:29040":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"23:0:2226":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:10820:2625":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43088:8252":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:2998:29072":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7735:2579":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13412:19024":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:15655:20341":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:507:2367":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5696:15872":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:14020:20581":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"28:46:2398":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"1:9074:15923":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:13008:33018":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"21:8339:2282":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"21:6914:2263":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:48107:3085":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:8499:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12433:16026":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12213:16284":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:6612:2982":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:7863:8614":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14091:19542":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:14111:19543":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:2724:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42623:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"28:76:34532":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:10709:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:46773:3061":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:659:20555":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"30:1024:20679":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"6:1528:10326":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:8360:2651":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11915:16242":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"31:0:1931":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:939:2635":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:640:2602":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"15:288:14882":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4506:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:9352:2319":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:41157:2354":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:3702:29279":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2665:14950":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:15400:20323":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10877:16058":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14012:19536":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:2487:29043":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:1603:14851":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:1007:2638":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:15:20579":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"30:899:20668":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"2:48458:8200":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:7455:2275":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"17:16069:20511":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:40966:2734":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2439:14940":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:32825:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:623:20677":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:14739:33018":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"17:16187:20520":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"21:7100:33018":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:7537:15943":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"30:1545:20556":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:3773:14995":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:9992:33018":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:9467:2363":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:38552:8664":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:7325:2269":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"1:7808:2699":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:849:2625":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:38607:8665":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:14633:33018":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"17:9938:16043":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2847:2714":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:5555:15864":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:14482:33018":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"30:886:20667":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"16:2489:14942":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"11:2536:31536":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12078:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:3833:2629":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:10014:8251":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4057:2841":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12768:16018":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:44136:8291":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12150:16204":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:22722:2829":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2859:14959":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:15197:20304":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:7449:8604":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"21:8364:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:10078:2337":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:7777:33018":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:5256:20591":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"1:4005:2837":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46242:3047":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:41365:2364":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:7343:9386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:12108:2280":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"6:6071:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4449:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4745:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:2369:14852":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:5408:2302":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"31:65:1932":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"17:14066:19540":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6849:15920":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:10597:2349":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:46751:3055":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:43576:2766":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:4805:8421":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7613:22330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8362:2823":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:903:2398":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12516:16310":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:4811:2856":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:42740:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4375:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:190:2262":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"21:8544:2292":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"11:1107:14847":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"21:14667:2478":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:10965:8302":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:10743:2350":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"5:7584:8352":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3435:2399":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:9167:33018":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:42435:2920":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:34800:8662":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4800:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"21:13423:2393":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"17:10218:16016":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10068:16024":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:7560:8265":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:12069:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12572:8308":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6804:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:7521:27043":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:48530:8206":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:42584:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"31:100:1936":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"6:5052:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:44864:8332":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46304:3082":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:5404:2340":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:12106:8314":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4867:2858":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12175:16270":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:3139:8234":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:4871:15610":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11043:2955":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:327:2276":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"17:13526:19032":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}