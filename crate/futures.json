{"root":"0:0:1966","crate_version":"0.3.30","includes_private":false,"index":{"5:5597:30481":{"id":"5:5597:30481","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:24441":{"id":"2:12938:24441","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:29760":{"id":"2:12922:29760","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:24439":{"id":"2:12934:24439","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:28027":{"id":"2:12951:28027","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12950:28040"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44438:8328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1937":{"id":"0:53-31:102:1937","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1937","glob":false}}},"0:60-20:32:1869":{"id":"0:60-20:32:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1869","glob":false}}},"5:5609:30484":{"id":"5:5609:30484","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2438","`String`":"5:7630:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2438","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:29768":{"id":"2:12984:29768","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12613:8326","str::split":"2:12972:2466","prim@char":"1:12073:454","str::split_terminator":"2:12981:29767"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44223:8345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:1886":{"id":"0:21-29:20:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1886","glob":false}}},"2:12952:2457":{"id":"2:12952:2457","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44409:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3786:1877":{"id":"0:14-21:3786:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:1877","glob":false}}},"5:5592":{"id":"5:5592","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5593:30480","5:5594:8658","5:5597:30481","5:5600:30482","5:5608:30483","5:5609:30484","5:5610:2326","5:5611:25889","5:5612:25890"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74-21:3786:1877":{"id":"0:74-21:3786:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:1877","glob":false}}},"2:12930:334":{"id":"2:12930:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12931:24442","`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:29762":{"id":"2:12925:29762","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12923:29761"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:422:1871":{"id":"0:69-21:422:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:1871","glob":false}}},"0:37-21:104:765":{"id":"0:37-21:104:765","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:765","glob":false}}},"0:71-21:5171:1881":{"id":"0:71-21:5171:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:1881","glob":false}}},"0:18-29:27:1883":{"id":"0:18-29:27:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1883","glob":false}}},"2:12947:28044":{"id":"2:12947:28044","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44125:8333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:1889":{"id":"0:83-21:6212:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:1889","glob":false}}},"2:12920:882":{"id":"2:12920:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12073:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:29767":{"id":"2:12981:29767","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12613:8326","str::split":"2:12972:2466","prim@char":"1:12073:454","`DoubleEndedIterator`":"2:7994:131","str::rsplit_terminator":"2:12984:29768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44205:8346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:24479":{"id":"2:12993:24479","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4707:1880":{"id":"0:62-21:4707:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:1880","glob":false}}},"0:34-21:6769:1896":{"id":"0:34-21:6769:1896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:1896","glob":false}}},"2:13011:29772":{"id":"2:13011:29772","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13037:29781":{"id":"2:13037:29781","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:25762":{"id":"2:13049:25762","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:36141"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:24468":{"id":"2:12944:24468","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12945:24469"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1966":{"id":"0:0:1966","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:1903","crate::executor":"0:46:1776","crate::stream":"21:1291:1873","crate::channel":"27:0:1900","crate::future":"21:104:765","crate::sink":"21:4707:1880"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1776","0:56:1180","0:4-2:45064:150","0:5-20:32:1869","0:7-21:422:1871","0:8-21:587:1872","0:10-20:68:1874","0:11-20:97:1875","0:13-21:2766:1876","0:14-21:3786:1877","0:15-25:9:1879","0:16-21:5171:1881","0:18-29:27:1883","0:19-29:17:1884","0:20-29:25:1885","0:21-29:20:1886","0:23-21:6217:1887","0:24-21:6182:1888","0:25-21:6212:1889","0:26-21:6199:1890","0:27-20:131:1891","0:28-22:7:1892","0:29-21:6770:1893","0:31-21:6767:1894","0:32-21:37:1895","0:33-21:20:1164","0:34-21:6769:1896","0:35-21:6768:1897","0:37-21:104:765","0:38-21:5264:1044","0:39-21:4707:1880","0:40-21:1291:1873","0:41-21:5212:1898","0:42-21:57:1899","0:43-27:0:1900","0:44-21:6240:1902","0:45-21:5266:1903"],"is_stripped":false}}},"2:13053:29784":{"id":"2:13053:29784","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4790:29784"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44472:8338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:24475":{"id":"2:12987:24475","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326","str::rsplitn":"2:12990:24477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44259:8315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12999:2189":{"id":"2:12999:2189","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12613:8326","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::rmatches":"2:13002:29769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44359:8343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:29774":{"id":"2:13015:29774","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:28040":{"id":"2:12950:28040","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12951:28027"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44429:8329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1885":{"id":"0:20-29:25:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1885","glob":false}}},"2:13045:25757":{"id":"2:13045:25757","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5594:8658":{"id":"5:5594:8658","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30482":{"id":"5:5600:30482","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:29770":{"id":"2:13005:29770","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12613:8326","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::rmatch_indices":"2:13008:29771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44305:8341","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:765":{"id":"0:58-21:104:765","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:765","glob":false}}},"0:56:1180":{"id":"0:56:1180","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:765","0:59-2:45064:150","0:60-20:32:1869","0:62-21:4707:1880","0:63-25:9:1879","0:65-21:1291:1873","0:66-20:68:1874","0:67-20:97:1875","0:69-21:422:1871","0:70-21:587:1872","0:71-21:5171:1881","0:73-21:2766:1876","0:74-21:3786:1877","0:76-29:27:1883","0:77-29:17:1884","0:78-29:25:1885","0:79-29:20:1886","0:81-21:6217:1887","0:82-21:6182:1888","0:83-21:6212:1889","0:84-21:6199:1890"],"is_stripped":false}}},"2:13043:25754":{"id":"2:13043:25754","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40245:8470","Self::is_ascii":"2:13042:25753"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40245:8470","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:587:1872":{"id":"0:70-21:587:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:1872","glob":false}}},"0:63-25:9:1879":{"id":"0:63-25:9:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1879","glob":false}}},"2:12942:24464":{"id":"2:12942:24464","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12944:24468","str::split_at_mut":"2:12943:24465"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6199:1890":{"id":"0:26-21:6199:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:1890","glob":false}}},"5:5593:30480":{"id":"5:5593:30480","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2438","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2438","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:45064:150":{"id":"0:4-2:45064:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:45064:150","glob":false}}},"2:12968:21059":{"id":"2:12968:21059","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42274:191","prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:28045":{"id":"2:12954:28045","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44447:8327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1899":{"id":"0:42-21:57:1899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1899","glob":false}}},"2:12996:24480":{"id":"2:12996:24480","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:24473":{"id":"2:12978:24473","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12613:8326","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::split":"2:12972:2466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44173:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:1932":{"id":"0:48-31:65:1932","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1932","glob":false}}},"2:12941:29765":{"id":"2:12941:29765","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12079:1549","crate::ops::IndexMut":"2:3270:2674","str::slice_unchecked":"2:12940:29764"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13034:29780":{"id":"2:13034:29780","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13047:25760":{"id":"2:13047:25760","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:36141"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1875":{"id":"0:11-20:97:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1875","glob":false}}},"0:24-21:6182:1888":{"id":"0:24-21:6182:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:1888","glob":false}}},"2:13025:21758":{"id":"2:13025:21758","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:29771":{"id":"2:13008:29771","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12613:8326","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::match_indices":"2:13005:29770"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44323:8342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:29779":{"id":"2:13031:29779","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:25761":{"id":"2:13048:25761","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:36141"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:1902":{"id":"0:44-21:6240:1902","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:1902","glob":false}}},"0:79-29:20:1886":{"id":"0:79-29:20:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1886","glob":false}}},"0:55-31:125:1939":{"id":"0:55-31:125:1939","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1939","glob":false}}},"0:66-20:68:1874":{"id":"0:66-20:68:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1874","glob":false}}},"2:12923:29761":{"id":"2:12923:29761","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:1900":{"id":"0:43-27:0:1900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1900","glob":false}}},"0:76-29:27:1883":{"id":"0:76-29:27:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1883","glob":false}}},"2:13002:29769":{"id":"2:13002:29769","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12613:8326","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::matches":"2:12999:2189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44377:8344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:25753":{"id":"2:13042:25753","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:24477":{"id":"2:12990:24477","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12073:454","str::splitn":"2:12987:24475","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44277:8313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1933":{"id":"0:49-31:68:1933","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1933","glob":false}}},"5:5610:2326":{"id":"5:5610:2326","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:2466":{"id":"2:12972:2466","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12613:8326","`DoubleEndedIterator`":"2:7994:131","prim@char":"1:12073:454","str::split_whitespace":"2:12950:28040","str::rsplit":"2:12978:24473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44155:2788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:24442":{"id":"2:12931:24442","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1291:1873":{"id":"0:40-21:1291:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:1873","glob":false}}},"2:12928:25749":{"id":"2:12928:25749","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12159:8330"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12945:24469":{"id":"2:12945:24469","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12944:24468"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:29778":{"id":"2:13022:29778","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:25890":{"id":"5:5612:25890","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13046:25758"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:24044":{"id":"2:12958:24044","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:24481":{"id":"2:12955:24481","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13050:29783":{"id":"2:13050:29783","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4792:29783"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44454:8337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:24465":{"id":"2:12943:24465","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12942:24464","str::split_at_mut_checked":"2:12945:24469"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1938":{"id":"0:54-31:120:1938","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1938","glob":false}}},"2:12940:29764":{"id":"2:12940:29764","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12079:1549","str::slice_mut_unchecked":"2:12941:29765","crate::ops::Index":"2:39891:2673"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1891":{"id":"0:27-20:131:1891","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1891","glob":false}}},"0:23-21:6217:1887":{"id":"0:23-21:6217:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:1887","glob":false}}},"0:77-29:17:1884":{"id":"0:77-29:17:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1884","glob":false}}},"0:65-21:1291:1873":{"id":"0:65-21:1291:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:1873","glob":false}}},"0:45-21:5266:1903":{"id":"0:45-21:5266:1903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:1903","glob":false}}},"0:31-21:6767:1894":{"id":"0:31-21:6767:1894","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:1894","glob":false}}},"2:13019:29777":{"id":"2:13019:29777","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12638:8321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59-2:45064:150":{"id":"0:59-2:45064:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:45064:150","glob":false}}},"0:33-21:20:1164":{"id":"0:33-21:20:1164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1164","glob":false}}},"2:12929:29763":{"id":"2:12929:29763","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1936":{"id":"0:52-31:100:1936","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1936","glob":false}}},"2:13052:2596":{"id":"2:13052:2596","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4793:2596"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44463:2597","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:1881":{"id":"0:16-21:5171:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:1881","glob":false}}},"2:13044:25756":{"id":"2:13044:25756","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:24440":{"id":"2:12936:24440","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-20:68:1874":{"id":"0:10-20:68:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1874","glob":false}}},"0:32-21:37:1895":{"id":"0:32-21:37:1895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1895","glob":false}}},"2:12921:23680":{"id":"2:12921:23680","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:1935":{"id":"0:51-31:136:1935","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1935","glob":false}}},"2:12919":{"id":"2:12919","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12920:882","2:12921:23680","2:12922:29760","2:12923:29761","2:12925:29762","2:12928:25749","2:12929:29763","2:12930:334","2:12931:24442","2:12932:24438","2:12934:24439","2:12936:24440","2:12938:24441","2:12940:29764","2:12941:29765","2:12942:24464","2:12943:24465","2:12944:24468","2:12945:24469","2:12947:28044","2:12948:28504","2:12949:21462","2:12950:28040","2:12951:28027","2:12952:2457","2:12953:29766","2:12954:28045","2:12955:24481","2:12958:24044","2:12961:24046","2:12964:21058","2:12968:21059","2:12972:2466","2:12975:24471","2:12978:24473","2:12981:29767","2:12984:29768","2:12987:24475","2:12990:24477","2:12993:24479","2:12996:24480","2:12999:2189","2:13002:29769","2:13005:29770","2:13008:29771","2:13011:29772","2:13013:29773","2:13015:29774","2:13017:29775","2:13018:29776","2:13019:29777","2:13022:29778","2:13025:21758","2:13028:24482","2:13031:29779","2:13034:29780","2:13037:29781","2:13040:29782","2:13042:25753","2:13043:25754","2:13044:25756","2:13045:25757","2:13046:25758","2:13047:25760","2:13048:25761","2:13049:25762","2:13050:29783","2:13052:2596","2:13053:29784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28-22:7:1892":{"id":"0:28-22:7:1892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1892","glob":false}}},"2:12953:29766":{"id":"2:12953:29766","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44419:8340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:1898":{"id":"0:41-21:5212:1898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:1898","glob":false}}},"5:5608:30483":{"id":"5:5608:30483","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7630:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81-21:6217:1887":{"id":"0:81-21:6217:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:1887","glob":false}}},"2:12964:21058":{"id":"2:12964:21058","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42274:191","prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6182:1888":{"id":"0:82-21:6182:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:1888","glob":false}}},"5:5611:25889":{"id":"5:5611:25889","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13045:25757"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7630:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1869":{"id":"0:5-20:32:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1869","glob":false}}},"0:7-21:422:1871":{"id":"0:7-21:422:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:1871","glob":false}}},"0:8-21:587:1872":{"id":"0:8-21:587:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:1872","glob":false}}},"0:19-29:17:1884":{"id":"0:19-29:17:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1884","glob":false}}},"0:38-21:5264:1044":{"id":"0:38-21:5264:1044","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1044","glob":false}}},"2:13013:29773":{"id":"2:13013:29773","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:1934":{"id":"0:50-31:109:1934","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1934","glob":false}}},"2:13046:25758":{"id":"2:13046:25758","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:1876":{"id":"0:73-21:2766:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:1876","glob":false}}},"2:12949:21462":{"id":"2:12949:21462","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44141:2787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1875":{"id":"0:67-20:97:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1875","glob":false}}},"2:12961:24046":{"id":"2:12961:24046","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:29775":{"id":"2:13017:29775","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13040:29782":{"id":"2:13040:29782","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12574:137","`FromStr`":"2:12573:2951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42415:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12573:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12573:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:1885":{"id":"0:78-29:25:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1885","glob":false}}},"0:25-21:6212:1889":{"id":"0:25-21:6212:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:1889","glob":false}}},"2:13018:29776":{"id":"2:13018:29776","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:1879":{"id":"0:15-25:9:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1879","glob":false}}},"0:35-21:6768:1897":{"id":"0:35-21:6768:1897","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:1897","glob":false}}},"0:39-21:4707:1880":{"id":"0:39-21:4707:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:1880","glob":false}}},"2:12948:28504":{"id":"2:12948:28504","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44131:8332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:1893":{"id":"0:29-21:6770:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:1893","glob":false}}},"0:84-21:6199:1890":{"id":"0:84-21:6199:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:1890","glob":false}}},"0:46:1776":{"id":"0:46:1776","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1932","`LocalPool`":"31:120:1938"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1932","0:49-31:68:1933","0:50-31:109:1934","0:51-31:136:1935","0:52-31:100:1936","0:53-31:102:1937","0:54-31:120:1938","0:55-31:125:1939"],"is_stripped":false}}},"0:13-21:2766:1876":{"id":"0:13-21:2766:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:1876","glob":false}}},"2:12932:24438":{"id":"2:12932:24438","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42274:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10703:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:24482":{"id":"2:13028:24482","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42272:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12633:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:24471":{"id":"2:12975:24471","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12613:8326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12429:8317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12618:8322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:4784:2914":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:3237:2396":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:44535:8356":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12150:16712":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48374:8212":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1593:10341":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6811:14200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7551:2581":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:2703:2759":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:9799:33850":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"16:6456:16401":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:8118:16462":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2749:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8030:2796":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:8351:15185":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40983:2341":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:9202:8322":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:573:2365":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1559:10337":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5352:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:22211:2759":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13252:19522":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:6381:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"21:8181:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:47424:3121":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5477:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:15198:2490":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"5:3791:2480":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:44155:2788":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6698:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"21:587:1872":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"17:12433:16534":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11189:16600":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:32818:2434":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7355:16432":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"30:1049:21185":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:13250:2290":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:7370:2626":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7559:16440":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:6246:26711":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:6333:2997":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:46370:3070":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:9128:21852":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6895:16421":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"27:495:21159":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"17:15039:20802":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"14:40:19521":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:8093:16461":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:8202:16467":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:47236:3054":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11400:21464":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:4235:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:44429:8329":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7473:16434":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22407:2759":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"21:10661:2350":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"5:7390:2419":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6749:16416":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:13733:2294":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"11:774:2627":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:46075:3050":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:2838:15464":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:21655:3040":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:96:21046":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5219:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:4220:28601":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32745:8421":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:5927:16380":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5581:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:22299:3172":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13855:20035":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"27:187:21147":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"16:7604:16444":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:12697:2390":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"21:21:1164":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"5:3647:2396":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14723:20788":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"21:14011:2625":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:10439:16559":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:41112:2355":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22879:28190":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:6394:21105":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:15333:20824":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:11117:33850":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"6:5502:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:42050:2816":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:13597:2376":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"1:9056:26115":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:1971:2711":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7755:16452":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:7400:2649":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"21:14083:2419":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"21:11576:33763":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"21:11649:33803":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"6:4891:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15748:20854":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:839:2396":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:3243:26987":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:485:9433":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6976:16425":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:13685:2399":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"1:2441:2744":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"25:9:1879":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:6694:2996":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:13676:2398":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:2017:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11293:16625":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:21429:28968":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4126:2855":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:8328:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:2379:8698":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:2035:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:6055:2997":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:10605:2354":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"21:10017:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:8339:2280":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"9:357:15246":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:2287:29655":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:2374:15443":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:12633:8323":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12399:16797":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:44463:2597":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:1729:2773":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"21:12582:2380":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"1:852:2625":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:44173:8311":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:872:32633":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:13581:19544":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5781:16373":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:4464:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1978:711":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13986:20042":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:465:9430":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:1566:15355":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:365:2593":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:34080:8674":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:1896:2629":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:44867:8809":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13946:20039":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:32850:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"21:10479:33850":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:21661:3044":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:40750:8337":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5329:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:11128:16596":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:10298:33850":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:42066:2817":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"21:12513:2379":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"31:38:35256":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:11407:33850":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"11:1051:2640":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:32752:8736":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:860:32714":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:2466:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:6240:1902":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5306:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:11052:33850":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"17:13015:16534":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:9232:33850":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:4213:23329":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:1910:2643":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:4143:2773":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:44871:8812":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3068:8246":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:10068:16532":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:13524:33808":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:4428:8282":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:4560:16013":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12530:16809":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"21:12808:33742":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"24:9:21086":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:1621:10342":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:40059:8395":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12808:16529":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:8012:14988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:10702:2351":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"17:14147:20053":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:41077:2352":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11743:16696":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:10052:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:10047:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"21:12942:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"16:7580:16442":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7132:32715":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"21:15074:33850":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"2:42178:28210":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:48383:8213":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10044:16553":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:13302:2293":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:971:21066":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"2:43973:8305":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6648:16414":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6385:16395":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:4078:2852":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15383:20829":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:40657:2597":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7656:16447":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46167:3057":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"21:15256:33850":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"17:15222:20815":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8317:2788":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:16165:21026":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:9114:33850":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:8963:3002":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:6018:2261":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:15197:20812":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"21:7265:2263":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"5:1478:2625":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:10639:33850":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:10961:26754":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:15372:2319":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:1816:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"21:10988:33850":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"21:13091:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"30:978:153":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"16:7695:16449":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2231:15348":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"21:6769:1896":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"6:6915:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:11831:2372":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"5:4073:2419":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41519:2398":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"13:0:2074":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:597:16546":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:15290:2496":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:41087:8641":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4468:15990":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:2037:16640":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:15187:2489":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"17:0:2084":{"crate_id":17,"path":["object"],"kind":"module"},"21:9167:33850":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"30:1069:21174":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"16:6620:16412":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:648:2603":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44921:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40052:8688":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11788:16745":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:1827:2679":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:12375:8820":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7497:16435":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6478:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:7957:2753":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:8499:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6504:16405":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11414:21461":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:14904:33850":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"17:13785:16752":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44205:8346":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:8303:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:21674:3041":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"21:9086:2310":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"2:22422:3177":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"21:10139:2365":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"1:624:2599":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11121:2763":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"26:0:2225":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:912:2630":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:832:2630":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"30:909:21177":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"2:30965:8386":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5037:16145":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:42621:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:42234:2819":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:44419:8340":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:46199:3087":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11497:16633":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12792:16528":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2835:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46768:3127":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:742:2632":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:2383:2396":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10671:33474":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:787:2628":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:39982:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3592:2782":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44956:8834":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44887:8815":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:1098:16601":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:47360:3066":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2425:2739":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45067:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:2112:2662":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:7061:16429":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5370:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:39:2236":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:5864:2986":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3669:15476":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13814:20032":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:7373:2269":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:7100:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:1448:8324":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"17:12543:16808":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:23985:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"21:9131:2311":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"17:11256:16623":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6900:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2279:2463":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"30:1545:21064":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11605:16685":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8920:2966":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3466:28425":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12201:16791":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:22089:3037":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14788:20790":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5960:16381":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"0:46:1776":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:41011:28359":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40245:8470":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3046:3033":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15138:20807":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:12717:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"21:9257:2313":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:13348:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"1:1890:2697":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:40906:2758":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"21:13941:33850":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"30:1034:21188":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"21:6429:187":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"2:3073:8247":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8590:2947":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:42504:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"21:7222:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:41055:2265":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6940:32613":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22835:28448":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:34217:8675":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16212:21030":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:9261:21788":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"22:7:1892":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"17:14341:20065":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5390:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"9:53:15249":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:10004:2495":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:2438:15446":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:12024:21574":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"21:15035:32150":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"1:11084:2966":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"27:124:21141":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:12627:8324":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:3810:15493":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9671:16521":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:40913:8291":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13325:19526":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3573:23410":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:2234:29687":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13594:19545":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:13371:2389":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"21:9948:2345":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"6:5296:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:9222:3030":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:12056:21840":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5277:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10284:16556":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:14134:2421":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"21:11543:33854":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:8890:2964":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7412:10458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:564:9443":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7348:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15313:20822":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:7986:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:523:9437":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"20:143:21084":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"1:9107:26139":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:6447:8643":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"21:15224:2493":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"5:1340:2639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2708:15458":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13046:16531":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:12092:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11773:16744":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4800:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:187:15373":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5039:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:0:2077":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:7775:2577":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15992:21018":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6353:16394":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2995:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:14012:20044":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8384:2884":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:38653:8684":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:13215:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:6212:1889":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:12055:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"31:120:1938":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:11952:2277":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"11:2304:2638":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:40685:28196":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"14:165:15366":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10513:2576":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:10155:16365":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3447:8408":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:33610:8671":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"20:68:1874":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"1:4112:2853":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1588:2629":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:2205:29671":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5723:2998":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2572:15452":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:1153:29707":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:13554:2650":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:4354:8426":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7536:2622":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:2636:15455":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:16151:21025":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:40831:28218":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:15139:2484":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"30:1479:21062":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"21:12419:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"5:7580:28218":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11103:8833":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6098:16387":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:40846:2719":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12238:16764":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:7653:21726":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:1917:2644":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:12454:16799":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:7619:8281":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7643:8368":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:1169:29688":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:47390:3072":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13497:19538":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:917:2631":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7379:32644":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:1891:2419":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:10693:2759":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:10066:8267":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12573:2951":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:34021:8672":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:5904:2344":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7974:2754":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:7952:2756":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12078:1517":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:7470:2626":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6962:16424":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3518:8252":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4531:16007":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1628:10343":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14111:20051":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:15382:33800":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"5:6050:2982":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5624:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12289:16758":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:8301:16471":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:41271:2360":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:542:32320":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:4723:21828":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5344:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"30:1258:21179":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"5:7097:30952":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:7314:10287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10256:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:1584:2419":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"30:1271:21065":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"21:7991:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:22383:3174":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14977:20798":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15324:20823":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11443:16641":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15418:20833":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4909:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:506:2566":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5665:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14246:20058":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"30:1472:21069":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"17:11313:16626":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:1463:2396":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:1062:30914":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15769:20856":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"18:623:21185":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:40973:2340":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10218:16524":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:15400:20831":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22536:3168":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"21:6982:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"20:92:2759":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"20:0:1868":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:14156:2423":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:12213:16792":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"30:1464:35246":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"1:7848:2699":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:48455:8219":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:15358:33850":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"1:1581:2626":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:279:30914":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:6846:33850":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:13116:2386":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"30:1500:21070":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"2:22771:28627":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12080:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:16249:21033":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:3925:15539":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:39232:8685":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:7384:8639":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"21:7419:2271":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:12074:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22059:2759":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:10417:8785":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"21:8474:2287":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"1:12087:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:12965:2393":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"21:12873:2378":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:14001:21088":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"17:10905:16567":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12175:16778":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6802:15383":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:42396:2609":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:14117:33850":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"17:12949:16576":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:1087:2314":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"11:2536:32194":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:9555:33850":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"1:4990:2912":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"30:1095:21178":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"25:0:1878":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:22213:3043":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15701:20851":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2998:15469":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:3426:8687":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:309:21098":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"11:2369:15358":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:2307:29639":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42896:2983":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:9467:2361":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:2137:8253":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11510:16632":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:43315:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"30:1579:21067":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:948:2636":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:15168:20809":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:2553:33707":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"1:5212:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8262:2430":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:15166:2487":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:44065:8310":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22703:28335":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:754:21069":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46251:3098":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6412:16397":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:13797:20031":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"30:1559:21065":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:10773:33850":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:9916:16550":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6721:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"21:4503:2405":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:11366:2353":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"16:8226:16469":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:43755:8294":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:46389:3119":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13999:20043":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14876:20794":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:40955:8634":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:11884:2276":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:3715:2419":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11865:16749":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"29:20:1886":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"6:5536:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4824:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:570:9444":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"21:8059:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:3849:2626":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7799:16454":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9181:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:608:21188":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4243:2879":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5528:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:11537:33706":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:8421:8630":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:44762:8347":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2427:2740":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:5864:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8116:2429":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5653:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:921:2632":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:21412:28961":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5283:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:44131:8332":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6471:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10251:16555":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12056:16710":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4885:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3283:30773":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:41126:2356":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7813:16455":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:1823:8610":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8552:2945":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44780:8348":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"21:6776:2261":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"6:6417:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10699:21779":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12851:16571":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:8544:2290":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:8504:2944":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:15624:20846":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:735:21061":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:10056:8260":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:12618:8322":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"21:13173:2384":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:12724:16569":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:4653:2905":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:8034:2277":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:4626:8422":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"28:55:2625":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:45164:8236":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:9176:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:22570:3167":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:10534:33471":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6466:16402":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:6690:2626":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5020:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8646:2949":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9102:26114":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6435:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:12040:26566":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:1680:10348":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4942:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:31159:28139":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12127:16714":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40802:8442":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2532:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22810:2829":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"30:1250:21178":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"2:42463:2625":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:41485:2400":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10898:21802":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11392:16636":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1942:2710":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:14783:33850":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"2:44141:2787":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2443:2745":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:538:21075":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:48440:8218":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:48356:3128":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"27:140:21143":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"2:40993:2342":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"21:7815:2288":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"15:0:2082":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6532:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"21:10376:2263":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"16:4802:16094":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2696:2789":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10710:16563":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:4771:16086":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:4434:30937":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3740:30914":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:15734:20853":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:6772:30914":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:13319:2388":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:42738:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"10:44:15340":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:7516:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10350:16558":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4235:2878":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:31535:8465":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:42012:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:11689:8301":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:4020:2847":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:27:2759":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"31:136:1935":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:3130:8678":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6071:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:8253:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44585:8359":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:8095:2283":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"16:2902:15467":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9239:26120":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:43551:28328":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:3078:8248":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:44602:8360":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4286:8410":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:4635:8423":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45148:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:6680:2995":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:0:2079":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:6550:2994":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:6154:26712":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:531:21074":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6317:16392":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9755:16517":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10661:16562":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14855:20792":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:3481:8249":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:10515:28396":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12030:16711":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"30:878:21174":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"14:220:15375":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15635:20847":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:10204:2365":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:2381:8699":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:44323:8342":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1888:2696":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:578:9445":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5046:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:1309:2638":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:9632:33850":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"26:43:35185":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"18:521:21070":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:46330:3058":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:6556:33836":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"17:13363:19528":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:8538:205":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"11:1142:15354":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:4919:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:2338:15441":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:10792:2349":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:48403:8215":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:14347:2426":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:15321:33705":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:39907:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:12096:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:42321:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:13801:33850":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"17:11227:16594":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11138:21442":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:4971:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14091:20050":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12353:16795":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:43234:28447":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:532:9438":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:8006:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3304:2645":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:1575:2660":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:2736:2477":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:16259:19530":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:7461:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:38598:8683":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7823:16456":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"21:8431:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:10058:8268":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:9325:2696":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:5336:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:6729:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:45187:28624":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40964:8635":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11825:16726":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"26:37:35184":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"27:481:2945":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"21:14667:2476":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"10:36:32188":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5244:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:15814:20859":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:5446:2300":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9022:3004":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3320:2805":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:13047:2381":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:4655:2580":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:1544:2631":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8002:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3244:2643":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43261:2339":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"27:136:2997":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"17:14311:20063":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:2990:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:16121:21023":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4352:15920":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:44223:8345":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46676:3065":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:8282:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:10895:2788":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:10738:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:437:15414":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:0:1870":{"crate_id":21,"path":["futures_util"],"kind":"module"},"11:673:2396":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12863:16572":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:710:2631":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3220:2221":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:13462:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"1:10365:2964":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:14436:20071":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:7020:2265":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"11:2548:32192":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:15023:20801":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:43751:28623":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:7661:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:0:1541":{"crate_id":1,"path":["std"],"kind":"module"},"6:6447:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:491:33516":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:48508:8222":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10018:16525":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:42355:2930":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"21:5266:1903":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:21444:28972":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:7361:2658":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8274:2432":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7561:14615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46229:3092":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3231:2435":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:32738:28956":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:42252:2820":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13455:19535":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:5817:16375":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15092:20803":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:9061:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:11733:8299":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:48493:8221":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5630:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:10887:33469":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9486:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"21:6410:21104":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:44030:8291":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:15556:33790":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"16:2768:15461":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:2988:8245":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10766:23490":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:22952:2843":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4864:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1043:2638":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"30:142:21181":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"5:6410:3184":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:6647:2428":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:5058:2773":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"21:5675:2399":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"7:31:15201":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2756:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"21:15274:2494":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"1:8022:26135":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:12492:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"21:2780:33781":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"21:925:2304":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"29:17:1884":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"20:82:2215":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:42994:8260":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:581:8465":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:5655:2963":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:2274:2458":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:11496:21649":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9095:26100":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:4707:1880":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:14863:2478":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:44899:8811":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:15390:20830":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:40674:8448":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:9352:2317":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"16:5831:16376":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:13484:2387":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"21:7393:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:4986:16819":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"21:14925:2479":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"11:700:2626":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:1580:10339":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"21:7455:2273":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"30:1523:21072":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"21:8570:2292":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:12352:8823":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:2326:2639":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:13412:19532":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14968:20797":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:14256:33850":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"2:15:2192":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4134:2857":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:7994:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:3026:30909":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3207:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:47314:3060":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8111:26138":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14079:20049":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:2591:2474":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:7325:2267":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"21:6199:1890":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"16:6427:16398":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:3475:15474":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"21:15042:2482":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"6:7537:14613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4882:16105":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6689:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:5400:16366":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6491:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:5686:16367":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:591:2595":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7633:32494":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5361:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:23:2234":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"21:11704:33850":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:8411:2886":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:9010:2306":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"6:6519:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5436:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6442:16400":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13972:20041":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44945:3035":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:32848:8244":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:3842:15502":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:2234:16659":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:4507:8413":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"21:15091:2483":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"16:6047:16384":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:3235:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"11:396:32204":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:7045:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:12071:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5225:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11359:2971":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:7800:2576":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3056:8670":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"21:9508:33850":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"8:0:2076":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:10822:33850":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:7052:16428":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:9711:29353":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46055:3085":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"30:1425:21046":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:2369:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:15463:20838":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:2592:15453":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"20:97:1875":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:43008:8268":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:13536:2375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"6:4952:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22941:2830":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4315:2882":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12516:16818":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"21:15523:33772":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"21:8778:33850":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:8377:2818":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:31054:28146":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12251:16763":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:16269:19532":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:8175:16465":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44085:8309":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6026:16383":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"21:6566:33837":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"1:12095:856":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:11088:8312":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7006:16426":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:3270:2644":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14545:20079":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10759:16564":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"30:1454:21061":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"16:7769:16453":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:5909:2610":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:41096:2353":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10399:2787":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10720:33487":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9186:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5598:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6379:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:2566:33629":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"21:11920:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"17:12443:16789":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2394:15444":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:12638:8321":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:1699:10350":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:6914:2261":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:12076:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:41471:28357":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:6480:16403":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:12133:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"27:72:21157":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:7780:2579":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12264:16762":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"15:394:15401":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1534:2630":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41261:2358":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5014:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12597:16814":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:40820:2720":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:43964:2363":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2458:15447":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:867:32716":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"11:299:32213":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3525:2431":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:8136:16463":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:14298:20062":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1510:10332":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:9309:33850":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:4859:8436":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5802:16374":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:844:2634":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:10451:2265":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:6624:2991":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:16198:21029":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13568:19543":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12089:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:15151:20808":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:1812:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6714:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:2101:2661":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:39962:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5995:16382":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:22894:28231":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7096:21749":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:15299:2497":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"17:15266:20817":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"14:202:8367":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:4267:8243":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"14:7:15365":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:123:32199":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:31508:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"30:922:21178":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"16:7741:16451":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12584:16565":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:5837:2985":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7139:23411":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13173:16850":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"21:13759:33850":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"16:7321:2930":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"21:4353:33702":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"5:3032:30908":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:7493:26564":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"21:20:1164":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"30:1401:33516":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:10613:2352":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:21427:28963":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:422:1871":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"1:7947:2755":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8957:2626":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5107:16169":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:9188:2312":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"17:15376:20828":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11354:16637":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:43521:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:7434:2626":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:48234:3122":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41043:8642":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:3238:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:2140:2639":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:11295:33850":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:12315:8821":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:5499:2958":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5565:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:651:2365":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:41478:8624":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7428:16433":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:12093:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:10483:28813":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"15:306:15390":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:5828:2773":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"21:11344:33850":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:3363:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4824:2863":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11051:16614":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11115:16597":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:9204:2763":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"30:1158:21176":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"30:1569:21066":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:2469:2629":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46552:3105":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:8294:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:16187:21028":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15569:20841":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6588:16410":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:5181:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11467:16639":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12086:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:6934:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7306:32703":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:5048:2922":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14529:20078":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:6768:1897":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"18:481:21071":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5324:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:1676:32189":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11269:16624":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:1883:2396":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:589:21186":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:5398:30914":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6230:3183":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:7449:28355":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:15249:20816":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:42777:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:41064:8636":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:1525:2628":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:8188:16466":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:12088:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9781:16547":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11661:16662":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4992:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13272:19523":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:13510:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"21:15027:2422":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"6:1723:10352":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7467:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:33238:8669":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:837:2633":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:6728:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"21:11083:2359":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"21:7192:2268":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"16:6606:16411":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"21:8648:219":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"6:8029:14989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:7539:2285":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"1:7964:2757":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:4821:16813":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:8317:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:6929:8390":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:13152:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:44359:8343":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11621:16663":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11367:16604":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14516:20077":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"21:331:2570":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"5:7607:2717":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11186:21844":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:46099:3086":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:9992:33850":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:44571:8358":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2752:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:6284:2371":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:40942:2336":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"21:11866:33850":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"2:39922:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:48414:8216":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6665:16415":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6927:16422":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4467:2877":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:3396:2629":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4719:21824":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:2985:21875":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5031:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15521:20840":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42272:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:14065:2626":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"17:12464:16800":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5320:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:13228:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:32761:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"21:10962:2358":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"6:8197:15148":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12084:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:5914:32431":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:5465:2956":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:635:21190":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"21:7777:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:6768:14198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"11:811:2629":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4924:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4385:8427":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:10117:33850":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"15:327:15394":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:9887:2261":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"1:11431:21771":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:32:1869":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:46145:3051":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:5722:16369":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"0:56:1180":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"6:5376:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:7956:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15582:20842":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:15177:2488":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"6:5445:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:883:2637":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6758:15384":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7111:32434":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6880:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14449:20072":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12494:16766":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:670:21064":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:15778:20857":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:9694:2342":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:45139:3179":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"21:12456:2382":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"5:4305:2396":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"30:1111:2396":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"21:8750:2300":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"17:10524:16560":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:10273:21871":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:13473:19536":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"30:1081:21176":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"16:6231:16389":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:6278:26108":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1585:10340":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:44277:8313":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:8635:33850":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"17:13424:19533":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:2854:15465":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6657:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:8609:2294":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"21:10867:33850":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:4498:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:4486:21092":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"6:1707:10351":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7378:2648":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10972:26710":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12094:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:44043:8292":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:16093:21021":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:7546:14614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"21:14279:237":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"16:6494:16404":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"21:15376:2318":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"21:5950:2397":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:47922:3061":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3037:8648":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1599:2643":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"21:14552:33850":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"21:13400:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"30:1391:21071":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:10870:2625":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:44101:8339":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:5251:21100":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"5:7450:29577":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5236:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"21:11514:33850":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"17:16235:21032":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:1325:2640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:8155:16464":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"28:217:2638":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:39895:8686":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:13423:2391":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"17:15301:20821":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:4826:2866":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:8216:16468":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12478:16801":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6300:16391":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11647:16691":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7339:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:8247:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43993:8304":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:2151:2640":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15720:20852":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:44749:8366":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4072:2851":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:3028:29640":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"21:8921:2303":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"6:6738:14194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8106:26137":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:41136:8638":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:479:9432":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:4502:16001":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:10978:26753":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12079:1549":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"27:487:21158":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:14801:2418":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"24:190:2260":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"5:669:29629":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:856:2635":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6398:16396":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12085:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:2203:16634":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:33424:8668":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:15329:2320":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:12993:16577":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"21:9763:2343":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:4395:2883":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:12127:8773":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:45175:8234":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"21:9002:2305":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"31:102:1937":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"17:12371:16575":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:22756:28219":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10818:16565":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:40933:2671":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:726:2832":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:16138:21024":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:1517:10333":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9807:16533":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:9148:21468":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:4718:16079":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:1853:1200":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:400:26754":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"17:14356:20066":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:21653:2759":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:15218:2492":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:15616:20845":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11026:16588":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3249:30769":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44259:8315":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:80:21045":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11142:16564":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14986:20799":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:7697:33824":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:11557:16688":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:11877:16705":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"14:0:2081":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12671:16842":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:643:2602":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14386:20068":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44056:8307":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:2562:32195":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:14072:2418":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"21:12383:2284":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"2:42699:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"7:78:15208":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:13667:2397":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:10473:2800":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"21:12183:2264":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"21:14991:2480":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"17:11583:16660":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5479:2957":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"21:7840:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11419:16564":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:8259:16470":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:9529:2338":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"21:13288:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"17:14212:20056":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43273:28439":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"9:238:2945":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12647:16807":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:6018:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12768:16526":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3359:2801":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:10597:2347":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"5:4103:30914":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"20:131:1891":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"2:22787:28224":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10095:2690":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:48318:3107":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14372:20067":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:14463:20073":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:42398:8759":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10114:21872":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:7728:8387":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:687:2625":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:30709:2828":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:3445:2397":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:8454:2865":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:8294:2336":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"18:726:21068":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10728:2757":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:6542:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22928:2831":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5415:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:3270:2674":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7249:23331":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10306:2765":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10116:26102":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44377:8344":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2463:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:1605:2644":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:1189:29703":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:12097:1259":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:4581:8421":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1865:2690":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15078:16603":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16176:21027":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"21:7462:2272":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:10092:16554":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7085:32724":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3919:2826":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3241:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11915:16750":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"30:886:21175":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"17:15473:20839":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"21:15511:33774":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:42200:2827":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:1671:10347":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:48531:8223":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:22859:28186":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5385:16365":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:335:33627":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:6452:21103":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"6:5064:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5423:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13437:19534":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:6217:1887":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"16:6543:16407":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"12:0:2080":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:434:32216":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15342:20825":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:38543:8682":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:26385:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:11010:2360":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"9:482:15229":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:1829:2680":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"28:60:2419":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:13277:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42407:2222":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"30:1200:21065":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15456:20837":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:2660:2476":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:12073:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5166:26134":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43533:2945":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4965:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7549:16439":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:5392:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:14657:2475":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:41494:8626":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11102:16598":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:12206:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"6:5112:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11764:16698":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:3614:15475":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11353:21774":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:12613:8326":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:16032:19522":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:5863:16378":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13526:19540":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:870:2627":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13308:19525":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1555:2632":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5212:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42330:2396":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:22344:3173":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:14131:20052":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"21:5264:1044":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"27:146:220":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:43955:8302":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:44879:8813":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:11318:2364":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:11157:8316":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:7446:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:7442:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44075:8308":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:586:9446":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:1663:10346":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13723:20028":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:15308:21102":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"24:0:1967":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:39811:8406":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6678:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:11050:8311":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13292:19524":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15931:19519":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:13485:19537":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:3196:15472":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4959:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:15148:2485":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"6:5146:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:2485:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5314:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:42471:2626":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:43983:8303":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5200:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:44739:8365":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:21458:28966":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:4876:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11755:16697":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5643:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"30:0:2085":{"crate_id":30,"path":["memchr"],"kind":"module"},"21:8401:2282":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"6:5122:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:15116:20805":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5466:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"21:9606:2340":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"21:14693:33850":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2788:15462":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:12:21085":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:6767:1894":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:12362:16796":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11702:16693":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:32731:16470":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:3441:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:11439:2366":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:11662:15398":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:15445:20836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:6338:186":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"18:113:21047":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:559:9442":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12485:16802":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12089:16707":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:10467:2802":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13235:19521":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:4575:2888":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13606:19546":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:5483:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"21:57:1899":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"6:6874:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7168:16431":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:6441:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:7306:9483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1828:2629":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44305:8341":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7910:16459":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:16050:19523":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:14994:20787":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42455:2396":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40769:8444":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5083:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46530:3099":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:5077:2806":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"21:12448:2383":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:15596:20843":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:32689:2968":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6609:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42582:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10182:2970":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8941:2396":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:217:8256":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:13882:33850":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:11075:16604":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:21600:2759":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"21:14220:2424":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"1:8008:2624":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"21:14047:2396":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:13499:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:40723:8450":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2271:2736":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14575:16534":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3436:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3582:2491":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:7863:2700":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11524:16686":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10054:8261":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15608:20844":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:828:2351":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:5118:862":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:2528:15450":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"21:2769:933":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"2:44728:8364":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3817:2824":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9074:21756":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"21:14517:2428":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"6:6629:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:11129:8315":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"30:144:21182":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"21:4607:2306":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:1207:16609":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12408:16788":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:11840:2271":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"21:1291:1873":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"1:3240:26991":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:5756:16371":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:40713:8449":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6278:16390":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46920:28191":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:3041:3031":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:7567:2718":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:538:9439":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:9990:21378":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:4502:8412":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10954:16584":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3564:2495":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:1724:30914":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"31:109:1934":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"6:6650:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5897:16379":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:2746:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:8073:16460":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:725:2759":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"21:7503:165":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"21:10889:2356":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"21:9907:33850":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:6056:2371":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"17:13674:20027":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7098:32689":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6342:32697":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"30:1229:21176":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"17:12318:16576":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11095:23488":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:954:2637":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5742:16370":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1490:10329":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3278:2803":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2808:15463":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43904:28351":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5382:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"27:441:3002":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"21:4439:21090":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"28:46:2396":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"6:7485:14611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2537:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10997:16586":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:2766:1876":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"17:13211:19520":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10137:16518":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46744:3126":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:21772:2759":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"21:15314:2570":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"6:6409:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4905:2862":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3606:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5530:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:10062:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:7915:8632":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:11171:8314":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:14587:20081":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12683:16811":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:3237:24013":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:3660:2625":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13089:16847":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14475:20074":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3507:2484":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3899:15536":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7452:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:13426:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:10841:2355":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:3475:2773":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:14260:20059":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2660:15456":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"30:1515:21074":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"17:15176:20810":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8630:2948":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:0:2085":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6634:16413":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1494:2626":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11595:16690":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11016:16587":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15426:20834":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11567:16689":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"21:10931:33850":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"2:46269:3104":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43289:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8896:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:2087:2480":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:1565:10338":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:2303:15412":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:1939:28445":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8324:2483":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13899:20037":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:5875:2773":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"21:14430:2427":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:10883:2960":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:42543:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:2418:15445":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11386:21452":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:9091:2932":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:7442:33850":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"5:7410:2663":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:11089:16599":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"27:149:21145":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:3000:2582":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:14933:20796":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:0:2083":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11214:16595":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"30:1015:21186":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"16:3329:15473":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:41002:2343":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40783:8446":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"21:15499:33775":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:13024:16578":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:7828:2606":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:10977:8306":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:718:21060":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:2756:29672":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:13817:2401":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"17:12107:16564":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5457:13460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10317:16557":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"21:14327:33850":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"21:8532:2289":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:4979:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6335:16393":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:10675:2916":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:3814:2825":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:14235:20057":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:11266:2363":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"21:8973:33850":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:8657:2950":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:3357:2800":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2574:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"21:9733:33850":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"1:11336:26748":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13187:19519":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5250:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6952:8391":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"30:993:21065":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"2:42660:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:4122:2854":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:22565:3169":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11898:16725":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:40022:2615":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:3778:15484":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:33962:8673":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14066:20048":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"21:12333:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:1535:10335":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"27:181:21146":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"16:7888:16458":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10877:16566":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7595:2716":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:15019:2481":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:13030:2395":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"17:11812:16704":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:8300:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6948:16423":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:1577:2396":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13375:19529":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:7887:2276":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:13246:2385":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"6:7359:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:6175:2773":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:9828:2261":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:12143:8775":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:48429:8217":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:2352:2640":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12189:16790":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:46500:3093":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"21:7917:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:1039:21189":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"1:11425:21806":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"29:0:1882":{"crate_id":29,"path":["futures_io"],"kind":"module"},"6:1496:10330":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12621:16812":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"29:25:1885":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"21:9646:2341":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"17:11341:16638":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"30:1179:21178":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"16:6813:16418":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"21:37:1895":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:44409:2483":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"30:1508:35248":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"16:7014:16427":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:5171:1881":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:9007:3001":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11519:2825":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:4265:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:10727:33850":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:11655:15398":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8428:2915":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5160:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:22843:28243":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10694:21388":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:13844:20034":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5700:16368":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:4553:2887":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10775:23484":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:12982:2394":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"1:8487:2926":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4932:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:8596:33850":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"2:46600:3053":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10769:33481":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6524:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13738:20029":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:261:32633":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:46121:3091":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:4856:16102":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:3786:1877":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"16:150:15417":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:7575:14616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"21:6747:33779":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"17:12328:16759":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12969:16522":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40700:8447":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:6071:9035":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12887:16573":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"21:7345:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:15469:33771":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"6:1547:10336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10185:16523":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"30:1216:21175":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"2:42094:28442":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:417:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:7671:2399":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"30:1436:21047":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"17:12076:16706":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:925:2633":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:41527:8629":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:13772:2305":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"1:5709:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3036:30910":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"21:12673:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"11:430:32215":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6160:15411":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5002:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:5716:2997":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"28:42:2626":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:14089:2420":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"21:12230:2281":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:12557:16604":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"21:9592:33850":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:8575:2946":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:44903:8833":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:2478:15448":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:47780:3089":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:10229:33850":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"30:999:21065":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"11:800:2419":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:14025:20045":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:41034:2263":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"0:0:1966":{"crate_id":0,"path":["futures"],"kind":"module"},"5:3278:2642":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14414:20070":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11688:16658":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:48172:3101":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46819:28145":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:2569:2621":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7122:30912":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:12618:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"17:14038:20046":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"21:11977:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:40072:8403":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:40757:8443":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5006:16137":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"30:1061:21190":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"2:7731:2329":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"29:27:1883":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"9:178:15335":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"30:947:21065":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"5:941:2396":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:613:21189":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12900:16574":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:4275:2404":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:3189:8250":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:5769:16372":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11153:16565":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47124:3100":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:12758:33743":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"16:6079:16386":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4882:2868":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:513:16545":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:11802:33850":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:9519:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"14:160:15365":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:12045:2608":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:12083:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12707:16568":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:48478:8220":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"30:956:21183":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"17:16079:21020":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:10419:16520":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:102:32220":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7618:16445":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:11488:2367":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:13877:20036":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:942:2635":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5134:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2674:26743":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3276:2802":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11063:16608":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:46698:3071":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:32763:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1066:2640":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:5707:8390":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"21:15387:2321":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"11:351:32206":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12422:16798":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14489:20075":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2936:15468":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:42818:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:659:21063":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5174:2846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:44004:8293":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:7130:2266":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"30:1166:21177":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"2:7501:8622":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4916:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"26:53:35186":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"11:2443:2419":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:10828:33489":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:16105:21022":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:4587:16017":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2684:15457":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21446:28970":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1653:10345":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13387:19530":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:44895:8810":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6746:14195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:8311:2787":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:598:21187":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:14716:2477":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"1:10470:2804":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"21:6377:21106":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"10:0:2078":{"crate_id":10,"path":["adler"],"kind":"module"},"9:392:15231":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5636:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6505:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:14056:2625":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"1:906:2629":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:5135:26134":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"30:1123:21065":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"17:9938:16551":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:6514:2988":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"21:14969:33850":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"18:643:2365":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:3029:15471":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7693:26706":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5075:16160":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11636:8230":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:8156:2279":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:34390:8676":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"31:68:1933":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:1925:8709":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12844:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6895:3036":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7756:2759":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:43543:28327":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:8306:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:14844:33850":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"6:5617:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:44125:8333":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:6636:8637":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11405:16635":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2876:2714":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:5407:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:5415:32625":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:21781:3042":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12824:16570":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46300:3052":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13959:20040":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"13:109:32268":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:328:32211":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:33903:3034":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:12030:2279":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"21:14482:33850":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"2:2568:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:15799:20858":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:5515:2959":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:11247:33850":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"21:9346:2316":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:8852:2302":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"31:125:1939":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:8364:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9858:16548":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:14633:33850":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"1:9115:16431":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:7712:26715":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:6821:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:4830:16099":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:515:21073":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1923:2645":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12572:16564":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:11156:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:1948:8708":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:41509:8627":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:10938:8317":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:6562:2419":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:6627:2992":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11324:16652":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14177:20054":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:3264:16708":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:21602:3045":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:10271:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"30:1208:21174":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"1:11580:2826":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:2525:29660":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:43298:8257":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"27:11:35187":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"1:11291:21387":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:8330:2823":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"21:13636:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"6:5290:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:10263:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8980:3000":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1903:2642":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:22521:2759":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:517:9436":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12225:16765":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:43001:8261":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6263:32700":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4424:15969":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:7984:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:10508:2344":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"18:507:2365":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"15:288:15389":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6706:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:43244:8257":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15434:20835":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:169:2258":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"16:7590:16443":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:2175:16674":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14868:20793":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"27:154:3003":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:3453:8407":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:10538:33850":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:4976:16130":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:11656:8300":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:41500:2397":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5191:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:30933:2657":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:7919:8631":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:15157:2486":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"5:7653:8369":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40663:8411":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11799:16746":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:12856:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"6:6636:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13116:16848":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:8038:2480":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:15368:20827":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:8103:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4940:16117":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:48032:3095":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:41025:2262":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:10056:33850":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"6:6597:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:46454:3039":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11715:16694":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:30971:8601":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:4062:15653":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13064:16530":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:10686:33850":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:40734:8338":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:9851:8258":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"21:9338:2315":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:5039:28831":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:12098:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:9569:2339":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"16:7686:16448":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:7525:2621":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"9:424:15232":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8047:2436":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10757:2430":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:44454:8337":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:6642:28632":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:10612:16561":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8013:2623":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:6756:14196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"21:11674:2368":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"11:1107:15353":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:868:2646":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:7385:8640":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:7429:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"2:39891:2673":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11574:15348":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:765:21062":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:12798:32695":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"21:7757:2286":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:44472:8338":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:8288:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46407:3125":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:7080:2264":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:13444:3183":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:6775:14199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:2542:28662":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"27:434:21160":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"1:359:2592":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:40876:2735":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9984:16552":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"27:371:2997":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"17:16069:21019":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:14189:20055":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:875:2636":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:4064:2850":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:2195:2566":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:924:2647":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:7488:33850":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"6:1692:2873":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15058:20786":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5489:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:43504:28612":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5677:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:296:35097":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:13691:2400":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"1:12077:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:1066:15352":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44650:8361":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:15760:20855":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:15:21087":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"1:10704:2753":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:5260:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:4497:30937":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44883:8817":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:3025:8238":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:12391:8822":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"21:6823:2262":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:42346:2626":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:46722:3120":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11071:2965":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:13008:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"27:0:1900":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"22:0:2223":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:44556:8357":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6664:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6433:16399":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8949:3005":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11242:16622":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"21:15209:2491":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"5:3806:2661":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:14145:2422":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"5:294:2438":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:10717:21390":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:1485:10328":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:36612:8680":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"30:899:21176":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1:8403:2823":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:883:2628":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6621:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:40:2675":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:5584:2960":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46352:3064":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14402:20069":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15010:20800":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6788:31547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13146:16849":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:7757:2594":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"20:17:2214":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"16:3014:15470":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:15678:20850":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:2403:2625":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:7712:2629":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14325:20064":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:34563:8677":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:12899:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"2:32819:8649":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:104:765":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"6:473:9431":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:15454:33778":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:7842:2607":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2323:15440":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:48280:3073":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4014:2848":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:22476:3178":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"30:1237:21177":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"16:2748:15460":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:40742:2597":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8304:2358":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:5733:2773":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:5515:13467":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"21:13575:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"5:6429:3185":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"21:7586:33824":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:45118:3181":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:47574:3055":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10170:16366":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12929:16575":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:38488:8681":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:779:2293":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:15655:20849":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:14752:20789":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:10319:2262":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"16:2548:15451":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"13:226:32221":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11042:16589":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13344:19527":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5347:16363":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:5307:16346":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:39944:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:1057:2639":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7539:16438":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"30:1415:21045":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"1:4787:2887":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:42338:2625":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:14847:20791":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12508:16803":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:403:16544":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11493:16646":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:2728:15459":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12659:16806":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"21:9672:33850":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"16:7509:16436":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"28:30:21162":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"17:11674:16692":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"9:447:15230":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:30997:28181":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"21:4954:2425":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"6:8259:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40858:2721":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:7389:10473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6562:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6872:16420":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:135:2259":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"16:4913:16113":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:8459:28914":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7584:14617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:4419:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8640:2396":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:40886:2734":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44438:8328":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"21:8896:33850":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:7857:16457":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9498:21873":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:12684:8350":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13832:20033":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:7053:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:11015:8318":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:5442:2338":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:8415:2655":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8907:2965":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:706:8324":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6982:26741":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:15281:2495":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"11:1603:15357":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"21:11465:33850":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"17:14271:20060":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:8341:15184":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2453:2750":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11730:16695":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:4614:16021":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:896:2419":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:32727:23746":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:2715:2371":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"9:330:15286":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:11231:21750":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"21:5992:1879":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"16:5367:16364":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13766:16753":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:6770:1893":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:14503:20076":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"21:15417:33777":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"18:680:21065":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44114:8336":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:48570:8224":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"30:1530:21063":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:8242:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:13714:33850":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:11537:16653":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:8557:2291":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"17:15281:20819":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:4145:2625":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11853:16748":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6574:16409":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:44677:8362":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15822:20860":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5671:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:9418:2337":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:2743:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7397:32675":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13922:20038":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"27:127:21142":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"1:640:2601":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"21:12308:2280":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"21:5212:1898":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"28:0:2226":{"crate_id":28,"path":["slab"],"kind":"module"},"17:256:32716":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11634:16661":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4050:2849":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:40776:8445":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:5256:21099":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:11143:8313":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"21:338:2275":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:14040:2626":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:13464:3180":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:5018:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5546:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8241:2399":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:4787:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:12913:2392":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"27:467:21156":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"1:1449:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:44875:8814":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:15230:2358":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"30:1187:21179":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"2:10500:26743":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:4743:16081":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:30986:8257":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4999:2913":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:563:21076":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:13835:2402":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:44891:8816":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:11144:2268":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:15836:20861":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:7642:16546":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:7961:2284":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"17:16223:21031":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:12091:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"30:1024:21187":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"1:3318:2804":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:6510:2400":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"11:1087:32212":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"21:15484:33776":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"17:15944:19520":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:42386:2931":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5102:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10982:16585":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"21:9369:2336":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"16:2878:15466":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6782:16417":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13399:19531":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44714:8363":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8389:2885":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11547:16687":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:42034:2815":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6066:16385":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14284:20061":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:2499:1903":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:9706:28915":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9886:16549":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:11209:2362":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"30:964:21065":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"1:9067:2570":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:14051:20047":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:8265:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"21:4540:26715":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"6:4985:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:6583:33773":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:931:2634":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:1582:15356":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:32762:2433":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7478:2626":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:47078:3094":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8341:2814":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:7279:8633":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:14752:2336":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"11:1025:2639":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"27:368:220":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:12552:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"6:4837:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:12429:8317":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:48394:8214":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:21390:8465":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:689:21066":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:3597:16731":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1639:10344":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:553:9441":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1516:2627":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11166:16602":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12695:16810":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"11:2423:2626":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:1526:10334":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15356:20826":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:1160:2641":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:9493:2756":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"14:214:15374":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:21783:3041":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:14289:2403":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"17:13774:16751":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5266:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:10064:8266":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:2124:2638":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:39847:8251":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:7330:9314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:502:15233":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:12255:33850":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:1075:2641":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:10262:2346":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:14599:20082":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:7526:33850":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"21:14739:33850":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"1:484:26756":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:4045:2293":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:8432:2917":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:726:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7528:16437":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:44447:8327":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:8217:2278":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"16:2508:15449":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10622:33458":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"21:9450:33850":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:42212:2818":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:22821:28141":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"30:1490:35232":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"2:42397:2933":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:1887:2626":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:8250:1879":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10915:2967":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:545:9440":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:10875:2700":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"21:7636:2285":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:6859:2265":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:42857:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:364:32202":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:4244:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43736:8802":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43496:2766":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:10060:8269":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:8412:2651":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22064:3047":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5557:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:8278:2281":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"1:9171:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7570:16441":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:698:21067":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11559:2824":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:43512:2768":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"21:7155:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:46866:28056":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:4641:16025":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7420:29657":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"23:0:2224":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"17:14560:20080":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8395:2876":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"21:12108:2278":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"17:3473:16713":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5472:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:13658:2396":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:45064:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:2355:15442":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"21:12647:2285":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"28:208:2640":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"6:491:9434":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:14020:21089":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"21:6182:1888":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:862:2626":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:33844:3032":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"30:1137:21174":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"17:12043:16709":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"21:10367:2357":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:2824:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11841:16747":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1593:2642":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6460:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10747:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:43336:8259":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15102:20804":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:40002:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"30:1587:35233":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"2:46897:28147":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7648:16446":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4811:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:12072:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:10743:2348":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:4682:8424":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:11824:2373":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"6:497:9435":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:12090:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"21:10345:33850":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"17:12388:16787":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:8120:33850":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:11763:2370":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"6:1503:10331":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7727:16450":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:22921:28617":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4870:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11648:26112":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:5652:2961":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2740:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4251:2880":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15410:20832":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:22101:28969":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13753:20030":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:10311:2767":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5846:16377":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:15206:20813":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:7952:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:6962:2270":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:45077:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"31:0:1931":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"17:10915:33464":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6608:30914":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"21:9401:33850":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"6:4897:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:22434:28563":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:5208:2982":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:1007:2638":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8992:3003":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47000:3088":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:9524:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13509:19539":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:0:2075":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:13908:2403":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"21:15123:33850":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"21:11180:33850":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"6:5400:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:41285:2362":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6991:32371":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:10022:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:7965:2437":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12342:16761":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6532:16406":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:22650:28345":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:15438:33770":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"5:5934:2419":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13553:19542":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:10703:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:14031:2396":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"21:13727:205":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"21:8795:2301":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"6:6763:14197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:3871:2629":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:10573:33457":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40815:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15190:20811":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10408:26746":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:1354:2641":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:2612:15454":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:9737:16519":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:22490:8698":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:14912:20795":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8336:2822":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21400:28961":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:46646:3059":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5830:2984":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:43015:8269":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:48110:3067":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15646:20848":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15957:21017":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:6962:8392":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"21:12824:2377":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:34736:8679":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:10401:33850":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:7630:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"31:65:1932":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"21:14604:2474":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:4232:28660":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:45126:3182":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:45085:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3402:2793":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:10078:2335":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"2:2704:8469":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12278:16793":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:22436:8698":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:42415:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:2554:32198":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"21:8831:33850":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:9043:2987":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6120:16388":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"27:452:3004":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"17:15273:20818":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6849:16419":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7602:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:14574:2473":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"17:15126:20806":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"30:1145:21175":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"16:7144:16430":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4709:2852":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"30:1007:21066":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1:3752:2821":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1686:10349":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15214:20814":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:8271:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"30:934:21179":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"21:14191:33850":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"1:4721:21826":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"21:13961:33567":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"2:47154:3106":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8933:2967":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:12159:8330":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"21:14396:33850":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"2:42480:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13538:19541":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4264:2881":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:4571:8420":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:10846:2396":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"14:31:15365":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6560:16408":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"21:327:2274":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"1:1610:2645":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12300:16794":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:536:2571":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5588:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5052:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"31:100:1936":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:4828:2867":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:15289:20820":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"28:76:35214":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"21:7290:33850":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14809:119":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:11859:24024":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:560:2573":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:7366:2917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}